/**
 * @mainpage Zap'Em Blast'Em Robots
 *
 * @section Creators
 * - Kai De La Cruz
 * - Andrew Carr
 *
 * @section Introduction
 * Zap'Em Blast'Em Robots is an interactive game inspired by Rock'Em Sock'Em 
 * Robots, developed as part of the Mechanical Control System Design course at 
 * Cal Poly, San Luis Obispo. Designed by graduate students in the Mechanical 
 * Engineering program, the project showcases a fully integrated system 
 * combining mechanical, electrical, and software components.
 *
 * Over the course of a 10-week quarter, our team engineered custom actuators, 
 * fine-tuned sensors, and iterated on game mechanics through structured testing 
 * and evaluation. The result is a dynamic, laser-tag-inspired robot duel 
 * platform with responsive control and real-time scoring.
 *
 * \htmlonly
 * <div style="display: flex; justify-content: left; gap: 20px;">
 *   <iframe width="560" height="315" 
 *		src="https://www.youtube.com/embed/SelIsVGXWzg" 
 *   	title="Gameplay video" allowfullscreen></iframe>
 *   <iframe width="560" height="315" 
 *		src="https://www.youtube.com/embed/AnsMpqMrh2k" title="Gameplay video" 
 * 		allowfullscreen></iframe>
 * </div>
 * \endhtmlonly
 *
 * \htmlonly
 * <div style="margin-left: 10%;">
 * \endhtmlonly
 * @section toc_section Table of Contents
 * - @ref gameplay_page
 * - @ref mechanical_page
 * - @ref electrical_page
 * - @ref software_page
 * \htmlonly
 * </div>
 * \endhtmlonly
 *
 * <img src="media/photos/me507_S25_ClassPhoto.jpeg" alt="Class Photo"
 *     	style="display: block; margin-left: 10%; width: 600px;" />
 */

/**
 * @page gameplay_page Game Premise & Features
 *
 * @section Game Premise
 * Two robots face off in a laser-tag match. Instead of punching, they "zap"
 * each other using laser beams. Each robot has light sensors embedded into 
 * their chests to detect hits.
 * The first to land 5 successful shots wins the match.
 *
 * After an initial calibration sequence, players must press and hold 'shoot' 
 * for 2 seconds to start the game. User inputs are now enabled and if a fighter 
 * lands a shot, another shot will not register for an additional 2 second 
 * period. After the game is over users inputs are turned off until a new game 
 * is started. 
 *
 * @section Features
 * * Robot position control via throttle inputs
 * * LCD scoreboard and game state display
 * * Sound feedback for "zap", "hit", "game start", and "game end"
 * * "Shoot" button to raise shield or fire laser
 * * Track sliders to strafe robot positions
 *
 * \htmlonly
 * <div style="display: flex; justify-content: left; align-items: flex-start; gap: 20px;">
 *    <img src="media/photos/LaserCaution.jpg" alt="Laser Caution"
 *     		style="display: block; margin-left: 15%; height: 500px;" />
 *     <img src="media/photos/mountedPCB.jpg" alt="Mounted PCB" 
 *      style="height: 500px;"/>
 * </div>
 * \endhtmlonly
 */


/**
 * @page mechanical_page Mechanical Design
 * @section Design
 * The mechanical design consists of three primary components: game housing, 
 * sliders, and fighter controls. The housing enclosure serves as the mounting 
 * structure for key components such as the sliders and electronics. Designed 
 * to be approximately one square foot, the enclosure balances portability with 
 * ease of user interaction. 
 * 
 * Each fighter will be mounted on a two-track slider 
 * system, enabling movement both forward and sideways across the game arena. 
 * A DC motor mounted directly beneath each fighter provides limited rotational 
 * control for aiming the laser. The control system includes user-operated 
 * throttles, allowing players to manipulate their fighters. Each throttle is 
 * attached to an encoder, enabling rotational input to control the DC motors. 
 * A button on top of each handle allows users to raise the shield and fire the 
 * laser.
 *
 * \htmlonly
 * <div style="display: flex; justify-content: left; align-items: flex-start; gap: 20px;">
 * <img src="media/photos/assemblyCAD.png" alt="Assembly CAD" 
 * 		style="display: block; height: 450px;"/>
 * <img src="media/photos/BallonAssembly.png" alt="Assembly Drawing" 
 *      style="height: 450px;"/>
 * </div>
 * \endhtmlonly 
 *
 * @section Manufacturing
 * The primary manufacturing method for this project is 3D printing, chosen for 
 * its simplicity, cost-effectiveness, and ability to produce complex geometries 
 * needed to integrate sensors and actuators. Most components, including the 
 * fighters and part of the housing, are printed using PLA filament. 
 * 
 * The housing box itself is laser cut from 1/4 inch wood with finger joints for 
 * mechanical strength. Track sliders, mounts, and adapters are either 
 * through-hole bolted connections or adhered to the housing. 
 * 
 * Of the more complicated assemblies, the controller throttle is made up of 3 
 * parts: the throttle, potentiometer mount, and cover plate. The potentiometer 
 * mounts to the track slider assembly and houses the potentiometer. The 
 * throttle is custom fitted to the potentiometer spline and two linear springs 
 * restore the throttle back to neural upon release. The cover hides this 
 * assembly and ensures that wires will not snag during use. 
 * 
 * \htmlonly
 * <div style="display: flex; justify-content: left; gap: 20px;">
 *   <img src="media/photos/throttleassembly.jpg" alt="Controller Assembly" 
 *        style="width: 400px;"/>
 *   <img src="media/photos/Earlydev.jpg" alt="Housing Assembly" 
 *        style="width: 400px;"/>
 *	 <iframe width="400" src="https://www.youtube.com/embed/qQSY5Dzg7l8" 
 		  title="Shield mechanism" allowfullscreen></iframe>
 * </div>
 * \endhtmlonly
 */

/**
 * @page electrical_page Electrical Design
 * @section Design
 * <div style="margin-left: 0%;">
 * <h2><a href="https://a360.co/3HyZWpD" target="_blank" 
 *		rel="noopener noreferrer"> üó∫Ô∏è Schematic Drawings</a></h2>
 * </div>
 *
 * The circuit design was developed using Fusion 360, and the custom PCB manages 
 * all core aspects of game control. Debugging and firmware development were 
 * facilitated using an ST-Link programmer, with UART communication enabling 
 * real-time testing and output monitoring.
 * 
 * The PCB includes integrated circuitry for multi-voltage power regulation 
 * (6V, 5V, and 3.3V rails), dual H-bridge motor driver support, and a wide 
 * array of GPIO and analog interfaces connected to an STM32F411CEU
 * microcontroller.
 * 
 * In total, 39 wire-to-board crimp connections were required to interface all 
 * peripheral components, utilizing nearly every available pin on the 
 * microcontroller. 
 * One notable revision involved the MOSFETs responsible for laser control‚Äîthese 
 * were initially soldered in the wrong orientation and had to be carefully 
 * desoldered, rotated, and reinstalled to restore full functionality.
 *
 * \htmlonly
 * <div style="display: flex; justify-content: left; align-items: flex-start; gap: 20px;">
 *   <img src="media/photos/AndrewSolder.jpg" alt="Soldering" 
 *        style="height: 500px;"/>
 *	 <img src="media/photos/MCU Design v32.png" alt="PCB CAD" 
 *        style="height: 500px;"/>
 *   <img src="media/photos/Schematic.png" alt="Schematic" 
 *        style="height: 500px;"/>
 * </div>
 * \endhtmlonly
 *
 * Future iterations of the PCB may involve more deliberate pin assignments, 
 * particularly for the audio interface to improve performance and simplify 
 * routing. 
 * Additionally, a larger microcontroller may be necessary to accommodate 
 * expanded functionality, as the current implementation pushed the limits of 
 * both available I/O pins and onboard memory.
 * The inclusion of audio files‚Äîstored in flash or handled through runtime 
 * buffers‚Äînearly exhausted the system‚Äôs RAM, highlighting the need for 
 * increased memory capacity in subsequent designs.
 *
* @section high_level High-Level Wiring Diagram
 * <div style="margin-left: 0%;">
 * 	 <img src="media/photos/wiringdiagram.png" alt="Wiring Diagram" 
 *        style="height: 500px;"/>
 * </div>
 */

/**
 * @page software_page Software Design
 * @section Design
 * Our project utilizes a task-based architecture with finite state machines (FSM). 
 * It is written completely in C within the STM Cube IDE which enables us to design 
 * setup pins, timers, interrupts and DMA all within the ioc file. 
 *
 * Our FSMs were implemented using function pointers with "psuedo-object-oriented" methods.
 * This was crucial in making our C code scalable, cooperative, organized, and easy to debug. In main.c,
 * we run each task, with some conditions, in a round robin fashion. The laser, shield, and rotational
 * controls are enabled or disabled depending on the state of the game. Calibration of the game, which includes
 * photoresistors and dc motors, occurs at start up.
 *
 * Our game was split into 6 tasks; however, the controller, photoresistor, and shoot tasks were duplicated 
 * for the blue and red fighters. Each task and its FSM are provided below.
 *
 * @section FSM_section Finite State Machines
 * <div style="margin-left: 0%;">
 * 	 <img src="media/photos/FSMS.jpg" alt="FSM's" 
 *        style="height: 500px;"/>
 * </div>
 */
