
CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004ca28  0800748c  0800748c  0000848c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08053eb4  08053eb4  000552bc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08053eb4  08053eb4  00054eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08053ebc  08053ebc  000552bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08053ebc  08053ebc  00054ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08053ec0  08053ec0  00054ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002bc  20000000  08053ec4  00055000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  200002bc  08054180  000552bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  08054180  00055704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000552bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b16  00000000  00000000  000552ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030dc  00000000  00000000  00068e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  0006bee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc6  00000000  00000000  0006cfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b71  00000000  00000000  0006dc86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000171a9  00000000  00000000  000877f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009af6b  00000000  00000000  0009e9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013990b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004918  00000000  00000000  00139950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0013e268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002bc 	.word	0x200002bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007474 	.word	0x08007474

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c0 	.word	0x200002c0
 80001dc:	08007474 	.word	0x08007474

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <adc_task_run>:
 *
 * @param adc_task Pointer to the ADCTask structure containing state and
 * hardware info.
 */
void adc_task_run(ADCTask *adc_task)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    // Check for a valid state
    if (adc_task->state >= 0 && adc_task->state < adc_task->num_states)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db0f      	blt.n	80005dc <adc_task_run+0x30>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	da09      	bge.n	80005dc <adc_task_run+0x30>
    {
        // Call the appropriate state function
        adc_task->state_list[adc_task->state](adc_task);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	3306      	adds	r3, #6
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	4413      	add	r3, r2
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	4798      	blx	r3
    }
    else
    {
        while(1) {}
    }
}
 80005da:	e000      	b.n	80005de <adc_task_run+0x32>
        while(1) {}
 80005dc:	e7fe      	b.n	80005dc <adc_task_run+0x30>
}
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <adc_task_state_0_init>:
 * dma_buffer.
 *
 * @param adc_task Pointer to the ADCTask structure.
 */
void adc_task_state_0_init(ADCTask *adc_task)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
    adc_task->state = 1;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2201      	movs	r2, #1
 80005f0:	601a      	str	r2, [r3, #0]
    HAL_ADC_Start_DMA(adc_task->hadc,
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	2204      	movs	r2, #4
 80005f8:	4903      	ldr	r1, [pc, #12]	@ (8000608 <adc_task_state_0_init+0x24>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fcb2 	bl	8002f64 <HAL_ADC_Start_DMA>
                      (uint32_t*)dma_buffer,
                      4);
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200002d8 	.word	0x200002d8

0800060c <adc_task_state_1_read>:
 * `adc_val`.
 *
 * @param adc_task Pointer to the ADCTask structure.
 */
void adc_task_state_1_read(ADCTask *adc_task)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    adc_task->blue_photor_ptr->adc_val   = dma_buffer[0];
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <adc_task_state_1_read+0x3c>)
 8000616:	881a      	ldrh	r2, [r3, #0]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	60da      	str	r2, [r3, #12]
    adc_task->red_photor_ptr->adc_val    = dma_buffer[1];
 800061e:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <adc_task_state_1_read+0x3c>)
 8000620:	885a      	ldrh	r2, [r3, #2]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	691b      	ldr	r3, [r3, #16]
 8000626:	60da      	str	r2, [r3, #12]
    adc_task->blue_contr_ptr->adc_val    = dma_buffer[2];
 8000628:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <adc_task_state_1_read+0x3c>)
 800062a:	889a      	ldrh	r2, [r3, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	631a      	str	r2, [r3, #48]	@ 0x30
    adc_task->red_contr_ptr->adc_val     = dma_buffer[3];
 8000632:	4b05      	ldr	r3, [pc, #20]	@ (8000648 <adc_task_state_1_read+0x3c>)
 8000634:	88da      	ldrh	r2, [r3, #6]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	200002d8 	.word	0x200002d8

0800064c <controller_task_run>:
 * function from the task's function list.
 *
 * @param controller_task Pointer to the ControllerTask structure.
 */
void controller_task_run(ControllerTask *controller_task)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    if (controller_task->state >= 0 &&
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	2b00      	cmp	r3, #0
 800065a:	db0e      	blt.n	800067a <controller_task_run+0x2e>
        controller_task->state < controller_task->num_states)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	685a      	ldr	r2, [r3, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	689b      	ldr	r3, [r3, #8]
    if (controller_task->state >= 0 &&
 8000664:	429a      	cmp	r2, r3
 8000666:	da08      	bge.n	800067a <controller_task_run+0x2e>
    {
        controller_task->state_list[controller_task->state](controller_task);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	685a      	ldr	r2, [r3, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3214      	adds	r2, #20
 8000670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	4798      	blx	r3
    }
    else
    {
        while (1) {}
    }
}
 8000678:	e000      	b.n	800067c <controller_task_run+0x30>
        while (1) {}
 800067a:	e7fe      	b.n	800067a <controller_task_run+0x2e>
}
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <controller_task_state_0_init>:
 * the task to the next state.
 *
 * @param controller_task Pointer to the ControllerTask structure.
 */
void controller_task_state_0_init(ControllerTask *controller_task)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
    controller_task->prev_error = 0;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f04f 0200 	mov.w	r2, #0
 8000690:	64da      	str	r2, [r3, #76]	@ 0x4c
    enable(controller_task->motor);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fc17 	bl	8001eca <enable>

    // record ADC zero (center/home)
    controller_task->pot_zero = controller_task->adc_val;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a0:	461a      	mov	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	615a      	str	r2, [r3, #20]

    controller_task->state = 1;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2201      	movs	r2, #1
 80006aa:	605a      	str	r2, [r3, #4]
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <controller_task_state_1_pos>:
 * method. Timing is measured using a hardware timer.
 *
 * @param controller_task Pointer to the ControllerTask structure.
 */
void controller_task_state_1_pos(ControllerTask *controller_task)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
    int32_t des_pos = controller_task->dir *
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4619      	mov	r1, r3
                      (controller_task->adc_val -
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                       controller_task->pot_zero);
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	6952      	ldr	r2, [r2, #20]
                      (controller_task->adc_val -
 80006ca:	1a9b      	subs	r3, r3, r2
    int32_t des_pos = controller_task->dir *
 80006cc:	fb01 f303 	mul.w	r3, r1, r3
 80006d0:	61bb      	str	r3, [r7, #24]

    int32_t error = des_pos - controller_task->encoder->ticks;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	69ba      	ldr	r2, [r7, #24]
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	61fb      	str	r3, [r7, #28]
    if (error > 100) error = 99;
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	2b64      	cmp	r3, #100	@ 0x64
 80006e2:	dd01      	ble.n	80006e8 <controller_task_state_1_pos+0x34>
 80006e4:	2363      	movs	r3, #99	@ 0x63
 80006e6:	61fb      	str	r3, [r7, #28]
    if (error < -100) error = -99;
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80006ee:	da02      	bge.n	80006f6 <controller_task_state_1_pos+0x42>
 80006f0:	f06f 0362 	mvn.w	r3, #98	@ 0x62
 80006f4:	61fb      	str	r3, [r7, #28]

    read_encoder(controller_task->encoder); // updates encoder ticks
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 f872 	bl	80007e4 <read_encoder>

    controller_task->current_time =
        __HAL_TIM_GET_COUNTER(controller_task->htim_dt);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
    controller_task->current_time =
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	621a      	str	r2, [r3, #32]

    uint32_t dt_ticks =
        (controller_task->current_time >= controller_task->prev_time) ?
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6a1a      	ldr	r2, [r3, #32]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	69db      	ldr	r3, [r3, #28]
        (controller_task->current_time - controller_task->prev_time) :
 8000714:	429a      	cmp	r2, r3
 8000716:	d305      	bcc.n	8000724 <controller_task_state_1_pos+0x70>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6a1a      	ldr	r2, [r3, #32]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	69db      	ldr	r3, [r3, #28]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	e005      	b.n	8000730 <controller_task_state_1_pos+0x7c>
        (0xFFFFFFFF - controller_task->prev_time +
         controller_task->current_time);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6a1a      	ldr	r2, [r3, #32]
        (0xFFFFFFFF - controller_task->prev_time +
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	1ad3      	subs	r3, r2, r3
        (controller_task->current_time - controller_task->prev_time) :
 800072e:	3b01      	subs	r3, #1
    uint32_t dt_ticks =
 8000730:	617b      	str	r3, [r7, #20]

    if (dt_ticks == 0) return;
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d039      	beq.n	80007ac <controller_task_state_1_pos+0xf8>

    int32_t delta_time = dt_ticks / 1000.0f;
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	ee07 3a90 	vmov	s15, r3
 800073e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000742:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80007b4 <controller_task_state_1_pos+0x100>
 8000746:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800074a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800074e:	ee17 3a90 	vmov	r3, s15
 8000752:	613b      	str	r3, [r7, #16]
    controller_task->integral_error += error * delta_time;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	6939      	ldr	r1, [r7, #16]
 800075c:	fb01 f303 	mul.w	r3, r1, r3
 8000760:	441a      	add	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	635a      	str	r2, [r3, #52]	@ 0x34

    int32_t control = controller_task->k_p * error +
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	ee07 3a90 	vmov	s15, r3
 8000772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000776:	ee27 7a27 	vmul.f32	s14, s14, s15
                      controller_task->k_i *
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
                      controller_task->integral_error;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                      controller_task->k_i *
 8000784:	ee07 3a90 	vmov	s15, r3
 8000788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800078c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    int32_t control = controller_task->k_p * error +
 8000790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000798:	ee17 3a90 	vmov	r3, s15
 800079c:	60fb      	str	r3, [r7, #12]

    set_duty(controller_task->motor, control);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007a2:	68f9      	ldr	r1, [r7, #12]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 fadb 	bl	8001d60 <set_duty>
 80007aa:	e000      	b.n	80007ae <controller_task_state_1_pos+0xfa>
    if (dt_ticks == 0) return;
 80007ac:	bf00      	nop
}
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	447a0000 	.word	0x447a0000

080007b8 <setup_encoder>:
 * @param  p_enc  Pointer to an encoder_t instance.
 *
 * Captures the current hardware timer counter as the zero reference,
 * and clears both the cumulative tick count and the last-read snapshot.
 */
void setup_encoder(encoder_t *p_enc){
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
    p_enc->zero       = __HAL_TIM_GET_COUNTER(p_enc->htim);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	601a      	str	r2, [r3, #0]
    p_enc->ticks      = 0;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
    p_enc->last_ticks = 0;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <read_encoder>:
//
//    p_enc->last_ticks = current_ticks;
//    p_enc->ticks     += delta;
//}
void read_encoder(encoder_t *p_enc)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
    /* Compute signed tick count relative to zero */
    int32_t current_ticks = (int32_t)(__HAL_TIM_GET_COUNTER(p_enc->htim))
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007f4:	461a      	mov	r2, r3
                            - (int32_t)(p_enc->zero);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
    int32_t current_ticks = (int32_t)(__HAL_TIM_GET_COUNTER(p_enc->htim))
 80007fa:	1ad3      	subs	r3, r2, r3
 80007fc:	60bb      	str	r3, [r7, #8]
    int32_t delta = current_ticks - p_enc->last_ticks;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	68db      	ldr	r3, [r3, #12]
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	60fb      	str	r3, [r7, #12]

    /* Handle wrap-around if delta jumps more than half-range */
    if (delta > (p_enc->ar + 1) / 2) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	3301      	adds	r3, #1
 800080e:	0fda      	lsrs	r2, r3, #31
 8000810:	4413      	add	r3, r2
 8000812:	105b      	asrs	r3, r3, #1
 8000814:	461a      	mov	r2, r3
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	4293      	cmp	r3, r2
 800081a:	dd06      	ble.n	800082a <read_encoder+0x46>
        delta -= (p_enc->ar + 1);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	3301      	adds	r3, #1
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	e00f      	b.n	800084a <read_encoder+0x66>
    }
    else if (delta < -(p_enc->ar + 1) / 2) {
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	43db      	mvns	r3, r3
 8000830:	0fda      	lsrs	r2, r3, #31
 8000832:	4413      	add	r3, r2
 8000834:	105b      	asrs	r3, r3, #1
 8000836:	461a      	mov	r2, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4293      	cmp	r3, r2
 800083c:	da05      	bge.n	800084a <read_encoder+0x66>
        delta += (p_enc->ar + 1);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	3301      	adds	r3, #1
 8000844:	68fa      	ldr	r2, [r7, #12]
 8000846:	4413      	add	r3, r2
 8000848:	60fb      	str	r3, [r7, #12]
    }

    /* Update state */
    p_enc->last_ticks = current_ticks;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	60da      	str	r2, [r3, #12]
    p_enc->ticks     += delta;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	689a      	ldr	r2, [r3, #8]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	441a      	add	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	609a      	str	r2, [r3, #8]
}
 800085c:	bf00      	nop
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <wait_for_stall>:
 * @brief  Waits until the encoder motion stalls (no significant ticks change).
 *
 * @param  p_enc  Pointer to encoder_t instance
 */
void wait_for_stall(encoder_t *p_enc)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
    int32_t prev_ticks = p_enc->ticks;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	617b      	str	r3, [r7, #20]
    int stable_count = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
    while (stable_count < STALL_COUNT) {
 800087a:	e01a      	b.n	80008b2 <wait_for_stall+0x4a>
        // Update encoder ticks
        read_encoder(p_enc);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff ffb1 	bl	80007e4 <read_encoder>
        int32_t delta = p_enc->ticks - prev_ticks;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	60fb      	str	r3, [r7, #12]
        if (abs(delta) < STALL_THRESHOLD) {
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f113 0f04 	cmn.w	r3, #4
 8000892:	db06      	blt.n	80008a2 <wait_for_stall+0x3a>
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2b04      	cmp	r3, #4
 8000898:	dc03      	bgt.n	80008a2 <wait_for_stall+0x3a>
            stable_count++;
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	3301      	adds	r3, #1
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	e001      	b.n	80008a6 <wait_for_stall+0x3e>
        } else {
            stable_count = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
        }
        prev_ticks = p_enc->ticks;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	617b      	str	r3, [r7, #20]
        HAL_Delay(STALL_DELAY_MS);
 80008ac:	200a      	movs	r0, #10
 80008ae:	f002 faf1 	bl	8002e94 <HAL_Delay>
    while (stable_count < STALL_COUNT) {
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	2b13      	cmp	r3, #19
 80008b6:	dde1      	ble.n	800087c <wait_for_stall+0x14>
    }
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <game_task_run>:

#include <stdio.h>

// A function to run the appropriate state of the task
void game_task_run(GameTask *game_task)
{    // Check for a valid state
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
    if (game_task->state >= 0 && game_task->state < game_task->num_states)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	db0e      	blt.n	80008f0 <game_task_run+0x2e>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	429a      	cmp	r2, r3
 80008dc:	da08      	bge.n	80008f0 <game_task_run+0x2e>

    	// game_task is a pointer right now
    	// -> dereferences pointer and accesses class member in one step
    	// the same as (*ptr).member

        game_task->state_list[game_task->state](game_task);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3214      	adds	r2, #20
 80008e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	4798      	blx	r3
    {

        while(1){}
    }

}
 80008ee:	e000      	b.n	80008f2 <game_task_run+0x30>
        while(1){}
 80008f0:	e7fe      	b.n	80008f0 <game_task_run+0x2e>
}
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <game_task_state_0_init>:


// A function to initialize the task
void game_task_state_0_init(GameTask *game_task)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
    //add init stuff, display
	lcd_init();
 8000900:	f000 fa76 	bl	8000df0 <lcd_init>
	lcd_clear();
 8000904:	f000 faab 	bl	8000e5e <lcd_clear>
	game_task->state = 1;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2201      	movs	r2, #1
 800090c:	601a      	str	r2, [r3, #0]


}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <game_task_state_1_home>:
// A function to implement state 1 of the task
// keeps for user start sequence to happen then starts the game
// Prints message and sets sound flag when game starts
void game_task_state_1_home(GameTask *game_task)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	set_duty(game_task->mred,0);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f001 fa1a 	bl	8001d60 <set_duty>
	set_duty(game_task->mblue,0);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f001 fa14 	bl	8001d60 <set_duty>
	lcd_set_cursor(0, 0);
 8000938:	2100      	movs	r1, #0
 800093a:	2000      	movs	r0, #0
 800093c:	f000 fa9a 	bl	8000e74 <lcd_set_cursor>
	lcd_print("  Zap'em Blast'em   ");
 8000940:	480f      	ldr	r0, [pc, #60]	@ (8000980 <game_task_state_1_home+0x68>)
 8000942:	f000 fab9 	bl	8000eb8 <lcd_print>
	lcd_set_cursor(1, 0);
 8000946:	2100      	movs	r1, #0
 8000948:	2001      	movs	r0, #1
 800094a:	f000 fa93 	bl	8000e74 <lcd_set_cursor>
	lcd_print("       Robots       ");
 800094e:	480d      	ldr	r0, [pc, #52]	@ (8000984 <game_task_state_1_home+0x6c>)
 8000950:	f000 fab2 	bl	8000eb8 <lcd_print>
	lcd_set_cursor(3, 0);
 8000954:	2100      	movs	r1, #0
 8000956:	2003      	movs	r0, #3
 8000958:	f000 fa8c 	bl	8000e74 <lcd_set_cursor>
	lcd_print("HOLD 'SHOOT' TO PLAY");
 800095c:	480a      	ldr	r0, [pc, #40]	@ (8000988 <game_task_state_1_home+0x70>)
 800095e:	f000 faab 	bl	8000eb8 <lcd_print>
    //play_flg enabled from button task within shoot task?? or make button task
	if (game_task->play_flag == 1){
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d106      	bne.n	8000978 <game_task_state_1_home+0x60>
    	game_task->state = 2;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2202      	movs	r2, #2
 800096e:	601a      	str	r2, [r3, #0]
    	game_task->sound_task_ptr->start_snd = 1; // sets start sound flag for sound task to play it
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000974:	2201      	movs	r2, #1
 8000976:	611a      	str	r2, [r3, #16]
    }

}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	0800748c 	.word	0x0800748c
 8000984:	080074a4 	.word	0x080074a4
 8000988:	080074bc 	.word	0x080074bc

0800098c <game_task_state_2_play>:
// A function to implement state 2 which is for when the game is being played
// This keeps track of score, prints score messages
void game_task_state_2_play(GameTask *game_task)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	char r_score[5];
	char b_score[5];


	// score counting and delaying
	if (game_task->red_photoresistor_task_ptr->hit_flag && game_task->delay_flag == 0){
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d028      	beq.n	80009f0 <game_task_state_2_play+0x64>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d124      	bne.n	80009f0 <game_task_state_2_play+0x64>
		game_task->score_blue++;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	691b      	ldr	r3, [r3, #16]
 80009aa:	1c5a      	adds	r2, r3, #1
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	611a      	str	r2, [r3, #16]
		game_task->red_photoresistor_task_ptr->hit_flag = 0;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
		game_task->delay_flag = 1;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2201      	movs	r2, #1
 80009bc:	629a      	str	r2, [r3, #40]	@ 0x28
		game_task->delay_start = __HAL_TIM_GET_COUNTER(game_task->htim);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	625a      	str	r2, [r3, #36]	@ 0x24
		game_task->sound_task_ptr->hit_snd = 1;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009ce:	2201      	movs	r2, #1
 80009d0:	60da      	str	r2, [r3, #12]
		game_task->sound_task_ptr->state = 1;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009d6:	2201      	movs	r2, #1
 80009d8:	601a      	str	r2, [r3, #0]
		if(playing){
 80009da:	4b5f      	ldr	r3, [pc, #380]	@ (8000b58 <game_task_state_2_play+0x1cc>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d006      	beq.n	80009f0 <game_task_state_2_play+0x64>
			playing = 0;
 80009e2:	4b5d      	ldr	r3, [pc, #372]	@ (8000b58 <game_task_state_2_play+0x1cc>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
			game_task->sound_task_ptr->state = 6;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009ec:	2206      	movs	r2, #6
 80009ee:	601a      	str	r2, [r3, #0]
		}
	}
	if (game_task->blue_photoresistor_task_ptr->hit_flag && game_task->delay_flag == 0){
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d028      	beq.n	8000a4c <game_task_state_2_play+0xc0>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d124      	bne.n	8000a4c <game_task_state_2_play+0xc0>
		game_task->score_red++;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	68db      	ldr	r3, [r3, #12]
 8000a06:	1c5a      	adds	r2, r3, #1
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	60da      	str	r2, [r3, #12]
		game_task->blue_photoresistor_task_ptr->hit_flag = 0;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
		game_task->delay_flag = 1;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2201      	movs	r2, #1
 8000a18:	629a      	str	r2, [r3, #40]	@ 0x28
		game_task->delay_start = __HAL_TIM_GET_COUNTER(game_task->htim);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	625a      	str	r2, [r3, #36]	@ 0x24
		game_task->sound_task_ptr->hit_snd = 1;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	60da      	str	r2, [r3, #12]
		game_task->sound_task_ptr->state = 1;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a32:	2201      	movs	r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
		if(playing){
 8000a36:	4b48      	ldr	r3, [pc, #288]	@ (8000b58 <game_task_state_2_play+0x1cc>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d006      	beq.n	8000a4c <game_task_state_2_play+0xc0>
			playing = 0;
 8000a3e:	4b46      	ldr	r3, [pc, #280]	@ (8000b58 <game_task_state_2_play+0x1cc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
			game_task->sound_task_ptr->state = 6;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a48:	2206      	movs	r2, #6
 8000a4a:	601a      	str	r2, [r3, #0]
		}
	}

	if ((__HAL_TIM_GET_COUNTER(game_task->htim) - game_task->delay_start) > game_task->delay)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a58:	1ad2      	subs	r2, r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d902      	bls.n	8000a68 <game_task_state_2_play+0xdc>
	{
		game_task->delay_flag = 0;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	629a      	str	r2, [r3, #40]	@ 0x28
	}

	// add thing that prints score of each on the LCD
	//maybe only do once then adjust the score through a direct print index
	if (game_task->num == 0){
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6a1b      	ldr	r3, [r3, #32]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d122      	bne.n	8000ab6 <game_task_state_2_play+0x12a>
		lcd_clear();
 8000a70:	f000 f9f5 	bl	8000e5e <lcd_clear>
		lcd_set_cursor(0, 0);
 8000a74:	2100      	movs	r1, #0
 8000a76:	2000      	movs	r0, #0
 8000a78:	f000 f9fc 	bl	8000e74 <lcd_set_cursor>
		lcd_print("  Zap'em Blast'em   ");
 8000a7c:	4837      	ldr	r0, [pc, #220]	@ (8000b5c <game_task_state_2_play+0x1d0>)
 8000a7e:	f000 fa1b 	bl	8000eb8 <lcd_print>
		lcd_set_cursor(1, 0);
 8000a82:	2100      	movs	r1, #0
 8000a84:	2001      	movs	r0, #1
 8000a86:	f000 f9f5 	bl	8000e74 <lcd_set_cursor>
		lcd_print("     First to 5     ");
 8000a8a:	4835      	ldr	r0, [pc, #212]	@ (8000b60 <game_task_state_2_play+0x1d4>)
 8000a8c:	f000 fa14 	bl	8000eb8 <lcd_print>
		lcd_set_cursor(2, 0);
 8000a90:	2100      	movs	r1, #0
 8000a92:	2002      	movs	r0, #2
 8000a94:	f000 f9ee 	bl	8000e74 <lcd_set_cursor>
		lcd_print("Red:  0  Zaps       ");
 8000a98:	4832      	ldr	r0, [pc, #200]	@ (8000b64 <game_task_state_2_play+0x1d8>)
 8000a9a:	f000 fa0d 	bl	8000eb8 <lcd_print>
		lcd_set_cursor(3, 0);
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f9e7 	bl	8000e74 <lcd_set_cursor>
		lcd_print("Blue: 0  Blasts     ");
 8000aa6:	4830      	ldr	r0, [pc, #192]	@ (8000b68 <game_task_state_2_play+0x1dc>)
 8000aa8:	f000 fa06 	bl	8000eb8 <lcd_print>
		//         01234567890123456789
		game_task->num++;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6a1b      	ldr	r3, [r3, #32]
 8000ab0:	1c5a      	adds	r2, r3, #1
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	621a      	str	r2, [r3, #32]
	}

	// check to see if score changed for the lcd
	if (game_task->score_red != game_task->score_red_prev){
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	68da      	ldr	r2, [r3, #12]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d014      	beq.n	8000aec <game_task_state_2_play+0x160>
		sprintf(r_score,"%ld",game_task->score_red);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68da      	ldr	r2, [r3, #12]
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	4928      	ldr	r1, [pc, #160]	@ (8000b6c <game_task_state_2_play+0x1e0>)
 8000acc:	4618      	mov	r0, r3
 8000ace:	f006 f831 	bl	8006b34 <siprintf>
		lcd_set_cursor(2, 6);
 8000ad2:	2106      	movs	r1, #6
 8000ad4:	2002      	movs	r0, #2
 8000ad6:	f000 f9cd 	bl	8000e74 <lcd_set_cursor>
		lcd_print(r_score);
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 f9ea 	bl	8000eb8 <lcd_print>
		game_task->score_red_prev = game_task->score_red;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	68da      	ldr	r2, [r3, #12]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	615a      	str	r2, [r3, #20]
	}
	if (game_task->score_blue != game_task->score_blue_prev){
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	691a      	ldr	r2, [r3, #16]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d014      	beq.n	8000b22 <game_task_state_2_play+0x196>
		sprintf(b_score,"%ld",game_task->score_blue);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	691a      	ldr	r2, [r3, #16]
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	491a      	ldr	r1, [pc, #104]	@ (8000b6c <game_task_state_2_play+0x1e0>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	f006 f816 	bl	8006b34 <siprintf>
		lcd_set_cursor(3, 6);
 8000b08:	2106      	movs	r1, #6
 8000b0a:	2003      	movs	r0, #3
 8000b0c:	f000 f9b2 	bl	8000e74 <lcd_set_cursor>
		lcd_print(b_score);
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 f9cf 	bl	8000eb8 <lcd_print>
		game_task->score_blue_prev = game_task->score_blue;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	691a      	ldr	r2, [r3, #16]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	619a      	str	r2, [r3, #24]
	}

	if (game_task->score_red >= game_task->score_thresh || game_task->score_blue >= game_task->score_thresh)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	da05      	bge.n	8000b3a <game_task_state_2_play+0x1ae>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	691a      	ldr	r2, [r3, #16]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	db09      	blt.n	8000b4e <game_task_state_2_play+0x1c2>
	{
		game_task->state = 3;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	601a      	str	r2, [r3, #0]
		game_task->delay_flag = 0;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	629a      	str	r2, [r3, #40]	@ 0x28
		game_task->sound_task_ptr->win_snd = 1;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	615a      	str	r2, [r3, #20]
	}
}
 8000b4e:	bf00      	nop
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200005ac 	.word	0x200005ac
 8000b5c:	0800748c 	.word	0x0800748c
 8000b60:	080074d4 	.word	0x080074d4
 8000b64:	080074ec 	.word	0x080074ec
 8000b68:	08007504 	.word	0x08007504
 8000b6c:	0800751c 	.word	0x0800751c

08000b70 <game_task_state_3_end>:
// A function to implement state 3
// Ends the game when the score threshold has been met
// Prints messages and sets sound flags
void game_task_state_3_end(GameTask *game_task)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	if (game_task->score_blue >= game_task->score_thresh)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	691a      	ldr	r2, [r3, #16]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	69db      	ldr	r3, [r3, #28]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	db49      	blt.n	8000c18 <game_task_state_3_end+0xa8>
	{
		//		// print win message and set end sound
		if(game_task->delay_flag == 0)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d124      	bne.n	8000bd6 <game_task_state_3_end+0x66>
		{
		lcd_set_cursor(0, 0);
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f000 f970 	bl	8000e74 <lcd_set_cursor>
		lcd_print("                    ");
 8000b94:	484a      	ldr	r0, [pc, #296]	@ (8000cc0 <game_task_state_3_end+0x150>)
 8000b96:	f000 f98f 	bl	8000eb8 <lcd_print>
		lcd_set_cursor(1, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f000 f969 	bl	8000e74 <lcd_set_cursor>
		lcd_print("     GAME OVER!     ");
 8000ba2:	4848      	ldr	r0, [pc, #288]	@ (8000cc4 <game_task_state_3_end+0x154>)
 8000ba4:	f000 f988 	bl	8000eb8 <lcd_print>
		lcd_set_cursor(2, 0);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2002      	movs	r0, #2
 8000bac:	f000 f962 	bl	8000e74 <lcd_set_cursor>
		lcd_print("     Blue Wins!!     ");
 8000bb0:	4845      	ldr	r0, [pc, #276]	@ (8000cc8 <game_task_state_3_end+0x158>)
 8000bb2:	f000 f981 	bl	8000eb8 <lcd_print>
		lcd_set_cursor(3, 0);
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f95b 	bl	8000e74 <lcd_set_cursor>
		lcd_print("                    ");
 8000bbe:	4840      	ldr	r0, [pc, #256]	@ (8000cc0 <game_task_state_3_end+0x150>)
 8000bc0:	f000 f97a 	bl	8000eb8 <lcd_print>
		game_task->delay_flag = 1;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	629a      	str	r2, [r3, #40]	@ 0x28
		game_task->delay_start = __HAL_TIM_GET_COUNTER(game_task->htim);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	625a      	str	r2, [r3, #36]	@ 0x24
		}
		uint32_t now = __HAL_TIM_GET_COUNTER(game_task->htim);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bde:	60fb      	str	r3, [r7, #12]
		if ((uint32_t)(now - game_task->delay_start) > game_task->end_delay)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	1ad2      	subs	r2, r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d913      	bls.n	8000c18 <game_task_state_3_end+0xa8>
		{
		    game_task->play_flag = 0;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
		    game_task->state = 1;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]
		    game_task->score_blue = 0;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
		    game_task->score_red = 0;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	60da      	str	r2, [r3, #12]
		    game_task->num = 0;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
		    game_task->delay_flag = 0;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	@ 0x28
		    lcd_clear();
 8000c14:	f000 f923 	bl	8000e5e <lcd_clear>
		}
	}
	if (game_task->score_red >= game_task->score_thresh)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	68da      	ldr	r2, [r3, #12]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	69db      	ldr	r3, [r3, #28]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	db49      	blt.n	8000cb8 <game_task_state_3_end+0x148>
		{
			//		// print win message and set end sound
			if(game_task->delay_flag == 0)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d124      	bne.n	8000c76 <game_task_state_3_end+0x106>
			{
			lcd_set_cursor(0, 0);
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 f920 	bl	8000e74 <lcd_set_cursor>
			lcd_print("                    ");
 8000c34:	4822      	ldr	r0, [pc, #136]	@ (8000cc0 <game_task_state_3_end+0x150>)
 8000c36:	f000 f93f 	bl	8000eb8 <lcd_print>
			lcd_set_cursor(1, 0);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f000 f919 	bl	8000e74 <lcd_set_cursor>
			lcd_print("     GAME OVER!     ");
 8000c42:	4820      	ldr	r0, [pc, #128]	@ (8000cc4 <game_task_state_3_end+0x154>)
 8000c44:	f000 f938 	bl	8000eb8 <lcd_print>
			lcd_set_cursor(2, 0);
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2002      	movs	r0, #2
 8000c4c:	f000 f912 	bl	8000e74 <lcd_set_cursor>
			lcd_print("     Red Wins!!     ");
 8000c50:	481e      	ldr	r0, [pc, #120]	@ (8000ccc <game_task_state_3_end+0x15c>)
 8000c52:	f000 f931 	bl	8000eb8 <lcd_print>
			lcd_set_cursor(3, 0);
 8000c56:	2100      	movs	r1, #0
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f90b 	bl	8000e74 <lcd_set_cursor>
			lcd_print("                    ");
 8000c5e:	4818      	ldr	r0, [pc, #96]	@ (8000cc0 <game_task_state_3_end+0x150>)
 8000c60:	f000 f92a 	bl	8000eb8 <lcd_print>
			game_task->delay_flag = 1;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2201      	movs	r2, #1
 8000c68:	629a      	str	r2, [r3, #40]	@ 0x28
			game_task->delay_start = __HAL_TIM_GET_COUNTER(game_task->htim);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	625a      	str	r2, [r3, #36]	@ 0x24
			}
			uint32_t now = __HAL_TIM_GET_COUNTER(game_task->htim);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c7e:	60bb      	str	r3, [r7, #8]
			if ((uint32_t)(now - game_task->delay_start) > game_task->end_delay)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c84:	68ba      	ldr	r2, [r7, #8]
 8000c86:	1ad2      	subs	r2, r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d913      	bls.n	8000cb8 <game_task_state_3_end+0x148>
			{
			    game_task->play_flag = 0;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
			    game_task->state = 1;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	601a      	str	r2, [r3, #0]
			    game_task->score_blue = 0;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
			    game_task->score_red = 0;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
			    game_task->num = 0;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
			    game_task->delay_flag = 0;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	629a      	str	r2, [r3, #40]	@ 0x28
			    lcd_clear();
 8000cb4:	f000 f8d3 	bl	8000e5e <lcd_clear>
			}
		}

}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	08007520 	.word	0x08007520
 8000cc4:	08007538 	.word	0x08007538
 8000cc8:	08007550 	.word	0x08007550
 8000ccc:	08007568 	.word	0x08007568

08000cd0 <lcd_send_nibble>:
#define LCD_RS        0x01

static void lcd_send_nibble(uint8_t nibble, uint8_t rs);
static void lcd_send_byte(uint8_t byte, uint8_t rs);

static void lcd_send_nibble(uint8_t nibble, uint8_t rs) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af02      	add	r7, sp, #8
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	460a      	mov	r2, r1
 8000cda:	71fb      	strb	r3, [r7, #7]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	71bb      	strb	r3, [r7, #6]
    uint8_t data = (nibble & 0xF0);
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f023 030f 	bic.w	r3, r3, #15
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	73fb      	strb	r3, [r7, #15]
    if (rs) data |= LCD_RS;
 8000cea:	79bb      	ldrb	r3, [r7, #6]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d004      	beq.n	8000cfa <lcd_send_nibble+0x2a>
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	73fb      	strb	r3, [r7, #15]
    data |= LCD_BACKLIGHT;
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	73fb      	strb	r3, [r7, #15]

    // Pulse enable
    uint8_t data_e = data | LCD_ENABLE;
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDR, &data_e, 1, HAL_MAX_DELAY);
 8000d0e:	f107 020e 	add.w	r2, r7, #14
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	214e      	movs	r1, #78	@ 0x4e
 8000d1c:	480b      	ldr	r0, [pc, #44]	@ (8000d4c <lcd_send_nibble+0x7c>)
 8000d1e:	f003 fc77 	bl	8004610 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000d22:	2001      	movs	r0, #1
 8000d24:	f002 f8b6 	bl	8002e94 <HAL_Delay>
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDR, &data, 1, HAL_MAX_DELAY);
 8000d28:	f107 020f 	add.w	r2, r7, #15
 8000d2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2301      	movs	r3, #1
 8000d34:	214e      	movs	r1, #78	@ 0x4e
 8000d36:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <lcd_send_nibble+0x7c>)
 8000d38:	f003 fc6a 	bl	8004610 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f002 f8a9 	bl	8002e94 <HAL_Delay>
}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000388 	.word	0x20000388

08000d50 <lcd_send_byte>:

static void lcd_send_byte(uint8_t byte, uint8_t rs) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	460a      	mov	r2, r1
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	71bb      	strb	r3, [r7, #6]
    lcd_send_nibble(byte & 0xF0, rs);
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	f023 030f 	bic.w	r3, r3, #15
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	79ba      	ldrb	r2, [r7, #6]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ffaf 	bl	8000cd0 <lcd_send_nibble>
    lcd_send_nibble((byte << 4) & 0xF0, rs);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	011b      	lsls	r3, r3, #4
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	79ba      	ldrb	r2, [r7, #6]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ffa7 	bl	8000cd0 <lcd_send_nibble>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <lcd_send_command>:

void lcd_send_command(uint8_t cmd) {
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	71fb      	strb	r3, [r7, #7]
    lcd_send_byte(cmd, 0);
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ffd9 	bl	8000d50 <lcd_send_byte>
    HAL_Delay(2);
 8000d9e:	2002      	movs	r0, #2
 8000da0:	f002 f878 	bl	8002e94 <HAL_Delay>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
    lcd_send_byte(data, 1);
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2101      	movs	r1, #1
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ffc8 	bl	8000d50 <lcd_send_byte>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <lcd_force_backlight_on>:

void lcd_force_backlight_on(void) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af02      	add	r7, sp, #8
    uint8_t data = 0x00 | LCD_BACKLIGHT;
 8000dce:	2308      	movs	r3, #8
 8000dd0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDR, &data, 1, HAL_MAX_DELAY);
 8000dd2:	1dfa      	adds	r2, r7, #7
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	2301      	movs	r3, #1
 8000ddc:	214e      	movs	r1, #78	@ 0x4e
 8000dde:	4803      	ldr	r0, [pc, #12]	@ (8000dec <lcd_force_backlight_on+0x24>)
 8000de0:	f003 fc16 	bl	8004610 <HAL_I2C_Master_Transmit>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000388 	.word	0x20000388

08000df0 <lcd_init>:

void lcd_init(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
    HAL_Delay(50); // Wait for power to stabilize
 8000df4:	2032      	movs	r0, #50	@ 0x32
 8000df6:	f002 f84d 	bl	8002e94 <HAL_Delay>

    // Set to 4-bit mode
    lcd_send_nibble(0x30, 0); HAL_Delay(5);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2030      	movs	r0, #48	@ 0x30
 8000dfe:	f7ff ff67 	bl	8000cd0 <lcd_send_nibble>
 8000e02:	2005      	movs	r0, #5
 8000e04:	f002 f846 	bl	8002e94 <HAL_Delay>
    lcd_send_nibble(0x30, 0); HAL_Delay(1);
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2030      	movs	r0, #48	@ 0x30
 8000e0c:	f7ff ff60 	bl	8000cd0 <lcd_send_nibble>
 8000e10:	2001      	movs	r0, #1
 8000e12:	f002 f83f 	bl	8002e94 <HAL_Delay>
    lcd_send_nibble(0x30, 0); HAL_Delay(1);
 8000e16:	2100      	movs	r1, #0
 8000e18:	2030      	movs	r0, #48	@ 0x30
 8000e1a:	f7ff ff59 	bl	8000cd0 <lcd_send_nibble>
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f002 f838 	bl	8002e94 <HAL_Delay>
    lcd_send_nibble(0x20, 0); HAL_Delay(1); // 4-bit mode
 8000e24:	2100      	movs	r1, #0
 8000e26:	2020      	movs	r0, #32
 8000e28:	f7ff ff52 	bl	8000cd0 <lcd_send_nibble>
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f002 f831 	bl	8002e94 <HAL_Delay>

    lcd_send_command(0x28); // Function set: 4-bit, 2-line, 5x8 dots
 8000e32:	2028      	movs	r0, #40	@ 0x28
 8000e34:	f7ff ffa9 	bl	8000d8a <lcd_send_command>
    lcd_send_command(0x08); // Display off
 8000e38:	2008      	movs	r0, #8
 8000e3a:	f7ff ffa6 	bl	8000d8a <lcd_send_command>
    lcd_send_command(0x01); // Clear display
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f7ff ffa3 	bl	8000d8a <lcd_send_command>
    HAL_Delay(2);
 8000e44:	2002      	movs	r0, #2
 8000e46:	f002 f825 	bl	8002e94 <HAL_Delay>
    lcd_send_command(0x06); // Entry mode set
 8000e4a:	2006      	movs	r0, #6
 8000e4c:	f7ff ff9d 	bl	8000d8a <lcd_send_command>
    lcd_send_command(0x0C); // Display on, cursor off
 8000e50:	200c      	movs	r0, #12
 8000e52:	f7ff ff9a 	bl	8000d8a <lcd_send_command>
    lcd_force_backlight_on();
 8000e56:	f7ff ffb7 	bl	8000dc8 <lcd_force_backlight_on>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <lcd_clear>:

void lcd_clear(void) {
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
    lcd_send_command(0x01);
 8000e62:	2001      	movs	r0, #1
 8000e64:	f7ff ff91 	bl	8000d8a <lcd_send_command>
    HAL_Delay(2);
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f002 f813 	bl	8002e94 <HAL_Delay>
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t col) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	4613      	mov	r3, r2
 8000e82:	71bb      	strb	r3, [r7, #6]
    static const uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
    if (row > 3) row = 3;
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d901      	bls.n	8000e8e <lcd_set_cursor+0x1a>
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	71fb      	strb	r3, [r7, #7]
    lcd_send_command(0x80 | (col + row_offsets[row]));
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	4a08      	ldr	r2, [pc, #32]	@ (8000eb4 <lcd_set_cursor+0x40>)
 8000e92:	5cd2      	ldrb	r2, [r2, r3]
 8000e94:	79bb      	ldrb	r3, [r7, #6]
 8000e96:	4413      	add	r3, r2
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	b25b      	sxtb	r3, r3
 8000e9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff70 	bl	8000d8a <lcd_send_command>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	08048158 	.word	0x08048158

08000eb8 <lcd_print>:

void lcd_print(char *str) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000ec0:	e006      	b.n	8000ed0 <lcd_print+0x18>
        lcd_send_data((uint8_t)*str++);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff6e 	bl	8000dac <lcd_send_data>
    while (*str) {
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1f4      	bne.n	8000ec2 <lcd_print+0xa>
    }
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f001 ff61 	bl	8002db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f915 	bl	800111c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 fca9 	bl	8001848 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef6:	f000 fc87 	bl	8001808 <MX_DMA_Init>
  MX_I2C1_Init();
 8000efa:	f000 f9f3 	bl	80012e4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000efe:	f000 fa1f 	bl	8001340 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f02:	f000 fb3b 	bl	800157c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f06:	f000 fb8d 	bl	8001624 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000f0a:	f000 fbef 	bl	80016ec <MX_TIM5_Init>
  MX_TIM2_Init();
 8000f0e:	f000 fabf 	bl	8001490 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000f12:	f000 f96b 	bl	80011ec <MX_ADC1_Init>
  MX_TIM9_Init();
 8000f16:	f000 fc3d 	bl	8001794 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4864      	ldr	r0, [pc, #400]	@ (80010b0 <main+0x1cc>)
 8000f1e:	f004 fc71 	bl	8005804 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f22:	2100      	movs	r1, #0
 8000f24:	4863      	ldr	r0, [pc, #396]	@ (80010b4 <main+0x1d0>)
 8000f26:	f004 fd81 	bl	8005a2c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	4861      	ldr	r0, [pc, #388]	@ (80010b4 <main+0x1d0>)
 8000f2e:	f004 fd7d 	bl	8005a2c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);
 8000f32:	2108      	movs	r1, #8
 8000f34:	485f      	ldr	r0, [pc, #380]	@ (80010b4 <main+0x1d0>)
 8000f36:	f004 fd79 	bl	8005a2c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8000f3a:	210c      	movs	r1, #12
 8000f3c:	485d      	ldr	r0, [pc, #372]	@ (80010b4 <main+0x1d0>)
 8000f3e:	f004 fd75 	bl	8005a2c <HAL_TIM_PWM_Start_IT>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000f42:	2100      	movs	r1, #0
 8000f44:	485c      	ldr	r0, [pc, #368]	@ (80010b8 <main+0x1d4>)
 8000f46:	f004 fc5d 	bl	8005804 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f4a:	2104      	movs	r1, #4
 8000f4c:	485a      	ldr	r0, [pc, #360]	@ (80010b8 <main+0x1d4>)
 8000f4e:	f004 fc59 	bl	8005804 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim1);
 8000f52:	4858      	ldr	r0, [pc, #352]	@ (80010b4 <main+0x1d0>)
 8000f54:	f004 fb4a 	bl	80055ec <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000f58:	4855      	ldr	r0, [pc, #340]	@ (80010b0 <main+0x1cc>)
 8000f5a:	f004 fba1 	bl	80056a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 8000f5e:	4856      	ldr	r0, [pc, #344]	@ (80010b8 <main+0x1d4>)
 8000f60:	f004 fb44 	bl	80055ec <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim9);
 8000f64:	4855      	ldr	r0, [pc, #340]	@ (80010bc <main+0x1d8>)
 8000f66:	f004 fb41 	bl	80055ec <HAL_TIM_Base_Start>

  HAL_TIM_Encoder_Start(red_encoder.htim, TIM_CHANNEL_ALL);
 8000f6a:	4b55      	ldr	r3, [pc, #340]	@ (80010c0 <main+0x1dc>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	213c      	movs	r1, #60	@ 0x3c
 8000f70:	4618      	mov	r0, r3
 8000f72:	f004 feff 	bl	8005d74 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(blue_encoder.htim, TIM_CHANNEL_ALL);
 8000f76:	4b53      	ldr	r3, [pc, #332]	@ (80010c4 <main+0x1e0>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	213c      	movs	r1, #60	@ 0x3c
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f004 fef9 	bl	8005d74 <HAL_TIM_Encoder_Start>

  enable(&mred);
 8000f82:	4851      	ldr	r0, [pc, #324]	@ (80010c8 <main+0x1e4>)
 8000f84:	f000 ffa1 	bl	8001eca <enable>
  enable(&mblue);
 8000f88:	4850      	ldr	r0, [pc, #320]	@ (80010cc <main+0x1e8>)
 8000f8a:	f000 ff9e 	bl	8001eca <enable>
  //
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2104      	movs	r1, #4
 8000f92:	484f      	ldr	r0, [pc, #316]	@ (80010d0 <main+0x1ec>)
 8000f94:	f003 f9c6 	bl	8004324 <HAL_GPIO_WritePin>
  // sleep pins
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f9e:	484c      	ldr	r0, [pc, #304]	@ (80010d0 <main+0x1ec>)
 8000fa0:	f003 f9c0 	bl	8004324 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000faa:	4849      	ldr	r0, [pc, #292]	@ (80010d0 <main+0x1ec>)
 8000fac:	f003 f9ba 	bl	8004324 <HAL_GPIO_WritePin>
  adc_task_run(&adc_task);
 8000fb0:	4848      	ldr	r0, [pc, #288]	@ (80010d4 <main+0x1f0>)
 8000fb2:	f7ff fafb 	bl	80005ac <adc_task_run>
  HAL_Delay(2000); // 2 second delay to let stuff get set up
 8000fb6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fba:	f001 ff6b 	bl	8002e94 <HAL_Delay>
  adc_task_run(&adc_task);
 8000fbe:	4845      	ldr	r0, [pc, #276]	@ (80010d4 <main+0x1f0>)
 8000fc0:	f7ff faf4 	bl	80005ac <adc_task_run>
  lcd_clear();
 8000fc4:	f7ff ff4b 	bl	8000e5e <lcd_clear>
  lcd_set_cursor(1, 0);
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f7ff ff52 	bl	8000e74 <lcd_set_cursor>
  lcd_print("  Zap'em Blast'em   ");
 8000fd0:	4841      	ldr	r0, [pc, #260]	@ (80010d8 <main+0x1f4>)
 8000fd2:	f7ff ff71 	bl	8000eb8 <lcd_print>
  lcd_set_cursor(2, 0);
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2002      	movs	r0, #2
 8000fda:	f7ff ff4b 	bl	8000e74 <lcd_set_cursor>
  lcd_print("       Robots       ");
 8000fde:	483f      	ldr	r0, [pc, #252]	@ (80010dc <main+0x1f8>)
 8000fe0:	f7ff ff6a 	bl	8000eb8 <lcd_print>
  calibration();
 8000fe4:	f000 fd5c 	bl	8001aa0 <calibration>
  HAL_Delay(1000);
 8000fe8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fec:	f001 ff52 	bl	8002e94 <HAL_Delay>
  setup_encoder(&red_encoder);
 8000ff0:	4833      	ldr	r0, [pc, #204]	@ (80010c0 <main+0x1dc>)
 8000ff2:	f7ff fbe1 	bl	80007b8 <setup_encoder>
  setup_encoder(&blue_encoder);
 8000ff6:	4833      	ldr	r0, [pc, #204]	@ (80010c4 <main+0x1e0>)
 8000ff8:	f7ff fbde 	bl	80007b8 <setup_encoder>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  adc_task_run(&adc_task);
 8000ffc:	4835      	ldr	r0, [pc, #212]	@ (80010d4 <main+0x1f0>)
 8000ffe:	f7ff fad5 	bl	80005ac <adc_task_run>
	  game_task_run(&game_task);
 8001002:	4837      	ldr	r0, [pc, #220]	@ (80010e0 <main+0x1fc>)
 8001004:	f7ff fc5d 	bl	80008c2 <game_task_run>
	  sound_task_run(&sound_task);
 8001008:	4836      	ldr	r0, [pc, #216]	@ (80010e4 <main+0x200>)
 800100a:	f001 f923 	bl	8002254 <sound_task_run>

	  // set play flag by each player holding button for 2 seconds
	  if (red_held && blue_held && game_task.play_flag == 0)
 800100e:	4b36      	ldr	r3, [pc, #216]	@ (80010e8 <main+0x204>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d031      	beq.n	800107a <main+0x196>
 8001016:	4b35      	ldr	r3, [pc, #212]	@ (80010ec <main+0x208>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d02d      	beq.n	800107a <main+0x196>
 800101e:	4b30      	ldr	r3, [pc, #192]	@ (80010e0 <main+0x1fc>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d129      	bne.n	800107a <main+0x196>
	  {
	      uint32_t now = __HAL_TIM_GET_COUNTER(game_task.htim);
 8001026:	4b2e      	ldr	r3, [pc, #184]	@ (80010e0 <main+0x1fc>)
 8001028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102e:	607b      	str	r3, [r7, #4]
	      red_elapsed = now - red_start;
 8001030:	4b2f      	ldr	r3, [pc, #188]	@ (80010f0 <main+0x20c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	4a2e      	ldr	r2, [pc, #184]	@ (80010f4 <main+0x210>)
 800103a:	6013      	str	r3, [r2, #0]
	      blue_elapsed = now - blue_start;
 800103c:	4b2e      	ldr	r3, [pc, #184]	@ (80010f8 <main+0x214>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	4a2d      	ldr	r2, [pc, #180]	@ (80010fc <main+0x218>)
 8001046:	6013      	str	r3, [r2, #0]

	      if (red_elapsed > hold_time && blue_elapsed > hold_time)
 8001048:	4b2a      	ldr	r3, [pc, #168]	@ (80010f4 <main+0x210>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a2c      	ldr	r2, [pc, #176]	@ (8001100 <main+0x21c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d913      	bls.n	800107a <main+0x196>
 8001052:	4b2a      	ldr	r3, [pc, #168]	@ (80010fc <main+0x218>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a2a      	ldr	r2, [pc, #168]	@ (8001100 <main+0x21c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d90e      	bls.n	800107a <main+0x196>
	      {
	          game_task.play_flag = 1;
 800105c:	4b20      	ldr	r3, [pc, #128]	@ (80010e0 <main+0x1fc>)
 800105e:	2201      	movs	r2, #1
 8001060:	609a      	str	r2, [r3, #8]
	          red_held = 0;
 8001062:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <main+0x204>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
	          blue_held = 0;
 8001068:	4b20      	ldr	r3, [pc, #128]	@ (80010ec <main+0x208>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
	          red_shoot_task.button = 0;
 800106e:	4b25      	ldr	r3, [pc, #148]	@ (8001104 <main+0x220>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
	          blue_shoot_task.button = 0;
 8001074:	4b24      	ldr	r3, [pc, #144]	@ (8001108 <main+0x224>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
	      }
	  }
	  if (game_task.play_flag){ //shooting and scoring disabled when game hasn't started
 800107a:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <main+0x1fc>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d011      	beq.n	80010a6 <main+0x1c2>

		  shoot_task_run(&red_shoot_task);
 8001082:	4820      	ldr	r0, [pc, #128]	@ (8001104 <main+0x220>)
 8001084:	f000 ffee 	bl	8002064 <shoot_task_run>
		  shoot_task_run(&blue_shoot_task);
 8001088:	481f      	ldr	r0, [pc, #124]	@ (8001108 <main+0x224>)
 800108a:	f000 ffeb 	bl	8002064 <shoot_task_run>
		  controller_task_run(&blue_controller_task);
 800108e:	481f      	ldr	r0, [pc, #124]	@ (800110c <main+0x228>)
 8001090:	f7ff fadc 	bl	800064c <controller_task_run>
		  controller_task_run(&red_controller_task);
 8001094:	481e      	ldr	r0, [pc, #120]	@ (8001110 <main+0x22c>)
 8001096:	f7ff fad9 	bl	800064c <controller_task_run>
		  photoresistor_task_run(&red_photoresistor_task);
 800109a:	481e      	ldr	r0, [pc, #120]	@ (8001114 <main+0x230>)
 800109c:	f000 ff90 	bl	8001fc0 <photoresistor_task_run>
		  photoresistor_task_run(&blue_photoresistor_task);
 80010a0:	481d      	ldr	r0, [pc, #116]	@ (8001118 <main+0x234>)
 80010a2:	f000 ff8d 	bl	8001fc0 <photoresistor_task_run>
	  }

	  HAL_Delay(1);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f001 fef4 	bl	8002e94 <HAL_Delay>
	  adc_task_run(&adc_task);
 80010ac:	e7a6      	b.n	8000ffc <main+0x118>
 80010ae:	bf00      	nop
 80010b0:	20000424 	.word	0x20000424
 80010b4:	200003dc 	.word	0x200003dc
 80010b8:	200004b4 	.word	0x200004b4
 80010bc:	20000544 	.word	0x20000544
 80010c0:	20000018 	.word	0x20000018
 80010c4:	20000030 	.word	0x20000030
 80010c8:	20000000 	.word	0x20000000
 80010cc:	2000000c 	.word	0x2000000c
 80010d0:	40020400 	.word	0x40020400
 80010d4:	2000023c 	.word	0x2000023c
 80010d8:	08007580 	.word	0x08007580
 80010dc:	08007598 	.word	0x08007598
 80010e0:	200000cc 	.word	0x200000cc
 80010e4:	20000048 	.word	0x20000048
 80010e8:	2000058c 	.word	0x2000058c
 80010ec:	2000058d 	.word	0x2000058d
 80010f0:	20000590 	.word	0x20000590
 80010f4:	20000598 	.word	0x20000598
 80010f8:	20000594 	.word	0x20000594
 80010fc:	2000059c 	.word	0x2000059c
 8001100:	001e8480 	.word	0x001e8480
 8001104:	2000012c 	.word	0x2000012c
 8001108:	2000015c 	.word	0x2000015c
 800110c:	2000018c 	.word	0x2000018c
 8001110:	200001e4 	.word	0x200001e4
 8001114:	20000084 	.word	0x20000084
 8001118:	200000a8 	.word	0x200000a8

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b094      	sub	sp, #80	@ 0x50
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 0320 	add.w	r3, r7, #32
 8001126:	2230      	movs	r2, #48	@ 0x30
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f005 fd24 	bl	8006b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	4b27      	ldr	r3, [pc, #156]	@ (80011e4 <SystemClock_Config+0xc8>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001148:	4a26      	ldr	r2, [pc, #152]	@ (80011e4 <SystemClock_Config+0xc8>)
 800114a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800114e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001150:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <SystemClock_Config+0xc8>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	4b21      	ldr	r3, [pc, #132]	@ (80011e8 <SystemClock_Config+0xcc>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a20      	ldr	r2, [pc, #128]	@ (80011e8 <SystemClock_Config+0xcc>)
 8001166:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b1e      	ldr	r3, [pc, #120]	@ (80011e8 <SystemClock_Config+0xcc>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001178:	2301      	movs	r3, #1
 800117a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800117c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001182:	2302      	movs	r3, #2
 8001184:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001186:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800118a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800118c:	2319      	movs	r3, #25
 800118e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001190:	23c0      	movs	r3, #192	@ 0xc0
 8001192:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001194:	2302      	movs	r3, #2
 8001196:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001198:	2304      	movs	r3, #4
 800119a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119c:	f107 0320 	add.w	r3, r7, #32
 80011a0:	4618      	mov	r0, r3
 80011a2:	f003 fd8f 	bl	8004cc4 <HAL_RCC_OscConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011ac:	f000 fdd2 	bl	8001d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b0:	230f      	movs	r3, #15
 80011b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b4:	2302      	movs	r3, #2
 80011b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2103      	movs	r1, #3
 80011cc:	4618      	mov	r0, r3
 80011ce:	f003 fff1 	bl	80051b4 <HAL_RCC_ClockConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011d8:	f000 fdbc 	bl	8001d54 <Error_Handler>
  }
}
 80011dc:	bf00      	nop
 80011de:	3750      	adds	r7, #80	@ 0x50
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40007000 	.word	0x40007000

080011ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011f2:	463b      	mov	r3, r7
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011fe:	4b36      	ldr	r3, [pc, #216]	@ (80012d8 <MX_ADC1_Init+0xec>)
 8001200:	4a36      	ldr	r2, [pc, #216]	@ (80012dc <MX_ADC1_Init+0xf0>)
 8001202:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001204:	4b34      	ldr	r3, [pc, #208]	@ (80012d8 <MX_ADC1_Init+0xec>)
 8001206:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800120a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800120c:	4b32      	ldr	r3, [pc, #200]	@ (80012d8 <MX_ADC1_Init+0xec>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001212:	4b31      	ldr	r3, [pc, #196]	@ (80012d8 <MX_ADC1_Init+0xec>)
 8001214:	2201      	movs	r2, #1
 8001216:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001218:	4b2f      	ldr	r3, [pc, #188]	@ (80012d8 <MX_ADC1_Init+0xec>)
 800121a:	2201      	movs	r2, #1
 800121c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800121e:	4b2e      	ldr	r3, [pc, #184]	@ (80012d8 <MX_ADC1_Init+0xec>)
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001226:	4b2c      	ldr	r3, [pc, #176]	@ (80012d8 <MX_ADC1_Init+0xec>)
 8001228:	2200      	movs	r2, #0
 800122a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800122c:	4b2a      	ldr	r3, [pc, #168]	@ (80012d8 <MX_ADC1_Init+0xec>)
 800122e:	4a2c      	ldr	r2, [pc, #176]	@ (80012e0 <MX_ADC1_Init+0xf4>)
 8001230:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001232:	4b29      	ldr	r3, [pc, #164]	@ (80012d8 <MX_ADC1_Init+0xec>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001238:	4b27      	ldr	r3, [pc, #156]	@ (80012d8 <MX_ADC1_Init+0xec>)
 800123a:	2204      	movs	r2, #4
 800123c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800123e:	4b26      	ldr	r3, [pc, #152]	@ (80012d8 <MX_ADC1_Init+0xec>)
 8001240:	2201      	movs	r2, #1
 8001242:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001246:	4b24      	ldr	r3, [pc, #144]	@ (80012d8 <MX_ADC1_Init+0xec>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800124c:	4822      	ldr	r0, [pc, #136]	@ (80012d8 <MX_ADC1_Init+0xec>)
 800124e:	f001 fe45 	bl	8002edc <HAL_ADC_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001258:	f000 fd7c 	bl	8001d54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800125c:	2304      	movs	r3, #4
 800125e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001260:	2301      	movs	r3, #1
 8001262:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001264:	2303      	movs	r3, #3
 8001266:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001268:	463b      	mov	r3, r7
 800126a:	4619      	mov	r1, r3
 800126c:	481a      	ldr	r0, [pc, #104]	@ (80012d8 <MX_ADC1_Init+0xec>)
 800126e:	f001 ff8b 	bl	8003188 <HAL_ADC_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001278:	f000 fd6c 	bl	8001d54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800127c:	2305      	movs	r3, #5
 800127e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001280:	2302      	movs	r3, #2
 8001282:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4619      	mov	r1, r3
 8001288:	4813      	ldr	r0, [pc, #76]	@ (80012d8 <MX_ADC1_Init+0xec>)
 800128a:	f001 ff7d 	bl	8003188 <HAL_ADC_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001294:	f000 fd5e 	bl	8001d54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001298:	2306      	movs	r3, #6
 800129a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800129c:	2303      	movs	r3, #3
 800129e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	480c      	ldr	r0, [pc, #48]	@ (80012d8 <MX_ADC1_Init+0xec>)
 80012a6:	f001 ff6f 	bl	8003188 <HAL_ADC_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80012b0:	f000 fd50 	bl	8001d54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012b4:	2307      	movs	r3, #7
 80012b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80012b8:	2304      	movs	r3, #4
 80012ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <MX_ADC1_Init+0xec>)
 80012c2:	f001 ff61 	bl	8003188 <HAL_ADC_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80012cc:	f000 fd42 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200002e0 	.word	0x200002e0
 80012dc:	40012000 	.word	0x40012000
 80012e0:	0f000001 	.word	0x0f000001

080012e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <MX_I2C1_Init+0x50>)
 80012ea:	4a13      	ldr	r2, [pc, #76]	@ (8001338 <MX_I2C1_Init+0x54>)
 80012ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ee:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <MX_I2C1_Init+0x50>)
 80012f0:	4a12      	ldr	r2, [pc, #72]	@ (800133c <MX_I2C1_Init+0x58>)
 80012f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <MX_I2C1_Init+0x50>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001334 <MX_I2C1_Init+0x50>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001300:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <MX_I2C1_Init+0x50>)
 8001302:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001306:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001308:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <MX_I2C1_Init+0x50>)
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <MX_I2C1_Init+0x50>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001314:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <MX_I2C1_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <MX_I2C1_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	@ (8001334 <MX_I2C1_Init+0x50>)
 8001322:	f003 f831 	bl	8004388 <HAL_I2C_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800132c:	f000 fd12 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000388 	.word	0x20000388
 8001338:	40005400 	.word	0x40005400
 800133c:	000186a0 	.word	0x000186a0

08001340 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b092      	sub	sp, #72	@ 0x48
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001346:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001350:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
 8001360:	615a      	str	r2, [r3, #20]
 8001362:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2220      	movs	r2, #32
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f005 fc04 	bl	8006b78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001370:	4b45      	ldr	r3, [pc, #276]	@ (8001488 <MX_TIM1_Init+0x148>)
 8001372:	4a46      	ldr	r2, [pc, #280]	@ (800148c <MX_TIM1_Init+0x14c>)
 8001374:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001376:	4b44      	ldr	r3, [pc, #272]	@ (8001488 <MX_TIM1_Init+0x148>)
 8001378:	2200      	movs	r2, #0
 800137a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137c:	4b42      	ldr	r3, [pc, #264]	@ (8001488 <MX_TIM1_Init+0x148>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4799;
 8001382:	4b41      	ldr	r3, [pc, #260]	@ (8001488 <MX_TIM1_Init+0x148>)
 8001384:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8001388:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138a:	4b3f      	ldr	r3, [pc, #252]	@ (8001488 <MX_TIM1_Init+0x148>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001390:	4b3d      	ldr	r3, [pc, #244]	@ (8001488 <MX_TIM1_Init+0x148>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b3c      	ldr	r3, [pc, #240]	@ (8001488 <MX_TIM1_Init+0x148>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800139c:	483a      	ldr	r0, [pc, #232]	@ (8001488 <MX_TIM1_Init+0x148>)
 800139e:	f004 f9e1 	bl	8005764 <HAL_TIM_PWM_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80013a8:	f000 fcd4 	bl	8001d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013b8:	4619      	mov	r1, r3
 80013ba:	4833      	ldr	r0, [pc, #204]	@ (8001488 <MX_TIM1_Init+0x148>)
 80013bc:	f005 fae6 	bl	800698c <HAL_TIMEx_MasterConfigSynchronization>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80013c6:	f000 fcc5 	bl	8001d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80013ca:	2370      	movs	r3, #112	@ 0x70
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013d6:	2300      	movs	r3, #0
 80013d8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ea:	2200      	movs	r2, #0
 80013ec:	4619      	mov	r1, r3
 80013ee:	4826      	ldr	r0, [pc, #152]	@ (8001488 <MX_TIM1_Init+0x148>)
 80013f0:	f004 fe3e 	bl	8006070 <HAL_TIM_PWM_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80013fa:	f000 fcab 	bl	8001d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001402:	2204      	movs	r2, #4
 8001404:	4619      	mov	r1, r3
 8001406:	4820      	ldr	r0, [pc, #128]	@ (8001488 <MX_TIM1_Init+0x148>)
 8001408:	f004 fe32 	bl	8006070 <HAL_TIM_PWM_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001412:	f000 fc9f 	bl	8001d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001416:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800141a:	2208      	movs	r2, #8
 800141c:	4619      	mov	r1, r3
 800141e:	481a      	ldr	r0, [pc, #104]	@ (8001488 <MX_TIM1_Init+0x148>)
 8001420:	f004 fe26 	bl	8006070 <HAL_TIM_PWM_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800142a:	f000 fc93 	bl	8001d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800142e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001432:	220c      	movs	r2, #12
 8001434:	4619      	mov	r1, r3
 8001436:	4814      	ldr	r0, [pc, #80]	@ (8001488 <MX_TIM1_Init+0x148>)
 8001438:	f004 fe1a 	bl	8006070 <HAL_TIM_PWM_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001442:	f000 fc87 	bl	8001d54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800145a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800145e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	4619      	mov	r1, r3
 8001468:	4807      	ldr	r0, [pc, #28]	@ (8001488 <MX_TIM1_Init+0x148>)
 800146a:	f005 fafd 	bl	8006a68 <HAL_TIMEx_ConfigBreakDeadTime>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001474:	f000 fc6e 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001478:	4803      	ldr	r0, [pc, #12]	@ (8001488 <MX_TIM1_Init+0x148>)
 800147a:	f001 fafd 	bl	8002a78 <HAL_TIM_MspPostInit>

}
 800147e:	bf00      	nop
 8001480:	3748      	adds	r7, #72	@ 0x48
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200003dc 	.word	0x200003dc
 800148c:	40010000 	.word	0x40010000

08001490 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08e      	sub	sp, #56	@ 0x38
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001496:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a4:	f107 0320 	add.w	r3, r7, #32
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
 80014bc:	615a      	str	r2, [r3, #20]
 80014be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001578 <MX_TIM2_Init+0xe8>)
 80014c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001578 <MX_TIM2_Init+0xe8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001578 <MX_TIM2_Init+0xe8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1088;
 80014d4:	4b28      	ldr	r3, [pc, #160]	@ (8001578 <MX_TIM2_Init+0xe8>)
 80014d6:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 80014da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014dc:	4b26      	ldr	r3, [pc, #152]	@ (8001578 <MX_TIM2_Init+0xe8>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b25      	ldr	r3, [pc, #148]	@ (8001578 <MX_TIM2_Init+0xe8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014e8:	4823      	ldr	r0, [pc, #140]	@ (8001578 <MX_TIM2_Init+0xe8>)
 80014ea:	f004 f82f 	bl	800554c <HAL_TIM_Base_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014f4:	f000 fc2e 	bl	8001d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001502:	4619      	mov	r1, r3
 8001504:	481c      	ldr	r0, [pc, #112]	@ (8001578 <MX_TIM2_Init+0xe8>)
 8001506:	f004 fe75 	bl	80061f4 <HAL_TIM_ConfigClockSource>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001510:	f000 fc20 	bl	8001d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001514:	4818      	ldr	r0, [pc, #96]	@ (8001578 <MX_TIM2_Init+0xe8>)
 8001516:	f004 f925 	bl	8005764 <HAL_TIM_PWM_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001520:	f000 fc18 	bl	8001d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800152c:	f107 0320 	add.w	r3, r7, #32
 8001530:	4619      	mov	r1, r3
 8001532:	4811      	ldr	r0, [pc, #68]	@ (8001578 <MX_TIM2_Init+0xe8>)
 8001534:	f005 fa2a 	bl	800698c <HAL_TIMEx_MasterConfigSynchronization>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800153e:	f000 fc09 	bl	8001d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001542:	2360      	movs	r3, #96	@ 0x60
 8001544:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2200      	movs	r2, #0
 8001556:	4619      	mov	r1, r3
 8001558:	4807      	ldr	r0, [pc, #28]	@ (8001578 <MX_TIM2_Init+0xe8>)
 800155a:	f004 fd89 	bl	8006070 <HAL_TIM_PWM_ConfigChannel>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001564:	f000 fbf6 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001568:	4803      	ldr	r0, [pc, #12]	@ (8001578 <MX_TIM2_Init+0xe8>)
 800156a:	f001 fa85 	bl	8002a78 <HAL_TIM_MspPostInit>

}
 800156e:	bf00      	nop
 8001570:	3738      	adds	r7, #56	@ 0x38
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000424 	.word	0x20000424

0800157c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08c      	sub	sp, #48	@ 0x30
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	2224      	movs	r2, #36	@ 0x24
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f005 faf4 	bl	8006b78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001598:	4b20      	ldr	r3, [pc, #128]	@ (800161c <MX_TIM3_Init+0xa0>)
 800159a:	4a21      	ldr	r2, [pc, #132]	@ (8001620 <MX_TIM3_Init+0xa4>)
 800159c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800159e:	4b1f      	ldr	r3, [pc, #124]	@ (800161c <MX_TIM3_Init+0xa0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <MX_TIM3_Init+0xa0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <MX_TIM3_Init+0xa0>)
 80015ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <MX_TIM3_Init+0xa0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b8:	4b18      	ldr	r3, [pc, #96]	@ (800161c <MX_TIM3_Init+0xa0>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015be:	2301      	movs	r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015c6:	2301      	movs	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015d6:	2301      	movs	r3, #1
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	4619      	mov	r1, r3
 80015e8:	480c      	ldr	r0, [pc, #48]	@ (800161c <MX_TIM3_Init+0xa0>)
 80015ea:	f004 fb1d 	bl	8005c28 <HAL_TIM_Encoder_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80015f4:	f000 fbae 	bl	8001d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	@ (800161c <MX_TIM3_Init+0xa0>)
 8001606:	f005 f9c1 	bl	800698c <HAL_TIMEx_MasterConfigSynchronization>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001610:	f000 fba0 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	3730      	adds	r7, #48	@ 0x30
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000046c 	.word	0x2000046c
 8001620:	40000400 	.word	0x40000400

08001624 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	@ 0x28
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162a:	f107 0320 	add.w	r3, r7, #32
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]
 8001642:	615a      	str	r2, [r3, #20]
 8001644:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001646:	4b27      	ldr	r3, [pc, #156]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 8001648:	4a27      	ldr	r2, [pc, #156]	@ (80016e8 <MX_TIM4_Init+0xc4>)
 800164a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800164c:	4b25      	ldr	r3, [pc, #148]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 800164e:	2253      	movs	r2, #83	@ 0x53
 8001650:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001652:	4b24      	ldr	r3, [pc, #144]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8001658:	4b22      	ldr	r3, [pc, #136]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 800165a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800165e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001660:	4b20      	ldr	r3, [pc, #128]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001666:	4b1f      	ldr	r3, [pc, #124]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800166c:	481d      	ldr	r0, [pc, #116]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 800166e:	f004 f879 	bl	8005764 <HAL_TIM_PWM_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001678:	f000 fb6c 	bl	8001d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001684:	f107 0320 	add.w	r3, r7, #32
 8001688:	4619      	mov	r1, r3
 800168a:	4816      	ldr	r0, [pc, #88]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 800168c:	f005 f97e 	bl	800698c <HAL_TIMEx_MasterConfigSynchronization>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001696:	f000 fb5d 	bl	8001d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800169a:	2360      	movs	r3, #96	@ 0x60
 800169c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2200      	movs	r2, #0
 80016ae:	4619      	mov	r1, r3
 80016b0:	480c      	ldr	r0, [pc, #48]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 80016b2:	f004 fcdd 	bl	8006070 <HAL_TIM_PWM_ConfigChannel>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80016bc:	f000 fb4a 	bl	8001d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2204      	movs	r2, #4
 80016c4:	4619      	mov	r1, r3
 80016c6:	4807      	ldr	r0, [pc, #28]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 80016c8:	f004 fcd2 	bl	8006070 <HAL_TIM_PWM_ConfigChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80016d2:	f000 fb3f 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016d6:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <MX_TIM4_Init+0xc0>)
 80016d8:	f001 f9ce 	bl	8002a78 <HAL_TIM_MspPostInit>

}
 80016dc:	bf00      	nop
 80016de:	3728      	adds	r7, #40	@ 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200004b4 	.word	0x200004b4
 80016e8:	40000800 	.word	0x40000800

080016ec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08c      	sub	sp, #48	@ 0x30
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	2224      	movs	r2, #36	@ 0x24
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f005 fa3c 	bl	8006b78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001708:	4b20      	ldr	r3, [pc, #128]	@ (800178c <MX_TIM5_Init+0xa0>)
 800170a:	4a21      	ldr	r2, [pc, #132]	@ (8001790 <MX_TIM5_Init+0xa4>)
 800170c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800170e:	4b1f      	ldr	r3, [pc, #124]	@ (800178c <MX_TIM5_Init+0xa0>)
 8001710:	2200      	movs	r2, #0
 8001712:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001714:	4b1d      	ldr	r3, [pc, #116]	@ (800178c <MX_TIM5_Init+0xa0>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800171a:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <MX_TIM5_Init+0xa0>)
 800171c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001720:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001722:	4b1a      	ldr	r3, [pc, #104]	@ (800178c <MX_TIM5_Init+0xa0>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001728:	4b18      	ldr	r3, [pc, #96]	@ (800178c <MX_TIM5_Init+0xa0>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800172e:	2301      	movs	r3, #1
 8001730:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001736:	2301      	movs	r3, #1
 8001738:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001742:	2300      	movs	r3, #0
 8001744:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001746:	2301      	movs	r3, #1
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	4619      	mov	r1, r3
 8001758:	480c      	ldr	r0, [pc, #48]	@ (800178c <MX_TIM5_Init+0xa0>)
 800175a:	f004 fa65 	bl	8005c28 <HAL_TIM_Encoder_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001764:	f000 faf6 	bl	8001d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001768:	2300      	movs	r3, #0
 800176a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	4619      	mov	r1, r3
 8001774:	4805      	ldr	r0, [pc, #20]	@ (800178c <MX_TIM5_Init+0xa0>)
 8001776:	f005 f909 	bl	800698c <HAL_TIMEx_MasterConfigSynchronization>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001780:	f000 fae8 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001784:	bf00      	nop
 8001786:	3730      	adds	r7, #48	@ 0x30
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200004fc 	.word	0x200004fc
 8001790:	40000c00 	.word	0x40000c00

08001794 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179a:	463b      	mov	r3, r7
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80017a6:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <MX_TIM9_Init+0x6c>)
 80017a8:	4a16      	ldr	r2, [pc, #88]	@ (8001804 <MX_TIM9_Init+0x70>)
 80017aa:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 95;
 80017ac:	4b14      	ldr	r3, [pc, #80]	@ (8001800 <MX_TIM9_Init+0x6c>)
 80017ae:	225f      	movs	r2, #95	@ 0x5f
 80017b0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b2:	4b13      	ldr	r3, [pc, #76]	@ (8001800 <MX_TIM9_Init+0x6c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80017b8:	4b11      	ldr	r3, [pc, #68]	@ (8001800 <MX_TIM9_Init+0x6c>)
 80017ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017be:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <MX_TIM9_Init+0x6c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <MX_TIM9_Init+0x6c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80017cc:	480c      	ldr	r0, [pc, #48]	@ (8001800 <MX_TIM9_Init+0x6c>)
 80017ce:	f003 febd 	bl	800554c <HAL_TIM_Base_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80017d8:	f000 fabc 	bl	8001d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80017e2:	463b      	mov	r3, r7
 80017e4:	4619      	mov	r1, r3
 80017e6:	4806      	ldr	r0, [pc, #24]	@ (8001800 <MX_TIM9_Init+0x6c>)
 80017e8:	f004 fd04 	bl	80061f4 <HAL_TIM_ConfigClockSource>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80017f2:	f000 faaf 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000544 	.word	0x20000544
 8001804:	40014000 	.word	0x40014000

08001808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <MX_DMA_Init+0x3c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a0b      	ldr	r2, [pc, #44]	@ (8001844 <MX_DMA_Init+0x3c>)
 8001818:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <MX_DMA_Init+0x3c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	2038      	movs	r0, #56	@ 0x38
 8001830:	f002 f835 	bl	800389e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001834:	2038      	movs	r0, #56	@ 0x38
 8001836:	f002 f84e 	bl	80038d6 <HAL_NVIC_EnableIRQ>

}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	@ 0x28
 800184c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b4c      	ldr	r3, [pc, #304]	@ (8001994 <MX_GPIO_Init+0x14c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a4b      	ldr	r2, [pc, #300]	@ (8001994 <MX_GPIO_Init+0x14c>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b49      	ldr	r3, [pc, #292]	@ (8001994 <MX_GPIO_Init+0x14c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b45      	ldr	r3, [pc, #276]	@ (8001994 <MX_GPIO_Init+0x14c>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a44      	ldr	r2, [pc, #272]	@ (8001994 <MX_GPIO_Init+0x14c>)
 8001884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b42      	ldr	r3, [pc, #264]	@ (8001994 <MX_GPIO_Init+0x14c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	4b3e      	ldr	r3, [pc, #248]	@ (8001994 <MX_GPIO_Init+0x14c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	4a3d      	ldr	r2, [pc, #244]	@ (8001994 <MX_GPIO_Init+0x14c>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001994 <MX_GPIO_Init+0x14c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	4b37      	ldr	r3, [pc, #220]	@ (8001994 <MX_GPIO_Init+0x14c>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4a36      	ldr	r2, [pc, #216]	@ (8001994 <MX_GPIO_Init+0x14c>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4b34      	ldr	r3, [pc, #208]	@ (8001994 <MX_GPIO_Init+0x14c>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018d4:	4830      	ldr	r0, [pc, #192]	@ (8001998 <MX_GPIO_Init+0x150>)
 80018d6:	f002 fd25 	bl	8004324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	f24c 0104 	movw	r1, #49156	@ 0xc004
 80018e0:	482e      	ldr	r0, [pc, #184]	@ (800199c <MX_GPIO_Init+0x154>)
 80018e2:	f002 fd1f 	bl	8004324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	4826      	ldr	r0, [pc, #152]	@ (8001998 <MX_GPIO_Init+0x150>)
 8001900:	f002 fb74 	bl	8003fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001904:	230c      	movs	r3, #12
 8001906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001914:	2307      	movs	r3, #7
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	4820      	ldr	r0, [pc, #128]	@ (80019a0 <MX_GPIO_Init+0x158>)
 8001920:	f002 fb64 	bl	8003fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001924:	2304      	movs	r3, #4
 8001926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001928:	2301      	movs	r3, #1
 800192a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	4818      	ldr	r0, [pc, #96]	@ (800199c <MX_GPIO_Init+0x154>)
 800193c:	f002 fb56 	bl	8003fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001940:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001946:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800194a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800194c:	2302      	movs	r3, #2
 800194e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4619      	mov	r1, r3
 8001956:	4811      	ldr	r0, [pc, #68]	@ (800199c <MX_GPIO_Init+0x154>)
 8001958:	f002 fb48 	bl	8003fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800195c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001962:	2311      	movs	r3, #17
 8001964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	4809      	ldr	r0, [pc, #36]	@ (800199c <MX_GPIO_Init+0x154>)
 8001976:	f002 fb39 	bl	8003fec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2102      	movs	r1, #2
 800197e:	2028      	movs	r0, #40	@ 0x28
 8001980:	f001 ff8d 	bl	800389e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001984:	2028      	movs	r0, #40	@ 0x28
 8001986:	f001 ffa6 	bl	80038d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	@ 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	40020800 	.word	0x40020800
 800199c:	40020400 	.word	0x40020400
 80019a0:	40020000 	.word	0x40020000

080019a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) // RED
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019b4:	d12b      	bne.n	8001a0e <HAL_GPIO_EXTI_Callback+0x6a>
	    {
	        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80019b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019ba:	482f      	ldr	r0, [pc, #188]	@ (8001a78 <HAL_GPIO_EXTI_Callback+0xd4>)
 80019bc:	f002 fc9a 	bl	80042f4 <HAL_GPIO_ReadPin>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d11d      	bne.n	8001a02 <HAL_GPIO_EXTI_Callback+0x5e>
	            red_held = 1;
 80019c6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a7c <HAL_GPIO_EXTI_Callback+0xd8>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	701a      	strb	r2, [r3, #0]
	            red_start = __HAL_TIM_GET_COUNTER(game_task.htim);
 80019cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001a80 <HAL_GPIO_EXTI_Callback+0xdc>)
 80019ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001a84 <HAL_GPIO_EXTI_Callback+0xe0>)
 80019d6:	6013      	str	r3, [r2, #0]
	            red_shoot_task.button = 1;
 80019d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a88 <HAL_GPIO_EXTI_Callback+0xe4>)
 80019da:	2201      	movs	r2, #1
 80019dc:	609a      	str	r2, [r3, #8]
	            if (game_task.play_flag == 1){
 80019de:	4b28      	ldr	r3, [pc, #160]	@ (8001a80 <HAL_GPIO_EXTI_Callback+0xdc>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d102      	bne.n	80019ec <HAL_GPIO_EXTI_Callback+0x48>
	            	sound_task.laser_snd = 1;
 80019e6:	4b29      	ldr	r3, [pc, #164]	@ (8001a8c <HAL_GPIO_EXTI_Callback+0xe8>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	609a      	str	r2, [r3, #8]
	            }
	            if(playing){
 80019ec:	4b28      	ldr	r3, [pc, #160]	@ (8001a90 <HAL_GPIO_EXTI_Callback+0xec>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00c      	beq.n	8001a0e <HAL_GPIO_EXTI_Callback+0x6a>
					playing = 0;
 80019f4:	4b26      	ldr	r3, [pc, #152]	@ (8001a90 <HAL_GPIO_EXTI_Callback+0xec>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
					sound_task.state = 6;
 80019fa:	4b24      	ldr	r3, [pc, #144]	@ (8001a8c <HAL_GPIO_EXTI_Callback+0xe8>)
 80019fc:	2206      	movs	r2, #6
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	e005      	b.n	8001a0e <HAL_GPIO_EXTI_Callback+0x6a>
				}

	        } else {
	            red_held = 0;
 8001a02:	4b1e      	ldr	r3, [pc, #120]	@ (8001a7c <HAL_GPIO_EXTI_Callback+0xd8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
	            red_shoot_task.button = 0;
 8001a08:	4b1f      	ldr	r3, [pc, #124]	@ (8001a88 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
	        }
	    }

	    if (GPIO_Pin == GPIO_PIN_12) // BLUE
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a14:	d12b      	bne.n	8001a6e <HAL_GPIO_EXTI_Callback+0xca>
	    {
	        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8001a16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a1a:	4817      	ldr	r0, [pc, #92]	@ (8001a78 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001a1c:	f002 fc6a 	bl	80042f4 <HAL_GPIO_ReadPin>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d11d      	bne.n	8001a62 <HAL_GPIO_EXTI_Callback+0xbe>
	            blue_held = 1;
 8001a26:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
	            blue_start = __HAL_TIM_GET_COUNTER(game_task.htim);
 8001a2c:	4b14      	ldr	r3, [pc, #80]	@ (8001a80 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a34:	4a18      	ldr	r2, [pc, #96]	@ (8001a98 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001a36:	6013      	str	r3, [r2, #0]
	            blue_shoot_task.button = 1;
 8001a38:	4b18      	ldr	r3, [pc, #96]	@ (8001a9c <HAL_GPIO_EXTI_Callback+0xf8>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	609a      	str	r2, [r3, #8]
	            if (game_task.play_flag == 1){
 8001a3e:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d113      	bne.n	8001a6e <HAL_GPIO_EXTI_Callback+0xca>
					sound_task.laser_snd = 1;
 8001a46:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <HAL_GPIO_EXTI_Callback+0xe8>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	609a      	str	r2, [r3, #8]
				if(playing){
 8001a4c:	4b10      	ldr	r3, [pc, #64]	@ (8001a90 <HAL_GPIO_EXTI_Callback+0xec>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00c      	beq.n	8001a6e <HAL_GPIO_EXTI_Callback+0xca>
					playing = 0;
 8001a54:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <HAL_GPIO_EXTI_Callback+0xec>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
					sound_task.state = 6;
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <HAL_GPIO_EXTI_Callback+0xe8>)
 8001a5c:	2206      	movs	r2, #6
 8001a5e:	601a      	str	r2, [r3, #0]
//    }
//    if (red_photoresistor_task.adc_val > red_photoresistor_task.zero + red_photoresistor_task.thresh)
//    {
//        red_photoresistor_task.hit_flag = 1;
//    }
}
 8001a60:	e005      	b.n	8001a6e <HAL_GPIO_EXTI_Callback+0xca>
	            blue_held = 0;
 8001a62:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
	            blue_shoot_task.button = 0;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <HAL_GPIO_EXTI_Callback+0xf8>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40020400 	.word	0x40020400
 8001a7c:	2000058c 	.word	0x2000058c
 8001a80:	200000cc 	.word	0x200000cc
 8001a84:	20000590 	.word	0x20000590
 8001a88:	2000012c 	.word	0x2000012c
 8001a8c:	20000048 	.word	0x20000048
 8001a90:	200005ac 	.word	0x200005ac
 8001a94:	2000058d 	.word	0x2000058d
 8001a98:	20000594 	.word	0x20000594
 8001a9c:	2000015c 	.word	0x2000015c

08001aa0 <calibration>:

void calibration(void) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	@ 0x30
 8001aa4:	af00      	add	r7, sp, #0
    const float Kp = 1.0f;
 8001aa6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const int  HOMING_TOL = 5;      // ticks tolerance
 8001aac:	2305      	movs	r3, #5
 8001aae:	62bb      	str	r3, [r7, #40]	@ 0x28
    const uint32_t TIMEOUT = 3000;  // ms
 8001ab0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t red_photo_sum = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
    uint32_t blue_photo_sum = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]

    // 1) Center shields & zero photoresistors
    __HAL_TIM_SET_COMPARE(red_shoot_task.servo_tim,   red_shoot_task.channel,   red_shoot_task.shield_val);
 8001abe:	4b9c      	ldr	r3, [pc, #624]	@ (8001d30 <calibration+0x290>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d106      	bne.n	8001ad4 <calibration+0x34>
 8001ac6:	4b9a      	ldr	r3, [pc, #616]	@ (8001d30 <calibration+0x290>)
 8001ac8:	695a      	ldr	r2, [r3, #20]
 8001aca:	4b99      	ldr	r3, [pc, #612]	@ (8001d30 <calibration+0x290>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ad2:	e01e      	b.n	8001b12 <calibration+0x72>
 8001ad4:	4b96      	ldr	r3, [pc, #600]	@ (8001d30 <calibration+0x290>)
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d107      	bne.n	8001aec <calibration+0x4c>
 8001adc:	4b94      	ldr	r3, [pc, #592]	@ (8001d30 <calibration+0x290>)
 8001ade:	6959      	ldr	r1, [r3, #20]
 8001ae0:	4b93      	ldr	r3, [pc, #588]	@ (8001d30 <calibration+0x290>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	6393      	str	r3, [r2, #56]	@ 0x38
 8001aea:	e012      	b.n	8001b12 <calibration+0x72>
 8001aec:	4b90      	ldr	r3, [pc, #576]	@ (8001d30 <calibration+0x290>)
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d107      	bne.n	8001b04 <calibration+0x64>
 8001af4:	4b8e      	ldr	r3, [pc, #568]	@ (8001d30 <calibration+0x290>)
 8001af6:	6959      	ldr	r1, [r3, #20]
 8001af8:	4b8d      	ldr	r3, [pc, #564]	@ (8001d30 <calibration+0x290>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	460b      	mov	r3, r1
 8001b00:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001b02:	e006      	b.n	8001b12 <calibration+0x72>
 8001b04:	4b8a      	ldr	r3, [pc, #552]	@ (8001d30 <calibration+0x290>)
 8001b06:	6959      	ldr	r1, [r3, #20]
 8001b08:	4b89      	ldr	r3, [pc, #548]	@ (8001d30 <calibration+0x290>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(blue_shoot_task.servo_tim,  blue_shoot_task.channel,  blue_shoot_task.shield_val);
 8001b12:	4b88      	ldr	r3, [pc, #544]	@ (8001d34 <calibration+0x294>)
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d106      	bne.n	8001b28 <calibration+0x88>
 8001b1a:	4b86      	ldr	r3, [pc, #536]	@ (8001d34 <calibration+0x294>)
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	4b85      	ldr	r3, [pc, #532]	@ (8001d34 <calibration+0x294>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b26:	e01e      	b.n	8001b66 <calibration+0xc6>
 8001b28:	4b82      	ldr	r3, [pc, #520]	@ (8001d34 <calibration+0x294>)
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d107      	bne.n	8001b40 <calibration+0xa0>
 8001b30:	4b80      	ldr	r3, [pc, #512]	@ (8001d34 <calibration+0x294>)
 8001b32:	6959      	ldr	r1, [r3, #20]
 8001b34:	4b7f      	ldr	r3, [pc, #508]	@ (8001d34 <calibration+0x294>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	6393      	str	r3, [r2, #56]	@ 0x38
 8001b3e:	e012      	b.n	8001b66 <calibration+0xc6>
 8001b40:	4b7c      	ldr	r3, [pc, #496]	@ (8001d34 <calibration+0x294>)
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d107      	bne.n	8001b58 <calibration+0xb8>
 8001b48:	4b7a      	ldr	r3, [pc, #488]	@ (8001d34 <calibration+0x294>)
 8001b4a:	6959      	ldr	r1, [r3, #20]
 8001b4c:	4b79      	ldr	r3, [pc, #484]	@ (8001d34 <calibration+0x294>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	460b      	mov	r3, r1
 8001b54:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001b56:	e006      	b.n	8001b66 <calibration+0xc6>
 8001b58:	4b76      	ldr	r3, [pc, #472]	@ (8001d34 <calibration+0x294>)
 8001b5a:	6959      	ldr	r1, [r3, #20]
 8001b5c:	4b75      	ldr	r3, [pc, #468]	@ (8001d34 <calibration+0x294>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	460b      	mov	r3, r1
 8001b64:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_Delay(1200);
 8001b66:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001b6a:	f001 f993 	bl	8002e94 <HAL_Delay>
    red_photo_sum  += red_photoresistor_task.adc_val;
 8001b6e:	4b72      	ldr	r3, [pc, #456]	@ (8001d38 <calibration+0x298>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	461a      	mov	r2, r3
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	4413      	add	r3, r2
 8001b78:	623b      	str	r3, [r7, #32]
    blue_photo_sum += blue_photoresistor_task.adc_val;
 8001b7a:	4b70      	ldr	r3, [pc, #448]	@ (8001d3c <calibration+0x29c>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	4413      	add	r3, r2
 8001b84:	61fb      	str	r3, [r7, #28]

    // --- Drive both to MIN end ---
    set_duty(&mred,  +30);
 8001b86:	211e      	movs	r1, #30
 8001b88:	486d      	ldr	r0, [pc, #436]	@ (8001d40 <calibration+0x2a0>)
 8001b8a:	f000 f8e9 	bl	8001d60 <set_duty>
    set_duty(&mblue, -30);
 8001b8e:	f06f 011d 	mvn.w	r1, #29
 8001b92:	486c      	ldr	r0, [pc, #432]	@ (8001d44 <calibration+0x2a4>)
 8001b94:	f000 f8e4 	bl	8001d60 <set_duty>
    wait_for_stall(&red_encoder);
 8001b98:	486b      	ldr	r0, [pc, #428]	@ (8001d48 <calibration+0x2a8>)
 8001b9a:	f7fe fe65 	bl	8000868 <wait_for_stall>
    wait_for_stall(&blue_encoder);
 8001b9e:	486b      	ldr	r0, [pc, #428]	@ (8001d4c <calibration+0x2ac>)
 8001ba0:	f7fe fe62 	bl	8000868 <wait_for_stall>
    int32_t red_min  = red_encoder.ticks;
 8001ba4:	4b68      	ldr	r3, [pc, #416]	@ (8001d48 <calibration+0x2a8>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	61bb      	str	r3, [r7, #24]
    int32_t blue_min = blue_encoder.ticks;
 8001baa:	4b68      	ldr	r3, [pc, #416]	@ (8001d4c <calibration+0x2ac>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	617b      	str	r3, [r7, #20]
    set_duty(&mred,  0);
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4863      	ldr	r0, [pc, #396]	@ (8001d40 <calibration+0x2a0>)
 8001bb4:	f000 f8d4 	bl	8001d60 <set_duty>
    set_duty(&mblue, 0);
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4862      	ldr	r0, [pc, #392]	@ (8001d44 <calibration+0x2a4>)
 8001bbc:	f000 f8d0 	bl	8001d60 <set_duty>
    red_photo_sum  += red_photoresistor_task.adc_val;
 8001bc0:	4b5d      	ldr	r3, [pc, #372]	@ (8001d38 <calibration+0x298>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	4413      	add	r3, r2
 8001bca:	623b      	str	r3, [r7, #32]
	blue_photo_sum += blue_photoresistor_task.adc_val;
 8001bcc:	4b5b      	ldr	r3, [pc, #364]	@ (8001d3c <calibration+0x29c>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	61fb      	str	r3, [r7, #28]

    // --- Drive both to MAX end ---
    set_duty(&mred,  -30);
 8001bd8:	f06f 011d 	mvn.w	r1, #29
 8001bdc:	4858      	ldr	r0, [pc, #352]	@ (8001d40 <calibration+0x2a0>)
 8001bde:	f000 f8bf 	bl	8001d60 <set_duty>
    set_duty(&mblue, +30);
 8001be2:	211e      	movs	r1, #30
 8001be4:	4857      	ldr	r0, [pc, #348]	@ (8001d44 <calibration+0x2a4>)
 8001be6:	f000 f8bb 	bl	8001d60 <set_duty>
    wait_for_stall(&red_encoder);
 8001bea:	4857      	ldr	r0, [pc, #348]	@ (8001d48 <calibration+0x2a8>)
 8001bec:	f7fe fe3c 	bl	8000868 <wait_for_stall>
    wait_for_stall(&blue_encoder);
 8001bf0:	4856      	ldr	r0, [pc, #344]	@ (8001d4c <calibration+0x2ac>)
 8001bf2:	f7fe fe39 	bl	8000868 <wait_for_stall>
    int32_t red_max  = red_encoder.ticks;
 8001bf6:	4b54      	ldr	r3, [pc, #336]	@ (8001d48 <calibration+0x2a8>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	613b      	str	r3, [r7, #16]
    int32_t blue_max = blue_encoder.ticks;
 8001bfc:	4b53      	ldr	r3, [pc, #332]	@ (8001d4c <calibration+0x2ac>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	60fb      	str	r3, [r7, #12]
    set_duty(&mred,  0);
 8001c02:	2100      	movs	r1, #0
 8001c04:	484e      	ldr	r0, [pc, #312]	@ (8001d40 <calibration+0x2a0>)
 8001c06:	f000 f8ab 	bl	8001d60 <set_duty>
    set_duty(&mblue, 0);
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	484d      	ldr	r0, [pc, #308]	@ (8001d44 <calibration+0x2a4>)
 8001c0e:	f000 f8a7 	bl	8001d60 <set_duty>
    red_photo_sum  += red_photoresistor_task.adc_val;
 8001c12:	4b49      	ldr	r3, [pc, #292]	@ (8001d38 <calibration+0x298>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	461a      	mov	r2, r3
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	623b      	str	r3, [r7, #32]
	blue_photo_sum += blue_photoresistor_task.adc_val;
 8001c1e:	4b47      	ldr	r3, [pc, #284]	@ (8001d3c <calibration+0x29c>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	461a      	mov	r2, r3
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	4413      	add	r3, r2
 8001c28:	61fb      	str	r3, [r7, #28]

    // --- Compute midpoints ---
    int32_t red_home  = (-red_min  - red_max)  / 2;
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	425a      	negs	r2, r3
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	0fda      	lsrs	r2, r3, #31
 8001c34:	4413      	add	r3, r2
 8001c36:	105b      	asrs	r3, r3, #1
 8001c38:	60bb      	str	r3, [r7, #8]
    int32_t blue_home = (blue_min + blue_max) / 2;
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4413      	add	r3, r2
 8001c40:	0fda      	lsrs	r2, r3, #31
 8001c42:	4413      	add	r3, r2
 8001c44:	105b      	asrs	r3, r3, #1
 8001c46:	607b      	str	r3, [r7, #4]

    // --- Compute photo resistor zeros ---
    red_photoresistor_task.zero  = red_photo_sum / 3;
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	4a41      	ldr	r2, [pc, #260]	@ (8001d50 <calibration+0x2b0>)
 8001c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c50:	085b      	lsrs	r3, r3, #1
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b38      	ldr	r3, [pc, #224]	@ (8001d38 <calibration+0x298>)
 8001c56:	615a      	str	r2, [r3, #20]
    blue_photoresistor_task.zero = blue_photo_sum / 3;
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	4a3d      	ldr	r2, [pc, #244]	@ (8001d50 <calibration+0x2b0>)
 8001c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c60:	085b      	lsrs	r3, r3, #1
 8001c62:	461a      	mov	r2, r3
 8001c64:	4b35      	ldr	r3, [pc, #212]	@ (8001d3c <calibration+0x29c>)
 8001c66:	615a      	str	r2, [r3, #20]

    // --- Drive both to their homes under P-control ---
    uint32_t t0 = HAL_GetTick();
 8001c68:	f001 f908 	bl	8002e7c <HAL_GetTick>
 8001c6c:	6038      	str	r0, [r7, #0]
    do {
        read_encoder(&red_encoder);
 8001c6e:	4836      	ldr	r0, [pc, #216]	@ (8001d48 <calibration+0x2a8>)
 8001c70:	f7fe fdb8 	bl	80007e4 <read_encoder>
        read_encoder(&blue_encoder);
 8001c74:	4835      	ldr	r0, [pc, #212]	@ (8001d4c <calibration+0x2ac>)
 8001c76:	f7fe fdb5 	bl	80007e4 <read_encoder>

        go_to(&mred,  Kp, red_home,  -red_encoder.ticks);
 8001c7a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c82:	4b31      	ldr	r3, [pc, #196]	@ (8001d48 <calibration+0x2a8>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	425b      	negs	r3, r3
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	ee17 1a90 	vmov	r1, s15
 8001c8e:	482c      	ldr	r0, [pc, #176]	@ (8001d40 <calibration+0x2a0>)
 8001c90:	f000 f973 	bl	8001f7a <go_to>
        go_to(&mblue, Kp, blue_home, blue_encoder.ticks);
 8001c94:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d4c <calibration+0x2ac>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	ee17 1a90 	vmov	r1, s15
 8001ca6:	4827      	ldr	r0, [pc, #156]	@ (8001d44 <calibration+0x2a4>)
 8001ca8:	f000 f967 	bl	8001f7a <go_to>

        HAL_Delay(1);
 8001cac:	2001      	movs	r0, #1
 8001cae:	f001 f8f1 	bl	8002e94 <HAL_Delay>
    } while ((abs(-red_encoder.ticks  - red_home)  > HOMING_TOL ||
 8001cb2:	4b25      	ldr	r3, [pc, #148]	@ (8001d48 <calibration+0x2a8>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	425a      	negs	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bfb8      	it	lt
 8001cc0:	425b      	neglt	r3, r3
              abs(blue_encoder.ticks - blue_home) > HOMING_TOL)
             && (HAL_GetTick() - t0) < TIMEOUT);
 8001cc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	db09      	blt.n	8001cdc <calibration+0x23c>
              abs(blue_encoder.ticks - blue_home) > HOMING_TOL)
 8001cc8:	4b20      	ldr	r3, [pc, #128]	@ (8001d4c <calibration+0x2ac>)
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	bfb8      	it	lt
 8001cd4:	425b      	neglt	r3, r3
    } while ((abs(-red_encoder.ticks  - red_home)  > HOMING_TOL ||
 8001cd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	da07      	bge.n	8001cec <calibration+0x24c>
             && (HAL_GetTick() - t0) < TIMEOUT);
 8001cdc:	f001 f8ce 	bl	8002e7c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d8c0      	bhi.n	8001c6e <calibration+0x1ce>

    set_duty(&mred,  0);
 8001cec:	2100      	movs	r1, #0
 8001cee:	4814      	ldr	r0, [pc, #80]	@ (8001d40 <calibration+0x2a0>)
 8001cf0:	f000 f836 	bl	8001d60 <set_duty>
    set_duty(&mblue, 0);
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4813      	ldr	r0, [pc, #76]	@ (8001d44 <calibration+0x2a4>)
 8001cf8:	f000 f832 	bl	8001d60 <set_duty>

    // 5) Reset encoder zero-reference at true home
    setup_encoder(&red_encoder);
 8001cfc:	4812      	ldr	r0, [pc, #72]	@ (8001d48 <calibration+0x2a8>)
 8001cfe:	f7fe fd5b 	bl	80007b8 <setup_encoder>
    setup_encoder(&blue_encoder);
 8001d02:	4812      	ldr	r0, [pc, #72]	@ (8001d4c <calibration+0x2ac>)
 8001d04:	f7fe fd58 	bl	80007b8 <setup_encoder>

    // --- Compute and store travel ranges ---
    red_encoder.range  = abs(red_max  - red_min);
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	bfb8      	it	lt
 8001d12:	425b      	neglt	r3, r3
 8001d14:	4a0c      	ldr	r2, [pc, #48]	@ (8001d48 <calibration+0x2a8>)
 8001d16:	6113      	str	r3, [r2, #16]
    blue_encoder.range = abs(blue_max - blue_min);
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bfb8      	it	lt
 8001d22:	425b      	neglt	r3, r3
 8001d24:	4a09      	ldr	r2, [pc, #36]	@ (8001d4c <calibration+0x2ac>)
 8001d26:	6113      	str	r3, [r2, #16]
}
 8001d28:	bf00      	nop
 8001d2a:	3730      	adds	r7, #48	@ 0x30
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	2000012c 	.word	0x2000012c
 8001d34:	2000015c 	.word	0x2000015c
 8001d38:	20000084 	.word	0x20000084
 8001d3c:	200000a8 	.word	0x200000a8
 8001d40:	20000000 	.word	0x20000000
 8001d44:	2000000c 	.word	0x2000000c
 8001d48:	20000018 	.word	0x20000018
 8001d4c:	20000030 	.word	0x20000030
 8001d50:	aaaaaaab 	.word	0xaaaaaaab

08001d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d58:	b672      	cpsid	i
}
 8001d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <Error_Handler+0x8>

08001d60 <set_duty>:
#include <stdint.h>

#define PWM_MAX         4800

void set_duty(motor_t* p_mot, int32_t duty)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
    duty = duty * PWM_MAX / 100;
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	603b      	str	r3, [r7, #0]
    if (duty >= 0) {
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	db46      	blt.n	8001e0a <set_duty+0xaa>
        __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, duty);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d105      	bne.n	8001d90 <set_duty+0x30>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d8e:	e018      	b.n	8001dc2 <set_duty+0x62>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d105      	bne.n	8001da4 <set_duty+0x44>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	6393      	str	r3, [r2, #56]	@ 0x38
 8001da2:	e00e      	b.n	8001dc2 <set_duty+0x62>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d105      	bne.n	8001db8 <set_duty+0x58>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001db6:	e004      	b.n	8001dc2 <set_duty+0x62>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, 0);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d105      	bne.n	8001dd6 <set_duty+0x76>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	635a      	str	r2, [r3, #52]	@ 0x34
    } else {
        __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, 0);
        __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
    }
}
 8001dd4:	e073      	b.n	8001ebe <set_duty+0x15e>
        __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, 0);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d105      	bne.n	8001dea <set_duty+0x8a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2300      	movs	r3, #0
 8001de6:	6393      	str	r3, [r2, #56]	@ 0x38
 8001de8:	e069      	b.n	8001ebe <set_duty+0x15e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d105      	bne.n	8001dfe <set_duty+0x9e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001dfc:	e05f      	b.n	8001ebe <set_duty+0x15e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2300      	movs	r3, #0
 8001e06:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001e08:	e059      	b.n	8001ebe <set_duty+0x15e>
        __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, 0);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d105      	bne.n	8001e1e <set_duty+0xbe>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e1c:	e018      	b.n	8001e50 <set_duty+0xf0>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d105      	bne.n	8001e32 <set_duty+0xd2>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	6393      	str	r3, [r2, #56]	@ 0x38
 8001e30:	e00e      	b.n	8001e50 <set_duty+0xf0>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d105      	bne.n	8001e46 <set_duty+0xe6>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2300      	movs	r3, #0
 8001e42:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001e44:	e004      	b.n	8001e50 <set_duty+0xf0>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d109      	bne.n	8001e6c <set_duty+0x10c>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001e5e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001e6a:	e028      	b.n	8001ebe <set_duty+0x15e>
        __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d10a      	bne.n	8001e8a <set_duty+0x12a>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001e7a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	460b      	mov	r3, r1
 8001e86:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001e88:	e019      	b.n	8001ebe <set_duty+0x15e>
        __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d10a      	bne.n	8001ea8 <set_duty+0x148>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001e98:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001ea6:	e00a      	b.n	8001ebe <set_duty+0x15e>
        __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001eae:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001ebc:	e7ff      	b.n	8001ebe <set_duty+0x15e>
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <enable>:
    __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, 0);
    __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, 0);
}

void enable(motor_t* p_mot)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, PWM_MAX);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <enable+0x1e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001ee4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ee6:	e01b      	b.n	8001f20 <enable+0x56>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d106      	bne.n	8001efe <enable+0x34>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001efa:	6393      	str	r3, [r2, #56]	@ 0x38
 8001efc:	e010      	b.n	8001f20 <enable+0x56>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d106      	bne.n	8001f14 <enable+0x4a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001f10:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001f12:	e005      	b.n	8001f20 <enable+0x56>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001f1e:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d106      	bne.n	8001f36 <enable+0x6c>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001f32:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001f34:	e01b      	b.n	8001f6e <enable+0xa4>
    __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d106      	bne.n	8001f4c <enable+0x82>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001f48:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001f4a:	e010      	b.n	8001f6e <enable+0xa4>
    __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d106      	bne.n	8001f62 <enable+0x98>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001f5e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001f60:	e005      	b.n	8001f6e <enable+0xa4>
    __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001f6c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <go_to>:

void go_to(motor_t *p_mot, int k_p, int where, int from)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	603b      	str	r3, [r7, #0]
    int error = where - from;
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	617b      	str	r3, [r7, #20]
    if (error > 100) error = 99;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2b64      	cmp	r3, #100	@ 0x64
 8001f94:	dd01      	ble.n	8001f9a <go_to+0x20>
 8001f96:	2363      	movs	r3, #99	@ 0x63
 8001f98:	617b      	str	r3, [r7, #20]
    if (error < -100) error = -99;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001fa0:	da02      	bge.n	8001fa8 <go_to+0x2e>
 8001fa2:	f06f 0362 	mvn.w	r3, #98	@ 0x62
 8001fa6:	617b      	str	r3, [r7, #20]
    set_duty(p_mot, k_p * error);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	fb02 f303 	mul.w	r3, r2, r3
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f7ff fed4 	bl	8001d60 <set_duty>
}
 8001fb8:	bf00      	nop
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <photoresistor_task_run>:

// game plan is to create two tasks, one for red and one for blue

// A function to run the appropriate state of the task
void photoresistor_task_run(PhotoresistorTask *photoresistor_task)
{    // Check for a valid state
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
    if (photoresistor_task->state >= 0 && photoresistor_task->state < photoresistor_task->num_states)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db0e      	blt.n	8001fee <photoresistor_task_run+0x2e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	da08      	bge.n	8001fee <photoresistor_task_run+0x2e>
    {
        // Index the list of state functions and then call the appropriate
        // method while passing in (this) task_1 object

    	photoresistor_task->state_list[photoresistor_task->state](photoresistor_task);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3206      	adds	r2, #6
 8001fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	4798      	blx	r3
    else
    {
        while(1){}
    }

}
 8001fec:	e000      	b.n	8001ff0 <photoresistor_task_run+0x30>
        while(1){}
 8001fee:	e7fe      	b.n	8001fee <photoresistor_task_run+0x2e>
}
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <photoresistor_task_state_0_init>:


// A function to initialize the task
// init button, laser and photoresistor
void photoresistor_task_state_0_init(PhotoresistorTask *photoresistor_task)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
	photoresistor_task->state = 1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	601a      	str	r2, [r3, #0]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <photoresistor_task_state_1_look>:
// A function to implement state 1 of the task
// wait for button to be pressed which should be on an interrupt that changes a flag
void photoresistor_task_state_1_look(PhotoresistorTask *photoresistor_task)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	if ((photoresistor_task->adc_val - photoresistor_task->zero) > photoresistor_task->thresh){
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	1ad2      	subs	r2, r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	429a      	cmp	r2, r3
 8002028:	dd05      	ble.n	8002036 <photoresistor_task_state_1_look+0x26>
		photoresistor_task->hit_flag = 1;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	609a      	str	r2, [r3, #8]
		photoresistor_task->state = 2;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	601a      	str	r2, [r3, #0]
	}

}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <photoresistor_task_state_2_hit>:
// A function to implement state 2 which is for when the game is being played
// This keeps track of score, prints score messages
void photoresistor_task_state_2_hit(PhotoresistorTask *photoresistor_task)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
	if (photoresistor_task->hit_flag == 0){ // game_task will change when they have recorded the score
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d102      	bne.n	8002058 <photoresistor_task_state_2_hit+0x16>
		photoresistor_task->state = 1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	601a      	str	r2, [r3, #0]
	}
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <shoot_task_run>:

// game plan is to create two tasks, one for red and one for blue

// A function to run the appropriate state of the task
void shoot_task_run(ShootTask *shoot_task)
{    // Check for a valid state
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
    if (shoot_task->state >= 0 && shoot_task->state < shoot_task->num_states)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	db0e      	blt.n	8002092 <shoot_task_run+0x2e>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	da08      	bge.n	8002092 <shoot_task_run+0x2e>
    {
        // Index the list of state functions and then call the appropriate
        // method while passing in (this) task_1 object

        shoot_task->state_list[shoot_task->state](shoot_task);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3208      	adds	r2, #8
 8002088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	4798      	blx	r3
    else
    {
        while(1){}
    }

}
 8002090:	e000      	b.n	8002094 <shoot_task_run+0x30>
        while(1){}
 8002092:	e7fe      	b.n	8002092 <shoot_task_run+0x2e>
}
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <shoot_task_state_0_init>:
// servo -- 300 at shiel

// A function to initialize the task
// init button, laser and photoresistor
void shoot_task_state_0_init(ShootTask *shoot_task)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	shoot_task->state = 1;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, shoot_task->laser_gpio, GPIO_PIN_SET);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2201      	movs	r2, #1
 80020b2:	4619      	mov	r1, r3
 80020b4:	4818      	ldr	r0, [pc, #96]	@ (8002118 <shoot_task_state_0_init+0x7c>)
 80020b6:	f002 f935 	bl	8004324 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d106      	bne.n	80020d0 <shoot_task_state_0_init+0x34>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80020ce:	e01e      	b.n	800210e <shoot_task_state_0_init+0x72>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d107      	bne.n	80020e8 <shoot_task_state_0_init+0x4c>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6999      	ldr	r1, [r3, #24]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	460b      	mov	r3, r1
 80020e4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80020e6:	e012      	b.n	800210e <shoot_task_state_0_init+0x72>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d107      	bne.n	8002100 <shoot_task_state_0_init+0x64>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6999      	ldr	r1, [r3, #24]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	460b      	mov	r3, r1
 80020fc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80020fe:	e006      	b.n	800210e <shoot_task_state_0_init+0x72>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6999      	ldr	r1, [r3, #24]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	460b      	mov	r3, r1
 800210c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40020400 	.word	0x40020400

0800211c <shoot_task_state_1_wait>:
// A function to implement state 1 of the task
// wait for button to be pressed which should be on an interrupt that changes a flag
void shoot_task_state_1_wait(ShootTask *shoot_task)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, shoot_task->laser_gpio, GPIO_PIN_SET);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	b29b      	uxth	r3, r3
 800212a:	2201      	movs	r2, #1
 800212c:	4619      	mov	r1, r3
 800212e:	481c      	ldr	r0, [pc, #112]	@ (80021a0 <shoot_task_state_1_wait+0x84>)
 8002130:	f002 f8f8 	bl	8004324 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d106      	bne.n	800214a <shoot_task_state_1_wait+0x2e>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699a      	ldr	r2, [r3, #24]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	635a      	str	r2, [r3, #52]	@ 0x34
 8002148:	e01e      	b.n	8002188 <shoot_task_state_1_wait+0x6c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b04      	cmp	r3, #4
 8002150:	d107      	bne.n	8002162 <shoot_task_state_1_wait+0x46>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6999      	ldr	r1, [r3, #24]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	460b      	mov	r3, r1
 800215e:	6393      	str	r3, [r2, #56]	@ 0x38
 8002160:	e012      	b.n	8002188 <shoot_task_state_1_wait+0x6c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b08      	cmp	r3, #8
 8002168:	d107      	bne.n	800217a <shoot_task_state_1_wait+0x5e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6999      	ldr	r1, [r3, #24]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	460b      	mov	r3, r1
 8002176:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002178:	e006      	b.n	8002188 <shoot_task_state_1_wait+0x6c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6999      	ldr	r1, [r3, #24]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	460b      	mov	r3, r1
 8002186:	6413      	str	r3, [r2, #64]	@ 0x40
	if (shoot_task->button == 1){
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d102      	bne.n	8002196 <shoot_task_state_1_wait+0x7a>
		shoot_task->state = 2;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	601a      	str	r2, [r3, #0]
	}
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40020400 	.word	0x40020400

080021a4 <shoot_task_state_2_unshield>:
// A function to implement state 2 which is for when the game is being played
// This keeps track of score, prints score messages
void shoot_task_state_2_unshield(ShootTask *shoot_task)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->shield_val);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d106      	bne.n	80021c2 <shoot_task_state_2_unshield+0x1e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	635a      	str	r2, [r3, #52]	@ 0x34
 80021c0:	e01e      	b.n	8002200 <shoot_task_state_2_unshield+0x5c>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d107      	bne.n	80021da <shoot_task_state_2_unshield+0x36>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6959      	ldr	r1, [r3, #20]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	460b      	mov	r3, r1
 80021d6:	6393      	str	r3, [r2, #56]	@ 0x38
 80021d8:	e012      	b.n	8002200 <shoot_task_state_2_unshield+0x5c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d107      	bne.n	80021f2 <shoot_task_state_2_unshield+0x4e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6959      	ldr	r1, [r3, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	460b      	mov	r3, r1
 80021ee:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80021f0:	e006      	b.n	8002200 <shoot_task_state_2_unshield+0x5c>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6959      	ldr	r1, [r3, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	460b      	mov	r3, r1
 80021fe:	6413      	str	r3, [r2, #64]	@ 0x40
	if (1){ // add delay using some ticks and tune it
		shoot_task->state = 3;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2203      	movs	r2, #3
 8002204:	601a      	str	r2, [r3, #0]
	}
	if(shoot_task->button == 0){
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d102      	bne.n	8002214 <shoot_task_state_2_unshield+0x70>
		shoot_task->state = 1;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	601a      	str	r2, [r3, #0]
	}
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <shoot_task_state_3_shoot>:
// A function to implement state 3

void shoot_task_state_3_shoot(ShootTask *shoot_task)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, shoot_task->laser_gpio, GPIO_PIN_RESET);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	b29b      	uxth	r3, r3
 800222e:	2200      	movs	r2, #0
 8002230:	4619      	mov	r1, r3
 8002232:	4807      	ldr	r0, [pc, #28]	@ (8002250 <shoot_task_state_3_shoot+0x30>)
 8002234:	f002 f876 	bl	8004324 <HAL_GPIO_WritePin>
	if(shoot_task->button == 0){
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d102      	bne.n	8002246 <shoot_task_state_3_shoot+0x26>
		shoot_task->state = 1;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	601a      	str	r2, [r3, #0]
	}

}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40020400 	.word	0x40020400

08002254 <sound_task_run>:
volatile uint32_t playing = 0;
const int16_t *audio_buf_ptr;

// A function to run the appropriate state of the task
void sound_task_run(SoundTask *sound_task)
{    // Check for a valid state
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
    if (sound_task->state >= 0 && sound_task->state < sound_task->num_states)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	db0e      	blt.n	8002282 <sound_task_run+0x2e>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	429a      	cmp	r2, r3
 800226e:	da08      	bge.n	8002282 <sound_task_run+0x2e>
    {
        // Index the list of state functions and then call the appropriate
        // method while passing in (this) task_1 object
    	sound_task->state_list[sound_task->state](sound_task);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3208      	adds	r2, #8
 8002278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
    else
    {

        while(1){}
    }
}
 8002280:	e000      	b.n	8002284 <sound_task_run+0x30>
        while(1){}
 8002282:	e7fe      	b.n	8002282 <sound_task_run+0x2e>
}
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <sound_task_state_0_init>:


// A function to initialize the task
void sound_task_state_0_init(SoundTask *sound_task)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
	sound_task->state = 1;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]

}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <sound_task_state_1_wait>:

void sound_task_state_1_wait(SoundTask *sound_task)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

	if(sound_task->hit_snd == 1){
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d103      	bne.n	80022bc <sound_task_state_1_wait+0x18>
		sound_task->state = 3;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2203      	movs	r2, #3
 80022b8:	601a      	str	r2, [r3, #0]
	}
	else if (sound_task->laser_snd == 1){
		sound_task->state = 2;
	}

}
 80022ba:	e016      	b.n	80022ea <sound_task_state_1_wait+0x46>
	else if(sound_task->win_snd == 1){
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d103      	bne.n	80022cc <sound_task_state_1_wait+0x28>
		sound_task->state = 4;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2204      	movs	r2, #4
 80022c8:	601a      	str	r2, [r3, #0]
}
 80022ca:	e00e      	b.n	80022ea <sound_task_state_1_wait+0x46>
	else if(sound_task->start_snd == 1){
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d103      	bne.n	80022dc <sound_task_state_1_wait+0x38>
		sound_task->state = 5;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2205      	movs	r2, #5
 80022d8:	601a      	str	r2, [r3, #0]
}
 80022da:	e006      	b.n	80022ea <sound_task_state_1_wait+0x46>
	else if (sound_task->laser_snd == 1){
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d102      	bne.n	80022ea <sound_task_state_1_wait+0x46>
		sound_task->state = 2;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	601a      	str	r2, [r3, #0]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <sound_task_state_2_laser>:
void sound_task_state_2_laser(SoundTask *sound_task)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	if (playing) return;
 8002300:	4b2f      	ldr	r3, [pc, #188]	@ (80023c0 <sound_task_state_2_laser+0xc8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d156      	bne.n	80023b6 <sound_task_state_2_laser+0xbe>
	if (sound_task->laser_snd == 1){
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d14a      	bne.n	80023a6 <sound_task_state_2_laser+0xae>
		audio_buf_ptr = laser_buf;
 8002310:	4b2c      	ldr	r3, [pc, #176]	@ (80023c4 <sound_task_state_2_laser+0xcc>)
 8002312:	4a2d      	ldr	r2, [pc, #180]	@ (80023c8 <sound_task_state_2_laser+0xd0>)
 8002314:	601a      	str	r2, [r3, #0]
		audio_buf_len = laser_buf_len;
 8002316:	4b2d      	ldr	r3, [pc, #180]	@ (80023cc <sound_task_state_2_laser+0xd4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a2d      	ldr	r2, [pc, #180]	@ (80023d0 <sound_task_state_2_laser+0xd8>)
 800231c:	6013      	str	r3, [r2, #0]
		playing = 1;
 800231e:	4b28      	ldr	r3, [pc, #160]	@ (80023c0 <sound_task_state_2_laser+0xc8>)
 8002320:	2201      	movs	r2, #1
 8002322:	601a      	str	r2, [r3, #0]
		sample_index = 0;
 8002324:	4b2b      	ldr	r3, [pc, #172]	@ (80023d4 <sound_task_state_2_laser+0xdc>)
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(sound_task->htim, sound_task->chan, 0);  // reset PWM duty
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d105      	bne.n	800233e <sound_task_state_2_laser+0x46>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2200      	movs	r2, #0
 800233a:	635a      	str	r2, [r3, #52]	@ 0x34
 800233c:	e018      	b.n	8002370 <sound_task_state_2_laser+0x78>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b04      	cmp	r3, #4
 8002344:	d105      	bne.n	8002352 <sound_task_state_2_laser+0x5a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2300      	movs	r3, #0
 800234e:	6393      	str	r3, [r2, #56]	@ 0x38
 8002350:	e00e      	b.n	8002370 <sound_task_state_2_laser+0x78>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b08      	cmp	r3, #8
 8002358:	d105      	bne.n	8002366 <sound_task_state_2_laser+0x6e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	2300      	movs	r3, #0
 8002362:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002364:	e004      	b.n	8002370 <sound_task_state_2_laser+0x78>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	2300      	movs	r3, #0
 800236e:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_CLEAR_FLAG(sound_task->htim, TIM_FLAG_UPDATE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f06f 0201 	mvn.w	r2, #1
 800237a:	611a      	str	r2, [r3, #16]
		__HAL_TIM_ENABLE_IT(sound_task->htim, TIM_IT_UPDATE);      // enable update IRQ
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(sound_task->htim, sound_task->chan);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69da      	ldr	r2, [r3, #28]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	4619      	mov	r1, r3
 800239a:	4610      	mov	r0, r2
 800239c:	f003 fa32 	bl	8005804 <HAL_TIM_PWM_Start>
		sound_task->laser_snd = 0;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
	}

	if (playing == 0){
 80023a6:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <sound_task_state_2_laser+0xc8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d104      	bne.n	80023b8 <sound_task_state_2_laser+0xc0>
		sound_task->state = 6;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2206      	movs	r2, #6
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	e000      	b.n	80023b8 <sound_task_state_2_laser+0xc0>
	if (playing) return;
 80023b6:	bf00      	nop
	}

}
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200005ac 	.word	0x200005ac
 80023c4:	200005b0 	.word	0x200005b0
 80023c8:	0802f4b8 	.word	0x0802f4b8
 80023cc:	08048154 	.word	0x08048154
 80023d0:	200005a8 	.word	0x200005a8
 80023d4:	200005a0 	.word	0x200005a0

080023d8 <sound_task_state_3_hit>:
void sound_task_state_3_hit(SoundTask *sound_task)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	if (playing) {
 80023e0:	4b30      	ldr	r3, [pc, #192]	@ (80024a4 <sound_task_state_3_hit+0xcc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <sound_task_state_3_hit+0x18>
		sound_task->laser_snd = 0;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
		return;
 80023ee:	e055      	b.n	800249c <sound_task_state_3_hit+0xc4>
	}
	if (sound_task->hit_snd == 1){
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d14a      	bne.n	800248e <sound_task_state_3_hit+0xb6>
		audio_buf_ptr = hit_buf;
 80023f8:	4b2b      	ldr	r3, [pc, #172]	@ (80024a8 <sound_task_state_3_hit+0xd0>)
 80023fa:	4a2c      	ldr	r2, [pc, #176]	@ (80024ac <sound_task_state_3_hit+0xd4>)
 80023fc:	601a      	str	r2, [r3, #0]
		audio_buf_len = hit_buf_len;
 80023fe:	4b2c      	ldr	r3, [pc, #176]	@ (80024b0 <sound_task_state_3_hit+0xd8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a2c      	ldr	r2, [pc, #176]	@ (80024b4 <sound_task_state_3_hit+0xdc>)
 8002404:	6013      	str	r3, [r2, #0]
		playing = 1;
 8002406:	4b27      	ldr	r3, [pc, #156]	@ (80024a4 <sound_task_state_3_hit+0xcc>)
 8002408:	2201      	movs	r2, #1
 800240a:	601a      	str	r2, [r3, #0]
		sample_index = 0;
 800240c:	4b2a      	ldr	r3, [pc, #168]	@ (80024b8 <sound_task_state_3_hit+0xe0>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(sound_task->htim, sound_task->chan, 0);  // reset PWM duty
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d105      	bne.n	8002426 <sound_task_state_3_hit+0x4e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2200      	movs	r2, #0
 8002422:	635a      	str	r2, [r3, #52]	@ 0x34
 8002424:	e018      	b.n	8002458 <sound_task_state_3_hit+0x80>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	2b04      	cmp	r3, #4
 800242c:	d105      	bne.n	800243a <sound_task_state_3_hit+0x62>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	2300      	movs	r3, #0
 8002436:	6393      	str	r3, [r2, #56]	@ 0x38
 8002438:	e00e      	b.n	8002458 <sound_task_state_3_hit+0x80>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b08      	cmp	r3, #8
 8002440:	d105      	bne.n	800244e <sound_task_state_3_hit+0x76>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	2300      	movs	r3, #0
 800244a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800244c:	e004      	b.n	8002458 <sound_task_state_3_hit+0x80>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	2300      	movs	r3, #0
 8002456:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_CLEAR_FLAG(sound_task->htim, TIM_FLAG_UPDATE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f06f 0201 	mvn.w	r2, #1
 8002462:	611a      	str	r2, [r3, #16]
		__HAL_TIM_ENABLE_IT(sound_task->htim, TIM_IT_UPDATE);      // enable update IRQ
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(sound_task->htim, sound_task->chan);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69da      	ldr	r2, [r3, #28]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	4619      	mov	r1, r3
 8002482:	4610      	mov	r0, r2
 8002484:	f003 f9be 	bl	8005804 <HAL_TIM_PWM_Start>
		sound_task->hit_snd = 0;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	60da      	str	r2, [r3, #12]
	}

	if (playing == 0){
 800248e:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <sound_task_state_3_hit+0xcc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d102      	bne.n	800249c <sound_task_state_3_hit+0xc4>
		sound_task->state = 6;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2206      	movs	r2, #6
 800249a:	601a      	str	r2, [r3, #0]
	}

}
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	200005ac 	.word	0x200005ac
 80024a8:	200005b0 	.word	0x200005b0
 80024ac:	08017ab4 	.word	0x08017ab4
 80024b0:	0802f4b4 	.word	0x0802f4b4
 80024b4:	200005a8 	.word	0x200005a8
 80024b8:	200005a0 	.word	0x200005a0

080024bc <sound_task_state_4_win>:
void sound_task_state_4_win(SoundTask *sound_task)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	if (playing){
 80024c4:	4b31      	ldr	r3, [pc, #196]	@ (800258c <sound_task_state_4_win+0xd0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d006      	beq.n	80024da <sound_task_state_4_win+0x1e>
		sound_task->laser_snd = 0;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
		sound_task->hit_snd = 0;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	60da      	str	r2, [r3, #12]
		return;
 80024d8:	e055      	b.n	8002586 <sound_task_state_4_win+0xca>
	}
	if (sound_task->win_snd == 1){
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d14a      	bne.n	8002578 <sound_task_state_4_win+0xbc>
		audio_buf_ptr = game_over_buf;
 80024e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002590 <sound_task_state_4_win+0xd4>)
 80024e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002594 <sound_task_state_4_win+0xd8>)
 80024e6:	601a      	str	r2, [r3, #0]
		audio_buf_len = game_over_buf_len;
 80024e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002598 <sound_task_state_4_win+0xdc>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a2b      	ldr	r2, [pc, #172]	@ (800259c <sound_task_state_4_win+0xe0>)
 80024ee:	6013      	str	r3, [r2, #0]
		playing = 1;
 80024f0:	4b26      	ldr	r3, [pc, #152]	@ (800258c <sound_task_state_4_win+0xd0>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]
		sample_index = 0;
 80024f6:	4b2a      	ldr	r3, [pc, #168]	@ (80025a0 <sound_task_state_4_win+0xe4>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(sound_task->htim, sound_task->chan, 0);  // reset PWM duty
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d105      	bne.n	8002510 <sound_task_state_4_win+0x54>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2200      	movs	r2, #0
 800250c:	635a      	str	r2, [r3, #52]	@ 0x34
 800250e:	e018      	b.n	8002542 <sound_task_state_4_win+0x86>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b04      	cmp	r3, #4
 8002516:	d105      	bne.n	8002524 <sound_task_state_4_win+0x68>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	2300      	movs	r3, #0
 8002520:	6393      	str	r3, [r2, #56]	@ 0x38
 8002522:	e00e      	b.n	8002542 <sound_task_state_4_win+0x86>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	2b08      	cmp	r3, #8
 800252a:	d105      	bne.n	8002538 <sound_task_state_4_win+0x7c>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	2300      	movs	r3, #0
 8002534:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002536:	e004      	b.n	8002542 <sound_task_state_4_win+0x86>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	2300      	movs	r3, #0
 8002540:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_CLEAR_FLAG(sound_task->htim, TIM_FLAG_UPDATE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0201 	mvn.w	r2, #1
 800254c:	611a      	str	r2, [r3, #16]
		__HAL_TIM_ENABLE_IT(sound_task->htim, TIM_IT_UPDATE);      // enable update IRQ
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(sound_task->htim, sound_task->chan);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	4619      	mov	r1, r3
 800256c:	4610      	mov	r0, r2
 800256e:	f003 f949 	bl	8005804 <HAL_TIM_PWM_Start>
		sound_task->win_snd = 0;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	615a      	str	r2, [r3, #20]
	}

	if (playing == 0){
 8002578:	4b04      	ldr	r3, [pc, #16]	@ (800258c <sound_task_state_4_win+0xd0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d102      	bne.n	8002586 <sound_task_state_4_win+0xca>
		sound_task->state = 6;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2206      	movs	r2, #6
 8002584:	601a      	str	r2, [r3, #0]
	}
}
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	200005ac 	.word	0x200005ac
 8002590:	200005b0 	.word	0x200005b0
 8002594:	080075b0 	.word	0x080075b0
 8002598:	08017ab0 	.word	0x08017ab0
 800259c:	200005a8 	.word	0x200005a8
 80025a0:	200005a0 	.word	0x200005a0

080025a4 <sound_task_state_5_start>:

void sound_task_state_5_start(SoundTask *sound_task)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	if (playing) {
 80025ac:	4b30      	ldr	r3, [pc, #192]	@ (8002670 <sound_task_state_5_start+0xcc>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <sound_task_state_5_start+0x18>
		sound_task->laser_snd = 0;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
		return;
 80025ba:	e055      	b.n	8002668 <sound_task_state_5_start+0xc4>
	}
	if (sound_task->start_snd == 1){
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d14a      	bne.n	800265a <sound_task_state_5_start+0xb6>
		audio_buf_ptr = start_buf;
 80025c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002674 <sound_task_state_5_start+0xd0>)
 80025c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002678 <sound_task_state_5_start+0xd4>)
 80025c8:	601a      	str	r2, [r3, #0]
		audio_buf_len = start_buf_len;
 80025ca:	4b2c      	ldr	r3, [pc, #176]	@ (800267c <sound_task_state_5_start+0xd8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002680 <sound_task_state_5_start+0xdc>)
 80025d0:	6013      	str	r3, [r2, #0]
		playing = 1;
 80025d2:	4b27      	ldr	r3, [pc, #156]	@ (8002670 <sound_task_state_5_start+0xcc>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	601a      	str	r2, [r3, #0]
		sample_index = 0;
 80025d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002684 <sound_task_state_5_start+0xe0>)
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(sound_task->htim, sound_task->chan, 0);  // reset PWM duty
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d105      	bne.n	80025f2 <sound_task_state_5_start+0x4e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2200      	movs	r2, #0
 80025ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80025f0:	e018      	b.n	8002624 <sound_task_state_5_start+0x80>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d105      	bne.n	8002606 <sound_task_state_5_start+0x62>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	2300      	movs	r3, #0
 8002602:	6393      	str	r3, [r2, #56]	@ 0x38
 8002604:	e00e      	b.n	8002624 <sound_task_state_5_start+0x80>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b08      	cmp	r3, #8
 800260c:	d105      	bne.n	800261a <sound_task_state_5_start+0x76>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2300      	movs	r3, #0
 8002616:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002618:	e004      	b.n	8002624 <sound_task_state_5_start+0x80>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	2300      	movs	r3, #0
 8002622:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_CLEAR_FLAG(sound_task->htim, TIM_FLAG_UPDATE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f06f 0201 	mvn.w	r2, #1
 800262e:	611a      	str	r2, [r3, #16]
		__HAL_TIM_ENABLE_IT(sound_task->htim, TIM_IT_UPDATE);      // enable update IRQ
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(sound_task->htim, sound_task->chan);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69da      	ldr	r2, [r3, #28]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	4619      	mov	r1, r3
 800264e:	4610      	mov	r0, r2
 8002650:	f003 f8d8 	bl	8005804 <HAL_TIM_PWM_Start>
		sound_task->start_snd = 0;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	611a      	str	r2, [r3, #16]
	}

	if (playing == 0){
 800265a:	4b05      	ldr	r3, [pc, #20]	@ (8002670 <sound_task_state_5_start+0xcc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d102      	bne.n	8002668 <sound_task_state_5_start+0xc4>
		sound_task->state = 6;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2206      	movs	r2, #6
 8002666:	601a      	str	r2, [r3, #0]
	}

}
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	200005ac 	.word	0x200005ac
 8002674:	200005b0 	.word	0x200005b0
 8002678:	0804815c 	.word	0x0804815c
 800267c:	08053e5c 	.word	0x08053e5c
 8002680:	200005a8 	.word	0x200005a8
 8002684:	200005a0 	.word	0x200005a0

08002688 <sound_task_state_6_stop>:
void sound_task_state_6_stop(SoundTask *sound_task){
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_DISABLE_IT(sound_task->htim, TIM_IT_UPDATE);     // turn off update IRQ
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Stop(sound_task->htim, sound_task->chan);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69da      	ldr	r2, [r3, #28]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	4619      	mov	r1, r3
 80026ae:	4610      	mov	r0, r2
 80026b0:	f003 f958 	bl	8005964 <HAL_TIM_PWM_Stop>
	sound_task->state = 1;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	601a      	str	r2, [r3, #0]
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	607b      	str	r3, [r7, #4]
 80026ce:	4b10      	ldr	r3, [pc, #64]	@ (8002710 <HAL_MspInit+0x4c>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	4a0f      	ldr	r2, [pc, #60]	@ (8002710 <HAL_MspInit+0x4c>)
 80026d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026da:	4b0d      	ldr	r3, [pc, #52]	@ (8002710 <HAL_MspInit+0x4c>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	4b09      	ldr	r3, [pc, #36]	@ (8002710 <HAL_MspInit+0x4c>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	4a08      	ldr	r2, [pc, #32]	@ (8002710 <HAL_MspInit+0x4c>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f6:	4b06      	ldr	r3, [pc, #24]	@ (8002710 <HAL_MspInit+0x4c>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800

08002714 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08a      	sub	sp, #40	@ 0x28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271c:	f107 0314 	add.w	r3, r7, #20
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a2f      	ldr	r2, [pc, #188]	@ (80027f0 <HAL_ADC_MspInit+0xdc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d158      	bne.n	80027e8 <HAL_ADC_MspInit+0xd4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	4b2e      	ldr	r3, [pc, #184]	@ (80027f4 <HAL_ADC_MspInit+0xe0>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273e:	4a2d      	ldr	r2, [pc, #180]	@ (80027f4 <HAL_ADC_MspInit+0xe0>)
 8002740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002744:	6453      	str	r3, [r2, #68]	@ 0x44
 8002746:	4b2b      	ldr	r3, [pc, #172]	@ (80027f4 <HAL_ADC_MspInit+0xe0>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	4b27      	ldr	r3, [pc, #156]	@ (80027f4 <HAL_ADC_MspInit+0xe0>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	4a26      	ldr	r2, [pc, #152]	@ (80027f4 <HAL_ADC_MspInit+0xe0>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6313      	str	r3, [r2, #48]	@ 0x30
 8002762:	4b24      	ldr	r3, [pc, #144]	@ (80027f4 <HAL_ADC_MspInit+0xe0>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800276e:	23f0      	movs	r3, #240	@ 0xf0
 8002770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002772:	2303      	movs	r3, #3
 8002774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	4619      	mov	r1, r3
 8002780:	481d      	ldr	r0, [pc, #116]	@ (80027f8 <HAL_ADC_MspInit+0xe4>)
 8002782:	f001 fc33 	bl	8003fec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002786:	4b1d      	ldr	r3, [pc, #116]	@ (80027fc <HAL_ADC_MspInit+0xe8>)
 8002788:	4a1d      	ldr	r2, [pc, #116]	@ (8002800 <HAL_ADC_MspInit+0xec>)
 800278a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800278c:	4b1b      	ldr	r3, [pc, #108]	@ (80027fc <HAL_ADC_MspInit+0xe8>)
 800278e:	2200      	movs	r2, #0
 8002790:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002792:	4b1a      	ldr	r3, [pc, #104]	@ (80027fc <HAL_ADC_MspInit+0xe8>)
 8002794:	2200      	movs	r2, #0
 8002796:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002798:	4b18      	ldr	r3, [pc, #96]	@ (80027fc <HAL_ADC_MspInit+0xe8>)
 800279a:	2200      	movs	r2, #0
 800279c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800279e:	4b17      	ldr	r3, [pc, #92]	@ (80027fc <HAL_ADC_MspInit+0xe8>)
 80027a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027a6:	4b15      	ldr	r3, [pc, #84]	@ (80027fc <HAL_ADC_MspInit+0xe8>)
 80027a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027ae:	4b13      	ldr	r3, [pc, #76]	@ (80027fc <HAL_ADC_MspInit+0xe8>)
 80027b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027b6:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <HAL_ADC_MspInit+0xe8>)
 80027b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80027be:	4b0f      	ldr	r3, [pc, #60]	@ (80027fc <HAL_ADC_MspInit+0xe8>)
 80027c0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80027c4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027c6:	4b0d      	ldr	r3, [pc, #52]	@ (80027fc <HAL_ADC_MspInit+0xe8>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027cc:	480b      	ldr	r0, [pc, #44]	@ (80027fc <HAL_ADC_MspInit+0xe8>)
 80027ce:	f001 f89d 	bl	800390c <HAL_DMA_Init>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80027d8:	f7ff fabc 	bl	8001d54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a07      	ldr	r2, [pc, #28]	@ (80027fc <HAL_ADC_MspInit+0xe8>)
 80027e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80027e2:	4a06      	ldr	r2, [pc, #24]	@ (80027fc <HAL_ADC_MspInit+0xe8>)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80027e8:	bf00      	nop
 80027ea:	3728      	adds	r7, #40	@ 0x28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40012000 	.word	0x40012000
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40020000 	.word	0x40020000
 80027fc:	20000328 	.word	0x20000328
 8002800:	40026410 	.word	0x40026410

08002804 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	@ 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a19      	ldr	r2, [pc, #100]	@ (8002888 <HAL_I2C_MspInit+0x84>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d12c      	bne.n	8002880 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	4b18      	ldr	r3, [pc, #96]	@ (800288c <HAL_I2C_MspInit+0x88>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	4a17      	ldr	r2, [pc, #92]	@ (800288c <HAL_I2C_MspInit+0x88>)
 8002830:	f043 0302 	orr.w	r3, r3, #2
 8002834:	6313      	str	r3, [r2, #48]	@ 0x30
 8002836:	4b15      	ldr	r3, [pc, #84]	@ (800288c <HAL_I2C_MspInit+0x88>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002842:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002848:	2312      	movs	r3, #18
 800284a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002850:	2303      	movs	r3, #3
 8002852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002854:	2304      	movs	r3, #4
 8002856:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	4619      	mov	r1, r3
 800285e:	480c      	ldr	r0, [pc, #48]	@ (8002890 <HAL_I2C_MspInit+0x8c>)
 8002860:	f001 fbc4 	bl	8003fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	4b08      	ldr	r3, [pc, #32]	@ (800288c <HAL_I2C_MspInit+0x88>)
 800286a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286c:	4a07      	ldr	r2, [pc, #28]	@ (800288c <HAL_I2C_MspInit+0x88>)
 800286e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002872:	6413      	str	r3, [r2, #64]	@ 0x40
 8002874:	4b05      	ldr	r3, [pc, #20]	@ (800288c <HAL_I2C_MspInit+0x88>)
 8002876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002878:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002880:	bf00      	nop
 8002882:	3728      	adds	r7, #40	@ 0x28
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40005400 	.word	0x40005400
 800288c:	40023800 	.word	0x40023800
 8002890:	40020400 	.word	0x40020400

08002894 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a15      	ldr	r2, [pc, #84]	@ (80028f8 <HAL_TIM_PWM_MspInit+0x64>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d10e      	bne.n	80028c4 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	4b14      	ldr	r3, [pc, #80]	@ (80028fc <HAL_TIM_PWM_MspInit+0x68>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	4a13      	ldr	r2, [pc, #76]	@ (80028fc <HAL_TIM_PWM_MspInit+0x68>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80028b6:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <HAL_TIM_PWM_MspInit+0x68>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028c2:	e012      	b.n	80028ea <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002900 <HAL_TIM_PWM_MspInit+0x6c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d10d      	bne.n	80028ea <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	4b0a      	ldr	r3, [pc, #40]	@ (80028fc <HAL_TIM_PWM_MspInit+0x68>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	4a09      	ldr	r2, [pc, #36]	@ (80028fc <HAL_TIM_PWM_MspInit+0x68>)
 80028d8:	f043 0304 	orr.w	r3, r3, #4
 80028dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80028de:	4b07      	ldr	r3, [pc, #28]	@ (80028fc <HAL_TIM_PWM_MspInit+0x68>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	60bb      	str	r3, [r7, #8]
 80028e8:	68bb      	ldr	r3, [r7, #8]
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40010000 	.word	0x40010000
 80028fc:	40023800 	.word	0x40023800
 8002900:	40000800 	.word	0x40000800

08002904 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002914:	d116      	bne.n	8002944 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b16      	ldr	r3, [pc, #88]	@ (8002974 <HAL_TIM_Base_MspInit+0x70>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	4a15      	ldr	r2, [pc, #84]	@ (8002974 <HAL_TIM_Base_MspInit+0x70>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6413      	str	r3, [r2, #64]	@ 0x40
 8002926:	4b13      	ldr	r3, [pc, #76]	@ (8002974 <HAL_TIM_Base_MspInit+0x70>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002932:	2200      	movs	r2, #0
 8002934:	2100      	movs	r1, #0
 8002936:	201c      	movs	r0, #28
 8002938:	f000 ffb1 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800293c:	201c      	movs	r0, #28
 800293e:	f000 ffca 	bl	80038d6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM9_MspInit 1 */

    /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002942:	e012      	b.n	800296a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM9)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a0b      	ldr	r2, [pc, #44]	@ (8002978 <HAL_TIM_Base_MspInit+0x74>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d10d      	bne.n	800296a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	4b08      	ldr	r3, [pc, #32]	@ (8002974 <HAL_TIM_Base_MspInit+0x70>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002956:	4a07      	ldr	r2, [pc, #28]	@ (8002974 <HAL_TIM_Base_MspInit+0x70>)
 8002958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800295c:	6453      	str	r3, [r2, #68]	@ 0x44
 800295e:	4b05      	ldr	r3, [pc, #20]	@ (8002974 <HAL_TIM_Base_MspInit+0x70>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
}
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800
 8002978:	40014000 	.word	0x40014000

0800297c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08c      	sub	sp, #48	@ 0x30
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002984:	f107 031c 	add.w	r3, r7, #28
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a32      	ldr	r2, [pc, #200]	@ (8002a64 <HAL_TIM_Encoder_MspInit+0xe8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d12c      	bne.n	80029f8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	4b31      	ldr	r3, [pc, #196]	@ (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	4a30      	ldr	r2, [pc, #192]	@ (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 80029a8:	f043 0302 	orr.w	r3, r3, #2
 80029ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ae:	4b2e      	ldr	r3, [pc, #184]	@ (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	61bb      	str	r3, [r7, #24]
 80029b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	4b2a      	ldr	r3, [pc, #168]	@ (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	4a29      	ldr	r2, [pc, #164]	@ (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 80029c4:	f043 0302 	orr.w	r3, r3, #2
 80029c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ca:	4b27      	ldr	r3, [pc, #156]	@ (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80029d6:	2330      	movs	r3, #48	@ 0x30
 80029d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e2:	2300      	movs	r3, #0
 80029e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029e6:	2302      	movs	r3, #2
 80029e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ea:	f107 031c 	add.w	r3, r7, #28
 80029ee:	4619      	mov	r1, r3
 80029f0:	481e      	ldr	r0, [pc, #120]	@ (8002a6c <HAL_TIM_Encoder_MspInit+0xf0>)
 80029f2:	f001 fafb 	bl	8003fec <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 80029f6:	e030      	b.n	8002a5a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002a70 <HAL_TIM_Encoder_MspInit+0xf4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d12b      	bne.n	8002a5a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	4b18      	ldr	r3, [pc, #96]	@ (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	4a17      	ldr	r2, [pc, #92]	@ (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a0c:	f043 0308 	orr.w	r3, r3, #8
 8002a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a12:	4b15      	ldr	r3, [pc, #84]	@ (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b11      	ldr	r3, [pc, #68]	@ (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	4a10      	ldr	r2, [pc, #64]	@ (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a68 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a46:	2300      	movs	r3, #0
 8002a48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4e:	f107 031c 	add.w	r3, r7, #28
 8002a52:	4619      	mov	r1, r3
 8002a54:	4807      	ldr	r0, [pc, #28]	@ (8002a74 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002a56:	f001 fac9 	bl	8003fec <HAL_GPIO_Init>
}
 8002a5a:	bf00      	nop
 8002a5c:	3730      	adds	r7, #48	@ 0x30
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40000400 	.word	0x40000400
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	40000c00 	.word	0x40000c00
 8002a74:	40020000 	.word	0x40020000

08002a78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08a      	sub	sp, #40	@ 0x28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a80:	f107 0314 	add.w	r3, r7, #20
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a37      	ldr	r2, [pc, #220]	@ (8002b74 <HAL_TIM_MspPostInit+0xfc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d11f      	bne.n	8002ada <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	4b36      	ldr	r3, [pc, #216]	@ (8002b78 <HAL_TIM_MspPostInit+0x100>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	4a35      	ldr	r2, [pc, #212]	@ (8002b78 <HAL_TIM_MspPostInit+0x100>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aaa:	4b33      	ldr	r3, [pc, #204]	@ (8002b78 <HAL_TIM_MspPostInit+0x100>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002ab6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	482a      	ldr	r0, [pc, #168]	@ (8002b7c <HAL_TIM_MspPostInit+0x104>)
 8002ad4:	f001 fa8a 	bl	8003fec <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002ad8:	e047      	b.n	8002b6a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ae2:	d11f      	bne.n	8002b24 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	4b23      	ldr	r3, [pc, #140]	@ (8002b78 <HAL_TIM_MspPostInit+0x100>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aec:	4a22      	ldr	r2, [pc, #136]	@ (8002b78 <HAL_TIM_MspPostInit+0x100>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af4:	4b20      	ldr	r3, [pc, #128]	@ (8002b78 <HAL_TIM_MspPostInit+0x100>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b12:	2301      	movs	r3, #1
 8002b14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b16:	f107 0314 	add.w	r3, r7, #20
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4817      	ldr	r0, [pc, #92]	@ (8002b7c <HAL_TIM_MspPostInit+0x104>)
 8002b1e:	f001 fa65 	bl	8003fec <HAL_GPIO_Init>
}
 8002b22:	e022      	b.n	8002b6a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a15      	ldr	r2, [pc, #84]	@ (8002b80 <HAL_TIM_MspPostInit+0x108>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d11d      	bne.n	8002b6a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	4b11      	ldr	r3, [pc, #68]	@ (8002b78 <HAL_TIM_MspPostInit+0x100>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	4a10      	ldr	r2, [pc, #64]	@ (8002b78 <HAL_TIM_MspPostInit+0x100>)
 8002b38:	f043 0302 	orr.w	r3, r3, #2
 8002b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b78 <HAL_TIM_MspPostInit+0x100>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b4a:	23c0      	movs	r3, #192	@ 0xc0
 8002b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	2300      	movs	r3, #0
 8002b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5e:	f107 0314 	add.w	r3, r7, #20
 8002b62:	4619      	mov	r1, r3
 8002b64:	4807      	ldr	r0, [pc, #28]	@ (8002b84 <HAL_TIM_MspPostInit+0x10c>)
 8002b66:	f001 fa41 	bl	8003fec <HAL_GPIO_Init>
}
 8002b6a:	bf00      	nop
 8002b6c:	3728      	adds	r7, #40	@ 0x28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40010000 	.word	0x40010000
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40020000 	.word	0x40020000
 8002b80:	40000800 	.word	0x40000800
 8002b84:	40020400 	.word	0x40020400

08002b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b8c:	bf00      	nop
 8002b8e:	e7fd      	b.n	8002b8c <NMI_Handler+0x4>

08002b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b94:	bf00      	nop
 8002b96:	e7fd      	b.n	8002b94 <HardFault_Handler+0x4>

08002b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b9c:	bf00      	nop
 8002b9e:	e7fd      	b.n	8002b9c <MemManage_Handler+0x4>

08002ba0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ba4:	bf00      	nop
 8002ba6:	e7fd      	b.n	8002ba4 <BusFault_Handler+0x4>

08002ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bac:	bf00      	nop
 8002bae:	e7fd      	b.n	8002bac <UsageFault_Handler+0x4>

08002bb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bde:	f000 f939 	bl	8002e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE)) {
 8002bee:	4b25      	ldr	r3, [pc, #148]	@ (8002c84 <TIM2_IRQHandler+0x9c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d13b      	bne.n	8002c74 <TIM2_IRQHandler+0x8c>
	    __HAL_TIM_CLEAR_IT(&htim2, TIM_FLAG_UPDATE);
 8002bfc:	4b21      	ldr	r3, [pc, #132]	@ (8002c84 <TIM2_IRQHandler+0x9c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f06f 0201 	mvn.w	r2, #1
 8002c04:	611a      	str	r2, [r3, #16]
	    if (playing) {
 8002c06:	4b20      	ldr	r3, [pc, #128]	@ (8002c88 <TIM2_IRQHandler+0xa0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d032      	beq.n	8002c74 <TIM2_IRQHandler+0x8c>
	    // every N PWM ticks, step one audio sample
			if (++pwm_div_count >= STEP_RATIO) {
 8002c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8002c8c <TIM2_IRQHandler+0xa4>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	3301      	adds	r3, #1
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	4a1c      	ldr	r2, [pc, #112]	@ (8002c8c <TIM2_IRQHandler+0xa4>)
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	7011      	strb	r1, [r2, #0]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d928      	bls.n	8002c74 <TIM2_IRQHandler+0x8c>
				pwm_div_count = 0;
 8002c22:	4b1a      	ldr	r3, [pc, #104]	@ (8002c8c <TIM2_IRQHandler+0xa4>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]

				// fetch the next sample from your C array
				int16_t s = audio_buf_ptr[sample_index++];
 8002c28:	4b19      	ldr	r3, [pc, #100]	@ (8002c90 <TIM2_IRQHandler+0xa8>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4b19      	ldr	r3, [pc, #100]	@ (8002c94 <TIM2_IRQHandler+0xac>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	1c59      	adds	r1, r3, #1
 8002c32:	4818      	ldr	r0, [pc, #96]	@ (8002c94 <TIM2_IRQHandler+0xac>)
 8002c34:	6001      	str	r1, [r0, #0]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	80fb      	strh	r3, [r7, #6]
				if (sample_index >= audio_buf_len){
 8002c3e:	4b15      	ldr	r3, [pc, #84]	@ (8002c94 <TIM2_IRQHandler+0xac>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <TIM2_IRQHandler+0xb0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d302      	bcc.n	8002c50 <TIM2_IRQHandler+0x68>
					playing = 0;
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c88 <TIM2_IRQHandler+0xa0>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
				}

							// map signed 16-bit [-32768..+32767] to CCR range [0..ARR]
				uint32_t duty = ((uint32_t)(s + 32768) * (htim2.Init.Period)) / 65535;
 8002c50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c54:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c84 <TIM2_IRQHandler+0x9c>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	fb02 f303 	mul.w	r3, r2, r3
 8002c62:	4a0e      	ldr	r2, [pc, #56]	@ (8002c9c <TIM2_IRQHandler+0xb4>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	0bdb      	lsrs	r3, r3, #15
 8002c6a:	603b      	str	r3, [r7, #0]
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8002c6c:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <TIM2_IRQHandler+0x9c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	635a      	str	r2, [r3, #52]	@ 0x34
				}
	    }
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c74:	4803      	ldr	r0, [pc, #12]	@ (8002c84 <TIM2_IRQHandler+0x9c>)
 8002c76:	f003 f90b 	bl	8005e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000424 	.word	0x20000424
 8002c88:	200005ac 	.word	0x200005ac
 8002c8c:	200005a4 	.word	0x200005a4
 8002c90:	200005b0 	.word	0x200005b0
 8002c94:	200005a0 	.word	0x200005a0
 8002c98:	200005a8 	.word	0x200005a8
 8002c9c:	80008001 	.word	0x80008001

08002ca0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002ca4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002ca8:	f001 fb56 	bl	8004358 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002cac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002cb0:	f001 fb52 	bl	8004358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002cbc:	4802      	ldr	r0, [pc, #8]	@ (8002cc8 <DMA2_Stream0_IRQHandler+0x10>)
 8002cbe:	f000 ff2b 	bl	8003b18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000328 	.word	0x20000328

08002ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cd4:	4a14      	ldr	r2, [pc, #80]	@ (8002d28 <_sbrk+0x5c>)
 8002cd6:	4b15      	ldr	r3, [pc, #84]	@ (8002d2c <_sbrk+0x60>)
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ce0:	4b13      	ldr	r3, [pc, #76]	@ (8002d30 <_sbrk+0x64>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d102      	bne.n	8002cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ce8:	4b11      	ldr	r3, [pc, #68]	@ (8002d30 <_sbrk+0x64>)
 8002cea:	4a12      	ldr	r2, [pc, #72]	@ (8002d34 <_sbrk+0x68>)
 8002cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cee:	4b10      	ldr	r3, [pc, #64]	@ (8002d30 <_sbrk+0x64>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d207      	bcs.n	8002d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cfc:	f003 ff44 	bl	8006b88 <__errno>
 8002d00:	4603      	mov	r3, r0
 8002d02:	220c      	movs	r2, #12
 8002d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d0a:	e009      	b.n	8002d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d0c:	4b08      	ldr	r3, [pc, #32]	@ (8002d30 <_sbrk+0x64>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d12:	4b07      	ldr	r3, [pc, #28]	@ (8002d30 <_sbrk+0x64>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	4a05      	ldr	r2, [pc, #20]	@ (8002d30 <_sbrk+0x64>)
 8002d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20020000 	.word	0x20020000
 8002d2c:	00000400 	.word	0x00000400
 8002d30:	200005b4 	.word	0x200005b4
 8002d34:	20000708 	.word	0x20000708

08002d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d3c:	4b06      	ldr	r3, [pc, #24]	@ (8002d58 <SystemInit+0x20>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d42:	4a05      	ldr	r2, [pc, #20]	@ (8002d58 <SystemInit+0x20>)
 8002d44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d60:	f7ff ffea 	bl	8002d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d64:	480c      	ldr	r0, [pc, #48]	@ (8002d98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d66:	490d      	ldr	r1, [pc, #52]	@ (8002d9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d68:	4a0d      	ldr	r2, [pc, #52]	@ (8002da0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d6c:	e002      	b.n	8002d74 <LoopCopyDataInit>

08002d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d72:	3304      	adds	r3, #4

08002d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d78:	d3f9      	bcc.n	8002d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002da4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d7c:	4c0a      	ldr	r4, [pc, #40]	@ (8002da8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d80:	e001      	b.n	8002d86 <LoopFillZerobss>

08002d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d84:	3204      	adds	r2, #4

08002d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d88:	d3fb      	bcc.n	8002d82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d8a:	f003 ff03 	bl	8006b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d8e:	f7fe f8a9 	bl	8000ee4 <main>
  bx  lr    
 8002d92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d9c:	200002bc 	.word	0x200002bc
  ldr r2, =_sidata
 8002da0:	08053ec4 	.word	0x08053ec4
  ldr r2, =_sbss
 8002da4:	200002bc 	.word	0x200002bc
  ldr r4, =_ebss
 8002da8:	20000704 	.word	0x20000704

08002dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dac:	e7fe      	b.n	8002dac <ADC_IRQHandler>
	...

08002db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002db4:	4b0e      	ldr	r3, [pc, #56]	@ (8002df0 <HAL_Init+0x40>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a0d      	ldr	r2, [pc, #52]	@ (8002df0 <HAL_Init+0x40>)
 8002dba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <HAL_Init+0x40>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8002df0 <HAL_Init+0x40>)
 8002dc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dcc:	4b08      	ldr	r3, [pc, #32]	@ (8002df0 <HAL_Init+0x40>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a07      	ldr	r2, [pc, #28]	@ (8002df0 <HAL_Init+0x40>)
 8002dd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dd8:	2003      	movs	r0, #3
 8002dda:	f000 fd55 	bl	8003888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dde:	200f      	movs	r0, #15
 8002de0:	f000 f808 	bl	8002df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002de4:	f7ff fc6e 	bl	80026c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40023c00 	.word	0x40023c00

08002df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dfc:	4b12      	ldr	r3, [pc, #72]	@ (8002e48 <HAL_InitTick+0x54>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <HAL_InitTick+0x58>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	4619      	mov	r1, r3
 8002e06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fd6d 	bl	80038f2 <HAL_SYSTICK_Config>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e00e      	b.n	8002e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b0f      	cmp	r3, #15
 8002e26:	d80a      	bhi.n	8002e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e30:	f000 fd35 	bl	800389e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e34:	4a06      	ldr	r2, [pc, #24]	@ (8002e50 <HAL_InitTick+0x5c>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e000      	b.n	8002e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000260 	.word	0x20000260
 8002e4c:	20000268 	.word	0x20000268
 8002e50:	20000264 	.word	0x20000264

08002e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e58:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <HAL_IncTick+0x20>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4b06      	ldr	r3, [pc, #24]	@ (8002e78 <HAL_IncTick+0x24>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4413      	add	r3, r2
 8002e64:	4a04      	ldr	r2, [pc, #16]	@ (8002e78 <HAL_IncTick+0x24>)
 8002e66:	6013      	str	r3, [r2, #0]
}
 8002e68:	bf00      	nop
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000268 	.word	0x20000268
 8002e78:	200005b8 	.word	0x200005b8

08002e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e80:	4b03      	ldr	r3, [pc, #12]	@ (8002e90 <HAL_GetTick+0x14>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	200005b8 	.word	0x200005b8

08002e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e9c:	f7ff ffee 	bl	8002e7c <HAL_GetTick>
 8002ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002eac:	d005      	beq.n	8002eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed8 <HAL_Delay+0x44>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eba:	bf00      	nop
 8002ebc:	f7ff ffde 	bl	8002e7c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d8f7      	bhi.n	8002ebc <HAL_Delay+0x28>
  {
  }
}
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000268 	.word	0x20000268

08002edc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e033      	b.n	8002f5a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff fc0a 	bl	8002714 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d118      	bne.n	8002f4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f22:	f023 0302 	bic.w	r3, r3, #2
 8002f26:	f043 0202 	orr.w	r2, r3, #2
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fa5c 	bl	80033ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	f023 0303 	bic.w	r3, r3, #3
 8002f42:	f043 0201 	orr.w	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f4a:	e001      	b.n	8002f50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_ADC_Start_DMA+0x22>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e0d0      	b.n	8003128 <HAL_ADC_Start_DMA+0x1c4>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d018      	beq.n	8002fce <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fac:	4b60      	ldr	r3, [pc, #384]	@ (8003130 <HAL_ADC_Start_DMA+0x1cc>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a60      	ldr	r2, [pc, #384]	@ (8003134 <HAL_ADC_Start_DMA+0x1d0>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	0c9a      	lsrs	r2, r3, #18
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002fc0:	e002      	b.n	8002fc8 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f9      	bne.n	8002fc2 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fdc:	d107      	bne.n	8002fee <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fec:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	f040 8088 	bne.w	800310e <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800301c:	2b00      	cmp	r3, #0
 800301e:	d007      	beq.n	8003030 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003028:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003034:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800303c:	d106      	bne.n	800304c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003042:	f023 0206 	bic.w	r2, r3, #6
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	645a      	str	r2, [r3, #68]	@ 0x44
 800304a:	e002      	b.n	8003052 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800305a:	4b37      	ldr	r3, [pc, #220]	@ (8003138 <HAL_ADC_Start_DMA+0x1d4>)
 800305c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003062:	4a36      	ldr	r2, [pc, #216]	@ (800313c <HAL_ADC_Start_DMA+0x1d8>)
 8003064:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306a:	4a35      	ldr	r2, [pc, #212]	@ (8003140 <HAL_ADC_Start_DMA+0x1dc>)
 800306c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003072:	4a34      	ldr	r2, [pc, #208]	@ (8003144 <HAL_ADC_Start_DMA+0x1e0>)
 8003074:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800307e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800308e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800309e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	334c      	adds	r3, #76	@ 0x4c
 80030aa:	4619      	mov	r1, r3
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f000 fcda 	bl	8003a68 <HAL_DMA_Start_IT>
 80030b4:	4603      	mov	r3, r0
 80030b6:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10f      	bne.n	80030e4 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d129      	bne.n	8003126 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80030e0:	609a      	str	r2, [r3, #8]
 80030e2:	e020      	b.n	8003126 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a17      	ldr	r2, [pc, #92]	@ (8003148 <HAL_ADC_Start_DMA+0x1e4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d11b      	bne.n	8003126 <HAL_ADC_Start_DMA+0x1c2>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d114      	bne.n	8003126 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	e00b      	b.n	8003126 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	f043 0210 	orr.w	r2, r3, #16
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311e:	f043 0201 	orr.w	r2, r3, #1
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003126:	7ffb      	ldrb	r3, [r7, #31]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3720      	adds	r7, #32
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20000260 	.word	0x20000260
 8003134:	431bde83 	.word	0x431bde83
 8003138:	40012300 	.word	0x40012300
 800313c:	080035e5 	.word	0x080035e5
 8003140:	0800369f 	.word	0x0800369f
 8003144:	080036bb 	.word	0x080036bb
 8003148:	40012000 	.word	0x40012000

0800314c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x1c>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e113      	b.n	80033cc <HAL_ADC_ConfigChannel+0x244>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b09      	cmp	r3, #9
 80031b2:	d925      	bls.n	8003200 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68d9      	ldr	r1, [r3, #12]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	4613      	mov	r3, r2
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	4413      	add	r3, r2
 80031c8:	3b1e      	subs	r3, #30
 80031ca:	2207      	movs	r2, #7
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43da      	mvns	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	400a      	ands	r2, r1
 80031d8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68d9      	ldr	r1, [r3, #12]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	4618      	mov	r0, r3
 80031ec:	4603      	mov	r3, r0
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	4403      	add	r3, r0
 80031f2:	3b1e      	subs	r3, #30
 80031f4:	409a      	lsls	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	e022      	b.n	8003246 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6919      	ldr	r1, [r3, #16]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	4613      	mov	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	2207      	movs	r2, #7
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43da      	mvns	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	400a      	ands	r2, r1
 8003222:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6919      	ldr	r1, [r3, #16]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	b29b      	uxth	r3, r3
 8003234:	4618      	mov	r0, r3
 8003236:	4603      	mov	r3, r0
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4403      	add	r3, r0
 800323c:	409a      	lsls	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b06      	cmp	r3, #6
 800324c:	d824      	bhi.n	8003298 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	3b05      	subs	r3, #5
 8003260:	221f      	movs	r2, #31
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43da      	mvns	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	400a      	ands	r2, r1
 800326e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	b29b      	uxth	r3, r3
 800327c:	4618      	mov	r0, r3
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	3b05      	subs	r3, #5
 800328a:	fa00 f203 	lsl.w	r2, r0, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	635a      	str	r2, [r3, #52]	@ 0x34
 8003296:	e04c      	b.n	8003332 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b0c      	cmp	r3, #12
 800329e:	d824      	bhi.n	80032ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	3b23      	subs	r3, #35	@ 0x23
 80032b2:	221f      	movs	r2, #31
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43da      	mvns	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	400a      	ands	r2, r1
 80032c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	4618      	mov	r0, r3
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	3b23      	subs	r3, #35	@ 0x23
 80032dc:	fa00 f203 	lsl.w	r2, r0, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80032e8:	e023      	b.n	8003332 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	3b41      	subs	r3, #65	@ 0x41
 80032fc:	221f      	movs	r2, #31
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43da      	mvns	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	400a      	ands	r2, r1
 800330a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	4618      	mov	r0, r3
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	3b41      	subs	r3, #65	@ 0x41
 8003326:	fa00 f203 	lsl.w	r2, r0, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003332:	4b29      	ldr	r3, [pc, #164]	@ (80033d8 <HAL_ADC_ConfigChannel+0x250>)
 8003334:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a28      	ldr	r2, [pc, #160]	@ (80033dc <HAL_ADC_ConfigChannel+0x254>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d10f      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x1d8>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b12      	cmp	r3, #18
 8003346:	d10b      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1d      	ldr	r2, [pc, #116]	@ (80033dc <HAL_ADC_ConfigChannel+0x254>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d12b      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x23a>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1c      	ldr	r2, [pc, #112]	@ (80033e0 <HAL_ADC_ConfigChannel+0x258>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d003      	beq.n	800337c <HAL_ADC_ConfigChannel+0x1f4>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b11      	cmp	r3, #17
 800337a:	d122      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a11      	ldr	r2, [pc, #68]	@ (80033e0 <HAL_ADC_ConfigChannel+0x258>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d111      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800339e:	4b11      	ldr	r3, [pc, #68]	@ (80033e4 <HAL_ADC_ConfigChannel+0x25c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a11      	ldr	r2, [pc, #68]	@ (80033e8 <HAL_ADC_ConfigChannel+0x260>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	0c9a      	lsrs	r2, r3, #18
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80033b4:	e002      	b.n	80033bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f9      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	40012300 	.word	0x40012300
 80033dc:	40012000 	.word	0x40012000
 80033e0:	10000012 	.word	0x10000012
 80033e4:	20000260 	.word	0x20000260
 80033e8:	431bde83 	.word	0x431bde83

080033ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033f4:	4b79      	ldr	r3, [pc, #484]	@ (80035dc <ADC_Init+0x1f0>)
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	431a      	orrs	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003420:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6859      	ldr	r1, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	021a      	lsls	r2, r3, #8
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6859      	ldr	r1, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003466:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6899      	ldr	r1, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347e:	4a58      	ldr	r2, [pc, #352]	@ (80035e0 <ADC_Init+0x1f4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d022      	beq.n	80034ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003492:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6899      	ldr	r1, [r3, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6899      	ldr	r1, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	e00f      	b.n	80034ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0202 	bic.w	r2, r2, #2
 80034f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6899      	ldr	r1, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	7e1b      	ldrb	r3, [r3, #24]
 8003504:	005a      	lsls	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01b      	beq.n	8003550 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003526:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003536:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6859      	ldr	r1, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003542:	3b01      	subs	r3, #1
 8003544:	035a      	lsls	r2, r3, #13
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
 800354e:	e007      	b.n	8003560 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800355e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800356e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	3b01      	subs	r3, #1
 800357c:	051a      	lsls	r2, r3, #20
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003594:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6899      	ldr	r1, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80035a2:	025a      	lsls	r2, r3, #9
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6899      	ldr	r1, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	029a      	lsls	r2, r3, #10
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	609a      	str	r2, [r3, #8]
}
 80035d0:	bf00      	nop
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	40012300 	.word	0x40012300
 80035e0:	0f000001 	.word	0x0f000001

080035e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d13c      	bne.n	8003678 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d12b      	bne.n	8003670 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800361c:	2b00      	cmp	r3, #0
 800361e:	d127      	bne.n	8003670 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003626:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800362a:	2b00      	cmp	r3, #0
 800362c:	d006      	beq.n	800363c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003638:	2b00      	cmp	r3, #0
 800363a:	d119      	bne.n	8003670 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0220 	bic.w	r2, r2, #32
 800364a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003650:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d105      	bne.n	8003670 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003668:	f043 0201 	orr.w	r2, r3, #1
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f7ff fd6b 	bl	800314c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003676:	e00e      	b.n	8003696 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fd75 	bl	8003174 <HAL_ADC_ErrorCallback>
}
 800368a:	e004      	b.n	8003696 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4798      	blx	r3
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036aa:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f7ff fd57 	bl	8003160 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2240      	movs	r2, #64	@ 0x40
 80036cc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d2:	f043 0204 	orr.w	r2, r3, #4
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f7ff fd4a 	bl	8003174 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036e0:	bf00      	nop
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036f8:	4b0c      	ldr	r3, [pc, #48]	@ (800372c <__NVIC_SetPriorityGrouping+0x44>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003704:	4013      	ands	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003710:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800371a:	4a04      	ldr	r2, [pc, #16]	@ (800372c <__NVIC_SetPriorityGrouping+0x44>)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	60d3      	str	r3, [r2, #12]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003734:	4b04      	ldr	r3, [pc, #16]	@ (8003748 <__NVIC_GetPriorityGrouping+0x18>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	f003 0307 	and.w	r3, r3, #7
}
 800373e:	4618      	mov	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375a:	2b00      	cmp	r3, #0
 800375c:	db0b      	blt.n	8003776 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	f003 021f 	and.w	r2, r3, #31
 8003764:	4907      	ldr	r1, [pc, #28]	@ (8003784 <__NVIC_EnableIRQ+0x38>)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	2001      	movs	r0, #1
 800376e:	fa00 f202 	lsl.w	r2, r0, r2
 8003772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	e000e100 	.word	0xe000e100

08003788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	6039      	str	r1, [r7, #0]
 8003792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003798:	2b00      	cmp	r3, #0
 800379a:	db0a      	blt.n	80037b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	490c      	ldr	r1, [pc, #48]	@ (80037d4 <__NVIC_SetPriority+0x4c>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	0112      	lsls	r2, r2, #4
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	440b      	add	r3, r1
 80037ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b0:	e00a      	b.n	80037c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	4908      	ldr	r1, [pc, #32]	@ (80037d8 <__NVIC_SetPriority+0x50>)
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	3b04      	subs	r3, #4
 80037c0:	0112      	lsls	r2, r2, #4
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	440b      	add	r3, r1
 80037c6:	761a      	strb	r2, [r3, #24]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000e100 	.word	0xe000e100
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037dc:	b480      	push	{r7}
 80037de:	b089      	sub	sp, #36	@ 0x24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f1c3 0307 	rsb	r3, r3, #7
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	bf28      	it	cs
 80037fa:	2304      	movcs	r3, #4
 80037fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3304      	adds	r3, #4
 8003802:	2b06      	cmp	r3, #6
 8003804:	d902      	bls.n	800380c <NVIC_EncodePriority+0x30>
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3b03      	subs	r3, #3
 800380a:	e000      	b.n	800380e <NVIC_EncodePriority+0x32>
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003810:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43da      	mvns	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	401a      	ands	r2, r3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003824:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	43d9      	mvns	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003834:	4313      	orrs	r3, r2
         );
}
 8003836:	4618      	mov	r0, r3
 8003838:	3724      	adds	r7, #36	@ 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3b01      	subs	r3, #1
 8003850:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003854:	d301      	bcc.n	800385a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003856:	2301      	movs	r3, #1
 8003858:	e00f      	b.n	800387a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800385a:	4a0a      	ldr	r2, [pc, #40]	@ (8003884 <SysTick_Config+0x40>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003862:	210f      	movs	r1, #15
 8003864:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003868:	f7ff ff8e 	bl	8003788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800386c:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <SysTick_Config+0x40>)
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003872:	4b04      	ldr	r3, [pc, #16]	@ (8003884 <SysTick_Config+0x40>)
 8003874:	2207      	movs	r2, #7
 8003876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	e000e010 	.word	0xe000e010

08003888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff29 	bl	80036e8 <__NVIC_SetPriorityGrouping>
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800389e:	b580      	push	{r7, lr}
 80038a0:	b086      	sub	sp, #24
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	4603      	mov	r3, r0
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038b0:	f7ff ff3e 	bl	8003730 <__NVIC_GetPriorityGrouping>
 80038b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	6978      	ldr	r0, [r7, #20]
 80038bc:	f7ff ff8e 	bl	80037dc <NVIC_EncodePriority>
 80038c0:	4602      	mov	r2, r0
 80038c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c6:	4611      	mov	r1, r2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff5d 	bl	8003788 <__NVIC_SetPriority>
}
 80038ce:	bf00      	nop
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	4603      	mov	r3, r0
 80038de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff ff31 	bl	800374c <__NVIC_EnableIRQ>
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff ffa2 	bl	8003844 <SysTick_Config>
 8003900:	4603      	mov	r3, r0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003918:	f7ff fab0 	bl	8002e7c <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e099      	b.n	8003a5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003948:	e00f      	b.n	800396a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800394a:	f7ff fa97 	bl	8002e7c <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b05      	cmp	r3, #5
 8003956:	d908      	bls.n	800396a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2203      	movs	r2, #3
 8003962:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e078      	b.n	8003a5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e8      	bne.n	800394a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	4b38      	ldr	r3, [pc, #224]	@ (8003a64 <HAL_DMA_Init+0x158>)
 8003984:	4013      	ands	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003996:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d107      	bne.n	80039d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039cc:	4313      	orrs	r3, r2
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f023 0307 	bic.w	r3, r3, #7
 80039ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d117      	bne.n	8003a2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00e      	beq.n	8003a2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 fa6f 	bl	8003ef4 <DMA_CheckFifoParam>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2240      	movs	r2, #64	@ 0x40
 8003a20:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e016      	b.n	8003a5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fa26 	bl	8003e88 <DMA_CalcBaseAndBitshift>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a44:	223f      	movs	r2, #63	@ 0x3f
 8003a46:	409a      	lsls	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	f010803f 	.word	0xf010803f

08003a68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_DMA_Start_IT+0x26>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e040      	b.n	8003b10 <HAL_DMA_Start_IT+0xa8>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d12f      	bne.n	8003b02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f9b8 	bl	8003e2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac0:	223f      	movs	r2, #63	@ 0x3f
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0216 	orr.w	r2, r2, #22
 8003ad6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d007      	beq.n	8003af0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0208 	orr.w	r2, r2, #8
 8003aee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	e005      	b.n	8003b0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b24:	4b8e      	ldr	r3, [pc, #568]	@ (8003d60 <HAL_DMA_IRQHandler+0x248>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a8e      	ldr	r2, [pc, #568]	@ (8003d64 <HAL_DMA_IRQHandler+0x24c>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	0a9b      	lsrs	r3, r3, #10
 8003b30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b42:	2208      	movs	r2, #8
 8003b44:	409a      	lsls	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01a      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d013      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0204 	bic.w	r2, r2, #4
 8003b6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b70:	2208      	movs	r2, #8
 8003b72:	409a      	lsls	r2, r3
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b7c:	f043 0201 	orr.w	r2, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b88:	2201      	movs	r2, #1
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d012      	beq.n	8003bba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	409a      	lsls	r2, r3
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb2:	f043 0202 	orr.w	r2, r3, #2
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bbe:	2204      	movs	r2, #4
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d012      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00b      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bdc:	2204      	movs	r2, #4
 8003bde:	409a      	lsls	r2, r3
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be8:	f043 0204 	orr.w	r2, r3, #4
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf4:	2210      	movs	r2, #16
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d043      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d03c      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c12:	2210      	movs	r2, #16
 8003c14:	409a      	lsls	r2, r3
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d018      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d108      	bne.n	8003c48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d024      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	4798      	blx	r3
 8003c46:	e01f      	b.n	8003c88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d01b      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	4798      	blx	r3
 8003c58:	e016      	b.n	8003c88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d107      	bne.n	8003c78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0208 	bic.w	r2, r2, #8
 8003c76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 808f 	beq.w	8003db8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8087 	beq.w	8003db8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cae:	2220      	movs	r2, #32
 8003cb0:	409a      	lsls	r2, r3
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b05      	cmp	r3, #5
 8003cc0:	d136      	bne.n	8003d30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0216 	bic.w	r2, r2, #22
 8003cd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695a      	ldr	r2, [r3, #20]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ce0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d103      	bne.n	8003cf2 <HAL_DMA_IRQHandler+0x1da>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d007      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0208 	bic.w	r2, r2, #8
 8003d00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d06:	223f      	movs	r2, #63	@ 0x3f
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d07e      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	4798      	blx	r3
        }
        return;
 8003d2e:	e079      	b.n	8003e24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01d      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10d      	bne.n	8003d68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d031      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	4798      	blx	r3
 8003d5c:	e02c      	b.n	8003db8 <HAL_DMA_IRQHandler+0x2a0>
 8003d5e:	bf00      	nop
 8003d60:	20000260 	.word	0x20000260
 8003d64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d023      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	4798      	blx	r3
 8003d78:	e01e      	b.n	8003db8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10f      	bne.n	8003da8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0210 	bic.w	r2, r2, #16
 8003d96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d032      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d022      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2205      	movs	r2, #5
 8003dd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0201 	bic.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	3301      	adds	r3, #1
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d307      	bcc.n	8003e00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f2      	bne.n	8003de4 <HAL_DMA_IRQHandler+0x2cc>
 8003dfe:	e000      	b.n	8003e02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	4798      	blx	r3
 8003e22:	e000      	b.n	8003e26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e24:	bf00      	nop
    }
  }
}
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b40      	cmp	r3, #64	@ 0x40
 8003e58:	d108      	bne.n	8003e6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e6a:	e007      	b.n	8003e7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	60da      	str	r2, [r3, #12]
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	3b10      	subs	r3, #16
 8003e98:	4a14      	ldr	r2, [pc, #80]	@ (8003eec <DMA_CalcBaseAndBitshift+0x64>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ea2:	4a13      	ldr	r2, [pc, #76]	@ (8003ef0 <DMA_CalcBaseAndBitshift+0x68>)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d909      	bls.n	8003eca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ebe:	f023 0303 	bic.w	r3, r3, #3
 8003ec2:	1d1a      	adds	r2, r3, #4
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ec8:	e007      	b.n	8003eda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ed2:	f023 0303 	bic.w	r3, r3, #3
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	aaaaaaab 	.word	0xaaaaaaab
 8003ef0:	08053e78 	.word	0x08053e78

08003ef4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d11f      	bne.n	8003f4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d856      	bhi.n	8003fc2 <DMA_CheckFifoParam+0xce>
 8003f14:	a201      	add	r2, pc, #4	@ (adr r2, 8003f1c <DMA_CheckFifoParam+0x28>)
 8003f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1a:	bf00      	nop
 8003f1c:	08003f2d 	.word	0x08003f2d
 8003f20:	08003f3f 	.word	0x08003f3f
 8003f24:	08003f2d 	.word	0x08003f2d
 8003f28:	08003fc3 	.word	0x08003fc3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d046      	beq.n	8003fc6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f3c:	e043      	b.n	8003fc6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f46:	d140      	bne.n	8003fca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f4c:	e03d      	b.n	8003fca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f56:	d121      	bne.n	8003f9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d837      	bhi.n	8003fce <DMA_CheckFifoParam+0xda>
 8003f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f64 <DMA_CheckFifoParam+0x70>)
 8003f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f64:	08003f75 	.word	0x08003f75
 8003f68:	08003f7b 	.word	0x08003f7b
 8003f6c:	08003f75 	.word	0x08003f75
 8003f70:	08003f8d 	.word	0x08003f8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	73fb      	strb	r3, [r7, #15]
      break;
 8003f78:	e030      	b.n	8003fdc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d025      	beq.n	8003fd2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f8a:	e022      	b.n	8003fd2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f90:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f94:	d11f      	bne.n	8003fd6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f9a:	e01c      	b.n	8003fd6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d903      	bls.n	8003faa <DMA_CheckFifoParam+0xb6>
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d003      	beq.n	8003fb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fa8:	e018      	b.n	8003fdc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
      break;
 8003fae:	e015      	b.n	8003fdc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00e      	beq.n	8003fda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003fc0:	e00b      	b.n	8003fda <DMA_CheckFifoParam+0xe6>
      break;
 8003fc2:	bf00      	nop
 8003fc4:	e00a      	b.n	8003fdc <DMA_CheckFifoParam+0xe8>
      break;
 8003fc6:	bf00      	nop
 8003fc8:	e008      	b.n	8003fdc <DMA_CheckFifoParam+0xe8>
      break;
 8003fca:	bf00      	nop
 8003fcc:	e006      	b.n	8003fdc <DMA_CheckFifoParam+0xe8>
      break;
 8003fce:	bf00      	nop
 8003fd0:	e004      	b.n	8003fdc <DMA_CheckFifoParam+0xe8>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e002      	b.n	8003fdc <DMA_CheckFifoParam+0xe8>
      break;   
 8003fd6:	bf00      	nop
 8003fd8:	e000      	b.n	8003fdc <DMA_CheckFifoParam+0xe8>
      break;
 8003fda:	bf00      	nop
    }
  } 
  
  return status; 
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop

08003fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b089      	sub	sp, #36	@ 0x24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	e159      	b.n	80042bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004008:	2201      	movs	r2, #1
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4013      	ands	r3, r2
 800401a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	429a      	cmp	r2, r3
 8004022:	f040 8148 	bne.w	80042b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b01      	cmp	r3, #1
 8004030:	d005      	beq.n	800403e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800403a:	2b02      	cmp	r3, #2
 800403c:	d130      	bne.n	80040a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	2203      	movs	r2, #3
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43db      	mvns	r3, r3
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	4013      	ands	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4313      	orrs	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004074:	2201      	movs	r2, #1
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	43db      	mvns	r3, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4013      	ands	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	091b      	lsrs	r3, r3, #4
 800408a:	f003 0201 	and.w	r2, r3, #1
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4313      	orrs	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d017      	beq.n	80040dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	2203      	movs	r2, #3
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	43db      	mvns	r3, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d123      	bne.n	8004130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	08da      	lsrs	r2, r3, #3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3208      	adds	r2, #8
 80040f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	220f      	movs	r2, #15
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	43db      	mvns	r3, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4013      	ands	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4313      	orrs	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	08da      	lsrs	r2, r3, #3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3208      	adds	r2, #8
 800412a:	69b9      	ldr	r1, [r7, #24]
 800412c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	2203      	movs	r2, #3
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	43db      	mvns	r3, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4013      	ands	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 0203 	and.w	r2, r3, #3
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4313      	orrs	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 80a2 	beq.w	80042b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	4b57      	ldr	r3, [pc, #348]	@ (80042d4 <HAL_GPIO_Init+0x2e8>)
 8004178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417a:	4a56      	ldr	r2, [pc, #344]	@ (80042d4 <HAL_GPIO_Init+0x2e8>)
 800417c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004180:	6453      	str	r3, [r2, #68]	@ 0x44
 8004182:	4b54      	ldr	r3, [pc, #336]	@ (80042d4 <HAL_GPIO_Init+0x2e8>)
 8004184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800418e:	4a52      	ldr	r2, [pc, #328]	@ (80042d8 <HAL_GPIO_Init+0x2ec>)
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	089b      	lsrs	r3, r3, #2
 8004194:	3302      	adds	r3, #2
 8004196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800419a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	220f      	movs	r2, #15
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43db      	mvns	r3, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4013      	ands	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a49      	ldr	r2, [pc, #292]	@ (80042dc <HAL_GPIO_Init+0x2f0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d019      	beq.n	80041ee <HAL_GPIO_Init+0x202>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a48      	ldr	r2, [pc, #288]	@ (80042e0 <HAL_GPIO_Init+0x2f4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d013      	beq.n	80041ea <HAL_GPIO_Init+0x1fe>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a47      	ldr	r2, [pc, #284]	@ (80042e4 <HAL_GPIO_Init+0x2f8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00d      	beq.n	80041e6 <HAL_GPIO_Init+0x1fa>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a46      	ldr	r2, [pc, #280]	@ (80042e8 <HAL_GPIO_Init+0x2fc>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d007      	beq.n	80041e2 <HAL_GPIO_Init+0x1f6>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a45      	ldr	r2, [pc, #276]	@ (80042ec <HAL_GPIO_Init+0x300>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d101      	bne.n	80041de <HAL_GPIO_Init+0x1f2>
 80041da:	2304      	movs	r3, #4
 80041dc:	e008      	b.n	80041f0 <HAL_GPIO_Init+0x204>
 80041de:	2307      	movs	r3, #7
 80041e0:	e006      	b.n	80041f0 <HAL_GPIO_Init+0x204>
 80041e2:	2303      	movs	r3, #3
 80041e4:	e004      	b.n	80041f0 <HAL_GPIO_Init+0x204>
 80041e6:	2302      	movs	r3, #2
 80041e8:	e002      	b.n	80041f0 <HAL_GPIO_Init+0x204>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <HAL_GPIO_Init+0x204>
 80041ee:	2300      	movs	r3, #0
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	f002 0203 	and.w	r2, r2, #3
 80041f6:	0092      	lsls	r2, r2, #2
 80041f8:	4093      	lsls	r3, r2
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004200:	4935      	ldr	r1, [pc, #212]	@ (80042d8 <HAL_GPIO_Init+0x2ec>)
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	089b      	lsrs	r3, r3, #2
 8004206:	3302      	adds	r3, #2
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800420e:	4b38      	ldr	r3, [pc, #224]	@ (80042f0 <HAL_GPIO_Init+0x304>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	43db      	mvns	r3, r3
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	4013      	ands	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004232:	4a2f      	ldr	r2, [pc, #188]	@ (80042f0 <HAL_GPIO_Init+0x304>)
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004238:	4b2d      	ldr	r3, [pc, #180]	@ (80042f0 <HAL_GPIO_Init+0x304>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	43db      	mvns	r3, r3
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	4013      	ands	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800425c:	4a24      	ldr	r2, [pc, #144]	@ (80042f0 <HAL_GPIO_Init+0x304>)
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004262:	4b23      	ldr	r3, [pc, #140]	@ (80042f0 <HAL_GPIO_Init+0x304>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	43db      	mvns	r3, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4013      	ands	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004286:	4a1a      	ldr	r2, [pc, #104]	@ (80042f0 <HAL_GPIO_Init+0x304>)
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800428c:	4b18      	ldr	r3, [pc, #96]	@ (80042f0 <HAL_GPIO_Init+0x304>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	43db      	mvns	r3, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4013      	ands	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042b0:	4a0f      	ldr	r2, [pc, #60]	@ (80042f0 <HAL_GPIO_Init+0x304>)
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	3301      	adds	r3, #1
 80042ba:	61fb      	str	r3, [r7, #28]
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	2b0f      	cmp	r3, #15
 80042c0:	f67f aea2 	bls.w	8004008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	3724      	adds	r7, #36	@ 0x24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40023800 	.word	0x40023800
 80042d8:	40013800 	.word	0x40013800
 80042dc:	40020000 	.word	0x40020000
 80042e0:	40020400 	.word	0x40020400
 80042e4:	40020800 	.word	0x40020800
 80042e8:	40020c00 	.word	0x40020c00
 80042ec:	40021000 	.word	0x40021000
 80042f0:	40013c00 	.word	0x40013c00

080042f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	887b      	ldrh	r3, [r7, #2]
 8004306:	4013      	ands	r3, r2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d002      	beq.n	8004312 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800430c:	2301      	movs	r3, #1
 800430e:	73fb      	strb	r3, [r7, #15]
 8004310:	e001      	b.n	8004316 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004312:	2300      	movs	r3, #0
 8004314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004316:	7bfb      	ldrb	r3, [r7, #15]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	460b      	mov	r3, r1
 800432e:	807b      	strh	r3, [r7, #2]
 8004330:	4613      	mov	r3, r2
 8004332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004334:	787b      	ldrb	r3, [r7, #1]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800433a:	887a      	ldrh	r2, [r7, #2]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004340:	e003      	b.n	800434a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004342:	887b      	ldrh	r3, [r7, #2]
 8004344:	041a      	lsls	r2, r3, #16
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	619a      	str	r2, [r3, #24]
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
	...

08004358 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	4603      	mov	r3, r0
 8004360:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004362:	4b08      	ldr	r3, [pc, #32]	@ (8004384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004364:	695a      	ldr	r2, [r3, #20]
 8004366:	88fb      	ldrh	r3, [r7, #6]
 8004368:	4013      	ands	r3, r2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d006      	beq.n	800437c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800436e:	4a05      	ldr	r2, [pc, #20]	@ (8004384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004370:	88fb      	ldrh	r3, [r7, #6]
 8004372:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	4618      	mov	r0, r3
 8004378:	f7fd fb14 	bl	80019a4 <HAL_GPIO_EXTI_Callback>
  }
}
 800437c:	bf00      	nop
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40013c00 	.word	0x40013c00

08004388 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e12b      	b.n	80045f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fe fa28 	bl	8002804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2224      	movs	r2, #36	@ 0x24
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0201 	bic.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043ec:	f001 f89a 	bl	8005524 <HAL_RCC_GetPCLK1Freq>
 80043f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	4a81      	ldr	r2, [pc, #516]	@ (80045fc <HAL_I2C_Init+0x274>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d807      	bhi.n	800440c <HAL_I2C_Init+0x84>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4a80      	ldr	r2, [pc, #512]	@ (8004600 <HAL_I2C_Init+0x278>)
 8004400:	4293      	cmp	r3, r2
 8004402:	bf94      	ite	ls
 8004404:	2301      	movls	r3, #1
 8004406:	2300      	movhi	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	e006      	b.n	800441a <HAL_I2C_Init+0x92>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4a7d      	ldr	r2, [pc, #500]	@ (8004604 <HAL_I2C_Init+0x27c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	bf94      	ite	ls
 8004414:	2301      	movls	r3, #1
 8004416:	2300      	movhi	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e0e7      	b.n	80045f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4a78      	ldr	r2, [pc, #480]	@ (8004608 <HAL_I2C_Init+0x280>)
 8004426:	fba2 2303 	umull	r2, r3, r2, r3
 800442a:	0c9b      	lsrs	r3, r3, #18
 800442c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	4a6a      	ldr	r2, [pc, #424]	@ (80045fc <HAL_I2C_Init+0x274>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d802      	bhi.n	800445c <HAL_I2C_Init+0xd4>
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	3301      	adds	r3, #1
 800445a:	e009      	b.n	8004470 <HAL_I2C_Init+0xe8>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004462:	fb02 f303 	mul.w	r3, r2, r3
 8004466:	4a69      	ldr	r2, [pc, #420]	@ (800460c <HAL_I2C_Init+0x284>)
 8004468:	fba2 2303 	umull	r2, r3, r2, r3
 800446c:	099b      	lsrs	r3, r3, #6
 800446e:	3301      	adds	r3, #1
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6812      	ldr	r2, [r2, #0]
 8004474:	430b      	orrs	r3, r1
 8004476:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004482:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	495c      	ldr	r1, [pc, #368]	@ (80045fc <HAL_I2C_Init+0x274>)
 800448c:	428b      	cmp	r3, r1
 800448e:	d819      	bhi.n	80044c4 <HAL_I2C_Init+0x13c>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1e59      	subs	r1, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	fbb1 f3f3 	udiv	r3, r1, r3
 800449e:	1c59      	adds	r1, r3, #1
 80044a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80044a4:	400b      	ands	r3, r1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_I2C_Init+0x138>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	1e59      	subs	r1, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80044b8:	3301      	adds	r3, #1
 80044ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044be:	e051      	b.n	8004564 <HAL_I2C_Init+0x1dc>
 80044c0:	2304      	movs	r3, #4
 80044c2:	e04f      	b.n	8004564 <HAL_I2C_Init+0x1dc>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d111      	bne.n	80044f0 <HAL_I2C_Init+0x168>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	1e58      	subs	r0, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6859      	ldr	r1, [r3, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	440b      	add	r3, r1
 80044da:	fbb0 f3f3 	udiv	r3, r0, r3
 80044de:	3301      	adds	r3, #1
 80044e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	bf0c      	ite	eq
 80044e8:	2301      	moveq	r3, #1
 80044ea:	2300      	movne	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	e012      	b.n	8004516 <HAL_I2C_Init+0x18e>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	1e58      	subs	r0, r3, #1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6859      	ldr	r1, [r3, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	0099      	lsls	r1, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	fbb0 f3f3 	udiv	r3, r0, r3
 8004506:	3301      	adds	r3, #1
 8004508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800450c:	2b00      	cmp	r3, #0
 800450e:	bf0c      	ite	eq
 8004510:	2301      	moveq	r3, #1
 8004512:	2300      	movne	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <HAL_I2C_Init+0x196>
 800451a:	2301      	movs	r3, #1
 800451c:	e022      	b.n	8004564 <HAL_I2C_Init+0x1dc>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10e      	bne.n	8004544 <HAL_I2C_Init+0x1bc>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1e58      	subs	r0, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6859      	ldr	r1, [r3, #4]
 800452e:	460b      	mov	r3, r1
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	440b      	add	r3, r1
 8004534:	fbb0 f3f3 	udiv	r3, r0, r3
 8004538:	3301      	adds	r3, #1
 800453a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800453e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004542:	e00f      	b.n	8004564 <HAL_I2C_Init+0x1dc>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	1e58      	subs	r0, r3, #1
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6859      	ldr	r1, [r3, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	0099      	lsls	r1, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	fbb0 f3f3 	udiv	r3, r0, r3
 800455a:	3301      	adds	r3, #1
 800455c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004560:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	6809      	ldr	r1, [r1, #0]
 8004568:	4313      	orrs	r3, r2
 800456a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69da      	ldr	r2, [r3, #28]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004592:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6911      	ldr	r1, [r2, #16]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68d2      	ldr	r2, [r2, #12]
 800459e:	4311      	orrs	r1, r2
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6812      	ldr	r2, [r2, #0]
 80045a4:	430b      	orrs	r3, r1
 80045a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695a      	ldr	r2, [r3, #20]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	000186a0 	.word	0x000186a0
 8004600:	001e847f 	.word	0x001e847f
 8004604:	003d08ff 	.word	0x003d08ff
 8004608:	431bde83 	.word	0x431bde83
 800460c:	10624dd3 	.word	0x10624dd3

08004610 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af02      	add	r7, sp, #8
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	607a      	str	r2, [r7, #4]
 800461a:	461a      	mov	r2, r3
 800461c:	460b      	mov	r3, r1
 800461e:	817b      	strh	r3, [r7, #10]
 8004620:	4613      	mov	r3, r2
 8004622:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004624:	f7fe fc2a 	bl	8002e7c <HAL_GetTick>
 8004628:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b20      	cmp	r3, #32
 8004634:	f040 80e0 	bne.w	80047f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	2319      	movs	r3, #25
 800463e:	2201      	movs	r2, #1
 8004640:	4970      	ldr	r1, [pc, #448]	@ (8004804 <HAL_I2C_Master_Transmit+0x1f4>)
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 f964 	bl	8004910 <I2C_WaitOnFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800464e:	2302      	movs	r3, #2
 8004650:	e0d3      	b.n	80047fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_I2C_Master_Transmit+0x50>
 800465c:	2302      	movs	r3, #2
 800465e:	e0cc      	b.n	80047fa <HAL_I2C_Master_Transmit+0x1ea>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b01      	cmp	r3, #1
 8004674:	d007      	beq.n	8004686 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0201 	orr.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004694:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2221      	movs	r2, #33	@ 0x21
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2210      	movs	r2, #16
 80046a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	893a      	ldrh	r2, [r7, #8]
 80046b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046bc:	b29a      	uxth	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4a50      	ldr	r2, [pc, #320]	@ (8004808 <HAL_I2C_Master_Transmit+0x1f8>)
 80046c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80046c8:	8979      	ldrh	r1, [r7, #10]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	6a3a      	ldr	r2, [r7, #32]
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f89c 	bl	800480c <I2C_MasterRequestWrite>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e08d      	b.n	80047fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046de:	2300      	movs	r3, #0
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	613b      	str	r3, [r7, #16]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80046f4:	e066      	b.n	80047c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	6a39      	ldr	r1, [r7, #32]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 fa22 	bl	8004b44 <I2C_WaitOnTXEFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00d      	beq.n	8004722 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	2b04      	cmp	r3, #4
 800470c:	d107      	bne.n	800471e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800471c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e06b      	b.n	80047fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004726:	781a      	ldrb	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b04      	cmp	r3, #4
 800475e:	d11b      	bne.n	8004798 <HAL_I2C_Master_Transmit+0x188>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004764:	2b00      	cmp	r3, #0
 8004766:	d017      	beq.n	8004798 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	781a      	ldrb	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	6a39      	ldr	r1, [r7, #32]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 fa19 	bl	8004bd4 <I2C_WaitOnBTFFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00d      	beq.n	80047c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d107      	bne.n	80047c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e01a      	b.n	80047fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d194      	bne.n	80046f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	e000      	b.n	80047fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80047f8:	2302      	movs	r3, #2
  }
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	00100002 	.word	0x00100002
 8004808:	ffff0000 	.word	0xffff0000

0800480c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af02      	add	r7, sp, #8
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	607a      	str	r2, [r7, #4]
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	460b      	mov	r3, r1
 800481a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004820:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b08      	cmp	r3, #8
 8004826:	d006      	beq.n	8004836 <I2C_MasterRequestWrite+0x2a>
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d003      	beq.n	8004836 <I2C_MasterRequestWrite+0x2a>
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004834:	d108      	bne.n	8004848 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	e00b      	b.n	8004860 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484c:	2b12      	cmp	r3, #18
 800484e:	d107      	bne.n	8004860 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800485e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 f84f 	bl	8004910 <I2C_WaitOnFlagUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00d      	beq.n	8004894 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004886:	d103      	bne.n	8004890 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800488e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e035      	b.n	8004900 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800489c:	d108      	bne.n	80048b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800489e:	897b      	ldrh	r3, [r7, #10]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048ac:	611a      	str	r2, [r3, #16]
 80048ae:	e01b      	b.n	80048e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048b0:	897b      	ldrh	r3, [r7, #10]
 80048b2:	11db      	asrs	r3, r3, #7
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	f003 0306 	and.w	r3, r3, #6
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f063 030f 	orn	r3, r3, #15
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	490e      	ldr	r1, [pc, #56]	@ (8004908 <I2C_MasterRequestWrite+0xfc>)
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 f898 	bl	8004a04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e010      	b.n	8004900 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048de:	897b      	ldrh	r3, [r7, #10]
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	4907      	ldr	r1, [pc, #28]	@ (800490c <I2C_MasterRequestWrite+0x100>)
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f888 	bl	8004a04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	00010008 	.word	0x00010008
 800490c:	00010002 	.word	0x00010002

08004910 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	603b      	str	r3, [r7, #0]
 800491c:	4613      	mov	r3, r2
 800491e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004920:	e048      	b.n	80049b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004928:	d044      	beq.n	80049b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800492a:	f7fe faa7 	bl	8002e7c <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d302      	bcc.n	8004940 <I2C_WaitOnFlagUntilTimeout+0x30>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d139      	bne.n	80049b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	0c1b      	lsrs	r3, r3, #16
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b01      	cmp	r3, #1
 8004948:	d10d      	bne.n	8004966 <I2C_WaitOnFlagUntilTimeout+0x56>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	43da      	mvns	r2, r3
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	4013      	ands	r3, r2
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	bf0c      	ite	eq
 800495c:	2301      	moveq	r3, #1
 800495e:	2300      	movne	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	461a      	mov	r2, r3
 8004964:	e00c      	b.n	8004980 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	43da      	mvns	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	4013      	ands	r3, r2
 8004972:	b29b      	uxth	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	bf0c      	ite	eq
 8004978:	2301      	moveq	r3, #1
 800497a:	2300      	movne	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	461a      	mov	r2, r3
 8004980:	79fb      	ldrb	r3, [r7, #7]
 8004982:	429a      	cmp	r2, r3
 8004984:	d116      	bne.n	80049b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a0:	f043 0220 	orr.w	r2, r3, #32
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e023      	b.n	80049fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	0c1b      	lsrs	r3, r3, #16
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d10d      	bne.n	80049da <I2C_WaitOnFlagUntilTimeout+0xca>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	43da      	mvns	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	4013      	ands	r3, r2
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	bf0c      	ite	eq
 80049d0:	2301      	moveq	r3, #1
 80049d2:	2300      	movne	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	461a      	mov	r2, r3
 80049d8:	e00c      	b.n	80049f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	43da      	mvns	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4013      	ands	r3, r2
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d093      	beq.n	8004922 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a12:	e071      	b.n	8004af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a22:	d123      	bne.n	8004a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a32:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a58:	f043 0204 	orr.w	r2, r3, #4
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e067      	b.n	8004b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a72:	d041      	beq.n	8004af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a74:	f7fe fa02 	bl	8002e7c <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d302      	bcc.n	8004a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d136      	bne.n	8004af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	0c1b      	lsrs	r3, r3, #16
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d10c      	bne.n	8004aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	43da      	mvns	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	bf14      	ite	ne
 8004aa6:	2301      	movne	r3, #1
 8004aa8:	2300      	moveq	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	e00b      	b.n	8004ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	43da      	mvns	r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	bf14      	ite	ne
 8004ac0:	2301      	movne	r3, #1
 8004ac2:	2300      	moveq	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d016      	beq.n	8004af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae4:	f043 0220 	orr.w	r2, r3, #32
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e021      	b.n	8004b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	0c1b      	lsrs	r3, r3, #16
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d10c      	bne.n	8004b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	43da      	mvns	r2, r3
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	bf14      	ite	ne
 8004b14:	2301      	movne	r3, #1
 8004b16:	2300      	moveq	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	e00b      	b.n	8004b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	43da      	mvns	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4013      	ands	r3, r2
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	bf14      	ite	ne
 8004b2e:	2301      	movne	r3, #1
 8004b30:	2300      	moveq	r3, #0
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f47f af6d 	bne.w	8004a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b50:	e034      	b.n	8004bbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 f886 	bl	8004c64 <I2C_IsAcknowledgeFailed>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e034      	b.n	8004bcc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b68:	d028      	beq.n	8004bbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6a:	f7fe f987 	bl	8002e7c <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d302      	bcc.n	8004b80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d11d      	bne.n	8004bbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b8a:	2b80      	cmp	r3, #128	@ 0x80
 8004b8c:	d016      	beq.n	8004bbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba8:	f043 0220 	orr.w	r2, r3, #32
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e007      	b.n	8004bcc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc6:	2b80      	cmp	r3, #128	@ 0x80
 8004bc8:	d1c3      	bne.n	8004b52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004be0:	e034      	b.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f83e 	bl	8004c64 <I2C_IsAcknowledgeFailed>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e034      	b.n	8004c5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bf8:	d028      	beq.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfa:	f7fe f93f 	bl	8002e7c <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d302      	bcc.n	8004c10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d11d      	bne.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d016      	beq.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c38:	f043 0220 	orr.w	r2, r3, #32
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e007      	b.n	8004c5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d1c3      	bne.n	8004be2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c7a:	d11b      	bne.n	8004cb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca0:	f043 0204 	orr.w	r2, r3, #4
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
	...

08004cc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e267      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d075      	beq.n	8004dce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ce2:	4b88      	ldr	r3, [pc, #544]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 030c 	and.w	r3, r3, #12
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d00c      	beq.n	8004d08 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cee:	4b85      	ldr	r3, [pc, #532]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d112      	bne.n	8004d20 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cfa:	4b82      	ldr	r3, [pc, #520]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d06:	d10b      	bne.n	8004d20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d08:	4b7e      	ldr	r3, [pc, #504]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d05b      	beq.n	8004dcc <HAL_RCC_OscConfig+0x108>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d157      	bne.n	8004dcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e242      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d28:	d106      	bne.n	8004d38 <HAL_RCC_OscConfig+0x74>
 8004d2a:	4b76      	ldr	r3, [pc, #472]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a75      	ldr	r2, [pc, #468]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	e01d      	b.n	8004d74 <HAL_RCC_OscConfig+0xb0>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d40:	d10c      	bne.n	8004d5c <HAL_RCC_OscConfig+0x98>
 8004d42:	4b70      	ldr	r3, [pc, #448]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a6f      	ldr	r2, [pc, #444]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	4b6d      	ldr	r3, [pc, #436]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a6c      	ldr	r2, [pc, #432]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	e00b      	b.n	8004d74 <HAL_RCC_OscConfig+0xb0>
 8004d5c:	4b69      	ldr	r3, [pc, #420]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a68      	ldr	r2, [pc, #416]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	4b66      	ldr	r3, [pc, #408]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a65      	ldr	r2, [pc, #404]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d013      	beq.n	8004da4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7c:	f7fe f87e 	bl	8002e7c <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d84:	f7fe f87a 	bl	8002e7c <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b64      	cmp	r3, #100	@ 0x64
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e207      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d96:	4b5b      	ldr	r3, [pc, #364]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0xc0>
 8004da2:	e014      	b.n	8004dce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da4:	f7fe f86a 	bl	8002e7c <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dac:	f7fe f866 	bl	8002e7c <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b64      	cmp	r3, #100	@ 0x64
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e1f3      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dbe:	4b51      	ldr	r3, [pc, #324]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f0      	bne.n	8004dac <HAL_RCC_OscConfig+0xe8>
 8004dca:	e000      	b.n	8004dce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d063      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004dda:	4b4a      	ldr	r3, [pc, #296]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 030c 	and.w	r3, r3, #12
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00b      	beq.n	8004dfe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004de6:	4b47      	ldr	r3, [pc, #284]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	d11c      	bne.n	8004e2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004df2:	4b44      	ldr	r3, [pc, #272]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d116      	bne.n	8004e2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dfe:	4b41      	ldr	r3, [pc, #260]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_RCC_OscConfig+0x152>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d001      	beq.n	8004e16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e1c7      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e16:	4b3b      	ldr	r3, [pc, #236]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	4937      	ldr	r1, [pc, #220]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e2a:	e03a      	b.n	8004ea2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d020      	beq.n	8004e76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e34:	4b34      	ldr	r3, [pc, #208]	@ (8004f08 <HAL_RCC_OscConfig+0x244>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3a:	f7fe f81f 	bl	8002e7c <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e42:	f7fe f81b 	bl	8002e7c <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e1a8      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e54:	4b2b      	ldr	r3, [pc, #172]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0f0      	beq.n	8004e42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e60:	4b28      	ldr	r3, [pc, #160]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	4925      	ldr	r1, [pc, #148]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	600b      	str	r3, [r1, #0]
 8004e74:	e015      	b.n	8004ea2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e76:	4b24      	ldr	r3, [pc, #144]	@ (8004f08 <HAL_RCC_OscConfig+0x244>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7c:	f7fd fffe 	bl	8002e7c <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e84:	f7fd fffa 	bl	8002e7c <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e187      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e96:	4b1b      	ldr	r3, [pc, #108]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f0      	bne.n	8004e84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d036      	beq.n	8004f1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d016      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eb6:	4b15      	ldr	r3, [pc, #84]	@ (8004f0c <HAL_RCC_OscConfig+0x248>)
 8004eb8:	2201      	movs	r2, #1
 8004eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ebc:	f7fd ffde 	bl	8002e7c <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec4:	f7fd ffda 	bl	8002e7c <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e167      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004ed8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0f0      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x200>
 8004ee2:	e01b      	b.n	8004f1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ee4:	4b09      	ldr	r3, [pc, #36]	@ (8004f0c <HAL_RCC_OscConfig+0x248>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eea:	f7fd ffc7 	bl	8002e7c <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef0:	e00e      	b.n	8004f10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ef2:	f7fd ffc3 	bl	8002e7c <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d907      	bls.n	8004f10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e150      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
 8004f04:	40023800 	.word	0x40023800
 8004f08:	42470000 	.word	0x42470000
 8004f0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f10:	4b88      	ldr	r3, [pc, #544]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004f12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1ea      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 8097 	beq.w	8005058 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f2e:	4b81      	ldr	r3, [pc, #516]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10f      	bne.n	8004f5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60bb      	str	r3, [r7, #8]
 8004f3e:	4b7d      	ldr	r3, [pc, #500]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f42:	4a7c      	ldr	r2, [pc, #496]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f4a:	4b7a      	ldr	r3, [pc, #488]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f52:	60bb      	str	r3, [r7, #8]
 8004f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f56:	2301      	movs	r3, #1
 8004f58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5a:	4b77      	ldr	r3, [pc, #476]	@ (8005138 <HAL_RCC_OscConfig+0x474>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d118      	bne.n	8004f98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f66:	4b74      	ldr	r3, [pc, #464]	@ (8005138 <HAL_RCC_OscConfig+0x474>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a73      	ldr	r2, [pc, #460]	@ (8005138 <HAL_RCC_OscConfig+0x474>)
 8004f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f72:	f7fd ff83 	bl	8002e7c <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f7a:	f7fd ff7f 	bl	8002e7c <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e10c      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f8c:	4b6a      	ldr	r3, [pc, #424]	@ (8005138 <HAL_RCC_OscConfig+0x474>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0f0      	beq.n	8004f7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d106      	bne.n	8004fae <HAL_RCC_OscConfig+0x2ea>
 8004fa0:	4b64      	ldr	r3, [pc, #400]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa4:	4a63      	ldr	r2, [pc, #396]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004fa6:	f043 0301 	orr.w	r3, r3, #1
 8004faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fac:	e01c      	b.n	8004fe8 <HAL_RCC_OscConfig+0x324>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2b05      	cmp	r3, #5
 8004fb4:	d10c      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x30c>
 8004fb6:	4b5f      	ldr	r3, [pc, #380]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fba:	4a5e      	ldr	r2, [pc, #376]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004fbc:	f043 0304 	orr.w	r3, r3, #4
 8004fc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fc2:	4b5c      	ldr	r3, [pc, #368]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc6:	4a5b      	ldr	r2, [pc, #364]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004fc8:	f043 0301 	orr.w	r3, r3, #1
 8004fcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fce:	e00b      	b.n	8004fe8 <HAL_RCC_OscConfig+0x324>
 8004fd0:	4b58      	ldr	r3, [pc, #352]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd4:	4a57      	ldr	r2, [pc, #348]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004fd6:	f023 0301 	bic.w	r3, r3, #1
 8004fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fdc:	4b55      	ldr	r3, [pc, #340]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe0:	4a54      	ldr	r2, [pc, #336]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004fe2:	f023 0304 	bic.w	r3, r3, #4
 8004fe6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d015      	beq.n	800501c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff0:	f7fd ff44 	bl	8002e7c <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff8:	f7fd ff40 	bl	8002e7c <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e0cb      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800500e:	4b49      	ldr	r3, [pc, #292]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8005010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0ee      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x334>
 800501a:	e014      	b.n	8005046 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800501c:	f7fd ff2e 	bl	8002e7c <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005022:	e00a      	b.n	800503a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005024:	f7fd ff2a 	bl	8002e7c <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005032:	4293      	cmp	r3, r2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e0b5      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800503a:	4b3e      	ldr	r3, [pc, #248]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1ee      	bne.n	8005024 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005046:	7dfb      	ldrb	r3, [r7, #23]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d105      	bne.n	8005058 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800504c:	4b39      	ldr	r3, [pc, #228]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 800504e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005050:	4a38      	ldr	r2, [pc, #224]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8005052:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005056:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 80a1 	beq.w	80051a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005062:	4b34      	ldr	r3, [pc, #208]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 030c 	and.w	r3, r3, #12
 800506a:	2b08      	cmp	r3, #8
 800506c:	d05c      	beq.n	8005128 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	2b02      	cmp	r3, #2
 8005074:	d141      	bne.n	80050fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005076:	4b31      	ldr	r3, [pc, #196]	@ (800513c <HAL_RCC_OscConfig+0x478>)
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507c:	f7fd fefe 	bl	8002e7c <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005084:	f7fd fefa 	bl	8002e7c <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e087      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005096:	4b27      	ldr	r3, [pc, #156]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f0      	bne.n	8005084 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	69da      	ldr	r2, [r3, #28]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b0:	019b      	lsls	r3, r3, #6
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b8:	085b      	lsrs	r3, r3, #1
 80050ba:	3b01      	subs	r3, #1
 80050bc:	041b      	lsls	r3, r3, #16
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c4:	061b      	lsls	r3, r3, #24
 80050c6:	491b      	ldr	r1, [pc, #108]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050cc:	4b1b      	ldr	r3, [pc, #108]	@ (800513c <HAL_RCC_OscConfig+0x478>)
 80050ce:	2201      	movs	r2, #1
 80050d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d2:	f7fd fed3 	bl	8002e7c <HAL_GetTick>
 80050d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d8:	e008      	b.n	80050ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050da:	f7fd fecf 	bl	8002e7c <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e05c      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ec:	4b11      	ldr	r3, [pc, #68]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0f0      	beq.n	80050da <HAL_RCC_OscConfig+0x416>
 80050f8:	e054      	b.n	80051a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050fa:	4b10      	ldr	r3, [pc, #64]	@ (800513c <HAL_RCC_OscConfig+0x478>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005100:	f7fd febc 	bl	8002e7c <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005108:	f7fd feb8 	bl	8002e7c <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e045      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511a:	4b06      	ldr	r3, [pc, #24]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1f0      	bne.n	8005108 <HAL_RCC_OscConfig+0x444>
 8005126:	e03d      	b.n	80051a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d107      	bne.n	8005140 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e038      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
 8005134:	40023800 	.word	0x40023800
 8005138:	40007000 	.word	0x40007000
 800513c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005140:	4b1b      	ldr	r3, [pc, #108]	@ (80051b0 <HAL_RCC_OscConfig+0x4ec>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d028      	beq.n	80051a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005158:	429a      	cmp	r2, r3
 800515a:	d121      	bne.n	80051a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005166:	429a      	cmp	r2, r3
 8005168:	d11a      	bne.n	80051a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005170:	4013      	ands	r3, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005176:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005178:	4293      	cmp	r3, r2
 800517a:	d111      	bne.n	80051a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005186:	085b      	lsrs	r3, r3, #1
 8005188:	3b01      	subs	r3, #1
 800518a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800518c:	429a      	cmp	r2, r3
 800518e:	d107      	bne.n	80051a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800519c:	429a      	cmp	r2, r3
 800519e:	d001      	beq.n	80051a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e000      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	40023800 	.word	0x40023800

080051b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e0cc      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051c8:	4b68      	ldr	r3, [pc, #416]	@ (800536c <HAL_RCC_ClockConfig+0x1b8>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d90c      	bls.n	80051f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d6:	4b65      	ldr	r3, [pc, #404]	@ (800536c <HAL_RCC_ClockConfig+0x1b8>)
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051de:	4b63      	ldr	r3, [pc, #396]	@ (800536c <HAL_RCC_ClockConfig+0x1b8>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d001      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e0b8      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d020      	beq.n	800523e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005208:	4b59      	ldr	r3, [pc, #356]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	4a58      	ldr	r2, [pc, #352]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005212:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b00      	cmp	r3, #0
 800521e:	d005      	beq.n	800522c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005220:	4b53      	ldr	r3, [pc, #332]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	4a52      	ldr	r2, [pc, #328]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 8005226:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800522a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800522c:	4b50      	ldr	r3, [pc, #320]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	494d      	ldr	r1, [pc, #308]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 800523a:	4313      	orrs	r3, r2
 800523c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d044      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d107      	bne.n	8005262 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005252:	4b47      	ldr	r3, [pc, #284]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d119      	bne.n	8005292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e07f      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2b02      	cmp	r3, #2
 8005268:	d003      	beq.n	8005272 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800526e:	2b03      	cmp	r3, #3
 8005270:	d107      	bne.n	8005282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005272:	4b3f      	ldr	r3, [pc, #252]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e06f      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005282:	4b3b      	ldr	r3, [pc, #236]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e067      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005292:	4b37      	ldr	r3, [pc, #220]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f023 0203 	bic.w	r2, r3, #3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	4934      	ldr	r1, [pc, #208]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052a4:	f7fd fdea 	bl	8002e7c <HAL_GetTick>
 80052a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052aa:	e00a      	b.n	80052c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ac:	f7fd fde6 	bl	8002e7c <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e04f      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052c2:	4b2b      	ldr	r3, [pc, #172]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 020c 	and.w	r2, r3, #12
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d1eb      	bne.n	80052ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052d4:	4b25      	ldr	r3, [pc, #148]	@ (800536c <HAL_RCC_ClockConfig+0x1b8>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d20c      	bcs.n	80052fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052e2:	4b22      	ldr	r3, [pc, #136]	@ (800536c <HAL_RCC_ClockConfig+0x1b8>)
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ea:	4b20      	ldr	r3, [pc, #128]	@ (800536c <HAL_RCC_ClockConfig+0x1b8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d001      	beq.n	80052fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e032      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005308:	4b19      	ldr	r3, [pc, #100]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	4916      	ldr	r1, [pc, #88]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	4313      	orrs	r3, r2
 8005318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005326:	4b12      	ldr	r3, [pc, #72]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	490e      	ldr	r1, [pc, #56]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	4313      	orrs	r3, r2
 8005338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800533a:	f000 f821 	bl	8005380 <HAL_RCC_GetSysClockFreq>
 800533e:	4602      	mov	r2, r0
 8005340:	4b0b      	ldr	r3, [pc, #44]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	091b      	lsrs	r3, r3, #4
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	490a      	ldr	r1, [pc, #40]	@ (8005374 <HAL_RCC_ClockConfig+0x1c0>)
 800534c:	5ccb      	ldrb	r3, [r1, r3]
 800534e:	fa22 f303 	lsr.w	r3, r2, r3
 8005352:	4a09      	ldr	r2, [pc, #36]	@ (8005378 <HAL_RCC_ClockConfig+0x1c4>)
 8005354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005356:	4b09      	ldr	r3, [pc, #36]	@ (800537c <HAL_RCC_ClockConfig+0x1c8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f7fd fd4a 	bl	8002df4 <HAL_InitTick>

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40023c00 	.word	0x40023c00
 8005370:	40023800 	.word	0x40023800
 8005374:	08053e60 	.word	0x08053e60
 8005378:	20000260 	.word	0x20000260
 800537c:	20000264 	.word	0x20000264

08005380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005384:	b090      	sub	sp, #64	@ 0x40
 8005386:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005398:	4b59      	ldr	r3, [pc, #356]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x180>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 030c 	and.w	r3, r3, #12
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d00d      	beq.n	80053c0 <HAL_RCC_GetSysClockFreq+0x40>
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	f200 80a1 	bhi.w	80054ec <HAL_RCC_GetSysClockFreq+0x16c>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <HAL_RCC_GetSysClockFreq+0x34>
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d003      	beq.n	80053ba <HAL_RCC_GetSysClockFreq+0x3a>
 80053b2:	e09b      	b.n	80054ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053b4:	4b53      	ldr	r3, [pc, #332]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x184>)
 80053b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80053b8:	e09b      	b.n	80054f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053ba:	4b53      	ldr	r3, [pc, #332]	@ (8005508 <HAL_RCC_GetSysClockFreq+0x188>)
 80053bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80053be:	e098      	b.n	80054f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053c0:	4b4f      	ldr	r3, [pc, #316]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x180>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053ca:	4b4d      	ldr	r3, [pc, #308]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x180>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d028      	beq.n	8005428 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053d6:	4b4a      	ldr	r3, [pc, #296]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x180>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	099b      	lsrs	r3, r3, #6
 80053dc:	2200      	movs	r2, #0
 80053de:	623b      	str	r3, [r7, #32]
 80053e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80053e8:	2100      	movs	r1, #0
 80053ea:	4b47      	ldr	r3, [pc, #284]	@ (8005508 <HAL_RCC_GetSysClockFreq+0x188>)
 80053ec:	fb03 f201 	mul.w	r2, r3, r1
 80053f0:	2300      	movs	r3, #0
 80053f2:	fb00 f303 	mul.w	r3, r0, r3
 80053f6:	4413      	add	r3, r2
 80053f8:	4a43      	ldr	r2, [pc, #268]	@ (8005508 <HAL_RCC_GetSysClockFreq+0x188>)
 80053fa:	fba0 1202 	umull	r1, r2, r0, r2
 80053fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005400:	460a      	mov	r2, r1
 8005402:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005404:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005406:	4413      	add	r3, r2
 8005408:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800540a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800540c:	2200      	movs	r2, #0
 800540e:	61bb      	str	r3, [r7, #24]
 8005410:	61fa      	str	r2, [r7, #28]
 8005412:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005416:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800541a:	f7fa ff31 	bl	8000280 <__aeabi_uldivmod>
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	4613      	mov	r3, r2
 8005424:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005426:	e053      	b.n	80054d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005428:	4b35      	ldr	r3, [pc, #212]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x180>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	099b      	lsrs	r3, r3, #6
 800542e:	2200      	movs	r2, #0
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	617a      	str	r2, [r7, #20]
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800543a:	f04f 0b00 	mov.w	fp, #0
 800543e:	4652      	mov	r2, sl
 8005440:	465b      	mov	r3, fp
 8005442:	f04f 0000 	mov.w	r0, #0
 8005446:	f04f 0100 	mov.w	r1, #0
 800544a:	0159      	lsls	r1, r3, #5
 800544c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005450:	0150      	lsls	r0, r2, #5
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	ebb2 080a 	subs.w	r8, r2, sl
 800545a:	eb63 090b 	sbc.w	r9, r3, fp
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	f04f 0300 	mov.w	r3, #0
 8005466:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800546a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800546e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005472:	ebb2 0408 	subs.w	r4, r2, r8
 8005476:	eb63 0509 	sbc.w	r5, r3, r9
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	f04f 0300 	mov.w	r3, #0
 8005482:	00eb      	lsls	r3, r5, #3
 8005484:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005488:	00e2      	lsls	r2, r4, #3
 800548a:	4614      	mov	r4, r2
 800548c:	461d      	mov	r5, r3
 800548e:	eb14 030a 	adds.w	r3, r4, sl
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	eb45 030b 	adc.w	r3, r5, fp
 8005498:	607b      	str	r3, [r7, #4]
 800549a:	f04f 0200 	mov.w	r2, #0
 800549e:	f04f 0300 	mov.w	r3, #0
 80054a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054a6:	4629      	mov	r1, r5
 80054a8:	028b      	lsls	r3, r1, #10
 80054aa:	4621      	mov	r1, r4
 80054ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054b0:	4621      	mov	r1, r4
 80054b2:	028a      	lsls	r2, r1, #10
 80054b4:	4610      	mov	r0, r2
 80054b6:	4619      	mov	r1, r3
 80054b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ba:	2200      	movs	r2, #0
 80054bc:	60bb      	str	r3, [r7, #8]
 80054be:	60fa      	str	r2, [r7, #12]
 80054c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054c4:	f7fa fedc 	bl	8000280 <__aeabi_uldivmod>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4613      	mov	r3, r2
 80054ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80054d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x180>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	0c1b      	lsrs	r3, r3, #16
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	3301      	adds	r3, #1
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80054e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054ea:	e002      	b.n	80054f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054ec:	4b05      	ldr	r3, [pc, #20]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x184>)
 80054ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3740      	adds	r7, #64	@ 0x40
 80054f8:	46bd      	mov	sp, r7
 80054fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054fe:	bf00      	nop
 8005500:	40023800 	.word	0x40023800
 8005504:	00f42400 	.word	0x00f42400
 8005508:	017d7840 	.word	0x017d7840

0800550c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005510:	4b03      	ldr	r3, [pc, #12]	@ (8005520 <HAL_RCC_GetHCLKFreq+0x14>)
 8005512:	681b      	ldr	r3, [r3, #0]
}
 8005514:	4618      	mov	r0, r3
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	20000260 	.word	0x20000260

08005524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005528:	f7ff fff0 	bl	800550c <HAL_RCC_GetHCLKFreq>
 800552c:	4602      	mov	r2, r0
 800552e:	4b05      	ldr	r3, [pc, #20]	@ (8005544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	0a9b      	lsrs	r3, r3, #10
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	4903      	ldr	r1, [pc, #12]	@ (8005548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800553a:	5ccb      	ldrb	r3, [r1, r3]
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005540:	4618      	mov	r0, r3
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40023800 	.word	0x40023800
 8005548:	08053e70 	.word	0x08053e70

0800554c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e041      	b.n	80055e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fd f9c6 	bl	8002904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3304      	adds	r3, #4
 8005588:	4619      	mov	r1, r3
 800558a:	4610      	mov	r0, r2
 800558c:	f000 ff2c 	bl	80063e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
	...

080055ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d001      	beq.n	8005604 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e03c      	b.n	800567e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a1e      	ldr	r2, [pc, #120]	@ (800568c <HAL_TIM_Base_Start+0xa0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d018      	beq.n	8005648 <HAL_TIM_Base_Start+0x5c>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800561e:	d013      	beq.n	8005648 <HAL_TIM_Base_Start+0x5c>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a1a      	ldr	r2, [pc, #104]	@ (8005690 <HAL_TIM_Base_Start+0xa4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00e      	beq.n	8005648 <HAL_TIM_Base_Start+0x5c>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a19      	ldr	r2, [pc, #100]	@ (8005694 <HAL_TIM_Base_Start+0xa8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d009      	beq.n	8005648 <HAL_TIM_Base_Start+0x5c>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a17      	ldr	r2, [pc, #92]	@ (8005698 <HAL_TIM_Base_Start+0xac>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d004      	beq.n	8005648 <HAL_TIM_Base_Start+0x5c>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a16      	ldr	r2, [pc, #88]	@ (800569c <HAL_TIM_Base_Start+0xb0>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d111      	bne.n	800566c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b06      	cmp	r3, #6
 8005658:	d010      	beq.n	800567c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0201 	orr.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566a:	e007      	b.n	800567c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0201 	orr.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40010000 	.word	0x40010000
 8005690:	40000400 	.word	0x40000400
 8005694:	40000800 	.word	0x40000800
 8005698:	40000c00 	.word	0x40000c00
 800569c:	40014000 	.word	0x40014000

080056a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d001      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e044      	b.n	8005742 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1e      	ldr	r2, [pc, #120]	@ (8005750 <HAL_TIM_Base_Start_IT+0xb0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d018      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x6c>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e2:	d013      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x6c>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a1a      	ldr	r2, [pc, #104]	@ (8005754 <HAL_TIM_Base_Start_IT+0xb4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00e      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x6c>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a19      	ldr	r2, [pc, #100]	@ (8005758 <HAL_TIM_Base_Start_IT+0xb8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d009      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x6c>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a17      	ldr	r2, [pc, #92]	@ (800575c <HAL_TIM_Base_Start_IT+0xbc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d004      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x6c>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a16      	ldr	r2, [pc, #88]	@ (8005760 <HAL_TIM_Base_Start_IT+0xc0>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d111      	bne.n	8005730 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b06      	cmp	r3, #6
 800571c:	d010      	beq.n	8005740 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f042 0201 	orr.w	r2, r2, #1
 800572c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572e:	e007      	b.n	8005740 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0201 	orr.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	40010000 	.word	0x40010000
 8005754:	40000400 	.word	0x40000400
 8005758:	40000800 	.word	0x40000800
 800575c:	40000c00 	.word	0x40000c00
 8005760:	40014000 	.word	0x40014000

08005764 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e041      	b.n	80057fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fd f882 	bl	8002894 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3304      	adds	r3, #4
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f000 fe20 	bl	80063e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d109      	bne.n	8005828 <HAL_TIM_PWM_Start+0x24>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b01      	cmp	r3, #1
 800581e:	bf14      	ite	ne
 8005820:	2301      	movne	r3, #1
 8005822:	2300      	moveq	r3, #0
 8005824:	b2db      	uxtb	r3, r3
 8005826:	e022      	b.n	800586e <HAL_TIM_PWM_Start+0x6a>
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2b04      	cmp	r3, #4
 800582c:	d109      	bne.n	8005842 <HAL_TIM_PWM_Start+0x3e>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b01      	cmp	r3, #1
 8005838:	bf14      	ite	ne
 800583a:	2301      	movne	r3, #1
 800583c:	2300      	moveq	r3, #0
 800583e:	b2db      	uxtb	r3, r3
 8005840:	e015      	b.n	800586e <HAL_TIM_PWM_Start+0x6a>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b08      	cmp	r3, #8
 8005846:	d109      	bne.n	800585c <HAL_TIM_PWM_Start+0x58>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b01      	cmp	r3, #1
 8005852:	bf14      	ite	ne
 8005854:	2301      	movne	r3, #1
 8005856:	2300      	moveq	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	e008      	b.n	800586e <HAL_TIM_PWM_Start+0x6a>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b01      	cmp	r3, #1
 8005866:	bf14      	ite	ne
 8005868:	2301      	movne	r3, #1
 800586a:	2300      	moveq	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e068      	b.n	8005948 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d104      	bne.n	8005886 <HAL_TIM_PWM_Start+0x82>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005884:	e013      	b.n	80058ae <HAL_TIM_PWM_Start+0xaa>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b04      	cmp	r3, #4
 800588a:	d104      	bne.n	8005896 <HAL_TIM_PWM_Start+0x92>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005894:	e00b      	b.n	80058ae <HAL_TIM_PWM_Start+0xaa>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b08      	cmp	r3, #8
 800589a:	d104      	bne.n	80058a6 <HAL_TIM_PWM_Start+0xa2>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058a4:	e003      	b.n	80058ae <HAL_TIM_PWM_Start+0xaa>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2202      	movs	r2, #2
 80058aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2201      	movs	r2, #1
 80058b4:	6839      	ldr	r1, [r7, #0]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f001 f842 	bl	8006940 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a23      	ldr	r2, [pc, #140]	@ (8005950 <HAL_TIM_PWM_Start+0x14c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d107      	bne.n	80058d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1d      	ldr	r2, [pc, #116]	@ (8005950 <HAL_TIM_PWM_Start+0x14c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d018      	beq.n	8005912 <HAL_TIM_PWM_Start+0x10e>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e8:	d013      	beq.n	8005912 <HAL_TIM_PWM_Start+0x10e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a19      	ldr	r2, [pc, #100]	@ (8005954 <HAL_TIM_PWM_Start+0x150>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00e      	beq.n	8005912 <HAL_TIM_PWM_Start+0x10e>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a17      	ldr	r2, [pc, #92]	@ (8005958 <HAL_TIM_PWM_Start+0x154>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d009      	beq.n	8005912 <HAL_TIM_PWM_Start+0x10e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a16      	ldr	r2, [pc, #88]	@ (800595c <HAL_TIM_PWM_Start+0x158>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d004      	beq.n	8005912 <HAL_TIM_PWM_Start+0x10e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a14      	ldr	r2, [pc, #80]	@ (8005960 <HAL_TIM_PWM_Start+0x15c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d111      	bne.n	8005936 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 0307 	and.w	r3, r3, #7
 800591c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b06      	cmp	r3, #6
 8005922:	d010      	beq.n	8005946 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0201 	orr.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005934:	e007      	b.n	8005946 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0201 	orr.w	r2, r2, #1
 8005944:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40010000 	.word	0x40010000
 8005954:	40000400 	.word	0x40000400
 8005958:	40000800 	.word	0x40000800
 800595c:	40000c00 	.word	0x40000c00
 8005960:	40014000 	.word	0x40014000

08005964 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2200      	movs	r2, #0
 8005974:	6839      	ldr	r1, [r7, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f000 ffe2 	bl	8006940 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a29      	ldr	r2, [pc, #164]	@ (8005a28 <HAL_TIM_PWM_Stop+0xc4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d117      	bne.n	80059b6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6a1a      	ldr	r2, [r3, #32]
 800598c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005990:	4013      	ands	r3, r2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10f      	bne.n	80059b6 <HAL_TIM_PWM_Stop+0x52>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6a1a      	ldr	r2, [r3, #32]
 800599c:	f240 4344 	movw	r3, #1092	@ 0x444
 80059a0:	4013      	ands	r3, r2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d107      	bne.n	80059b6 <HAL_TIM_PWM_Stop+0x52>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6a1a      	ldr	r2, [r3, #32]
 80059bc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80059c0:	4013      	ands	r3, r2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10f      	bne.n	80059e6 <HAL_TIM_PWM_Stop+0x82>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6a1a      	ldr	r2, [r3, #32]
 80059cc:	f240 4344 	movw	r3, #1092	@ 0x444
 80059d0:	4013      	ands	r3, r2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d107      	bne.n	80059e6 <HAL_TIM_PWM_Stop+0x82>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0201 	bic.w	r2, r2, #1
 80059e4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d104      	bne.n	80059f6 <HAL_TIM_PWM_Stop+0x92>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059f4:	e013      	b.n	8005a1e <HAL_TIM_PWM_Stop+0xba>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d104      	bne.n	8005a06 <HAL_TIM_PWM_Stop+0xa2>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a04:	e00b      	b.n	8005a1e <HAL_TIM_PWM_Stop+0xba>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d104      	bne.n	8005a16 <HAL_TIM_PWM_Stop+0xb2>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a14:	e003      	b.n	8005a1e <HAL_TIM_PWM_Stop+0xba>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40010000 	.word	0x40010000

08005a2c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d109      	bne.n	8005a54 <HAL_TIM_PWM_Start_IT+0x28>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	bf14      	ite	ne
 8005a4c:	2301      	movne	r3, #1
 8005a4e:	2300      	moveq	r3, #0
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	e022      	b.n	8005a9a <HAL_TIM_PWM_Start_IT+0x6e>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d109      	bne.n	8005a6e <HAL_TIM_PWM_Start_IT+0x42>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	bf14      	ite	ne
 8005a66:	2301      	movne	r3, #1
 8005a68:	2300      	moveq	r3, #0
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	e015      	b.n	8005a9a <HAL_TIM_PWM_Start_IT+0x6e>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d109      	bne.n	8005a88 <HAL_TIM_PWM_Start_IT+0x5c>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	bf14      	ite	ne
 8005a80:	2301      	movne	r3, #1
 8005a82:	2300      	moveq	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	e008      	b.n	8005a9a <HAL_TIM_PWM_Start_IT+0x6e>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	bf14      	ite	ne
 8005a94:	2301      	movne	r3, #1
 8005a96:	2300      	moveq	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e0b3      	b.n	8005c0a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d104      	bne.n	8005ab2 <HAL_TIM_PWM_Start_IT+0x86>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ab0:	e013      	b.n	8005ada <HAL_TIM_PWM_Start_IT+0xae>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d104      	bne.n	8005ac2 <HAL_TIM_PWM_Start_IT+0x96>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ac0:	e00b      	b.n	8005ada <HAL_TIM_PWM_Start_IT+0xae>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d104      	bne.n	8005ad2 <HAL_TIM_PWM_Start_IT+0xa6>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ad0:	e003      	b.n	8005ada <HAL_TIM_PWM_Start_IT+0xae>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b0c      	cmp	r3, #12
 8005ade:	d841      	bhi.n	8005b64 <HAL_TIM_PWM_Start_IT+0x138>
 8005ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae8 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae6:	bf00      	nop
 8005ae8:	08005b1d 	.word	0x08005b1d
 8005aec:	08005b65 	.word	0x08005b65
 8005af0:	08005b65 	.word	0x08005b65
 8005af4:	08005b65 	.word	0x08005b65
 8005af8:	08005b2f 	.word	0x08005b2f
 8005afc:	08005b65 	.word	0x08005b65
 8005b00:	08005b65 	.word	0x08005b65
 8005b04:	08005b65 	.word	0x08005b65
 8005b08:	08005b41 	.word	0x08005b41
 8005b0c:	08005b65 	.word	0x08005b65
 8005b10:	08005b65 	.word	0x08005b65
 8005b14:	08005b65 	.word	0x08005b65
 8005b18:	08005b53 	.word	0x08005b53
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0202 	orr.w	r2, r2, #2
 8005b2a:	60da      	str	r2, [r3, #12]
      break;
 8005b2c:	e01d      	b.n	8005b6a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0204 	orr.w	r2, r2, #4
 8005b3c:	60da      	str	r2, [r3, #12]
      break;
 8005b3e:	e014      	b.n	8005b6a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0208 	orr.w	r2, r2, #8
 8005b4e:	60da      	str	r2, [r3, #12]
      break;
 8005b50:	e00b      	b.n	8005b6a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68da      	ldr	r2, [r3, #12]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0210 	orr.w	r2, r2, #16
 8005b60:	60da      	str	r2, [r3, #12]
      break;
 8005b62:	e002      	b.n	8005b6a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	73fb      	strb	r3, [r7, #15]
      break;
 8005b68:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b6a:	7bfb      	ldrb	r3, [r7, #15]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d14b      	bne.n	8005c08 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2201      	movs	r2, #1
 8005b76:	6839      	ldr	r1, [r7, #0]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 fee1 	bl	8006940 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a24      	ldr	r2, [pc, #144]	@ (8005c14 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d107      	bne.n	8005b98 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b96:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c14 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d018      	beq.n	8005bd4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005baa:	d013      	beq.n	8005bd4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a19      	ldr	r2, [pc, #100]	@ (8005c18 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d00e      	beq.n	8005bd4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a18      	ldr	r2, [pc, #96]	@ (8005c1c <HAL_TIM_PWM_Start_IT+0x1f0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d009      	beq.n	8005bd4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a16      	ldr	r2, [pc, #88]	@ (8005c20 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d004      	beq.n	8005bd4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a15      	ldr	r2, [pc, #84]	@ (8005c24 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d111      	bne.n	8005bf8 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2b06      	cmp	r3, #6
 8005be4:	d010      	beq.n	8005c08 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f042 0201 	orr.w	r2, r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf6:	e007      	b.n	8005c08 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	40010000 	.word	0x40010000
 8005c18:	40000400 	.word	0x40000400
 8005c1c:	40000800 	.word	0x40000800
 8005c20:	40000c00 	.word	0x40000c00
 8005c24:	40014000 	.word	0x40014000

08005c28 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e097      	b.n	8005d6c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d106      	bne.n	8005c56 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7fc fe93 	bl	800297c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2202      	movs	r2, #2
 8005c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6812      	ldr	r2, [r2, #0]
 8005c68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c6c:	f023 0307 	bic.w	r3, r3, #7
 8005c70:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	f000 fbb3 	bl	80063e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005caa:	f023 0303 	bic.w	r3, r3, #3
 8005cae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005cc8:	f023 030c 	bic.w	r3, r3, #12
 8005ccc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	021b      	lsls	r3, r3, #8
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	011a      	lsls	r2, r3, #4
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	031b      	lsls	r3, r3, #12
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005d06:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005d0e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d84:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d8c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d94:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005d9c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d110      	bne.n	8005dc6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d102      	bne.n	8005db0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005daa:	7b7b      	ldrb	r3, [r7, #13]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d001      	beq.n	8005db4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e069      	b.n	8005e88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dc4:	e031      	b.n	8005e2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b04      	cmp	r3, #4
 8005dca:	d110      	bne.n	8005dee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dcc:	7bbb      	ldrb	r3, [r7, #14]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d102      	bne.n	8005dd8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dd2:	7b3b      	ldrb	r3, [r7, #12]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d001      	beq.n	8005ddc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e055      	b.n	8005e88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005dec:	e01d      	b.n	8005e2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d108      	bne.n	8005e06 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005df4:	7bbb      	ldrb	r3, [r7, #14]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d105      	bne.n	8005e06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dfa:	7b7b      	ldrb	r3, [r7, #13]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d102      	bne.n	8005e06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e00:	7b3b      	ldrb	r3, [r7, #12]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d001      	beq.n	8005e0a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e03e      	b.n	8005e88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2202      	movs	r2, #2
 8005e16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2202      	movs	r2, #2
 8005e26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <HAL_TIM_Encoder_Start+0xc4>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d008      	beq.n	8005e48 <HAL_TIM_Encoder_Start+0xd4>
 8005e36:	e00f      	b.n	8005e58 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	2100      	movs	r1, #0
 8005e40:	4618      	mov	r0, r3
 8005e42:	f000 fd7d 	bl	8006940 <TIM_CCxChannelCmd>
      break;
 8005e46:	e016      	b.n	8005e76 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	2104      	movs	r1, #4
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 fd75 	bl	8006940 <TIM_CCxChannelCmd>
      break;
 8005e56:	e00e      	b.n	8005e76 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	2100      	movs	r1, #0
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 fd6d 	bl	8006940 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	2104      	movs	r1, #4
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 fd66 	bl	8006940 <TIM_CCxChannelCmd>
      break;
 8005e74:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f042 0201 	orr.w	r2, r2, #1
 8005e84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d020      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d01b      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0202 	mvn.w	r2, #2
 8005ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fa65 	bl	80063aa <HAL_TIM_IC_CaptureCallback>
 8005ee0:	e005      	b.n	8005eee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fa57 	bl	8006396 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fa68 	bl	80063be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f003 0304 	and.w	r3, r3, #4
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d020      	beq.n	8005f40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01b      	beq.n	8005f40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0204 	mvn.w	r2, #4
 8005f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2202      	movs	r2, #2
 8005f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fa3f 	bl	80063aa <HAL_TIM_IC_CaptureCallback>
 8005f2c:	e005      	b.n	8005f3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fa31 	bl	8006396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fa42 	bl	80063be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f003 0308 	and.w	r3, r3, #8
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d020      	beq.n	8005f8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f003 0308 	and.w	r3, r3, #8
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d01b      	beq.n	8005f8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f06f 0208 	mvn.w	r2, #8
 8005f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2204      	movs	r2, #4
 8005f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fa19 	bl	80063aa <HAL_TIM_IC_CaptureCallback>
 8005f78:	e005      	b.n	8005f86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fa0b 	bl	8006396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fa1c 	bl	80063be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f003 0310 	and.w	r3, r3, #16
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d020      	beq.n	8005fd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f003 0310 	and.w	r3, r3, #16
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01b      	beq.n	8005fd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f06f 0210 	mvn.w	r2, #16
 8005fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2208      	movs	r2, #8
 8005fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f9f3 	bl	80063aa <HAL_TIM_IC_CaptureCallback>
 8005fc4:	e005      	b.n	8005fd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f9e5 	bl	8006396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f9f6 	bl	80063be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00c      	beq.n	8005ffc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d007      	beq.n	8005ffc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f06f 0201 	mvn.w	r2, #1
 8005ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f9c3 	bl	8006382 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00c      	beq.n	8006020 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800600c:	2b00      	cmp	r3, #0
 800600e:	d007      	beq.n	8006020 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fd80 	bl	8006b20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00c      	beq.n	8006044 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d007      	beq.n	8006044 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800603c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f9c7 	bl	80063d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00c      	beq.n	8006068 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b00      	cmp	r3, #0
 8006056:	d007      	beq.n	8006068 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 0220 	mvn.w	r2, #32
 8006060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fd52 	bl	8006b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006068:	bf00      	nop
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800608a:	2302      	movs	r3, #2
 800608c:	e0ae      	b.n	80061ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b0c      	cmp	r3, #12
 800609a:	f200 809f 	bhi.w	80061dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800609e:	a201      	add	r2, pc, #4	@ (adr r2, 80060a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a4:	080060d9 	.word	0x080060d9
 80060a8:	080061dd 	.word	0x080061dd
 80060ac:	080061dd 	.word	0x080061dd
 80060b0:	080061dd 	.word	0x080061dd
 80060b4:	08006119 	.word	0x08006119
 80060b8:	080061dd 	.word	0x080061dd
 80060bc:	080061dd 	.word	0x080061dd
 80060c0:	080061dd 	.word	0x080061dd
 80060c4:	0800615b 	.word	0x0800615b
 80060c8:	080061dd 	.word	0x080061dd
 80060cc:	080061dd 	.word	0x080061dd
 80060d0:	080061dd 	.word	0x080061dd
 80060d4:	0800619b 	.word	0x0800619b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68b9      	ldr	r1, [r7, #8]
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fa08 	bl	80064f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0208 	orr.w	r2, r2, #8
 80060f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699a      	ldr	r2, [r3, #24]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 0204 	bic.w	r2, r2, #4
 8006102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6999      	ldr	r1, [r3, #24]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	691a      	ldr	r2, [r3, #16]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	619a      	str	r2, [r3, #24]
      break;
 8006116:	e064      	b.n	80061e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	4618      	mov	r0, r3
 8006120:	f000 fa4e 	bl	80065c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699a      	ldr	r2, [r3, #24]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699a      	ldr	r2, [r3, #24]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6999      	ldr	r1, [r3, #24]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	021a      	lsls	r2, r3, #8
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	619a      	str	r2, [r3, #24]
      break;
 8006158:	e043      	b.n	80061e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	4618      	mov	r0, r3
 8006162:	f000 fa99 	bl	8006698 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69da      	ldr	r2, [r3, #28]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 0208 	orr.w	r2, r2, #8
 8006174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69da      	ldr	r2, [r3, #28]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 0204 	bic.w	r2, r2, #4
 8006184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69d9      	ldr	r1, [r3, #28]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	691a      	ldr	r2, [r3, #16]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	61da      	str	r2, [r3, #28]
      break;
 8006198:	e023      	b.n	80061e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68b9      	ldr	r1, [r7, #8]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 fae3 	bl	800676c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69da      	ldr	r2, [r3, #28]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69da      	ldr	r2, [r3, #28]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	69d9      	ldr	r1, [r3, #28]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	021a      	lsls	r2, r3, #8
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	61da      	str	r2, [r3, #28]
      break;
 80061da:	e002      	b.n	80061e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	75fb      	strb	r3, [r7, #23]
      break;
 80061e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_TIM_ConfigClockSource+0x1c>
 800620c:	2302      	movs	r3, #2
 800620e:	e0b4      	b.n	800637a <HAL_TIM_ConfigClockSource+0x186>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800622e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006248:	d03e      	beq.n	80062c8 <HAL_TIM_ConfigClockSource+0xd4>
 800624a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800624e:	f200 8087 	bhi.w	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006256:	f000 8086 	beq.w	8006366 <HAL_TIM_ConfigClockSource+0x172>
 800625a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800625e:	d87f      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006260:	2b70      	cmp	r3, #112	@ 0x70
 8006262:	d01a      	beq.n	800629a <HAL_TIM_ConfigClockSource+0xa6>
 8006264:	2b70      	cmp	r3, #112	@ 0x70
 8006266:	d87b      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006268:	2b60      	cmp	r3, #96	@ 0x60
 800626a:	d050      	beq.n	800630e <HAL_TIM_ConfigClockSource+0x11a>
 800626c:	2b60      	cmp	r3, #96	@ 0x60
 800626e:	d877      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006270:	2b50      	cmp	r3, #80	@ 0x50
 8006272:	d03c      	beq.n	80062ee <HAL_TIM_ConfigClockSource+0xfa>
 8006274:	2b50      	cmp	r3, #80	@ 0x50
 8006276:	d873      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006278:	2b40      	cmp	r3, #64	@ 0x40
 800627a:	d058      	beq.n	800632e <HAL_TIM_ConfigClockSource+0x13a>
 800627c:	2b40      	cmp	r3, #64	@ 0x40
 800627e:	d86f      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006280:	2b30      	cmp	r3, #48	@ 0x30
 8006282:	d064      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x15a>
 8006284:	2b30      	cmp	r3, #48	@ 0x30
 8006286:	d86b      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006288:	2b20      	cmp	r3, #32
 800628a:	d060      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x15a>
 800628c:	2b20      	cmp	r3, #32
 800628e:	d867      	bhi.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
 8006290:	2b00      	cmp	r3, #0
 8006292:	d05c      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x15a>
 8006294:	2b10      	cmp	r3, #16
 8006296:	d05a      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x15a>
 8006298:	e062      	b.n	8006360 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062aa:	f000 fb29 	bl	8006900 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	609a      	str	r2, [r3, #8]
      break;
 80062c6:	e04f      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062d8:	f000 fb12 	bl	8006900 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062ea:	609a      	str	r2, [r3, #8]
      break;
 80062ec:	e03c      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062fa:	461a      	mov	r2, r3
 80062fc:	f000 fa86 	bl	800680c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2150      	movs	r1, #80	@ 0x50
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fadf 	bl	80068ca <TIM_ITRx_SetConfig>
      break;
 800630c:	e02c      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800631a:	461a      	mov	r2, r3
 800631c:	f000 faa5 	bl	800686a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2160      	movs	r1, #96	@ 0x60
 8006326:	4618      	mov	r0, r3
 8006328:	f000 facf 	bl	80068ca <TIM_ITRx_SetConfig>
      break;
 800632c:	e01c      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800633a:	461a      	mov	r2, r3
 800633c:	f000 fa66 	bl	800680c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2140      	movs	r1, #64	@ 0x40
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fabf 	bl	80068ca <TIM_ITRx_SetConfig>
      break;
 800634c:	e00c      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4619      	mov	r1, r3
 8006358:	4610      	mov	r0, r2
 800635a:	f000 fab6 	bl	80068ca <TIM_ITRx_SetConfig>
      break;
 800635e:	e003      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	73fb      	strb	r3, [r7, #15]
      break;
 8006364:	e000      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006378:	7bfb      	ldrb	r3, [r7, #15]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800638a:	bf00      	nop
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
	...

080063e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a37      	ldr	r2, [pc, #220]	@ (80064d8 <TIM_Base_SetConfig+0xf0>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00f      	beq.n	8006420 <TIM_Base_SetConfig+0x38>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006406:	d00b      	beq.n	8006420 <TIM_Base_SetConfig+0x38>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a34      	ldr	r2, [pc, #208]	@ (80064dc <TIM_Base_SetConfig+0xf4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d007      	beq.n	8006420 <TIM_Base_SetConfig+0x38>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a33      	ldr	r2, [pc, #204]	@ (80064e0 <TIM_Base_SetConfig+0xf8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d003      	beq.n	8006420 <TIM_Base_SetConfig+0x38>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a32      	ldr	r2, [pc, #200]	@ (80064e4 <TIM_Base_SetConfig+0xfc>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d108      	bne.n	8006432 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a28      	ldr	r2, [pc, #160]	@ (80064d8 <TIM_Base_SetConfig+0xf0>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d01b      	beq.n	8006472 <TIM_Base_SetConfig+0x8a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006440:	d017      	beq.n	8006472 <TIM_Base_SetConfig+0x8a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a25      	ldr	r2, [pc, #148]	@ (80064dc <TIM_Base_SetConfig+0xf4>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d013      	beq.n	8006472 <TIM_Base_SetConfig+0x8a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a24      	ldr	r2, [pc, #144]	@ (80064e0 <TIM_Base_SetConfig+0xf8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d00f      	beq.n	8006472 <TIM_Base_SetConfig+0x8a>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a23      	ldr	r2, [pc, #140]	@ (80064e4 <TIM_Base_SetConfig+0xfc>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d00b      	beq.n	8006472 <TIM_Base_SetConfig+0x8a>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a22      	ldr	r2, [pc, #136]	@ (80064e8 <TIM_Base_SetConfig+0x100>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d007      	beq.n	8006472 <TIM_Base_SetConfig+0x8a>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a21      	ldr	r2, [pc, #132]	@ (80064ec <TIM_Base_SetConfig+0x104>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d003      	beq.n	8006472 <TIM_Base_SetConfig+0x8a>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a20      	ldr	r2, [pc, #128]	@ (80064f0 <TIM_Base_SetConfig+0x108>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d108      	bne.n	8006484 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	4313      	orrs	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a0c      	ldr	r2, [pc, #48]	@ (80064d8 <TIM_Base_SetConfig+0xf0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d103      	bne.n	80064b2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	691a      	ldr	r2, [r3, #16]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f043 0204 	orr.w	r2, r3, #4
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	601a      	str	r2, [r3, #0]
}
 80064ca:	bf00      	nop
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	40010000 	.word	0x40010000
 80064dc:	40000400 	.word	0x40000400
 80064e0:	40000800 	.word	0x40000800
 80064e4:	40000c00 	.word	0x40000c00
 80064e8:	40014000 	.word	0x40014000
 80064ec:	40014400 	.word	0x40014400
 80064f0:	40014800 	.word	0x40014800

080064f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	f023 0201 	bic.w	r2, r3, #1
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f023 0303 	bic.w	r3, r3, #3
 800652a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f023 0302 	bic.w	r3, r3, #2
 800653c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	4313      	orrs	r3, r2
 8006546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a1c      	ldr	r2, [pc, #112]	@ (80065bc <TIM_OC1_SetConfig+0xc8>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d10c      	bne.n	800656a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f023 0308 	bic.w	r3, r3, #8
 8006556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f023 0304 	bic.w	r3, r3, #4
 8006568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a13      	ldr	r2, [pc, #76]	@ (80065bc <TIM_OC1_SetConfig+0xc8>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d111      	bne.n	8006596 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	621a      	str	r2, [r3, #32]
}
 80065b0:	bf00      	nop
 80065b2:	371c      	adds	r7, #28
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	40010000 	.word	0x40010000

080065c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	f023 0210 	bic.w	r2, r3, #16
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	021b      	lsls	r3, r3, #8
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f023 0320 	bic.w	r3, r3, #32
 800660a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a1e      	ldr	r2, [pc, #120]	@ (8006694 <TIM_OC2_SetConfig+0xd4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d10d      	bne.n	800663c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	4313      	orrs	r3, r2
 8006632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800663a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a15      	ldr	r2, [pc, #84]	@ (8006694 <TIM_OC2_SetConfig+0xd4>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d113      	bne.n	800666c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800664a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006652:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	621a      	str	r2, [r3, #32]
}
 8006686:	bf00      	nop
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	40010000 	.word	0x40010000

08006698 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 0303 	bic.w	r3, r3, #3
 80066ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	021b      	lsls	r3, r3, #8
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006768 <TIM_OC3_SetConfig+0xd0>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d10d      	bne.n	8006712 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	021b      	lsls	r3, r3, #8
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a14      	ldr	r2, [pc, #80]	@ (8006768 <TIM_OC3_SetConfig+0xd0>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d113      	bne.n	8006742 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4313      	orrs	r3, r2
 8006734:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	011b      	lsls	r3, r3, #4
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	4313      	orrs	r3, r2
 8006740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	621a      	str	r2, [r3, #32]
}
 800675c:	bf00      	nop
 800675e:	371c      	adds	r7, #28
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	40010000 	.word	0x40010000

0800676c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800679a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	021b      	lsls	r3, r3, #8
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	031b      	lsls	r3, r3, #12
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a10      	ldr	r2, [pc, #64]	@ (8006808 <TIM_OC4_SetConfig+0x9c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d109      	bne.n	80067e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	019b      	lsls	r3, r3, #6
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	4313      	orrs	r3, r2
 80067de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	621a      	str	r2, [r3, #32]
}
 80067fa:	bf00      	nop
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40010000 	.word	0x40010000

0800680c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	f023 0201 	bic.w	r2, r3, #1
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	011b      	lsls	r3, r3, #4
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	4313      	orrs	r3, r2
 8006840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f023 030a 	bic.w	r3, r3, #10
 8006848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	4313      	orrs	r3, r2
 8006850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	621a      	str	r2, [r3, #32]
}
 800685e:	bf00      	nop
 8006860:	371c      	adds	r7, #28
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800686a:	b480      	push	{r7}
 800686c:	b087      	sub	sp, #28
 800686e:	af00      	add	r7, sp, #0
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	f023 0210 	bic.w	r2, r3, #16
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006894:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	031b      	lsls	r3, r3, #12
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	4313      	orrs	r3, r2
 800689e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	011b      	lsls	r3, r3, #4
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	621a      	str	r2, [r3, #32]
}
 80068be:	bf00      	nop
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b085      	sub	sp, #20
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	f043 0307 	orr.w	r3, r3, #7
 80068ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	609a      	str	r2, [r3, #8]
}
 80068f4:	bf00      	nop
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
 800690c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800691a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	021a      	lsls	r2, r3, #8
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	431a      	orrs	r2, r3
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	4313      	orrs	r3, r2
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	4313      	orrs	r3, r2
 800692c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	609a      	str	r2, [r3, #8]
}
 8006934:	bf00      	nop
 8006936:	371c      	adds	r7, #28
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f003 031f 	and.w	r3, r3, #31
 8006952:	2201      	movs	r2, #1
 8006954:	fa02 f303 	lsl.w	r3, r2, r3
 8006958:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a1a      	ldr	r2, [r3, #32]
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	43db      	mvns	r3, r3
 8006962:	401a      	ands	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a1a      	ldr	r2, [r3, #32]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	f003 031f 	and.w	r3, r3, #31
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	fa01 f303 	lsl.w	r3, r1, r3
 8006978:	431a      	orrs	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	621a      	str	r2, [r3, #32]
}
 800697e:	bf00      	nop
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
	...

0800698c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069a0:	2302      	movs	r3, #2
 80069a2:	e050      	b.n	8006a46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d018      	beq.n	8006a1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069f0:	d013      	beq.n	8006a1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a18      	ldr	r2, [pc, #96]	@ (8006a58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00e      	beq.n	8006a1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a16      	ldr	r2, [pc, #88]	@ (8006a5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d009      	beq.n	8006a1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a15      	ldr	r2, [pc, #84]	@ (8006a60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d004      	beq.n	8006a1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a13      	ldr	r2, [pc, #76]	@ (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d10c      	bne.n	8006a34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	40010000 	.word	0x40010000
 8006a58:	40000400 	.word	0x40000400
 8006a5c:	40000800 	.word	0x40000800
 8006a60:	40000c00 	.word	0x40000c00
 8006a64:	40014000 	.word	0x40014000

08006a68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e03d      	b.n	8006b00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <siprintf>:
 8006b34:	b40e      	push	{r1, r2, r3}
 8006b36:	b510      	push	{r4, lr}
 8006b38:	b09d      	sub	sp, #116	@ 0x74
 8006b3a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006b3c:	9002      	str	r0, [sp, #8]
 8006b3e:	9006      	str	r0, [sp, #24]
 8006b40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b44:	480a      	ldr	r0, [pc, #40]	@ (8006b70 <siprintf+0x3c>)
 8006b46:	9107      	str	r1, [sp, #28]
 8006b48:	9104      	str	r1, [sp, #16]
 8006b4a:	490a      	ldr	r1, [pc, #40]	@ (8006b74 <siprintf+0x40>)
 8006b4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b50:	9105      	str	r1, [sp, #20]
 8006b52:	2400      	movs	r4, #0
 8006b54:	a902      	add	r1, sp, #8
 8006b56:	6800      	ldr	r0, [r0, #0]
 8006b58:	9301      	str	r3, [sp, #4]
 8006b5a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006b5c:	f000 f89c 	bl	8006c98 <_svfiprintf_r>
 8006b60:	9b02      	ldr	r3, [sp, #8]
 8006b62:	701c      	strb	r4, [r3, #0]
 8006b64:	b01d      	add	sp, #116	@ 0x74
 8006b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b6a:	b003      	add	sp, #12
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	2000026c 	.word	0x2000026c
 8006b74:	ffff0208 	.word	0xffff0208

08006b78 <memset>:
 8006b78:	4402      	add	r2, r0
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d100      	bne.n	8006b82 <memset+0xa>
 8006b80:	4770      	bx	lr
 8006b82:	f803 1b01 	strb.w	r1, [r3], #1
 8006b86:	e7f9      	b.n	8006b7c <memset+0x4>

08006b88 <__errno>:
 8006b88:	4b01      	ldr	r3, [pc, #4]	@ (8006b90 <__errno+0x8>)
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	2000026c 	.word	0x2000026c

08006b94 <__libc_init_array>:
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	4d0d      	ldr	r5, [pc, #52]	@ (8006bcc <__libc_init_array+0x38>)
 8006b98:	4c0d      	ldr	r4, [pc, #52]	@ (8006bd0 <__libc_init_array+0x3c>)
 8006b9a:	1b64      	subs	r4, r4, r5
 8006b9c:	10a4      	asrs	r4, r4, #2
 8006b9e:	2600      	movs	r6, #0
 8006ba0:	42a6      	cmp	r6, r4
 8006ba2:	d109      	bne.n	8006bb8 <__libc_init_array+0x24>
 8006ba4:	4d0b      	ldr	r5, [pc, #44]	@ (8006bd4 <__libc_init_array+0x40>)
 8006ba6:	4c0c      	ldr	r4, [pc, #48]	@ (8006bd8 <__libc_init_array+0x44>)
 8006ba8:	f000 fc64 	bl	8007474 <_init>
 8006bac:	1b64      	subs	r4, r4, r5
 8006bae:	10a4      	asrs	r4, r4, #2
 8006bb0:	2600      	movs	r6, #0
 8006bb2:	42a6      	cmp	r6, r4
 8006bb4:	d105      	bne.n	8006bc2 <__libc_init_array+0x2e>
 8006bb6:	bd70      	pop	{r4, r5, r6, pc}
 8006bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bbc:	4798      	blx	r3
 8006bbe:	3601      	adds	r6, #1
 8006bc0:	e7ee      	b.n	8006ba0 <__libc_init_array+0xc>
 8006bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc6:	4798      	blx	r3
 8006bc8:	3601      	adds	r6, #1
 8006bca:	e7f2      	b.n	8006bb2 <__libc_init_array+0x1e>
 8006bcc:	08053ebc 	.word	0x08053ebc
 8006bd0:	08053ebc 	.word	0x08053ebc
 8006bd4:	08053ebc 	.word	0x08053ebc
 8006bd8:	08053ec0 	.word	0x08053ec0

08006bdc <__retarget_lock_acquire_recursive>:
 8006bdc:	4770      	bx	lr

08006bde <__retarget_lock_release_recursive>:
 8006bde:	4770      	bx	lr

08006be0 <__ssputs_r>:
 8006be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be4:	688e      	ldr	r6, [r1, #8]
 8006be6:	461f      	mov	r7, r3
 8006be8:	42be      	cmp	r6, r7
 8006bea:	680b      	ldr	r3, [r1, #0]
 8006bec:	4682      	mov	sl, r0
 8006bee:	460c      	mov	r4, r1
 8006bf0:	4690      	mov	r8, r2
 8006bf2:	d82d      	bhi.n	8006c50 <__ssputs_r+0x70>
 8006bf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bf8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006bfc:	d026      	beq.n	8006c4c <__ssputs_r+0x6c>
 8006bfe:	6965      	ldr	r5, [r4, #20]
 8006c00:	6909      	ldr	r1, [r1, #16]
 8006c02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c06:	eba3 0901 	sub.w	r9, r3, r1
 8006c0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c0e:	1c7b      	adds	r3, r7, #1
 8006c10:	444b      	add	r3, r9
 8006c12:	106d      	asrs	r5, r5, #1
 8006c14:	429d      	cmp	r5, r3
 8006c16:	bf38      	it	cc
 8006c18:	461d      	movcc	r5, r3
 8006c1a:	0553      	lsls	r3, r2, #21
 8006c1c:	d527      	bpl.n	8006c6e <__ssputs_r+0x8e>
 8006c1e:	4629      	mov	r1, r5
 8006c20:	f000 f958 	bl	8006ed4 <_malloc_r>
 8006c24:	4606      	mov	r6, r0
 8006c26:	b360      	cbz	r0, 8006c82 <__ssputs_r+0xa2>
 8006c28:	6921      	ldr	r1, [r4, #16]
 8006c2a:	464a      	mov	r2, r9
 8006c2c:	f000 fbc2 	bl	80073b4 <memcpy>
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c3a:	81a3      	strh	r3, [r4, #12]
 8006c3c:	6126      	str	r6, [r4, #16]
 8006c3e:	6165      	str	r5, [r4, #20]
 8006c40:	444e      	add	r6, r9
 8006c42:	eba5 0509 	sub.w	r5, r5, r9
 8006c46:	6026      	str	r6, [r4, #0]
 8006c48:	60a5      	str	r5, [r4, #8]
 8006c4a:	463e      	mov	r6, r7
 8006c4c:	42be      	cmp	r6, r7
 8006c4e:	d900      	bls.n	8006c52 <__ssputs_r+0x72>
 8006c50:	463e      	mov	r6, r7
 8006c52:	6820      	ldr	r0, [r4, #0]
 8006c54:	4632      	mov	r2, r6
 8006c56:	4641      	mov	r1, r8
 8006c58:	f000 fb82 	bl	8007360 <memmove>
 8006c5c:	68a3      	ldr	r3, [r4, #8]
 8006c5e:	1b9b      	subs	r3, r3, r6
 8006c60:	60a3      	str	r3, [r4, #8]
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	4433      	add	r3, r6
 8006c66:	6023      	str	r3, [r4, #0]
 8006c68:	2000      	movs	r0, #0
 8006c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6e:	462a      	mov	r2, r5
 8006c70:	f000 fb48 	bl	8007304 <_realloc_r>
 8006c74:	4606      	mov	r6, r0
 8006c76:	2800      	cmp	r0, #0
 8006c78:	d1e0      	bne.n	8006c3c <__ssputs_r+0x5c>
 8006c7a:	6921      	ldr	r1, [r4, #16]
 8006c7c:	4650      	mov	r0, sl
 8006c7e:	f000 fba7 	bl	80073d0 <_free_r>
 8006c82:	230c      	movs	r3, #12
 8006c84:	f8ca 3000 	str.w	r3, [sl]
 8006c88:	89a3      	ldrh	r3, [r4, #12]
 8006c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c8e:	81a3      	strh	r3, [r4, #12]
 8006c90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c94:	e7e9      	b.n	8006c6a <__ssputs_r+0x8a>
	...

08006c98 <_svfiprintf_r>:
 8006c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9c:	4698      	mov	r8, r3
 8006c9e:	898b      	ldrh	r3, [r1, #12]
 8006ca0:	061b      	lsls	r3, r3, #24
 8006ca2:	b09d      	sub	sp, #116	@ 0x74
 8006ca4:	4607      	mov	r7, r0
 8006ca6:	460d      	mov	r5, r1
 8006ca8:	4614      	mov	r4, r2
 8006caa:	d510      	bpl.n	8006cce <_svfiprintf_r+0x36>
 8006cac:	690b      	ldr	r3, [r1, #16]
 8006cae:	b973      	cbnz	r3, 8006cce <_svfiprintf_r+0x36>
 8006cb0:	2140      	movs	r1, #64	@ 0x40
 8006cb2:	f000 f90f 	bl	8006ed4 <_malloc_r>
 8006cb6:	6028      	str	r0, [r5, #0]
 8006cb8:	6128      	str	r0, [r5, #16]
 8006cba:	b930      	cbnz	r0, 8006cca <_svfiprintf_r+0x32>
 8006cbc:	230c      	movs	r3, #12
 8006cbe:	603b      	str	r3, [r7, #0]
 8006cc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006cc4:	b01d      	add	sp, #116	@ 0x74
 8006cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cca:	2340      	movs	r3, #64	@ 0x40
 8006ccc:	616b      	str	r3, [r5, #20]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cd2:	2320      	movs	r3, #32
 8006cd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cdc:	2330      	movs	r3, #48	@ 0x30
 8006cde:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006e7c <_svfiprintf_r+0x1e4>
 8006ce2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ce6:	f04f 0901 	mov.w	r9, #1
 8006cea:	4623      	mov	r3, r4
 8006cec:	469a      	mov	sl, r3
 8006cee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cf2:	b10a      	cbz	r2, 8006cf8 <_svfiprintf_r+0x60>
 8006cf4:	2a25      	cmp	r2, #37	@ 0x25
 8006cf6:	d1f9      	bne.n	8006cec <_svfiprintf_r+0x54>
 8006cf8:	ebba 0b04 	subs.w	fp, sl, r4
 8006cfc:	d00b      	beq.n	8006d16 <_svfiprintf_r+0x7e>
 8006cfe:	465b      	mov	r3, fp
 8006d00:	4622      	mov	r2, r4
 8006d02:	4629      	mov	r1, r5
 8006d04:	4638      	mov	r0, r7
 8006d06:	f7ff ff6b 	bl	8006be0 <__ssputs_r>
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	f000 80a7 	beq.w	8006e5e <_svfiprintf_r+0x1c6>
 8006d10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d12:	445a      	add	r2, fp
 8006d14:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d16:	f89a 3000 	ldrb.w	r3, [sl]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 809f 	beq.w	8006e5e <_svfiprintf_r+0x1c6>
 8006d20:	2300      	movs	r3, #0
 8006d22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d2a:	f10a 0a01 	add.w	sl, sl, #1
 8006d2e:	9304      	str	r3, [sp, #16]
 8006d30:	9307      	str	r3, [sp, #28]
 8006d32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d36:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d38:	4654      	mov	r4, sl
 8006d3a:	2205      	movs	r2, #5
 8006d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d40:	484e      	ldr	r0, [pc, #312]	@ (8006e7c <_svfiprintf_r+0x1e4>)
 8006d42:	f7f9 fa4d 	bl	80001e0 <memchr>
 8006d46:	9a04      	ldr	r2, [sp, #16]
 8006d48:	b9d8      	cbnz	r0, 8006d82 <_svfiprintf_r+0xea>
 8006d4a:	06d0      	lsls	r0, r2, #27
 8006d4c:	bf44      	itt	mi
 8006d4e:	2320      	movmi	r3, #32
 8006d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d54:	0711      	lsls	r1, r2, #28
 8006d56:	bf44      	itt	mi
 8006d58:	232b      	movmi	r3, #43	@ 0x2b
 8006d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d64:	d015      	beq.n	8006d92 <_svfiprintf_r+0xfa>
 8006d66:	9a07      	ldr	r2, [sp, #28]
 8006d68:	4654      	mov	r4, sl
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	f04f 0c0a 	mov.w	ip, #10
 8006d70:	4621      	mov	r1, r4
 8006d72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d76:	3b30      	subs	r3, #48	@ 0x30
 8006d78:	2b09      	cmp	r3, #9
 8006d7a:	d94b      	bls.n	8006e14 <_svfiprintf_r+0x17c>
 8006d7c:	b1b0      	cbz	r0, 8006dac <_svfiprintf_r+0x114>
 8006d7e:	9207      	str	r2, [sp, #28]
 8006d80:	e014      	b.n	8006dac <_svfiprintf_r+0x114>
 8006d82:	eba0 0308 	sub.w	r3, r0, r8
 8006d86:	fa09 f303 	lsl.w	r3, r9, r3
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	9304      	str	r3, [sp, #16]
 8006d8e:	46a2      	mov	sl, r4
 8006d90:	e7d2      	b.n	8006d38 <_svfiprintf_r+0xa0>
 8006d92:	9b03      	ldr	r3, [sp, #12]
 8006d94:	1d19      	adds	r1, r3, #4
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	9103      	str	r1, [sp, #12]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	bfbb      	ittet	lt
 8006d9e:	425b      	neglt	r3, r3
 8006da0:	f042 0202 	orrlt.w	r2, r2, #2
 8006da4:	9307      	strge	r3, [sp, #28]
 8006da6:	9307      	strlt	r3, [sp, #28]
 8006da8:	bfb8      	it	lt
 8006daa:	9204      	strlt	r2, [sp, #16]
 8006dac:	7823      	ldrb	r3, [r4, #0]
 8006dae:	2b2e      	cmp	r3, #46	@ 0x2e
 8006db0:	d10a      	bne.n	8006dc8 <_svfiprintf_r+0x130>
 8006db2:	7863      	ldrb	r3, [r4, #1]
 8006db4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006db6:	d132      	bne.n	8006e1e <_svfiprintf_r+0x186>
 8006db8:	9b03      	ldr	r3, [sp, #12]
 8006dba:	1d1a      	adds	r2, r3, #4
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	9203      	str	r2, [sp, #12]
 8006dc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006dc4:	3402      	adds	r4, #2
 8006dc6:	9305      	str	r3, [sp, #20]
 8006dc8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006e8c <_svfiprintf_r+0x1f4>
 8006dcc:	7821      	ldrb	r1, [r4, #0]
 8006dce:	2203      	movs	r2, #3
 8006dd0:	4650      	mov	r0, sl
 8006dd2:	f7f9 fa05 	bl	80001e0 <memchr>
 8006dd6:	b138      	cbz	r0, 8006de8 <_svfiprintf_r+0x150>
 8006dd8:	9b04      	ldr	r3, [sp, #16]
 8006dda:	eba0 000a 	sub.w	r0, r0, sl
 8006dde:	2240      	movs	r2, #64	@ 0x40
 8006de0:	4082      	lsls	r2, r0
 8006de2:	4313      	orrs	r3, r2
 8006de4:	3401      	adds	r4, #1
 8006de6:	9304      	str	r3, [sp, #16]
 8006de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dec:	4824      	ldr	r0, [pc, #144]	@ (8006e80 <_svfiprintf_r+0x1e8>)
 8006dee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006df2:	2206      	movs	r2, #6
 8006df4:	f7f9 f9f4 	bl	80001e0 <memchr>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d036      	beq.n	8006e6a <_svfiprintf_r+0x1d2>
 8006dfc:	4b21      	ldr	r3, [pc, #132]	@ (8006e84 <_svfiprintf_r+0x1ec>)
 8006dfe:	bb1b      	cbnz	r3, 8006e48 <_svfiprintf_r+0x1b0>
 8006e00:	9b03      	ldr	r3, [sp, #12]
 8006e02:	3307      	adds	r3, #7
 8006e04:	f023 0307 	bic.w	r3, r3, #7
 8006e08:	3308      	adds	r3, #8
 8006e0a:	9303      	str	r3, [sp, #12]
 8006e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e0e:	4433      	add	r3, r6
 8006e10:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e12:	e76a      	b.n	8006cea <_svfiprintf_r+0x52>
 8006e14:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e18:	460c      	mov	r4, r1
 8006e1a:	2001      	movs	r0, #1
 8006e1c:	e7a8      	b.n	8006d70 <_svfiprintf_r+0xd8>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	3401      	adds	r4, #1
 8006e22:	9305      	str	r3, [sp, #20]
 8006e24:	4619      	mov	r1, r3
 8006e26:	f04f 0c0a 	mov.w	ip, #10
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e30:	3a30      	subs	r2, #48	@ 0x30
 8006e32:	2a09      	cmp	r2, #9
 8006e34:	d903      	bls.n	8006e3e <_svfiprintf_r+0x1a6>
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0c6      	beq.n	8006dc8 <_svfiprintf_r+0x130>
 8006e3a:	9105      	str	r1, [sp, #20]
 8006e3c:	e7c4      	b.n	8006dc8 <_svfiprintf_r+0x130>
 8006e3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e42:	4604      	mov	r4, r0
 8006e44:	2301      	movs	r3, #1
 8006e46:	e7f0      	b.n	8006e2a <_svfiprintf_r+0x192>
 8006e48:	ab03      	add	r3, sp, #12
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	462a      	mov	r2, r5
 8006e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006e88 <_svfiprintf_r+0x1f0>)
 8006e50:	a904      	add	r1, sp, #16
 8006e52:	4638      	mov	r0, r7
 8006e54:	f3af 8000 	nop.w
 8006e58:	1c42      	adds	r2, r0, #1
 8006e5a:	4606      	mov	r6, r0
 8006e5c:	d1d6      	bne.n	8006e0c <_svfiprintf_r+0x174>
 8006e5e:	89ab      	ldrh	r3, [r5, #12]
 8006e60:	065b      	lsls	r3, r3, #25
 8006e62:	f53f af2d 	bmi.w	8006cc0 <_svfiprintf_r+0x28>
 8006e66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e68:	e72c      	b.n	8006cc4 <_svfiprintf_r+0x2c>
 8006e6a:	ab03      	add	r3, sp, #12
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	462a      	mov	r2, r5
 8006e70:	4b05      	ldr	r3, [pc, #20]	@ (8006e88 <_svfiprintf_r+0x1f0>)
 8006e72:	a904      	add	r1, sp, #16
 8006e74:	4638      	mov	r0, r7
 8006e76:	f000 f91b 	bl	80070b0 <_printf_i>
 8006e7a:	e7ed      	b.n	8006e58 <_svfiprintf_r+0x1c0>
 8006e7c:	08053e80 	.word	0x08053e80
 8006e80:	08053e8a 	.word	0x08053e8a
 8006e84:	00000000 	.word	0x00000000
 8006e88:	08006be1 	.word	0x08006be1
 8006e8c:	08053e86 	.word	0x08053e86

08006e90 <sbrk_aligned>:
 8006e90:	b570      	push	{r4, r5, r6, lr}
 8006e92:	4e0f      	ldr	r6, [pc, #60]	@ (8006ed0 <sbrk_aligned+0x40>)
 8006e94:	460c      	mov	r4, r1
 8006e96:	6831      	ldr	r1, [r6, #0]
 8006e98:	4605      	mov	r5, r0
 8006e9a:	b911      	cbnz	r1, 8006ea2 <sbrk_aligned+0x12>
 8006e9c:	f000 fa7a 	bl	8007394 <_sbrk_r>
 8006ea0:	6030      	str	r0, [r6, #0]
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	f000 fa75 	bl	8007394 <_sbrk_r>
 8006eaa:	1c43      	adds	r3, r0, #1
 8006eac:	d103      	bne.n	8006eb6 <sbrk_aligned+0x26>
 8006eae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	bd70      	pop	{r4, r5, r6, pc}
 8006eb6:	1cc4      	adds	r4, r0, #3
 8006eb8:	f024 0403 	bic.w	r4, r4, #3
 8006ebc:	42a0      	cmp	r0, r4
 8006ebe:	d0f8      	beq.n	8006eb2 <sbrk_aligned+0x22>
 8006ec0:	1a21      	subs	r1, r4, r0
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	f000 fa66 	bl	8007394 <_sbrk_r>
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d1f2      	bne.n	8006eb2 <sbrk_aligned+0x22>
 8006ecc:	e7ef      	b.n	8006eae <sbrk_aligned+0x1e>
 8006ece:	bf00      	nop
 8006ed0:	200006f8 	.word	0x200006f8

08006ed4 <_malloc_r>:
 8006ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ed8:	1ccd      	adds	r5, r1, #3
 8006eda:	f025 0503 	bic.w	r5, r5, #3
 8006ede:	3508      	adds	r5, #8
 8006ee0:	2d0c      	cmp	r5, #12
 8006ee2:	bf38      	it	cc
 8006ee4:	250c      	movcc	r5, #12
 8006ee6:	2d00      	cmp	r5, #0
 8006ee8:	4606      	mov	r6, r0
 8006eea:	db01      	blt.n	8006ef0 <_malloc_r+0x1c>
 8006eec:	42a9      	cmp	r1, r5
 8006eee:	d904      	bls.n	8006efa <_malloc_r+0x26>
 8006ef0:	230c      	movs	r3, #12
 8006ef2:	6033      	str	r3, [r6, #0]
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006efa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006fd0 <_malloc_r+0xfc>
 8006efe:	f000 f9f5 	bl	80072ec <__malloc_lock>
 8006f02:	f8d8 3000 	ldr.w	r3, [r8]
 8006f06:	461c      	mov	r4, r3
 8006f08:	bb44      	cbnz	r4, 8006f5c <_malloc_r+0x88>
 8006f0a:	4629      	mov	r1, r5
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	f7ff ffbf 	bl	8006e90 <sbrk_aligned>
 8006f12:	1c43      	adds	r3, r0, #1
 8006f14:	4604      	mov	r4, r0
 8006f16:	d158      	bne.n	8006fca <_malloc_r+0xf6>
 8006f18:	f8d8 4000 	ldr.w	r4, [r8]
 8006f1c:	4627      	mov	r7, r4
 8006f1e:	2f00      	cmp	r7, #0
 8006f20:	d143      	bne.n	8006faa <_malloc_r+0xd6>
 8006f22:	2c00      	cmp	r4, #0
 8006f24:	d04b      	beq.n	8006fbe <_malloc_r+0xea>
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	4639      	mov	r1, r7
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	eb04 0903 	add.w	r9, r4, r3
 8006f30:	f000 fa30 	bl	8007394 <_sbrk_r>
 8006f34:	4581      	cmp	r9, r0
 8006f36:	d142      	bne.n	8006fbe <_malloc_r+0xea>
 8006f38:	6821      	ldr	r1, [r4, #0]
 8006f3a:	1a6d      	subs	r5, r5, r1
 8006f3c:	4629      	mov	r1, r5
 8006f3e:	4630      	mov	r0, r6
 8006f40:	f7ff ffa6 	bl	8006e90 <sbrk_aligned>
 8006f44:	3001      	adds	r0, #1
 8006f46:	d03a      	beq.n	8006fbe <_malloc_r+0xea>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	442b      	add	r3, r5
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	f8d8 3000 	ldr.w	r3, [r8]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	bb62      	cbnz	r2, 8006fb0 <_malloc_r+0xdc>
 8006f56:	f8c8 7000 	str.w	r7, [r8]
 8006f5a:	e00f      	b.n	8006f7c <_malloc_r+0xa8>
 8006f5c:	6822      	ldr	r2, [r4, #0]
 8006f5e:	1b52      	subs	r2, r2, r5
 8006f60:	d420      	bmi.n	8006fa4 <_malloc_r+0xd0>
 8006f62:	2a0b      	cmp	r2, #11
 8006f64:	d917      	bls.n	8006f96 <_malloc_r+0xc2>
 8006f66:	1961      	adds	r1, r4, r5
 8006f68:	42a3      	cmp	r3, r4
 8006f6a:	6025      	str	r5, [r4, #0]
 8006f6c:	bf18      	it	ne
 8006f6e:	6059      	strne	r1, [r3, #4]
 8006f70:	6863      	ldr	r3, [r4, #4]
 8006f72:	bf08      	it	eq
 8006f74:	f8c8 1000 	streq.w	r1, [r8]
 8006f78:	5162      	str	r2, [r4, r5]
 8006f7a:	604b      	str	r3, [r1, #4]
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	f000 f9bb 	bl	80072f8 <__malloc_unlock>
 8006f82:	f104 000b 	add.w	r0, r4, #11
 8006f86:	1d23      	adds	r3, r4, #4
 8006f88:	f020 0007 	bic.w	r0, r0, #7
 8006f8c:	1ac2      	subs	r2, r0, r3
 8006f8e:	bf1c      	itt	ne
 8006f90:	1a1b      	subne	r3, r3, r0
 8006f92:	50a3      	strne	r3, [r4, r2]
 8006f94:	e7af      	b.n	8006ef6 <_malloc_r+0x22>
 8006f96:	6862      	ldr	r2, [r4, #4]
 8006f98:	42a3      	cmp	r3, r4
 8006f9a:	bf0c      	ite	eq
 8006f9c:	f8c8 2000 	streq.w	r2, [r8]
 8006fa0:	605a      	strne	r2, [r3, #4]
 8006fa2:	e7eb      	b.n	8006f7c <_malloc_r+0xa8>
 8006fa4:	4623      	mov	r3, r4
 8006fa6:	6864      	ldr	r4, [r4, #4]
 8006fa8:	e7ae      	b.n	8006f08 <_malloc_r+0x34>
 8006faa:	463c      	mov	r4, r7
 8006fac:	687f      	ldr	r7, [r7, #4]
 8006fae:	e7b6      	b.n	8006f1e <_malloc_r+0x4a>
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	42a3      	cmp	r3, r4
 8006fb6:	d1fb      	bne.n	8006fb0 <_malloc_r+0xdc>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	6053      	str	r3, [r2, #4]
 8006fbc:	e7de      	b.n	8006f7c <_malloc_r+0xa8>
 8006fbe:	230c      	movs	r3, #12
 8006fc0:	6033      	str	r3, [r6, #0]
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	f000 f998 	bl	80072f8 <__malloc_unlock>
 8006fc8:	e794      	b.n	8006ef4 <_malloc_r+0x20>
 8006fca:	6005      	str	r5, [r0, #0]
 8006fcc:	e7d6      	b.n	8006f7c <_malloc_r+0xa8>
 8006fce:	bf00      	nop
 8006fd0:	200006fc 	.word	0x200006fc

08006fd4 <_printf_common>:
 8006fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd8:	4616      	mov	r6, r2
 8006fda:	4698      	mov	r8, r3
 8006fdc:	688a      	ldr	r2, [r1, #8]
 8006fde:	690b      	ldr	r3, [r1, #16]
 8006fe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	bfb8      	it	lt
 8006fe8:	4613      	movlt	r3, r2
 8006fea:	6033      	str	r3, [r6, #0]
 8006fec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ff0:	4607      	mov	r7, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	b10a      	cbz	r2, 8006ffa <_printf_common+0x26>
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	6033      	str	r3, [r6, #0]
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	0699      	lsls	r1, r3, #26
 8006ffe:	bf42      	ittt	mi
 8007000:	6833      	ldrmi	r3, [r6, #0]
 8007002:	3302      	addmi	r3, #2
 8007004:	6033      	strmi	r3, [r6, #0]
 8007006:	6825      	ldr	r5, [r4, #0]
 8007008:	f015 0506 	ands.w	r5, r5, #6
 800700c:	d106      	bne.n	800701c <_printf_common+0x48>
 800700e:	f104 0a19 	add.w	sl, r4, #25
 8007012:	68e3      	ldr	r3, [r4, #12]
 8007014:	6832      	ldr	r2, [r6, #0]
 8007016:	1a9b      	subs	r3, r3, r2
 8007018:	42ab      	cmp	r3, r5
 800701a:	dc26      	bgt.n	800706a <_printf_common+0x96>
 800701c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007020:	6822      	ldr	r2, [r4, #0]
 8007022:	3b00      	subs	r3, #0
 8007024:	bf18      	it	ne
 8007026:	2301      	movne	r3, #1
 8007028:	0692      	lsls	r2, r2, #26
 800702a:	d42b      	bmi.n	8007084 <_printf_common+0xb0>
 800702c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007030:	4641      	mov	r1, r8
 8007032:	4638      	mov	r0, r7
 8007034:	47c8      	blx	r9
 8007036:	3001      	adds	r0, #1
 8007038:	d01e      	beq.n	8007078 <_printf_common+0xa4>
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	6922      	ldr	r2, [r4, #16]
 800703e:	f003 0306 	and.w	r3, r3, #6
 8007042:	2b04      	cmp	r3, #4
 8007044:	bf02      	ittt	eq
 8007046:	68e5      	ldreq	r5, [r4, #12]
 8007048:	6833      	ldreq	r3, [r6, #0]
 800704a:	1aed      	subeq	r5, r5, r3
 800704c:	68a3      	ldr	r3, [r4, #8]
 800704e:	bf0c      	ite	eq
 8007050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007054:	2500      	movne	r5, #0
 8007056:	4293      	cmp	r3, r2
 8007058:	bfc4      	itt	gt
 800705a:	1a9b      	subgt	r3, r3, r2
 800705c:	18ed      	addgt	r5, r5, r3
 800705e:	2600      	movs	r6, #0
 8007060:	341a      	adds	r4, #26
 8007062:	42b5      	cmp	r5, r6
 8007064:	d11a      	bne.n	800709c <_printf_common+0xc8>
 8007066:	2000      	movs	r0, #0
 8007068:	e008      	b.n	800707c <_printf_common+0xa8>
 800706a:	2301      	movs	r3, #1
 800706c:	4652      	mov	r2, sl
 800706e:	4641      	mov	r1, r8
 8007070:	4638      	mov	r0, r7
 8007072:	47c8      	blx	r9
 8007074:	3001      	adds	r0, #1
 8007076:	d103      	bne.n	8007080 <_printf_common+0xac>
 8007078:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800707c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007080:	3501      	adds	r5, #1
 8007082:	e7c6      	b.n	8007012 <_printf_common+0x3e>
 8007084:	18e1      	adds	r1, r4, r3
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	2030      	movs	r0, #48	@ 0x30
 800708a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800708e:	4422      	add	r2, r4
 8007090:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007094:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007098:	3302      	adds	r3, #2
 800709a:	e7c7      	b.n	800702c <_printf_common+0x58>
 800709c:	2301      	movs	r3, #1
 800709e:	4622      	mov	r2, r4
 80070a0:	4641      	mov	r1, r8
 80070a2:	4638      	mov	r0, r7
 80070a4:	47c8      	blx	r9
 80070a6:	3001      	adds	r0, #1
 80070a8:	d0e6      	beq.n	8007078 <_printf_common+0xa4>
 80070aa:	3601      	adds	r6, #1
 80070ac:	e7d9      	b.n	8007062 <_printf_common+0x8e>
	...

080070b0 <_printf_i>:
 80070b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070b4:	7e0f      	ldrb	r7, [r1, #24]
 80070b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070b8:	2f78      	cmp	r7, #120	@ 0x78
 80070ba:	4691      	mov	r9, r2
 80070bc:	4680      	mov	r8, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	469a      	mov	sl, r3
 80070c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070c6:	d807      	bhi.n	80070d8 <_printf_i+0x28>
 80070c8:	2f62      	cmp	r7, #98	@ 0x62
 80070ca:	d80a      	bhi.n	80070e2 <_printf_i+0x32>
 80070cc:	2f00      	cmp	r7, #0
 80070ce:	f000 80d1 	beq.w	8007274 <_printf_i+0x1c4>
 80070d2:	2f58      	cmp	r7, #88	@ 0x58
 80070d4:	f000 80b8 	beq.w	8007248 <_printf_i+0x198>
 80070d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070e0:	e03a      	b.n	8007158 <_printf_i+0xa8>
 80070e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070e6:	2b15      	cmp	r3, #21
 80070e8:	d8f6      	bhi.n	80070d8 <_printf_i+0x28>
 80070ea:	a101      	add	r1, pc, #4	@ (adr r1, 80070f0 <_printf_i+0x40>)
 80070ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070f0:	08007149 	.word	0x08007149
 80070f4:	0800715d 	.word	0x0800715d
 80070f8:	080070d9 	.word	0x080070d9
 80070fc:	080070d9 	.word	0x080070d9
 8007100:	080070d9 	.word	0x080070d9
 8007104:	080070d9 	.word	0x080070d9
 8007108:	0800715d 	.word	0x0800715d
 800710c:	080070d9 	.word	0x080070d9
 8007110:	080070d9 	.word	0x080070d9
 8007114:	080070d9 	.word	0x080070d9
 8007118:	080070d9 	.word	0x080070d9
 800711c:	0800725b 	.word	0x0800725b
 8007120:	08007187 	.word	0x08007187
 8007124:	08007215 	.word	0x08007215
 8007128:	080070d9 	.word	0x080070d9
 800712c:	080070d9 	.word	0x080070d9
 8007130:	0800727d 	.word	0x0800727d
 8007134:	080070d9 	.word	0x080070d9
 8007138:	08007187 	.word	0x08007187
 800713c:	080070d9 	.word	0x080070d9
 8007140:	080070d9 	.word	0x080070d9
 8007144:	0800721d 	.word	0x0800721d
 8007148:	6833      	ldr	r3, [r6, #0]
 800714a:	1d1a      	adds	r2, r3, #4
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6032      	str	r2, [r6, #0]
 8007150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007154:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007158:	2301      	movs	r3, #1
 800715a:	e09c      	b.n	8007296 <_printf_i+0x1e6>
 800715c:	6833      	ldr	r3, [r6, #0]
 800715e:	6820      	ldr	r0, [r4, #0]
 8007160:	1d19      	adds	r1, r3, #4
 8007162:	6031      	str	r1, [r6, #0]
 8007164:	0606      	lsls	r6, r0, #24
 8007166:	d501      	bpl.n	800716c <_printf_i+0xbc>
 8007168:	681d      	ldr	r5, [r3, #0]
 800716a:	e003      	b.n	8007174 <_printf_i+0xc4>
 800716c:	0645      	lsls	r5, r0, #25
 800716e:	d5fb      	bpl.n	8007168 <_printf_i+0xb8>
 8007170:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007174:	2d00      	cmp	r5, #0
 8007176:	da03      	bge.n	8007180 <_printf_i+0xd0>
 8007178:	232d      	movs	r3, #45	@ 0x2d
 800717a:	426d      	negs	r5, r5
 800717c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007180:	4858      	ldr	r0, [pc, #352]	@ (80072e4 <_printf_i+0x234>)
 8007182:	230a      	movs	r3, #10
 8007184:	e011      	b.n	80071aa <_printf_i+0xfa>
 8007186:	6821      	ldr	r1, [r4, #0]
 8007188:	6833      	ldr	r3, [r6, #0]
 800718a:	0608      	lsls	r0, r1, #24
 800718c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007190:	d402      	bmi.n	8007198 <_printf_i+0xe8>
 8007192:	0649      	lsls	r1, r1, #25
 8007194:	bf48      	it	mi
 8007196:	b2ad      	uxthmi	r5, r5
 8007198:	2f6f      	cmp	r7, #111	@ 0x6f
 800719a:	4852      	ldr	r0, [pc, #328]	@ (80072e4 <_printf_i+0x234>)
 800719c:	6033      	str	r3, [r6, #0]
 800719e:	bf14      	ite	ne
 80071a0:	230a      	movne	r3, #10
 80071a2:	2308      	moveq	r3, #8
 80071a4:	2100      	movs	r1, #0
 80071a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071aa:	6866      	ldr	r6, [r4, #4]
 80071ac:	60a6      	str	r6, [r4, #8]
 80071ae:	2e00      	cmp	r6, #0
 80071b0:	db05      	blt.n	80071be <_printf_i+0x10e>
 80071b2:	6821      	ldr	r1, [r4, #0]
 80071b4:	432e      	orrs	r6, r5
 80071b6:	f021 0104 	bic.w	r1, r1, #4
 80071ba:	6021      	str	r1, [r4, #0]
 80071bc:	d04b      	beq.n	8007256 <_printf_i+0x1a6>
 80071be:	4616      	mov	r6, r2
 80071c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80071c4:	fb03 5711 	mls	r7, r3, r1, r5
 80071c8:	5dc7      	ldrb	r7, [r0, r7]
 80071ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071ce:	462f      	mov	r7, r5
 80071d0:	42bb      	cmp	r3, r7
 80071d2:	460d      	mov	r5, r1
 80071d4:	d9f4      	bls.n	80071c0 <_printf_i+0x110>
 80071d6:	2b08      	cmp	r3, #8
 80071d8:	d10b      	bne.n	80071f2 <_printf_i+0x142>
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	07df      	lsls	r7, r3, #31
 80071de:	d508      	bpl.n	80071f2 <_printf_i+0x142>
 80071e0:	6923      	ldr	r3, [r4, #16]
 80071e2:	6861      	ldr	r1, [r4, #4]
 80071e4:	4299      	cmp	r1, r3
 80071e6:	bfde      	ittt	le
 80071e8:	2330      	movle	r3, #48	@ 0x30
 80071ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071ee:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80071f2:	1b92      	subs	r2, r2, r6
 80071f4:	6122      	str	r2, [r4, #16]
 80071f6:	f8cd a000 	str.w	sl, [sp]
 80071fa:	464b      	mov	r3, r9
 80071fc:	aa03      	add	r2, sp, #12
 80071fe:	4621      	mov	r1, r4
 8007200:	4640      	mov	r0, r8
 8007202:	f7ff fee7 	bl	8006fd4 <_printf_common>
 8007206:	3001      	adds	r0, #1
 8007208:	d14a      	bne.n	80072a0 <_printf_i+0x1f0>
 800720a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800720e:	b004      	add	sp, #16
 8007210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007214:	6823      	ldr	r3, [r4, #0]
 8007216:	f043 0320 	orr.w	r3, r3, #32
 800721a:	6023      	str	r3, [r4, #0]
 800721c:	4832      	ldr	r0, [pc, #200]	@ (80072e8 <_printf_i+0x238>)
 800721e:	2778      	movs	r7, #120	@ 0x78
 8007220:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	6831      	ldr	r1, [r6, #0]
 8007228:	061f      	lsls	r7, r3, #24
 800722a:	f851 5b04 	ldr.w	r5, [r1], #4
 800722e:	d402      	bmi.n	8007236 <_printf_i+0x186>
 8007230:	065f      	lsls	r7, r3, #25
 8007232:	bf48      	it	mi
 8007234:	b2ad      	uxthmi	r5, r5
 8007236:	6031      	str	r1, [r6, #0]
 8007238:	07d9      	lsls	r1, r3, #31
 800723a:	bf44      	itt	mi
 800723c:	f043 0320 	orrmi.w	r3, r3, #32
 8007240:	6023      	strmi	r3, [r4, #0]
 8007242:	b11d      	cbz	r5, 800724c <_printf_i+0x19c>
 8007244:	2310      	movs	r3, #16
 8007246:	e7ad      	b.n	80071a4 <_printf_i+0xf4>
 8007248:	4826      	ldr	r0, [pc, #152]	@ (80072e4 <_printf_i+0x234>)
 800724a:	e7e9      	b.n	8007220 <_printf_i+0x170>
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	f023 0320 	bic.w	r3, r3, #32
 8007252:	6023      	str	r3, [r4, #0]
 8007254:	e7f6      	b.n	8007244 <_printf_i+0x194>
 8007256:	4616      	mov	r6, r2
 8007258:	e7bd      	b.n	80071d6 <_printf_i+0x126>
 800725a:	6833      	ldr	r3, [r6, #0]
 800725c:	6825      	ldr	r5, [r4, #0]
 800725e:	6961      	ldr	r1, [r4, #20]
 8007260:	1d18      	adds	r0, r3, #4
 8007262:	6030      	str	r0, [r6, #0]
 8007264:	062e      	lsls	r6, r5, #24
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	d501      	bpl.n	800726e <_printf_i+0x1be>
 800726a:	6019      	str	r1, [r3, #0]
 800726c:	e002      	b.n	8007274 <_printf_i+0x1c4>
 800726e:	0668      	lsls	r0, r5, #25
 8007270:	d5fb      	bpl.n	800726a <_printf_i+0x1ba>
 8007272:	8019      	strh	r1, [r3, #0]
 8007274:	2300      	movs	r3, #0
 8007276:	6123      	str	r3, [r4, #16]
 8007278:	4616      	mov	r6, r2
 800727a:	e7bc      	b.n	80071f6 <_printf_i+0x146>
 800727c:	6833      	ldr	r3, [r6, #0]
 800727e:	1d1a      	adds	r2, r3, #4
 8007280:	6032      	str	r2, [r6, #0]
 8007282:	681e      	ldr	r6, [r3, #0]
 8007284:	6862      	ldr	r2, [r4, #4]
 8007286:	2100      	movs	r1, #0
 8007288:	4630      	mov	r0, r6
 800728a:	f7f8 ffa9 	bl	80001e0 <memchr>
 800728e:	b108      	cbz	r0, 8007294 <_printf_i+0x1e4>
 8007290:	1b80      	subs	r0, r0, r6
 8007292:	6060      	str	r0, [r4, #4]
 8007294:	6863      	ldr	r3, [r4, #4]
 8007296:	6123      	str	r3, [r4, #16]
 8007298:	2300      	movs	r3, #0
 800729a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800729e:	e7aa      	b.n	80071f6 <_printf_i+0x146>
 80072a0:	6923      	ldr	r3, [r4, #16]
 80072a2:	4632      	mov	r2, r6
 80072a4:	4649      	mov	r1, r9
 80072a6:	4640      	mov	r0, r8
 80072a8:	47d0      	blx	sl
 80072aa:	3001      	adds	r0, #1
 80072ac:	d0ad      	beq.n	800720a <_printf_i+0x15a>
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	079b      	lsls	r3, r3, #30
 80072b2:	d413      	bmi.n	80072dc <_printf_i+0x22c>
 80072b4:	68e0      	ldr	r0, [r4, #12]
 80072b6:	9b03      	ldr	r3, [sp, #12]
 80072b8:	4298      	cmp	r0, r3
 80072ba:	bfb8      	it	lt
 80072bc:	4618      	movlt	r0, r3
 80072be:	e7a6      	b.n	800720e <_printf_i+0x15e>
 80072c0:	2301      	movs	r3, #1
 80072c2:	4632      	mov	r2, r6
 80072c4:	4649      	mov	r1, r9
 80072c6:	4640      	mov	r0, r8
 80072c8:	47d0      	blx	sl
 80072ca:	3001      	adds	r0, #1
 80072cc:	d09d      	beq.n	800720a <_printf_i+0x15a>
 80072ce:	3501      	adds	r5, #1
 80072d0:	68e3      	ldr	r3, [r4, #12]
 80072d2:	9903      	ldr	r1, [sp, #12]
 80072d4:	1a5b      	subs	r3, r3, r1
 80072d6:	42ab      	cmp	r3, r5
 80072d8:	dcf2      	bgt.n	80072c0 <_printf_i+0x210>
 80072da:	e7eb      	b.n	80072b4 <_printf_i+0x204>
 80072dc:	2500      	movs	r5, #0
 80072de:	f104 0619 	add.w	r6, r4, #25
 80072e2:	e7f5      	b.n	80072d0 <_printf_i+0x220>
 80072e4:	08053e91 	.word	0x08053e91
 80072e8:	08053ea2 	.word	0x08053ea2

080072ec <__malloc_lock>:
 80072ec:	4801      	ldr	r0, [pc, #4]	@ (80072f4 <__malloc_lock+0x8>)
 80072ee:	f7ff bc75 	b.w	8006bdc <__retarget_lock_acquire_recursive>
 80072f2:	bf00      	nop
 80072f4:	200006f4 	.word	0x200006f4

080072f8 <__malloc_unlock>:
 80072f8:	4801      	ldr	r0, [pc, #4]	@ (8007300 <__malloc_unlock+0x8>)
 80072fa:	f7ff bc70 	b.w	8006bde <__retarget_lock_release_recursive>
 80072fe:	bf00      	nop
 8007300:	200006f4 	.word	0x200006f4

08007304 <_realloc_r>:
 8007304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007308:	4607      	mov	r7, r0
 800730a:	4614      	mov	r4, r2
 800730c:	460d      	mov	r5, r1
 800730e:	b921      	cbnz	r1, 800731a <_realloc_r+0x16>
 8007310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007314:	4611      	mov	r1, r2
 8007316:	f7ff bddd 	b.w	8006ed4 <_malloc_r>
 800731a:	b92a      	cbnz	r2, 8007328 <_realloc_r+0x24>
 800731c:	f000 f858 	bl	80073d0 <_free_r>
 8007320:	4625      	mov	r5, r4
 8007322:	4628      	mov	r0, r5
 8007324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007328:	f000 f89c 	bl	8007464 <_malloc_usable_size_r>
 800732c:	4284      	cmp	r4, r0
 800732e:	4606      	mov	r6, r0
 8007330:	d802      	bhi.n	8007338 <_realloc_r+0x34>
 8007332:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007336:	d8f4      	bhi.n	8007322 <_realloc_r+0x1e>
 8007338:	4621      	mov	r1, r4
 800733a:	4638      	mov	r0, r7
 800733c:	f7ff fdca 	bl	8006ed4 <_malloc_r>
 8007340:	4680      	mov	r8, r0
 8007342:	b908      	cbnz	r0, 8007348 <_realloc_r+0x44>
 8007344:	4645      	mov	r5, r8
 8007346:	e7ec      	b.n	8007322 <_realloc_r+0x1e>
 8007348:	42b4      	cmp	r4, r6
 800734a:	4622      	mov	r2, r4
 800734c:	4629      	mov	r1, r5
 800734e:	bf28      	it	cs
 8007350:	4632      	movcs	r2, r6
 8007352:	f000 f82f 	bl	80073b4 <memcpy>
 8007356:	4629      	mov	r1, r5
 8007358:	4638      	mov	r0, r7
 800735a:	f000 f839 	bl	80073d0 <_free_r>
 800735e:	e7f1      	b.n	8007344 <_realloc_r+0x40>

08007360 <memmove>:
 8007360:	4288      	cmp	r0, r1
 8007362:	b510      	push	{r4, lr}
 8007364:	eb01 0402 	add.w	r4, r1, r2
 8007368:	d902      	bls.n	8007370 <memmove+0x10>
 800736a:	4284      	cmp	r4, r0
 800736c:	4623      	mov	r3, r4
 800736e:	d807      	bhi.n	8007380 <memmove+0x20>
 8007370:	1e43      	subs	r3, r0, #1
 8007372:	42a1      	cmp	r1, r4
 8007374:	d008      	beq.n	8007388 <memmove+0x28>
 8007376:	f811 2b01 	ldrb.w	r2, [r1], #1
 800737a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800737e:	e7f8      	b.n	8007372 <memmove+0x12>
 8007380:	4402      	add	r2, r0
 8007382:	4601      	mov	r1, r0
 8007384:	428a      	cmp	r2, r1
 8007386:	d100      	bne.n	800738a <memmove+0x2a>
 8007388:	bd10      	pop	{r4, pc}
 800738a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800738e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007392:	e7f7      	b.n	8007384 <memmove+0x24>

08007394 <_sbrk_r>:
 8007394:	b538      	push	{r3, r4, r5, lr}
 8007396:	4d06      	ldr	r5, [pc, #24]	@ (80073b0 <_sbrk_r+0x1c>)
 8007398:	2300      	movs	r3, #0
 800739a:	4604      	mov	r4, r0
 800739c:	4608      	mov	r0, r1
 800739e:	602b      	str	r3, [r5, #0]
 80073a0:	f7fb fc94 	bl	8002ccc <_sbrk>
 80073a4:	1c43      	adds	r3, r0, #1
 80073a6:	d102      	bne.n	80073ae <_sbrk_r+0x1a>
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	b103      	cbz	r3, 80073ae <_sbrk_r+0x1a>
 80073ac:	6023      	str	r3, [r4, #0]
 80073ae:	bd38      	pop	{r3, r4, r5, pc}
 80073b0:	20000700 	.word	0x20000700

080073b4 <memcpy>:
 80073b4:	440a      	add	r2, r1
 80073b6:	4291      	cmp	r1, r2
 80073b8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80073bc:	d100      	bne.n	80073c0 <memcpy+0xc>
 80073be:	4770      	bx	lr
 80073c0:	b510      	push	{r4, lr}
 80073c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073ca:	4291      	cmp	r1, r2
 80073cc:	d1f9      	bne.n	80073c2 <memcpy+0xe>
 80073ce:	bd10      	pop	{r4, pc}

080073d0 <_free_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4605      	mov	r5, r0
 80073d4:	2900      	cmp	r1, #0
 80073d6:	d041      	beq.n	800745c <_free_r+0x8c>
 80073d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073dc:	1f0c      	subs	r4, r1, #4
 80073de:	2b00      	cmp	r3, #0
 80073e0:	bfb8      	it	lt
 80073e2:	18e4      	addlt	r4, r4, r3
 80073e4:	f7ff ff82 	bl	80072ec <__malloc_lock>
 80073e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007460 <_free_r+0x90>)
 80073ea:	6813      	ldr	r3, [r2, #0]
 80073ec:	b933      	cbnz	r3, 80073fc <_free_r+0x2c>
 80073ee:	6063      	str	r3, [r4, #4]
 80073f0:	6014      	str	r4, [r2, #0]
 80073f2:	4628      	mov	r0, r5
 80073f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073f8:	f7ff bf7e 	b.w	80072f8 <__malloc_unlock>
 80073fc:	42a3      	cmp	r3, r4
 80073fe:	d908      	bls.n	8007412 <_free_r+0x42>
 8007400:	6820      	ldr	r0, [r4, #0]
 8007402:	1821      	adds	r1, r4, r0
 8007404:	428b      	cmp	r3, r1
 8007406:	bf01      	itttt	eq
 8007408:	6819      	ldreq	r1, [r3, #0]
 800740a:	685b      	ldreq	r3, [r3, #4]
 800740c:	1809      	addeq	r1, r1, r0
 800740e:	6021      	streq	r1, [r4, #0]
 8007410:	e7ed      	b.n	80073ee <_free_r+0x1e>
 8007412:	461a      	mov	r2, r3
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	b10b      	cbz	r3, 800741c <_free_r+0x4c>
 8007418:	42a3      	cmp	r3, r4
 800741a:	d9fa      	bls.n	8007412 <_free_r+0x42>
 800741c:	6811      	ldr	r1, [r2, #0]
 800741e:	1850      	adds	r0, r2, r1
 8007420:	42a0      	cmp	r0, r4
 8007422:	d10b      	bne.n	800743c <_free_r+0x6c>
 8007424:	6820      	ldr	r0, [r4, #0]
 8007426:	4401      	add	r1, r0
 8007428:	1850      	adds	r0, r2, r1
 800742a:	4283      	cmp	r3, r0
 800742c:	6011      	str	r1, [r2, #0]
 800742e:	d1e0      	bne.n	80073f2 <_free_r+0x22>
 8007430:	6818      	ldr	r0, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	6053      	str	r3, [r2, #4]
 8007436:	4408      	add	r0, r1
 8007438:	6010      	str	r0, [r2, #0]
 800743a:	e7da      	b.n	80073f2 <_free_r+0x22>
 800743c:	d902      	bls.n	8007444 <_free_r+0x74>
 800743e:	230c      	movs	r3, #12
 8007440:	602b      	str	r3, [r5, #0]
 8007442:	e7d6      	b.n	80073f2 <_free_r+0x22>
 8007444:	6820      	ldr	r0, [r4, #0]
 8007446:	1821      	adds	r1, r4, r0
 8007448:	428b      	cmp	r3, r1
 800744a:	bf04      	itt	eq
 800744c:	6819      	ldreq	r1, [r3, #0]
 800744e:	685b      	ldreq	r3, [r3, #4]
 8007450:	6063      	str	r3, [r4, #4]
 8007452:	bf04      	itt	eq
 8007454:	1809      	addeq	r1, r1, r0
 8007456:	6021      	streq	r1, [r4, #0]
 8007458:	6054      	str	r4, [r2, #4]
 800745a:	e7ca      	b.n	80073f2 <_free_r+0x22>
 800745c:	bd38      	pop	{r3, r4, r5, pc}
 800745e:	bf00      	nop
 8007460:	200006fc 	.word	0x200006fc

08007464 <_malloc_usable_size_r>:
 8007464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007468:	1f18      	subs	r0, r3, #4
 800746a:	2b00      	cmp	r3, #0
 800746c:	bfbc      	itt	lt
 800746e:	580b      	ldrlt	r3, [r1, r0]
 8007470:	18c0      	addlt	r0, r0, r3
 8007472:	4770      	bx	lr

08007474 <_init>:
 8007474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007476:	bf00      	nop
 8007478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747a:	bc08      	pop	{r3}
 800747c:	469e      	mov	lr, r3
 800747e:	4770      	bx	lr

08007480 <_fini>:
 8007480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007482:	bf00      	nop
 8007484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007486:	bc08      	pop	{r3}
 8007488:	469e      	mov	lr, r3
 800748a:	4770      	bx	lr
