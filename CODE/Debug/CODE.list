
CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063f0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08006590  08006590  00007590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800670c  0800670c  000082c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800670c  0800670c  0000770c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006714  08006714  000082c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006714  08006714  00007714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006718  08006718  00007718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c0  20000000  0800671c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  200002c0  080069dc  000082c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ac  080069dc  000086ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000082c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127dd  00000000  00000000  000082f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca7  00000000  00000000  0001aacd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  0001d778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca3  00000000  00000000  0001e7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001958c  00000000  00000000  0001f473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b3a  00000000  00000000  000389ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ad85  00000000  00000000  0004e539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e92be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000486c  00000000  00000000  000e9304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000edb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c0 	.word	0x200002c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006578 	.word	0x08006578

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c4 	.word	0x200002c4
 80001dc:	08006578 	.word	0x08006578

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <adc_task_run>:

static uint16_t dma_buffer[4];

// A function to run the appropriate state of the task
void adc_task_run(ADCTask *adc_task)
{    // Check for a valid state
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    if (adc_task->state >= 0 && adc_task->state < adc_task->num_states)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db0f      	blt.n	80005dc <adc_task_run+0x30>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	da09      	bge.n	80005dc <adc_task_run+0x30>

    	// game_task is a pointer right now
    	// -> dereferences pointer and accesses class member in one step
    	// the same as (*ptr).member

    	adc_task->state_list[adc_task->state](adc_task);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	3306      	adds	r3, #6
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	4413      	add	r3, r2
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	4798      	blx	r3
    {

        while(1){}
    }

}
 80005da:	e000      	b.n	80005de <adc_task_run+0x32>
        while(1){}
 80005dc:	e7fe      	b.n	80005dc <adc_task_run+0x30>
}
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <adc_task_state_0_init>:

void adc_task_state_0_init(ADCTask *adc_task){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

	adc_task->state = 1;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2201      	movs	r2, #1
 80005f0:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(adc_task->hadc,
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	2204      	movs	r2, #4
 80005f8:	4903      	ldr	r1, [pc, #12]	@ (8000608 <adc_task_state_0_init+0x24>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 f992 	bl	8002924 <HAL_ADC_Start_DMA>
	                      (uint32_t*)dma_buffer,
	                      4);
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200002dc 	.word	0x200002dc

0800060c <adc_task_state_1_read>:

void adc_task_state_1_read(ADCTask *adc_task){
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
//	}
//
//
//
//	HAL_ADC_Stop(adc_task->hadc);
	adc_task->blue_photor_ptr->adc_val   = dma_buffer[0];
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <adc_task_state_1_read+0x3c>)
 8000616:	881a      	ldrh	r2, [r3, #0]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	60da      	str	r2, [r3, #12]
	adc_task->red_photor_ptr->adc_val  = dma_buffer[1];
 800061e:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <adc_task_state_1_read+0x3c>)
 8000620:	885a      	ldrh	r2, [r3, #2]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	691b      	ldr	r3, [r3, #16]
 8000626:	60da      	str	r2, [r3, #12]
	adc_task->blue_contr_ptr->adc_val   = dma_buffer[2];
 8000628:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <adc_task_state_1_read+0x3c>)
 800062a:	889a      	ldrh	r2, [r3, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	639a      	str	r2, [r3, #56]	@ 0x38
	adc_task->red_contr_ptr->adc_val    = dma_buffer[3];
 8000632:	4b05      	ldr	r3, [pc, #20]	@ (8000648 <adc_task_state_1_read+0x3c>)
 8000634:	88da      	ldrh	r2, [r3, #6]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	639a      	str	r2, [r3, #56]	@ 0x38


}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	200002dc 	.word	0x200002dc

0800064c <controller_task_run>:
#include <stdio.h>


// A function to run the appropriate state of the task
void controller_task_run(ControllerTask *controller_task)
{    // Check for a valid state
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    if (controller_task->state >= 0 && controller_task->state < controller_task->num_states)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	2b00      	cmp	r3, #0
 800065a:	db0e      	blt.n	800067a <controller_task_run+0x2e>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	685a      	ldr	r2, [r3, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	429a      	cmp	r2, r3
 8000666:	da08      	bge.n	800067a <controller_task_run+0x2e>

    	// game_task is a pointer right now
    	// -> dereferences pointer and accesses class member in one step
    	// the same as (*ptr).member

        controller_task->state_list[controller_task->state](controller_task);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	685a      	ldr	r2, [r3, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3216      	adds	r2, #22
 8000670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	4798      	blx	r3
    {

        while(1){}
    }

}
 8000678:	e000      	b.n	800067c <controller_task_run+0x30>
        while(1){}
 800067a:	e7fe      	b.n	800067a <controller_task_run+0x2e>
}
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <controller_task_state_0_init>:


// init stuff and zero pot
void controller_task_state_0_init(ControllerTask *controller_task)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
	controller_task->prev_error = 0;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f04f 0200 	mov.w	r2, #0
 8000690:	655a      	str	r2, [r3, #84]	@ 0x54

    enable(controller_task->motor);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fb58 	bl	8001d4c <enable>

    controller_task->pot_zero = controller_task->adc_val;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006a0:	461a      	mov	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	615a      	str	r2, [r3, #20]

    controller_task->state = 2;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2202      	movs	r2, #2
 80006aa:	605a      	str	r2, [r3, #4]
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <controller_task_state_1_calc_vel>:
// run state for velocity controller based on pot input
void controller_task_state_1_calc_vel(ControllerTask *controller_task)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b090      	sub	sp, #64	@ 0x40
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	int32_t high_thres = controller_task->pot_zero + controller_task->ccw_deadzone;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	695a      	ldr	r2, [r3, #20]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006c4:	4413      	add	r3, r2
 80006c6:	637b      	str	r3, [r7, #52]	@ 0x34
	int32_t low_thres = controller_task->pot_zero - controller_task->cw_deadzone;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	695a      	ldr	r2, [r3, #20]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	633b      	str	r3, [r7, #48]	@ 0x30

    // read adc

    // calc vel des
    const float MAX_ADC = 4095.0f;
 80006d4:	4b6f      	ldr	r3, [pc, #444]	@ (8000894 <controller_task_state_1_calc_vel+0x1e0>)
 80006d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const float MAX_VELOCITY = 8.0f;
 80006d8:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80006dc:	62bb      	str	r3, [r7, #40]	@ 0x28

    int32_t adc_val_here = controller_task->adc_val;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006e2:	627b      	str	r3, [r7, #36]	@ 0x24



    float desired_velocity = 0.0f;
 80006e4:	f04f 0300 	mov.w	r3, #0
 80006e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (adc_val_here > high_thres){ //&& (adc_val_here+high_thres)<4095
 80006ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006ee:	429a      	cmp	r2, r3
 80006f0:	dd18      	ble.n	8000724 <controller_task_state_1_calc_vel+0x70>
    	adc_val_here += high_thres;
 80006f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006f6:	4413      	add	r3, r2
 80006f8:	627b      	str	r3, [r7, #36]	@ 0x24
    	adc_val_here -= controller_task->pot_zero;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
        desired_velocity = ((float)adc_val_here / MAX_ADC) * MAX_VELOCITY;
 8000704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000706:	ee07 3a90 	vmov	s15, r3
 800070a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800070e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000716:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800071a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800071e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8000722:	e01f      	b.n	8000764 <controller_task_state_1_calc_vel+0xb0>
    }
    else if (adc_val_here < low_thres){ // && (adc_val_here-low_thres)>0
 8000724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000728:	429a      	cmp	r2, r3
 800072a:	da18      	bge.n	800075e <controller_task_state_1_calc_vel+0xaa>
    	adc_val_here -= low_thres;
 800072c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800072e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
    	adc_val_here -= controller_task->pot_zero;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	695b      	ldr	r3, [r3, #20]
 8000738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	627b      	str	r3, [r7, #36]	@ 0x24
		desired_velocity = ((float)adc_val_here / MAX_ADC) * MAX_VELOCITY;
 800073e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000740:	ee07 3a90 	vmov	s15, r3
 8000744:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000748:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800074c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000750:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000758:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 800075c:	e002      	b.n	8000764 <controller_task_state_1_calc_vel+0xb0>
    }
    else {
        desired_velocity = 0.0f;
 800075e:	f04f 0300 	mov.w	r3, #0
 8000762:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // read encoder
    int32_t current_ticks = __HAL_TIM_GET_COUNTER(controller_task->htim_encoder);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800076c:	623b      	str	r3, [r7, #32]
    int32_t delta_ticks = current_ticks - controller_task->prev_ticks;
 800076e:	6a3a      	ldr	r2, [r7, #32]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	61fb      	str	r3, [r7, #28]
    controller_task->prev_ticks = current_ticks;
 8000778:	6a3a      	ldr	r2, [r7, #32]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	625a      	str	r2, [r3, #36]	@ 0x24

    controller_task->current_time = __HAL_TIM_GET_COUNTER(controller_task->htim_dt);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	621a      	str	r2, [r3, #32]
    uint32_t dt_ticks = (controller_task->current_time >= controller_task->prev_time) ? // calcs time diff in ticks
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6a1a      	ldr	r2, [r3, #32]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	69db      	ldr	r3, [r3, #28]
    		(controller_task->current_time - controller_task->prev_time) :
 8000792:	429a      	cmp	r2, r3
 8000794:	d305      	bcc.n	80007a2 <controller_task_state_1_calc_vel+0xee>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6a1a      	ldr	r2, [r3, #32]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	e005      	b.n	80007ae <controller_task_state_1_calc_vel+0xfa>
			(0xFFFFFFFF - controller_task->prev_time + controller_task->current_time); // overflow
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6a1a      	ldr	r2, [r3, #32]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	1ad3      	subs	r3, r2, r3
    		(controller_task->current_time - controller_task->prev_time) :
 80007ac:	3b01      	subs	r3, #1
    uint32_t dt_ticks = (controller_task->current_time >= controller_task->prev_time) ? // calcs time diff in ticks
 80007ae:	61bb      	str	r3, [r7, #24]
    if (dt_ticks == 0) return;
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d06a      	beq.n	800088c <controller_task_state_1_calc_vel+0x1d8>
    float delta_time = dt_ticks / 1000.0f; // ms
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	ee07 3a90 	vmov	s15, r3
 80007bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007c0:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8000898 <controller_task_state_1_calc_vel+0x1e4>
 80007c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007c8:	edc7 7a05 	vstr	s15, [r7, #20]

    // calc actual vel, error, derivative part
    float current_velocity = (float)delta_ticks / delta_time;
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	ee07 3a90 	vmov	s15, r3
 80007d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80007d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80007da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007de:	edc7 7a04 	vstr	s15, [r7, #16]
    float error = desired_velocity - current_velocity;
 80007e2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80007e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80007ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007ee:	edc7 7a03 	vstr	s15, [r7, #12]
    float derivative = (error - controller_task->prev_error) / delta_time;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80007f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80007fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000800:	ed97 7a05 	vldr	s14, [r7, #20]
 8000804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000808:	edc7 7a02 	vstr	s15, [r7, #8]
    controller_task->prev_error = error;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	655a      	str	r2, [r3, #84]	@ 0x54

    // calc control signal and do saturation stuff
    controller_task->control_signal = controller_task->k_p * error + controller_task->k_d * derivative;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8000818:	edd7 7a03 	vldr	s15, [r7, #12]
 800081c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8000826:	edd7 7a02 	vldr	s15, [r7, #8]
 800082a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800082e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	edc3 7a06 	vstr	s15, [r3, #24]
    float control_signal = controller_task->control_signal;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (control_signal > 100.0f) control_signal = 100.0f;
 800083e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000842:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800089c <controller_task_state_1_calc_vel+0x1e8>
 8000846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800084a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800084e:	dd02      	ble.n	8000856 <controller_task_state_1_calc_vel+0x1a2>
 8000850:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <controller_task_state_1_calc_vel+0x1ec>)
 8000852:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000854:	e00a      	b.n	800086c <controller_task_state_1_calc_vel+0x1b8>
    else if (control_signal < -100.0f) control_signal = -100.0f;
 8000856:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800085a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80008a4 <controller_task_state_1_calc_vel+0x1f0>
 800085e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000866:	d501      	bpl.n	800086c <controller_task_state_1_calc_vel+0x1b8>
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <controller_task_state_1_calc_vel+0x1f4>)
 800086a:	63bb      	str	r3, [r7, #56]	@ 0x38

    // set duty on the motor
    set_duty(controller_task->motor, (int32_t)control_signal);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000870:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000878:	ee17 1a90 	vmov	r1, s15
 800087c:	4618      	mov	r0, r3
 800087e:	f001 f9ad 	bl	8001bdc <set_duty>

    // remember the time that was used this time
    controller_task->prev_time = controller_task->current_time;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6a1a      	ldr	r2, [r3, #32]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	61da      	str	r2, [r3, #28]
 800088a:	e000      	b.n	800088e <controller_task_state_1_calc_vel+0x1da>
    if (dt_ticks == 0) return;
 800088c:	bf00      	nop
}
 800088e:	3740      	adds	r7, #64	@ 0x40
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	457ff000 	.word	0x457ff000
 8000898:	447a0000 	.word	0x447a0000
 800089c:	42c80000 	.word	0x42c80000
 80008a0:	42c80000 	.word	0x42c80000
 80008a4:	c2c80000 	.word	0xc2c80000
 80008a8:	c2c80000 	.word	0xc2c80000

080008ac <controller_task_state_2_pos>:
void controller_task_state_2_pos(ControllerTask *controller_task){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	int32_t des_pos = controller_task->adc_val - controller_task->pot_zero;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	6952      	ldr	r2, [r2, #20]
 80008bc:	1a9b      	subs	r3, r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
	read_encoder(controller_task->encoder);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 f829 	bl	800091c <read_encoder>
	go_to(controller_task->motor, controller_task->k_p, des_pos, controller_task->encoder->ticks);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80008d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	ee17 1a90 	vmov	r1, s15
 80008e4:	f001 fa8a 	bl	8001dfc <go_to>

}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <setup_encoder>:
#include "encoder_driver.h"
#include <stdio.h>
#include "stm32f4xx_hal.h"


void setup_encoder(encoder_t *p_enc){
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
    p_enc->zero = __HAL_TIM_GET_COUNTER(p_enc->htim);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	601a      	str	r2, [r3, #0]
    p_enc->ticks = 0;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
    p_enc->last_ticks = 0;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <read_encoder>:
void read_encoder(encoder_t *p_enc){
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

	int32_t current_ticks = (int32_t)(__HAL_TIM_GET_COUNTER(p_enc->htim)) - (int32_t)(p_enc->zero);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	695b      	ldr	r3, [r3, #20]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800092c:	461a      	mov	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	60bb      	str	r3, [r7, #8]
	int32_t delta = current_ticks - p_enc->last_ticks;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	60fb      	str	r3, [r7, #12]

	if (delta > (p_enc->ar + 1)/2){
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	3301      	adds	r3, #1
 8000946:	0fda      	lsrs	r2, r3, #31
 8000948:	4413      	add	r3, r2
 800094a:	105b      	asrs	r3, r3, #1
 800094c:	461a      	mov	r2, r3
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	4293      	cmp	r3, r2
 8000952:	dd06      	ble.n	8000962 <read_encoder+0x46>
		delta -= p_enc->ar + 1;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	3301      	adds	r3, #1
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	e00f      	b.n	8000982 <read_encoder+0x66>
	}
	else if (delta < (-p_enc->ar-1)/2){
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	43db      	mvns	r3, r3
 8000968:	0fda      	lsrs	r2, r3, #31
 800096a:	4413      	add	r3, r2
 800096c:	105b      	asrs	r3, r3, #1
 800096e:	461a      	mov	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4293      	cmp	r3, r2
 8000974:	da05      	bge.n	8000982 <read_encoder+0x66>
		delta += p_enc->ar + 1;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	3301      	adds	r3, #1
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	4413      	add	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
	}

	p_enc->last_ticks = current_ticks;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	68ba      	ldr	r2, [r7, #8]
 8000986:	60da      	str	r2, [r3, #12]
	p_enc->ticks += delta;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689a      	ldr	r2, [r3, #8]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	441a      	add	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	609a      	str	r2, [r3, #8]


}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <game_task_run>:

#include <stdio.h>

// A function to run the appropriate state of the task
void game_task_run(GameTask *game_task)
{    // Check for a valid state
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
    if (game_task->state >= 0 && game_task->state < game_task->num_states)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	db0e      	blt.n	80009ce <game_task_run+0x2e>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	da08      	bge.n	80009ce <game_task_run+0x2e>

    	// game_task is a pointer right now
    	// -> dereferences pointer and accesses class member in one step
    	// the same as (*ptr).member

        game_task->state_list[game_task->state](game_task);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3212      	adds	r2, #18
 80009c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	4798      	blx	r3
    {

        while(1){}
    }

}
 80009cc:	e000      	b.n	80009d0 <game_task_run+0x30>
        while(1){}
 80009ce:	e7fe      	b.n	80009ce <game_task_run+0x2e>
}
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <game_task_state_0_init>:


// A function to initialize the task
void game_task_state_0_init(GameTask *game_task)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
    //add init stuff, display
	lcd_init();
 80009de:	f000 fa1f 	bl	8000e20 <lcd_init>
	lcd_clear();
 80009e2:	f000 fa54 	bl	8000e8e <lcd_clear>
	game_task->state = 1;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2201      	movs	r2, #1
 80009ea:	601a      	str	r2, [r3, #0]


}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <game_task_state_1_home>:
// A function to implement state 1 of the task
// keeps for user start sequence to happen then starts the game
// Prints message and sets sound flag when game starts
void game_task_state_1_home(GameTask *game_task)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	lcd_set_cursor(0, 0);
 80009fc:	2100      	movs	r1, #0
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 fa50 	bl	8000ea4 <lcd_set_cursor>
	lcd_print("  Zap'em Blast'em   ");
 8000a04:	480f      	ldr	r0, [pc, #60]	@ (8000a44 <game_task_state_1_home+0x50>)
 8000a06:	f000 fa6f 	bl	8000ee8 <lcd_print>
	lcd_set_cursor(1, 0);
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f000 fa49 	bl	8000ea4 <lcd_set_cursor>
	lcd_print("       Robots       ");
 8000a12:	480d      	ldr	r0, [pc, #52]	@ (8000a48 <game_task_state_1_home+0x54>)
 8000a14:	f000 fa68 	bl	8000ee8 <lcd_print>
	lcd_set_cursor(3, 0);
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2003      	movs	r0, #3
 8000a1c:	f000 fa42 	bl	8000ea4 <lcd_set_cursor>
	lcd_print("HOLD 'SHOOT' TO PLAY");
 8000a20:	480a      	ldr	r0, [pc, #40]	@ (8000a4c <game_task_state_1_home+0x58>)
 8000a22:	f000 fa61 	bl	8000ee8 <lcd_print>
    //play_flg enabled from button task within shoot task?? or make button task
	if (game_task->play_flag == 1){
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d106      	bne.n	8000a3c <game_task_state_1_home+0x48>
    	game_task->state = 2;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2202      	movs	r2, #2
 8000a32:	601a      	str	r2, [r3, #0]
    	game_task->sound_task_ptr->start_snd = 1; // sets start sound flag for sound task to play it
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a38:	2201      	movs	r2, #1
 8000a3a:	611a      	str	r2, [r3, #16]
    }

}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	08006590 	.word	0x08006590
 8000a48:	080065a8 	.word	0x080065a8
 8000a4c:	080065c0 	.word	0x080065c0

08000a50 <game_task_state_2_play>:
// A function to implement state 2 which is for when the game is being played
// This keeps track of score, prints score messages
void game_task_state_2_play(GameTask *game_task)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	char r_score[5];
	char b_score[5];


	// score counting and delaying
	if (game_task->red_photoresistor_task_ptr->hit_flag && game_task->delay_flag == 0){
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d015      	beq.n	8000a8e <game_task_state_2_play+0x3e>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d111      	bne.n	8000a8e <game_task_state_2_play+0x3e>
		game_task->score_blue++;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	691b      	ldr	r3, [r3, #16]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	611a      	str	r2, [r3, #16]
		game_task->red_photoresistor_task_ptr->hit_flag = 0;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
		game_task->delay_flag = 1;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2201      	movs	r2, #1
 8000a80:	629a      	str	r2, [r3, #40]	@ 0x28
		game_task->delay_start = __HAL_TIM_GET_COUNTER(game_task->htim);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	if (game_task->blue_photoresistor_task_ptr->hit_flag && game_task->delay_flag == 0){
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d015      	beq.n	8000ac4 <game_task_state_2_play+0x74>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d111      	bne.n	8000ac4 <game_task_state_2_play+0x74>
		game_task->score_red++;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60da      	str	r2, [r3, #12]
		game_task->blue_photoresistor_task_ptr->hit_flag = 0;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
		game_task->delay_flag = 1;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	629a      	str	r2, [r3, #40]	@ 0x28
		game_task->delay_start = __HAL_TIM_GET_COUNTER(game_task->htim);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	if ((__HAL_TIM_GET_COUNTER(game_task->htim) - game_task->delay_start) > game_task->delay)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ad0:	1ad2      	subs	r2, r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d902      	bls.n	8000ae0 <game_task_state_2_play+0x90>
	{
		game_task->delay_flag = 0;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	629a      	str	r2, [r3, #40]	@ 0x28
	}

	// add thing that prints score of each on the LCD
	//maybe only do once then adjust the score through a direct print index
	if (game_task->num == 0){
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6a1b      	ldr	r3, [r3, #32]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d122      	bne.n	8000b2e <game_task_state_2_play+0xde>
		lcd_clear();
 8000ae8:	f000 f9d1 	bl	8000e8e <lcd_clear>
		lcd_set_cursor(0, 0);
 8000aec:	2100      	movs	r1, #0
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 f9d8 	bl	8000ea4 <lcd_set_cursor>
		lcd_print("  Zap'em Blast'em   ");
 8000af4:	486c      	ldr	r0, [pc, #432]	@ (8000ca8 <game_task_state_2_play+0x258>)
 8000af6:	f000 f9f7 	bl	8000ee8 <lcd_print>
		lcd_set_cursor(1, 0);
 8000afa:	2100      	movs	r1, #0
 8000afc:	2001      	movs	r0, #1
 8000afe:	f000 f9d1 	bl	8000ea4 <lcd_set_cursor>
		lcd_print("     First to 5     ");
 8000b02:	486a      	ldr	r0, [pc, #424]	@ (8000cac <game_task_state_2_play+0x25c>)
 8000b04:	f000 f9f0 	bl	8000ee8 <lcd_print>
		lcd_set_cursor(2, 0);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2002      	movs	r0, #2
 8000b0c:	f000 f9ca 	bl	8000ea4 <lcd_set_cursor>
		lcd_print("Red:  0  Zaps       ");
 8000b10:	4867      	ldr	r0, [pc, #412]	@ (8000cb0 <game_task_state_2_play+0x260>)
 8000b12:	f000 f9e9 	bl	8000ee8 <lcd_print>
		lcd_set_cursor(3, 0);
 8000b16:	2100      	movs	r1, #0
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 f9c3 	bl	8000ea4 <lcd_set_cursor>
		lcd_print("Blue: 0  Blasts     ");
 8000b1e:	4865      	ldr	r0, [pc, #404]	@ (8000cb4 <game_task_state_2_play+0x264>)
 8000b20:	f000 f9e2 	bl	8000ee8 <lcd_print>
		//         01234567890123456789
		game_task->num++;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6a1b      	ldr	r3, [r3, #32]
 8000b28:	1c5a      	adds	r2, r3, #1
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	621a      	str	r2, [r3, #32]
	}

	// check to see if score changed for the lcd
	if (game_task->score_red != game_task->score_red_prev){
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68da      	ldr	r2, [r3, #12]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d014      	beq.n	8000b64 <game_task_state_2_play+0x114>
		sprintf(r_score,"%ld",game_task->score_red);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	68da      	ldr	r2, [r3, #12]
 8000b3e:	f107 0310 	add.w	r3, r7, #16
 8000b42:	495d      	ldr	r1, [pc, #372]	@ (8000cb8 <game_task_state_2_play+0x268>)
 8000b44:	4618      	mov	r0, r3
 8000b46:	f005 f877 	bl	8005c38 <siprintf>
		lcd_set_cursor(2, 6);
 8000b4a:	2106      	movs	r1, #6
 8000b4c:	2002      	movs	r0, #2
 8000b4e:	f000 f9a9 	bl	8000ea4 <lcd_set_cursor>
		lcd_print(r_score);
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f9c6 	bl	8000ee8 <lcd_print>
		game_task->score_red_prev = game_task->score_red;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	68da      	ldr	r2, [r3, #12]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	615a      	str	r2, [r3, #20]
	}
	if (game_task->score_blue != game_task->score_blue_prev){
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	691a      	ldr	r2, [r3, #16]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d014      	beq.n	8000b9a <game_task_state_2_play+0x14a>
		sprintf(b_score,"%ld",game_task->score_blue);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	691a      	ldr	r2, [r3, #16]
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	494f      	ldr	r1, [pc, #316]	@ (8000cb8 <game_task_state_2_play+0x268>)
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f005 f85c 	bl	8005c38 <siprintf>
		lcd_set_cursor(3, 6);
 8000b80:	2106      	movs	r1, #6
 8000b82:	2003      	movs	r0, #3
 8000b84:	f000 f98e 	bl	8000ea4 <lcd_set_cursor>
		lcd_print(b_score);
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 f9ab 	bl	8000ee8 <lcd_print>
		game_task->score_blue_prev = game_task->score_blue;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	691a      	ldr	r2, [r3, #16]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	619a      	str	r2, [r3, #24]
	}

	if (game_task->score_red >= game_task->score_thresh && game_task->state != 3)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	68da      	ldr	r2, [r3, #12]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	db3a      	blt.n	8000c1c <game_task_state_2_play+0x1cc>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d036      	beq.n	8000c1c <game_task_state_2_play+0x1cc>
			{
		//		// print win message and set end sound
				if(game_task->delay_flag == 0)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d124      	bne.n	8000c00 <game_task_state_2_play+0x1b0>
				{
				lcd_set_cursor(0, 0);
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f000 f973 	bl	8000ea4 <lcd_set_cursor>
				lcd_print("                    ");
 8000bbe:	483f      	ldr	r0, [pc, #252]	@ (8000cbc <game_task_state_2_play+0x26c>)
 8000bc0:	f000 f992 	bl	8000ee8 <lcd_print>
				lcd_set_cursor(1, 0);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f000 f96c 	bl	8000ea4 <lcd_set_cursor>
				lcd_print("     GAME OVER!     ");
 8000bcc:	483c      	ldr	r0, [pc, #240]	@ (8000cc0 <game_task_state_2_play+0x270>)
 8000bce:	f000 f98b 	bl	8000ee8 <lcd_print>
				lcd_set_cursor(2, 0);
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2002      	movs	r0, #2
 8000bd6:	f000 f965 	bl	8000ea4 <lcd_set_cursor>
				lcd_print("     Red Wins!!     ");
 8000bda:	483a      	ldr	r0, [pc, #232]	@ (8000cc4 <game_task_state_2_play+0x274>)
 8000bdc:	f000 f984 	bl	8000ee8 <lcd_print>
				lcd_set_cursor(3, 0);
 8000be0:	2100      	movs	r1, #0
 8000be2:	2003      	movs	r0, #3
 8000be4:	f000 f95e 	bl	8000ea4 <lcd_set_cursor>
				lcd_print("                    ");
 8000be8:	4834      	ldr	r0, [pc, #208]	@ (8000cbc <game_task_state_2_play+0x26c>)
 8000bea:	f000 f97d 	bl	8000ee8 <lcd_print>
				game_task->delay_flag = 1;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	629a      	str	r2, [r3, #40]	@ 0x28
				game_task->delay_start = __HAL_TIM_GET_COUNTER(game_task->htim);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	625a      	str	r2, [r3, #36]	@ 0x24
				}
				if ((__HAL_TIM_GET_COUNTER(game_task->htim) - game_task->delay_start) > game_task->end_delay)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0c:	1ad2      	subs	r2, r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d902      	bls.n	8000c1c <game_task_state_2_play+0x1cc>
				{
				game_task->state = 3;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2203      	movs	r2, #3
 8000c1a:	601a      	str	r2, [r3, #0]
				}
			}

	if (game_task->score_blue >= game_task->score_thresh && game_task->state != 3)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	691a      	ldr	r2, [r3, #16]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	db3a      	blt.n	8000c9e <game_task_state_2_play+0x24e>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	d036      	beq.n	8000c9e <game_task_state_2_play+0x24e>
		{
	//		// print win message and set end sound
			if(game_task->delay_flag == 0)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d124      	bne.n	8000c82 <game_task_state_2_play+0x232>
			{
			lcd_set_cursor(0, 0);
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 f932 	bl	8000ea4 <lcd_set_cursor>
			lcd_print("                    ");
 8000c40:	481e      	ldr	r0, [pc, #120]	@ (8000cbc <game_task_state_2_play+0x26c>)
 8000c42:	f000 f951 	bl	8000ee8 <lcd_print>
			lcd_set_cursor(1, 0);
 8000c46:	2100      	movs	r1, #0
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f000 f92b 	bl	8000ea4 <lcd_set_cursor>
			lcd_print("     GAME OVER!     ");
 8000c4e:	481c      	ldr	r0, [pc, #112]	@ (8000cc0 <game_task_state_2_play+0x270>)
 8000c50:	f000 f94a 	bl	8000ee8 <lcd_print>
			lcd_set_cursor(2, 0);
 8000c54:	2100      	movs	r1, #0
 8000c56:	2002      	movs	r0, #2
 8000c58:	f000 f924 	bl	8000ea4 <lcd_set_cursor>
			lcd_print("     Blue Wins!!     ");
 8000c5c:	481a      	ldr	r0, [pc, #104]	@ (8000cc8 <game_task_state_2_play+0x278>)
 8000c5e:	f000 f943 	bl	8000ee8 <lcd_print>
			lcd_set_cursor(3, 0);
 8000c62:	2100      	movs	r1, #0
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f91d 	bl	8000ea4 <lcd_set_cursor>
			lcd_print("                    ");
 8000c6a:	4814      	ldr	r0, [pc, #80]	@ (8000cbc <game_task_state_2_play+0x26c>)
 8000c6c:	f000 f93c 	bl	8000ee8 <lcd_print>
			game_task->delay_flag = 1;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2201      	movs	r2, #1
 8000c74:	629a      	str	r2, [r3, #40]	@ 0x28
			game_task->delay_start = __HAL_TIM_GET_COUNTER(game_task->htim);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	625a      	str	r2, [r3, #36]	@ 0x24
			}
			if ((__HAL_TIM_GET_COUNTER(game_task->htim) - game_task->delay_start) > game_task->end_delay)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c8e:	1ad2      	subs	r2, r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d902      	bls.n	8000c9e <game_task_state_2_play+0x24e>
			{
			game_task->state = 3;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	601a      	str	r2, [r3, #0]
			}
		}
}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	08006590 	.word	0x08006590
 8000cac:	080065d8 	.word	0x080065d8
 8000cb0:	080065f0 	.word	0x080065f0
 8000cb4:	08006608 	.word	0x08006608
 8000cb8:	08006620 	.word	0x08006620
 8000cbc:	08006624 	.word	0x08006624
 8000cc0:	0800663c 	.word	0x0800663c
 8000cc4:	08006654 	.word	0x08006654
 8000cc8:	0800666c 	.word	0x0800666c

08000ccc <game_task_state_3_end>:
// A function to implement state 3
// Ends the game when the score threshold has been met
// Prints messages and sets sound flags
void game_task_state_3_end(GameTask *game_task)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

	game_task->play_flag = 0;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
	game_task->state = 1;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	601a      	str	r2, [r3, #0]
	game_task->score_blue = 0;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
	game_task->score_red = 0;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
	game_task->num = 0;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
	lcd_clear();
 8000cf2:	f000 f8cc 	bl	8000e8e <lcd_clear>

}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <lcd_send_nibble>:
#define LCD_RS        0x01

static void lcd_send_nibble(uint8_t nibble, uint8_t rs);
static void lcd_send_byte(uint8_t byte, uint8_t rs);

static void lcd_send_nibble(uint8_t nibble, uint8_t rs) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af02      	add	r7, sp, #8
 8000d06:	4603      	mov	r3, r0
 8000d08:	460a      	mov	r2, r1
 8000d0a:	71fb      	strb	r3, [r7, #7]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	71bb      	strb	r3, [r7, #6]
    uint8_t data = (nibble & 0xF0);
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f023 030f 	bic.w	r3, r3, #15
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	73fb      	strb	r3, [r7, #15]
    if (rs) data |= LCD_RS;
 8000d1a:	79bb      	ldrb	r3, [r7, #6]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d004      	beq.n	8000d2a <lcd_send_nibble+0x2a>
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	73fb      	strb	r3, [r7, #15]
    data |= LCD_BACKLIGHT;
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	f043 0308 	orr.w	r3, r3, #8
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	73fb      	strb	r3, [r7, #15]

    // Pulse enable
    uint8_t data_e = data | LCD_ENABLE;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	f043 0304 	orr.w	r3, r3, #4
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDR, &data_e, 1, HAL_MAX_DELAY);
 8000d3e:	f107 020e 	add.w	r2, r7, #14
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	214e      	movs	r1, #78	@ 0x4e
 8000d4c:	480b      	ldr	r0, [pc, #44]	@ (8000d7c <lcd_send_nibble+0x7c>)
 8000d4e:	f003 f93f 	bl	8003fd0 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000d52:	2001      	movs	r0, #1
 8000d54:	f001 fd7e 	bl	8002854 <HAL_Delay>
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDR, &data, 1, HAL_MAX_DELAY);
 8000d58:	f107 020f 	add.w	r2, r7, #15
 8000d5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	2301      	movs	r3, #1
 8000d64:	214e      	movs	r1, #78	@ 0x4e
 8000d66:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <lcd_send_nibble+0x7c>)
 8000d68:	f003 f932 	bl	8003fd0 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f001 fd71 	bl	8002854 <HAL_Delay>
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000038c 	.word	0x2000038c

08000d80 <lcd_send_byte>:

static void lcd_send_byte(uint8_t byte, uint8_t rs) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	460a      	mov	r2, r1
 8000d8a:	71fb      	strb	r3, [r7, #7]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	71bb      	strb	r3, [r7, #6]
    lcd_send_nibble(byte & 0xF0, rs);
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f023 030f 	bic.w	r3, r3, #15
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	79ba      	ldrb	r2, [r7, #6]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ffaf 	bl	8000d00 <lcd_send_nibble>
    lcd_send_nibble((byte << 4) & 0xF0, rs);
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	011b      	lsls	r3, r3, #4
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	79ba      	ldrb	r2, [r7, #6]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ffa7 	bl	8000d00 <lcd_send_nibble>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <lcd_send_command>:

void lcd_send_command(uint8_t cmd) {
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	71fb      	strb	r3, [r7, #7]
    lcd_send_byte(cmd, 0);
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ffd9 	bl	8000d80 <lcd_send_byte>
    HAL_Delay(2);
 8000dce:	2002      	movs	r0, #2
 8000dd0:	f001 fd40 	bl	8002854 <HAL_Delay>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
    lcd_send_byte(data, 1);
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	2101      	movs	r1, #1
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ffc8 	bl	8000d80 <lcd_send_byte>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <lcd_force_backlight_on>:

void lcd_force_backlight_on(void) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af02      	add	r7, sp, #8
    uint8_t data = 0x00 | LCD_BACKLIGHT;
 8000dfe:	2308      	movs	r3, #8
 8000e00:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDR, &data, 1, HAL_MAX_DELAY);
 8000e02:	1dfa      	adds	r2, r7, #7
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	214e      	movs	r1, #78	@ 0x4e
 8000e0e:	4803      	ldr	r0, [pc, #12]	@ (8000e1c <lcd_force_backlight_on+0x24>)
 8000e10:	f003 f8de 	bl	8003fd0 <HAL_I2C_Master_Transmit>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	2000038c 	.word	0x2000038c

08000e20 <lcd_init>:

void lcd_init(void) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
    HAL_Delay(50); // Wait for power to stabilize
 8000e24:	2032      	movs	r0, #50	@ 0x32
 8000e26:	f001 fd15 	bl	8002854 <HAL_Delay>

    // Set to 4-bit mode
    lcd_send_nibble(0x30, 0); HAL_Delay(5);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2030      	movs	r0, #48	@ 0x30
 8000e2e:	f7ff ff67 	bl	8000d00 <lcd_send_nibble>
 8000e32:	2005      	movs	r0, #5
 8000e34:	f001 fd0e 	bl	8002854 <HAL_Delay>
    lcd_send_nibble(0x30, 0); HAL_Delay(1);
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2030      	movs	r0, #48	@ 0x30
 8000e3c:	f7ff ff60 	bl	8000d00 <lcd_send_nibble>
 8000e40:	2001      	movs	r0, #1
 8000e42:	f001 fd07 	bl	8002854 <HAL_Delay>
    lcd_send_nibble(0x30, 0); HAL_Delay(1);
 8000e46:	2100      	movs	r1, #0
 8000e48:	2030      	movs	r0, #48	@ 0x30
 8000e4a:	f7ff ff59 	bl	8000d00 <lcd_send_nibble>
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f001 fd00 	bl	8002854 <HAL_Delay>
    lcd_send_nibble(0x20, 0); HAL_Delay(1); // 4-bit mode
 8000e54:	2100      	movs	r1, #0
 8000e56:	2020      	movs	r0, #32
 8000e58:	f7ff ff52 	bl	8000d00 <lcd_send_nibble>
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f001 fcf9 	bl	8002854 <HAL_Delay>

    lcd_send_command(0x28); // Function set: 4-bit, 2-line, 5x8 dots
 8000e62:	2028      	movs	r0, #40	@ 0x28
 8000e64:	f7ff ffa9 	bl	8000dba <lcd_send_command>
    lcd_send_command(0x08); // Display off
 8000e68:	2008      	movs	r0, #8
 8000e6a:	f7ff ffa6 	bl	8000dba <lcd_send_command>
    lcd_send_command(0x01); // Clear display
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f7ff ffa3 	bl	8000dba <lcd_send_command>
    HAL_Delay(2);
 8000e74:	2002      	movs	r0, #2
 8000e76:	f001 fced 	bl	8002854 <HAL_Delay>
    lcd_send_command(0x06); // Entry mode set
 8000e7a:	2006      	movs	r0, #6
 8000e7c:	f7ff ff9d 	bl	8000dba <lcd_send_command>
    lcd_send_command(0x0C); // Display on, cursor off
 8000e80:	200c      	movs	r0, #12
 8000e82:	f7ff ff9a 	bl	8000dba <lcd_send_command>
    lcd_force_backlight_on();
 8000e86:	f7ff ffb7 	bl	8000df8 <lcd_force_backlight_on>
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <lcd_clear>:

void lcd_clear(void) {
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	af00      	add	r7, sp, #0
    lcd_send_command(0x01);
 8000e92:	2001      	movs	r0, #1
 8000e94:	f7ff ff91 	bl	8000dba <lcd_send_command>
    HAL_Delay(2);
 8000e98:	2002      	movs	r0, #2
 8000e9a:	f001 fcdb 	bl	8002854 <HAL_Delay>
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t col) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	460a      	mov	r2, r1
 8000eae:	71fb      	strb	r3, [r7, #7]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	71bb      	strb	r3, [r7, #6]
    static const uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
    if (row > 3) row = 3;
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d901      	bls.n	8000ebe <lcd_set_cursor+0x1a>
 8000eba:	2303      	movs	r3, #3
 8000ebc:	71fb      	strb	r3, [r7, #7]
    lcd_send_command(0x80 | (col + row_offsets[row]));
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	4a08      	ldr	r2, [pc, #32]	@ (8000ee4 <lcd_set_cursor+0x40>)
 8000ec2:	5cd2      	ldrb	r2, [r2, r3]
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	b25b      	sxtb	r3, r3
 8000ecc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff70 	bl	8000dba <lcd_send_command>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	080066b4 	.word	0x080066b4

08000ee8 <lcd_print>:

void lcd_print(char *str) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000ef0:	e006      	b.n	8000f00 <lcd_print+0x18>
        lcd_send_data((uint8_t)*str++);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	1c5a      	adds	r2, r3, #1
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff6e 	bl	8000ddc <lcd_send_data>
    while (*str) {
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f4      	bne.n	8000ef2 <lcd_print+0xa>
    }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1a:	f001 fc29 	bl	8002770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1e:	f000 f905 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f22:	f000 fc41 	bl	80017a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f26:	f000 fc1f 	bl	8001768 <MX_DMA_Init>
  MX_I2C1_Init();
 8000f2a:	f000 f9e3 	bl	80012f4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000f2e:	f000 fa0f 	bl	8001350 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f32:	f000 fb0d 	bl	8001550 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f36:	f000 fb5f 	bl	80015f8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000f3a:	f000 fbc1 	bl	80016c0 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000f3e:	f000 faaf 	bl	80014a0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000f42:	f000 f95b 	bl	80011fc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f46:	2100      	movs	r1, #0
 8000f48:	485f      	ldr	r0, [pc, #380]	@ (80010c8 <main+0x1b4>)
 8000f4a:	f004 f889 	bl	8005060 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8000f4e:	2104      	movs	r1, #4
 8000f50:	485d      	ldr	r0, [pc, #372]	@ (80010c8 <main+0x1b4>)
 8000f52:	f004 f885 	bl	8005060 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);
 8000f56:	2108      	movs	r1, #8
 8000f58:	485b      	ldr	r0, [pc, #364]	@ (80010c8 <main+0x1b4>)
 8000f5a:	f004 f881 	bl	8005060 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8000f5e:	210c      	movs	r1, #12
 8000f60:	4859      	ldr	r0, [pc, #356]	@ (80010c8 <main+0x1b4>)
 8000f62:	f004 f87d 	bl	8005060 <HAL_TIM_PWM_Start_IT>

  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 8000f66:	2100      	movs	r1, #0
 8000f68:	4858      	ldr	r0, [pc, #352]	@ (80010cc <main+0x1b8>)
 8000f6a:	f004 f879 	bl	8005060 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8000f6e:	2104      	movs	r1, #4
 8000f70:	4856      	ldr	r0, [pc, #344]	@ (80010cc <main+0x1b8>)
 8000f72:	f004 f875 	bl	8005060 <HAL_TIM_PWM_Start_IT>

  HAL_TIM_Base_Start(&htim1);
 8000f76:	4854      	ldr	r0, [pc, #336]	@ (80010c8 <main+0x1b4>)
 8000f78:	f003 ffc8 	bl	8004f0c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8000f7c:	4854      	ldr	r0, [pc, #336]	@ (80010d0 <main+0x1bc>)
 8000f7e:	f003 ffc5 	bl	8004f0c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8000f82:	4852      	ldr	r0, [pc, #328]	@ (80010cc <main+0x1b8>)
 8000f84:	f003 ffc2 	bl	8004f0c <HAL_TIM_Base_Start>

  HAL_TIM_Encoder_Start(red_encoder.htim, TIM_CHANNEL_ALL);
 8000f88:	4b52      	ldr	r3, [pc, #328]	@ (80010d4 <main+0x1c0>)
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	213c      	movs	r1, #60	@ 0x3c
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f004 fa0a 	bl	80053a8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(blue_encoder.htim, TIM_CHANNEL_ALL);
 8000f94:	4b50      	ldr	r3, [pc, #320]	@ (80010d8 <main+0x1c4>)
 8000f96:	695b      	ldr	r3, [r3, #20]
 8000f98:	213c      	movs	r1, #60	@ 0x3c
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f004 fa04 	bl	80053a8 <HAL_TIM_Encoder_Start>

  enable(&mred);
 8000fa0:	484e      	ldr	r0, [pc, #312]	@ (80010dc <main+0x1c8>)
 8000fa2:	f000 fed3 	bl	8001d4c <enable>
  enable(&mblue);
 8000fa6:	484e      	ldr	r0, [pc, #312]	@ (80010e0 <main+0x1cc>)
 8000fa8:	f000 fed0 	bl	8001d4c <enable>
  //
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2104      	movs	r1, #4
 8000fb0:	484c      	ldr	r0, [pc, #304]	@ (80010e4 <main+0x1d0>)
 8000fb2:	f002 fe97 	bl	8003ce4 <HAL_GPIO_WritePin>
  // sleep pins
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fbc:	4849      	ldr	r0, [pc, #292]	@ (80010e4 <main+0x1d0>)
 8000fbe:	f002 fe91 	bl	8003ce4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fc8:	4846      	ldr	r0, [pc, #280]	@ (80010e4 <main+0x1d0>)
 8000fca:	f002 fe8b 	bl	8003ce4 <HAL_GPIO_WritePin>
  adc_task_run(&adc_task);
 8000fce:	4846      	ldr	r0, [pc, #280]	@ (80010e8 <main+0x1d4>)
 8000fd0:	f7ff faec 	bl	80005ac <adc_task_run>
  HAL_Delay(2000); // 2 second delay to let stuff get set up
 8000fd4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fd8:	f001 fc3c 	bl	8002854 <HAL_Delay>
  adc_task_run(&adc_task);
 8000fdc:	4842      	ldr	r0, [pc, #264]	@ (80010e8 <main+0x1d4>)
 8000fde:	f7ff fae5 	bl	80005ac <adc_task_run>
  lcd_clear();
 8000fe2:	f7ff ff54 	bl	8000e8e <lcd_clear>
  lcd_set_cursor(1, 0);
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f7ff ff5b 	bl	8000ea4 <lcd_set_cursor>
  lcd_print("  Zap'em Blast'em   ");
 8000fee:	483f      	ldr	r0, [pc, #252]	@ (80010ec <main+0x1d8>)
 8000ff0:	f7ff ff7a 	bl	8000ee8 <lcd_print>
  lcd_set_cursor(2, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2002      	movs	r0, #2
 8000ff8:	f7ff ff54 	bl	8000ea4 <lcd_set_cursor>
  lcd_print("       Robots       ");
 8000ffc:	483c      	ldr	r0, [pc, #240]	@ (80010f0 <main+0x1dc>)
 8000ffe:	f7ff ff73 	bl	8000ee8 <lcd_print>
  calibration();
 8001002:	f000 fcf7 	bl	80019f4 <calibration>
  HAL_Delay(1000);
 8001006:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800100a:	f001 fc23 	bl	8002854 <HAL_Delay>
  setup_encoder(&red_encoder);
 800100e:	4831      	ldr	r0, [pc, #196]	@ (80010d4 <main+0x1c0>)
 8001010:	f7ff fc6e 	bl	80008f0 <setup_encoder>
  setup_encoder(&blue_encoder);
 8001014:	4830      	ldr	r0, [pc, #192]	@ (80010d8 <main+0x1c4>)
 8001016:	f7ff fc6b 	bl	80008f0 <setup_encoder>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  read_encoder(&red_encoder);
//	  read_encoder(&blue_encoder);
	  adc_task_run(&adc_task);
 800101a:	4833      	ldr	r0, [pc, #204]	@ (80010e8 <main+0x1d4>)
 800101c:	f7ff fac6 	bl	80005ac <adc_task_run>
	  game_task_run(&game_task);
 8001020:	4834      	ldr	r0, [pc, #208]	@ (80010f4 <main+0x1e0>)
 8001022:	f7ff fcbd 	bl	80009a0 <game_task_run>
//	  sound_task_run(&sound_task);
	  controller_task_run(&blue_controller_task);
 8001026:	4834      	ldr	r0, [pc, #208]	@ (80010f8 <main+0x1e4>)
 8001028:	f7ff fb10 	bl	800064c <controller_task_run>
	  controller_task_run(&red_controller_task);
 800102c:	4833      	ldr	r0, [pc, #204]	@ (80010fc <main+0x1e8>)
 800102e:	f7ff fb0d 	bl	800064c <controller_task_run>

	  // set play flag by each player holding button for 2 seconds
	  if (red_held && blue_held && game_task.play_flag == 0)
 8001032:	4b33      	ldr	r3, [pc, #204]	@ (8001100 <main+0x1ec>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d031      	beq.n	800109e <main+0x18a>
 800103a:	4b32      	ldr	r3, [pc, #200]	@ (8001104 <main+0x1f0>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d02d      	beq.n	800109e <main+0x18a>
 8001042:	4b2c      	ldr	r3, [pc, #176]	@ (80010f4 <main+0x1e0>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d129      	bne.n	800109e <main+0x18a>
	  {
	      uint32_t now = __HAL_TIM_GET_COUNTER(game_task.htim);
 800104a:	4b2a      	ldr	r3, [pc, #168]	@ (80010f4 <main+0x1e0>)
 800104c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001052:	607b      	str	r3, [r7, #4]
	      red_elapsed = now - red_start;
 8001054:	4b2c      	ldr	r3, [pc, #176]	@ (8001108 <main+0x1f4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	4a2b      	ldr	r2, [pc, #172]	@ (800110c <main+0x1f8>)
 800105e:	6013      	str	r3, [r2, #0]
	      blue_elapsed = now - blue_start;
 8001060:	4b2b      	ldr	r3, [pc, #172]	@ (8001110 <main+0x1fc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	4a2a      	ldr	r2, [pc, #168]	@ (8001114 <main+0x200>)
 800106a:	6013      	str	r3, [r2, #0]

	      if (red_elapsed > hold_time && blue_elapsed > hold_time)
 800106c:	4b27      	ldr	r3, [pc, #156]	@ (800110c <main+0x1f8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a29      	ldr	r2, [pc, #164]	@ (8001118 <main+0x204>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d913      	bls.n	800109e <main+0x18a>
 8001076:	4b27      	ldr	r3, [pc, #156]	@ (8001114 <main+0x200>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a27      	ldr	r2, [pc, #156]	@ (8001118 <main+0x204>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d90e      	bls.n	800109e <main+0x18a>
	      {
	          game_task.play_flag = 1;
 8001080:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <main+0x1e0>)
 8001082:	2201      	movs	r2, #1
 8001084:	609a      	str	r2, [r3, #8]
	          red_held = 0;
 8001086:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <main+0x1ec>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
	          blue_held = 0;
 800108c:	4b1d      	ldr	r3, [pc, #116]	@ (8001104 <main+0x1f0>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
	          red_shoot_task.button = 0;
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <main+0x208>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
	          blue_shoot_task.button = 0;
 8001098:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <main+0x20c>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
	      }
	  }
	  if (game_task.play_flag){ //shooting and scoring disabled when game hasn't started
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <main+0x1e0>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00b      	beq.n	80010be <main+0x1aa>
		  shoot_task_run(&red_shoot_task);
 80010a6:	481d      	ldr	r0, [pc, #116]	@ (800111c <main+0x208>)
 80010a8:	f000 ff1d 	bl	8001ee6 <shoot_task_run>
		  shoot_task_run(&blue_shoot_task);
 80010ac:	481c      	ldr	r0, [pc, #112]	@ (8001120 <main+0x20c>)
 80010ae:	f000 ff1a 	bl	8001ee6 <shoot_task_run>
		  photoresistor_task_run(&red_photoresistor_task);
 80010b2:	481c      	ldr	r0, [pc, #112]	@ (8001124 <main+0x210>)
 80010b4:	f000 fec5 	bl	8001e42 <photoresistor_task_run>
		  photoresistor_task_run(&blue_photoresistor_task);
 80010b8:	481b      	ldr	r0, [pc, #108]	@ (8001128 <main+0x214>)
 80010ba:	f000 fec2 	bl	8001e42 <photoresistor_task_run>
	  //__HAL_TIM_SET_COMPARE(red_shoot_task.servo_tim, red_shoot_task.channel, a);
	  //__HAL_TIM_SET_COMPARE(blue_shoot_task.servo_tim, blue_shoot_task.channel, b);
	  //controller_task_run(&blue_controller_task);
	  //controller_task_run(&red_controller_task);
	  //add delay
	  HAL_Delay(1);
 80010be:	2001      	movs	r0, #1
 80010c0:	f001 fbc8 	bl	8002854 <HAL_Delay>
	  adc_task_run(&adc_task);
 80010c4:	e7a9      	b.n	800101a <main+0x106>
 80010c6:	bf00      	nop
 80010c8:	200003e0 	.word	0x200003e0
 80010cc:	200004b8 	.word	0x200004b8
 80010d0:	20000428 	.word	0x20000428
 80010d4:	20000018 	.word	0x20000018
 80010d8:	20000030 	.word	0x20000030
 80010dc:	20000000 	.word	0x20000000
 80010e0:	2000000c 	.word	0x2000000c
 80010e4:	40020400 	.word	0x40020400
 80010e8:	20000240 	.word	0x20000240
 80010ec:	08006684 	.word	0x08006684
 80010f0:	0800669c 	.word	0x0800669c
 80010f4:	200000c0 	.word	0x200000c0
 80010f8:	20000178 	.word	0x20000178
 80010fc:	200001dc 	.word	0x200001dc
 8001100:	20000548 	.word	0x20000548
 8001104:	20000549 	.word	0x20000549
 8001108:	2000054c 	.word	0x2000054c
 800110c:	20000554 	.word	0x20000554
 8001110:	20000550 	.word	0x20000550
 8001114:	20000558 	.word	0x20000558
 8001118:	001e8480 	.word	0x001e8480
 800111c:	20000118 	.word	0x20000118
 8001120:	20000148 	.word	0x20000148
 8001124:	20000078 	.word	0x20000078
 8001128:	2000009c 	.word	0x2000009c

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	@ 0x50
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	2230      	movs	r2, #48	@ 0x30
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f004 fd9e 	bl	8005c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	4b27      	ldr	r3, [pc, #156]	@ (80011f4 <SystemClock_Config+0xc8>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	4a26      	ldr	r2, [pc, #152]	@ (80011f4 <SystemClock_Config+0xc8>)
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800115e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001160:	4b24      	ldr	r3, [pc, #144]	@ (80011f4 <SystemClock_Config+0xc8>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	4b21      	ldr	r3, [pc, #132]	@ (80011f8 <SystemClock_Config+0xcc>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a20      	ldr	r2, [pc, #128]	@ (80011f8 <SystemClock_Config+0xcc>)
 8001176:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b1e      	ldr	r3, [pc, #120]	@ (80011f8 <SystemClock_Config+0xcc>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001188:	2301      	movs	r3, #1
 800118a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800118c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001192:	2302      	movs	r3, #2
 8001194:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001196:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800119a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800119c:	2319      	movs	r3, #25
 800119e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80011a0:	23c0      	movs	r3, #192	@ 0xc0
 80011a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011a8:	2304      	movs	r3, #4
 80011aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ac:	f107 0320 	add.w	r3, r7, #32
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 fa67 	bl	8004684 <HAL_RCC_OscConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011bc:	f000 fd08 	bl	8001bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c0:	230f      	movs	r3, #15
 80011c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c4:	2302      	movs	r3, #2
 80011c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	2103      	movs	r1, #3
 80011dc:	4618      	mov	r0, r3
 80011de:	f003 fcc9 	bl	8004b74 <HAL_RCC_ClockConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011e8:	f000 fcf2 	bl	8001bd0 <Error_Handler>
  }
}
 80011ec:	bf00      	nop
 80011ee:	3750      	adds	r7, #80	@ 0x50
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40007000 	.word	0x40007000

080011fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001202:	463b      	mov	r3, r7
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800120e:	4b36      	ldr	r3, [pc, #216]	@ (80012e8 <MX_ADC1_Init+0xec>)
 8001210:	4a36      	ldr	r2, [pc, #216]	@ (80012ec <MX_ADC1_Init+0xf0>)
 8001212:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001214:	4b34      	ldr	r3, [pc, #208]	@ (80012e8 <MX_ADC1_Init+0xec>)
 8001216:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800121a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800121c:	4b32      	ldr	r3, [pc, #200]	@ (80012e8 <MX_ADC1_Init+0xec>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001222:	4b31      	ldr	r3, [pc, #196]	@ (80012e8 <MX_ADC1_Init+0xec>)
 8001224:	2201      	movs	r2, #1
 8001226:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001228:	4b2f      	ldr	r3, [pc, #188]	@ (80012e8 <MX_ADC1_Init+0xec>)
 800122a:	2201      	movs	r2, #1
 800122c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800122e:	4b2e      	ldr	r3, [pc, #184]	@ (80012e8 <MX_ADC1_Init+0xec>)
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001236:	4b2c      	ldr	r3, [pc, #176]	@ (80012e8 <MX_ADC1_Init+0xec>)
 8001238:	2200      	movs	r2, #0
 800123a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800123c:	4b2a      	ldr	r3, [pc, #168]	@ (80012e8 <MX_ADC1_Init+0xec>)
 800123e:	4a2c      	ldr	r2, [pc, #176]	@ (80012f0 <MX_ADC1_Init+0xf4>)
 8001240:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001242:	4b29      	ldr	r3, [pc, #164]	@ (80012e8 <MX_ADC1_Init+0xec>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001248:	4b27      	ldr	r3, [pc, #156]	@ (80012e8 <MX_ADC1_Init+0xec>)
 800124a:	2204      	movs	r2, #4
 800124c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800124e:	4b26      	ldr	r3, [pc, #152]	@ (80012e8 <MX_ADC1_Init+0xec>)
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001256:	4b24      	ldr	r3, [pc, #144]	@ (80012e8 <MX_ADC1_Init+0xec>)
 8001258:	2200      	movs	r2, #0
 800125a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800125c:	4822      	ldr	r0, [pc, #136]	@ (80012e8 <MX_ADC1_Init+0xec>)
 800125e:	f001 fb1d 	bl	800289c <HAL_ADC_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001268:	f000 fcb2 	bl	8001bd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800126c:	2304      	movs	r3, #4
 800126e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001270:	2301      	movs	r3, #1
 8001272:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001274:	2303      	movs	r3, #3
 8001276:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	4619      	mov	r1, r3
 800127c:	481a      	ldr	r0, [pc, #104]	@ (80012e8 <MX_ADC1_Init+0xec>)
 800127e:	f001 fc63 	bl	8002b48 <HAL_ADC_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001288:	f000 fca2 	bl	8001bd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800128c:	2305      	movs	r3, #5
 800128e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001290:	2302      	movs	r3, #2
 8001292:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001294:	463b      	mov	r3, r7
 8001296:	4619      	mov	r1, r3
 8001298:	4813      	ldr	r0, [pc, #76]	@ (80012e8 <MX_ADC1_Init+0xec>)
 800129a:	f001 fc55 	bl	8002b48 <HAL_ADC_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012a4:	f000 fc94 	bl	8001bd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012a8:	2306      	movs	r3, #6
 80012aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80012ac:	2303      	movs	r3, #3
 80012ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <MX_ADC1_Init+0xec>)
 80012b6:	f001 fc47 	bl	8002b48 <HAL_ADC_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80012c0:	f000 fc86 	bl	8001bd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012c4:	2307      	movs	r3, #7
 80012c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80012c8:	2304      	movs	r3, #4
 80012ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_ADC1_Init+0xec>)
 80012d2:	f001 fc39 	bl	8002b48 <HAL_ADC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80012dc:	f000 fc78 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200002e4 	.word	0x200002e4
 80012ec:	40012000 	.word	0x40012000
 80012f0:	0f000001 	.word	0x0f000001

080012f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f8:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <MX_I2C1_Init+0x50>)
 80012fa:	4a13      	ldr	r2, [pc, #76]	@ (8001348 <MX_I2C1_Init+0x54>)
 80012fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <MX_I2C1_Init+0x50>)
 8001300:	4a12      	ldr	r2, [pc, #72]	@ (800134c <MX_I2C1_Init+0x58>)
 8001302:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <MX_I2C1_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <MX_I2C1_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <MX_I2C1_Init+0x50>)
 8001312:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001316:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001318:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <MX_I2C1_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <MX_I2C1_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001324:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <MX_I2C1_Init+0x50>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <MX_I2C1_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	@ (8001344 <MX_I2C1_Init+0x50>)
 8001332:	f002 fd09 	bl	8003d48 <HAL_I2C_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800133c:	f000 fc48 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000038c 	.word	0x2000038c
 8001348:	40005400 	.word	0x40005400
 800134c:	000186a0 	.word	0x000186a0

08001350 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b092      	sub	sp, #72	@ 0x48
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001356:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001360:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	615a      	str	r2, [r3, #20]
 8001372:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2220      	movs	r2, #32
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f004 fc7e 	bl	8005c7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001380:	4b45      	ldr	r3, [pc, #276]	@ (8001498 <MX_TIM1_Init+0x148>)
 8001382:	4a46      	ldr	r2, [pc, #280]	@ (800149c <MX_TIM1_Init+0x14c>)
 8001384:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001386:	4b44      	ldr	r3, [pc, #272]	@ (8001498 <MX_TIM1_Init+0x148>)
 8001388:	2200      	movs	r2, #0
 800138a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b42      	ldr	r3, [pc, #264]	@ (8001498 <MX_TIM1_Init+0x148>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4799;
 8001392:	4b41      	ldr	r3, [pc, #260]	@ (8001498 <MX_TIM1_Init+0x148>)
 8001394:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8001398:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b3f      	ldr	r3, [pc, #252]	@ (8001498 <MX_TIM1_Init+0x148>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001498 <MX_TIM1_Init+0x148>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001498 <MX_TIM1_Init+0x148>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013ac:	483a      	ldr	r0, [pc, #232]	@ (8001498 <MX_TIM1_Init+0x148>)
 80013ae:	f003 fe07 	bl	8004fc0 <HAL_TIM_PWM_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80013b8:	f000 fc0a 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013c4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013c8:	4619      	mov	r1, r3
 80013ca:	4833      	ldr	r0, [pc, #204]	@ (8001498 <MX_TIM1_Init+0x148>)
 80013cc:	f004 fb74 	bl	8005ab8 <HAL_TIMEx_MasterConfigSynchronization>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80013d6:	f000 fbfb 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80013da:	2370      	movs	r3, #112	@ 0x70
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013e6:	2300      	movs	r3, #0
 80013e8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013fa:	2200      	movs	r2, #0
 80013fc:	4619      	mov	r1, r3
 80013fe:	4826      	ldr	r0, [pc, #152]	@ (8001498 <MX_TIM1_Init+0x148>)
 8001400:	f004 f860 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800140a:	f000 fbe1 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800140e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001412:	2204      	movs	r2, #4
 8001414:	4619      	mov	r1, r3
 8001416:	4820      	ldr	r0, [pc, #128]	@ (8001498 <MX_TIM1_Init+0x148>)
 8001418:	f004 f854 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001422:	f000 fbd5 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800142a:	2208      	movs	r2, #8
 800142c:	4619      	mov	r1, r3
 800142e:	481a      	ldr	r0, [pc, #104]	@ (8001498 <MX_TIM1_Init+0x148>)
 8001430:	f004 f848 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800143a:	f000 fbc9 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800143e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001442:	220c      	movs	r2, #12
 8001444:	4619      	mov	r1, r3
 8001446:	4814      	ldr	r0, [pc, #80]	@ (8001498 <MX_TIM1_Init+0x148>)
 8001448:	f004 f83c 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001452:	f000 fbbd 	bl	8001bd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800146a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800146e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	4619      	mov	r1, r3
 8001478:	4807      	ldr	r0, [pc, #28]	@ (8001498 <MX_TIM1_Init+0x148>)
 800147a:	f004 fb8b 	bl	8005b94 <HAL_TIMEx_ConfigBreakDeadTime>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001484:	f000 fba4 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001488:	4803      	ldr	r0, [pc, #12]	@ (8001498 <MX_TIM1_Init+0x148>)
 800148a:	f001 f831 	bl	80024f0 <HAL_TIM_MspPostInit>

}
 800148e:	bf00      	nop
 8001490:	3748      	adds	r7, #72	@ 0x48
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200003e0 	.word	0x200003e0
 800149c:	40010000 	.word	0x40010000

080014a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a6:	f107 0320 	add.w	r3, r7, #32
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]
 80014be:	615a      	str	r2, [r3, #20]
 80014c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c2:	4b22      	ldr	r3, [pc, #136]	@ (800154c <MX_TIM2_Init+0xac>)
 80014c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 80014ca:	4b20      	ldr	r3, [pc, #128]	@ (800154c <MX_TIM2_Init+0xac>)
 80014cc:	225f      	movs	r2, #95	@ 0x5f
 80014ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d0:	4b1e      	ldr	r3, [pc, #120]	@ (800154c <MX_TIM2_Init+0xac>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014d6:	4b1d      	ldr	r3, [pc, #116]	@ (800154c <MX_TIM2_Init+0xac>)
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014de:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <MX_TIM2_Init+0xac>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e4:	4b19      	ldr	r3, [pc, #100]	@ (800154c <MX_TIM2_Init+0xac>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014ea:	4818      	ldr	r0, [pc, #96]	@ (800154c <MX_TIM2_Init+0xac>)
 80014ec:	f003 fd68 	bl	8004fc0 <HAL_TIM_PWM_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80014f6:	f000 fb6b 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	4619      	mov	r1, r3
 8001508:	4810      	ldr	r0, [pc, #64]	@ (800154c <MX_TIM2_Init+0xac>)
 800150a:	f004 fad5 	bl	8005ab8 <HAL_TIMEx_MasterConfigSynchronization>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001514:	f000 fb5c 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001518:	2360      	movs	r3, #96	@ 0x60
 800151a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2200      	movs	r2, #0
 800152c:	4619      	mov	r1, r3
 800152e:	4807      	ldr	r0, [pc, #28]	@ (800154c <MX_TIM2_Init+0xac>)
 8001530:	f003 ffc8 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800153a:	f000 fb49 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800153e:	4803      	ldr	r0, [pc, #12]	@ (800154c <MX_TIM2_Init+0xac>)
 8001540:	f000 ffd6 	bl	80024f0 <HAL_TIM_MspPostInit>

}
 8001544:	bf00      	nop
 8001546:	3728      	adds	r7, #40	@ 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000428 	.word	0x20000428

08001550 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08c      	sub	sp, #48	@ 0x30
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	2224      	movs	r2, #36	@ 0x24
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f004 fb8c 	bl	8005c7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800156c:	4b20      	ldr	r3, [pc, #128]	@ (80015f0 <MX_TIM3_Init+0xa0>)
 800156e:	4a21      	ldr	r2, [pc, #132]	@ (80015f4 <MX_TIM3_Init+0xa4>)
 8001570:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001572:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <MX_TIM3_Init+0xa0>)
 8001574:	2200      	movs	r2, #0
 8001576:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	4b1d      	ldr	r3, [pc, #116]	@ (80015f0 <MX_TIM3_Init+0xa0>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800157e:	4b1c      	ldr	r3, [pc, #112]	@ (80015f0 <MX_TIM3_Init+0xa0>)
 8001580:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001584:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001586:	4b1a      	ldr	r3, [pc, #104]	@ (80015f0 <MX_TIM3_Init+0xa0>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158c:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <MX_TIM3_Init+0xa0>)
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001592:	2301      	movs	r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800159a:	2301      	movs	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015aa:	2301      	movs	r3, #1
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	4619      	mov	r1, r3
 80015bc:	480c      	ldr	r0, [pc, #48]	@ (80015f0 <MX_TIM3_Init+0xa0>)
 80015be:	f003 fe4d 	bl	800525c <HAL_TIM_Encoder_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80015c8:	f000 fb02 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	@ (80015f0 <MX_TIM3_Init+0xa0>)
 80015da:	f004 fa6d 	bl	8005ab8 <HAL_TIMEx_MasterConfigSynchronization>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80015e4:	f000 faf4 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	3730      	adds	r7, #48	@ 0x30
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000470 	.word	0x20000470
 80015f4:	40000400 	.word	0x40000400

080015f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	@ 0x28
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fe:	f107 0320 	add.w	r3, r7, #32
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800161a:	4b27      	ldr	r3, [pc, #156]	@ (80016b8 <MX_TIM4_Init+0xc0>)
 800161c:	4a27      	ldr	r2, [pc, #156]	@ (80016bc <MX_TIM4_Init+0xc4>)
 800161e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001620:	4b25      	ldr	r3, [pc, #148]	@ (80016b8 <MX_TIM4_Init+0xc0>)
 8001622:	2253      	movs	r2, #83	@ 0x53
 8001624:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001626:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <MX_TIM4_Init+0xc0>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 800162c:	4b22      	ldr	r3, [pc, #136]	@ (80016b8 <MX_TIM4_Init+0xc0>)
 800162e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001632:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001634:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <MX_TIM4_Init+0xc0>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163a:	4b1f      	ldr	r3, [pc, #124]	@ (80016b8 <MX_TIM4_Init+0xc0>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001640:	481d      	ldr	r0, [pc, #116]	@ (80016b8 <MX_TIM4_Init+0xc0>)
 8001642:	f003 fcbd 	bl	8004fc0 <HAL_TIM_PWM_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800164c:	f000 fac0 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001658:	f107 0320 	add.w	r3, r7, #32
 800165c:	4619      	mov	r1, r3
 800165e:	4816      	ldr	r0, [pc, #88]	@ (80016b8 <MX_TIM4_Init+0xc0>)
 8001660:	f004 fa2a 	bl	8005ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800166a:	f000 fab1 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166e:	2360      	movs	r3, #96	@ 0x60
 8001670:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	4619      	mov	r1, r3
 8001684:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <MX_TIM4_Init+0xc0>)
 8001686:	f003 ff1d 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001690:	f000 fa9e 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	2204      	movs	r2, #4
 8001698:	4619      	mov	r1, r3
 800169a:	4807      	ldr	r0, [pc, #28]	@ (80016b8 <MX_TIM4_Init+0xc0>)
 800169c:	f003 ff12 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80016a6:	f000 fa93 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016aa:	4803      	ldr	r0, [pc, #12]	@ (80016b8 <MX_TIM4_Init+0xc0>)
 80016ac:	f000 ff20 	bl	80024f0 <HAL_TIM_MspPostInit>

}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	@ 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200004b8 	.word	0x200004b8
 80016bc:	40000800 	.word	0x40000800

080016c0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08c      	sub	sp, #48	@ 0x30
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	2224      	movs	r2, #36	@ 0x24
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 fad4 	bl	8005c7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016dc:	4b20      	ldr	r3, [pc, #128]	@ (8001760 <MX_TIM5_Init+0xa0>)
 80016de:	4a21      	ldr	r2, [pc, #132]	@ (8001764 <MX_TIM5_Init+0xa4>)
 80016e0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80016e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <MX_TIM5_Init+0xa0>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001760 <MX_TIM5_Init+0xa0>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80016ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <MX_TIM5_Init+0xa0>)
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016f4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <MX_TIM5_Init+0xa0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fc:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <MX_TIM5_Init+0xa0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001702:	2301      	movs	r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800170a:	2301      	movs	r3, #1
 800170c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800171a:	2301      	movs	r3, #1
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	4619      	mov	r1, r3
 800172c:	480c      	ldr	r0, [pc, #48]	@ (8001760 <MX_TIM5_Init+0xa0>)
 800172e:	f003 fd95 	bl	800525c <HAL_TIM_Encoder_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001738:	f000 fa4a 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_TIM5_Init+0xa0>)
 800174a:	f004 f9b5 	bl	8005ab8 <HAL_TIMEx_MasterConfigSynchronization>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001754:	f000 fa3c 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	3730      	adds	r7, #48	@ 0x30
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000500 	.word	0x20000500
 8001764:	40000c00 	.word	0x40000c00

08001768 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <MX_DMA_Init+0x3c>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	4a0b      	ldr	r2, [pc, #44]	@ (80017a4 <MX_DMA_Init+0x3c>)
 8001778:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800177c:	6313      	str	r3, [r2, #48]	@ 0x30
 800177e:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <MX_DMA_Init+0x3c>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2100      	movs	r1, #0
 800178e:	2038      	movs	r0, #56	@ 0x38
 8001790:	f001 fd65 	bl	800325e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001794:	2038      	movs	r0, #56	@ 0x38
 8001796:	f001 fd7e 	bl	8003296 <HAL_NVIC_EnableIRQ>

}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800

080017a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	@ 0x28
 80017ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b4c      	ldr	r3, [pc, #304]	@ (80018f4 <MX_GPIO_Init+0x14c>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a4b      	ldr	r2, [pc, #300]	@ (80018f4 <MX_GPIO_Init+0x14c>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b49      	ldr	r3, [pc, #292]	@ (80018f4 <MX_GPIO_Init+0x14c>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b45      	ldr	r3, [pc, #276]	@ (80018f4 <MX_GPIO_Init+0x14c>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a44      	ldr	r2, [pc, #272]	@ (80018f4 <MX_GPIO_Init+0x14c>)
 80017e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b42      	ldr	r3, [pc, #264]	@ (80018f4 <MX_GPIO_Init+0x14c>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	4b3e      	ldr	r3, [pc, #248]	@ (80018f4 <MX_GPIO_Init+0x14c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a3d      	ldr	r2, [pc, #244]	@ (80018f4 <MX_GPIO_Init+0x14c>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b3b      	ldr	r3, [pc, #236]	@ (80018f4 <MX_GPIO_Init+0x14c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b37      	ldr	r3, [pc, #220]	@ (80018f4 <MX_GPIO_Init+0x14c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	4a36      	ldr	r2, [pc, #216]	@ (80018f4 <MX_GPIO_Init+0x14c>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	6313      	str	r3, [r2, #48]	@ 0x30
 8001822:	4b34      	ldr	r3, [pc, #208]	@ (80018f4 <MX_GPIO_Init+0x14c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001834:	4830      	ldr	r0, [pc, #192]	@ (80018f8 <MX_GPIO_Init+0x150>)
 8001836:	f002 fa55 	bl	8003ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	f24c 0104 	movw	r1, #49156	@ 0xc004
 8001840:	482e      	ldr	r0, [pc, #184]	@ (80018fc <MX_GPIO_Init+0x154>)
 8001842:	f002 fa4f 	bl	8003ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001846:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800184a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	4826      	ldr	r0, [pc, #152]	@ (80018f8 <MX_GPIO_Init+0x150>)
 8001860:	f002 f8a4 	bl	80039ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001864:	230c      	movs	r3, #12
 8001866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001870:	2303      	movs	r3, #3
 8001872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001874:	2307      	movs	r3, #7
 8001876:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	4820      	ldr	r0, [pc, #128]	@ (8001900 <MX_GPIO_Init+0x158>)
 8001880:	f002 f894 	bl	80039ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001884:	2304      	movs	r3, #4
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	4818      	ldr	r0, [pc, #96]	@ (80018fc <MX_GPIO_Init+0x154>)
 800189c:	f002 f886 	bl	80039ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80018a0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80018a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80018a6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80018aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4811      	ldr	r0, [pc, #68]	@ (80018fc <MX_GPIO_Init+0x154>)
 80018b8:	f002 f878 	bl	80039ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80018bc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80018c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80018c2:	2311      	movs	r3, #17
 80018c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4809      	ldr	r0, [pc, #36]	@ (80018fc <MX_GPIO_Init+0x154>)
 80018d6:	f002 f869 	bl	80039ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2102      	movs	r1, #2
 80018de:	2028      	movs	r0, #40	@ 0x28
 80018e0:	f001 fcbd 	bl	800325e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018e4:	2028      	movs	r0, #40	@ 0x28
 80018e6:	f001 fcd6 	bl	8003296 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80018ea:	bf00      	nop
 80018ec:	3728      	adds	r7, #40	@ 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40020400 	.word	0x40020400
 8001900:	40020000 	.word	0x40020000

08001904 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) // RED
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001914:	d11c      	bne.n	8001950 <HAL_GPIO_EXTI_Callback+0x4c>
	    {
	        GPIO_PinState state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8001916:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800191a:	482c      	ldr	r0, [pc, #176]	@ (80019cc <HAL_GPIO_EXTI_Callback+0xc8>)
 800191c:	f002 f9ca 	bl	8003cb4 <HAL_GPIO_ReadPin>
 8001920:	4603      	mov	r3, r0
 8001922:	73fb      	strb	r3, [r7, #15]

	        if (state == GPIO_PIN_RESET) {
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10c      	bne.n	8001944 <HAL_GPIO_EXTI_Callback+0x40>
	            red_held = 1;
 800192a:	4b29      	ldr	r3, [pc, #164]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0xcc>)
 800192c:	2201      	movs	r2, #1
 800192e:	701a      	strb	r2, [r3, #0]
	            red_start = __HAL_TIM_GET_COUNTER(game_task.htim);
 8001930:	4b28      	ldr	r3, [pc, #160]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001938:	4a27      	ldr	r2, [pc, #156]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0xd4>)
 800193a:	6013      	str	r3, [r2, #0]
	            red_shoot_task.button = 1;
 800193c:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <HAL_GPIO_EXTI_Callback+0xd8>)
 800193e:	2201      	movs	r2, #1
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	e005      	b.n	8001950 <HAL_GPIO_EXTI_Callback+0x4c>
	        } else {
	            red_held = 0;
 8001944:	4b22      	ldr	r3, [pc, #136]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
	            red_shoot_task.button = 0;
 800194a:	4b24      	ldr	r3, [pc, #144]	@ (80019dc <HAL_GPIO_EXTI_Callback+0xd8>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
	        }
	    }

	    if (GPIO_Pin == GPIO_PIN_12) // BLUE
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001956:	d11c      	bne.n	8001992 <HAL_GPIO_EXTI_Callback+0x8e>
	    {
	        GPIO_PinState state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8001958:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800195c:	481b      	ldr	r0, [pc, #108]	@ (80019cc <HAL_GPIO_EXTI_Callback+0xc8>)
 800195e:	f002 f9a9 	bl	8003cb4 <HAL_GPIO_ReadPin>
 8001962:	4603      	mov	r3, r0
 8001964:	73bb      	strb	r3, [r7, #14]

	        if (state == GPIO_PIN_RESET) {
 8001966:	7bbb      	ldrb	r3, [r7, #14]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10c      	bne.n	8001986 <HAL_GPIO_EXTI_Callback+0x82>
	            blue_held = 1;
 800196c:	4b1c      	ldr	r3, [pc, #112]	@ (80019e0 <HAL_GPIO_EXTI_Callback+0xdc>)
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
	            blue_start = __HAL_TIM_GET_COUNTER(game_task.htim);
 8001972:	4b18      	ldr	r3, [pc, #96]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197a:	4a1a      	ldr	r2, [pc, #104]	@ (80019e4 <HAL_GPIO_EXTI_Callback+0xe0>)
 800197c:	6013      	str	r3, [r2, #0]
	            blue_shoot_task.button = 1;
 800197e:	4b1a      	ldr	r3, [pc, #104]	@ (80019e8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001980:	2201      	movs	r2, #1
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	e005      	b.n	8001992 <HAL_GPIO_EXTI_Callback+0x8e>
	        } else {
	            blue_held = 0;
 8001986:	4b16      	ldr	r3, [pc, #88]	@ (80019e0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
	            blue_shoot_task.button = 0;
 800198c:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <HAL_GPIO_EXTI_Callback+0xe4>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
	        }
	    }

    // === Photoresistor Hit Detection ===
    if (blue_photoresistor_task.adc_val > blue_photoresistor_task.zero + blue_photoresistor_task.thresh)
 8001992:	4b16      	ldr	r3, [pc, #88]	@ (80019ec <HAL_GPIO_EXTI_Callback+0xe8>)
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <HAL_GPIO_EXTI_Callback+0xe8>)
 8001998:	6959      	ldr	r1, [r3, #20]
 800199a:	4b14      	ldr	r3, [pc, #80]	@ (80019ec <HAL_GPIO_EXTI_Callback+0xe8>)
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	440b      	add	r3, r1
 80019a0:	429a      	cmp	r2, r3
 80019a2:	dd02      	ble.n	80019aa <HAL_GPIO_EXTI_Callback+0xa6>
    {
        blue_photoresistor_task.hit_flag = 1;
 80019a4:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <HAL_GPIO_EXTI_Callback+0xe8>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	609a      	str	r2, [r3, #8]
    }
    if (red_photoresistor_task.adc_val > red_photoresistor_task.zero + red_photoresistor_task.thresh)
 80019aa:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <HAL_GPIO_EXTI_Callback+0xec>)
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <HAL_GPIO_EXTI_Callback+0xec>)
 80019b0:	6959      	ldr	r1, [r3, #20]
 80019b2:	4b0f      	ldr	r3, [pc, #60]	@ (80019f0 <HAL_GPIO_EXTI_Callback+0xec>)
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	440b      	add	r3, r1
 80019b8:	429a      	cmp	r2, r3
 80019ba:	dd02      	ble.n	80019c2 <HAL_GPIO_EXTI_Callback+0xbe>
    {
        red_photoresistor_task.hit_flag = 1;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <HAL_GPIO_EXTI_Callback+0xec>)
 80019be:	2201      	movs	r2, #1
 80019c0:	609a      	str	r2, [r3, #8]
    }
}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40020400 	.word	0x40020400
 80019d0:	20000548 	.word	0x20000548
 80019d4:	200000c0 	.word	0x200000c0
 80019d8:	2000054c 	.word	0x2000054c
 80019dc:	20000118 	.word	0x20000118
 80019e0:	20000549 	.word	0x20000549
 80019e4:	20000550 	.word	0x20000550
 80019e8:	20000148 	.word	0x20000148
 80019ec:	2000009c 	.word	0x2000009c
 80019f0:	20000078 	.word	0x20000078

080019f4 <calibration>:

void calibration(void){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(red_shoot_task.servo_tim, red_shoot_task.channel, red_shoot_task.shield_val);
 80019f8:	4b6d      	ldr	r3, [pc, #436]	@ (8001bb0 <calibration+0x1bc>)
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d106      	bne.n	8001a0e <calibration+0x1a>
 8001a00:	4b6b      	ldr	r3, [pc, #428]	@ (8001bb0 <calibration+0x1bc>)
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	4b6a      	ldr	r3, [pc, #424]	@ (8001bb0 <calibration+0x1bc>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a0c:	e01e      	b.n	8001a4c <calibration+0x58>
 8001a0e:	4b68      	ldr	r3, [pc, #416]	@ (8001bb0 <calibration+0x1bc>)
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d107      	bne.n	8001a26 <calibration+0x32>
 8001a16:	4b66      	ldr	r3, [pc, #408]	@ (8001bb0 <calibration+0x1bc>)
 8001a18:	6959      	ldr	r1, [r3, #20]
 8001a1a:	4b65      	ldr	r3, [pc, #404]	@ (8001bb0 <calibration+0x1bc>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	460b      	mov	r3, r1
 8001a22:	6393      	str	r3, [r2, #56]	@ 0x38
 8001a24:	e012      	b.n	8001a4c <calibration+0x58>
 8001a26:	4b62      	ldr	r3, [pc, #392]	@ (8001bb0 <calibration+0x1bc>)
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d107      	bne.n	8001a3e <calibration+0x4a>
 8001a2e:	4b60      	ldr	r3, [pc, #384]	@ (8001bb0 <calibration+0x1bc>)
 8001a30:	6959      	ldr	r1, [r3, #20]
 8001a32:	4b5f      	ldr	r3, [pc, #380]	@ (8001bb0 <calibration+0x1bc>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001a3c:	e006      	b.n	8001a4c <calibration+0x58>
 8001a3e:	4b5c      	ldr	r3, [pc, #368]	@ (8001bb0 <calibration+0x1bc>)
 8001a40:	6959      	ldr	r1, [r3, #20]
 8001a42:	4b5b      	ldr	r3, [pc, #364]	@ (8001bb0 <calibration+0x1bc>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(blue_shoot_task.servo_tim, blue_shoot_task.channel, blue_shoot_task.shield_val);
 8001a4c:	4b59      	ldr	r3, [pc, #356]	@ (8001bb4 <calibration+0x1c0>)
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d106      	bne.n	8001a62 <calibration+0x6e>
 8001a54:	4b57      	ldr	r3, [pc, #348]	@ (8001bb4 <calibration+0x1c0>)
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	4b56      	ldr	r3, [pc, #344]	@ (8001bb4 <calibration+0x1c0>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a60:	e01e      	b.n	8001aa0 <calibration+0xac>
 8001a62:	4b54      	ldr	r3, [pc, #336]	@ (8001bb4 <calibration+0x1c0>)
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d107      	bne.n	8001a7a <calibration+0x86>
 8001a6a:	4b52      	ldr	r3, [pc, #328]	@ (8001bb4 <calibration+0x1c0>)
 8001a6c:	6959      	ldr	r1, [r3, #20]
 8001a6e:	4b51      	ldr	r3, [pc, #324]	@ (8001bb4 <calibration+0x1c0>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	460b      	mov	r3, r1
 8001a76:	6393      	str	r3, [r2, #56]	@ 0x38
 8001a78:	e012      	b.n	8001aa0 <calibration+0xac>
 8001a7a:	4b4e      	ldr	r3, [pc, #312]	@ (8001bb4 <calibration+0x1c0>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d107      	bne.n	8001a92 <calibration+0x9e>
 8001a82:	4b4c      	ldr	r3, [pc, #304]	@ (8001bb4 <calibration+0x1c0>)
 8001a84:	6959      	ldr	r1, [r3, #20]
 8001a86:	4b4b      	ldr	r3, [pc, #300]	@ (8001bb4 <calibration+0x1c0>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001a90:	e006      	b.n	8001aa0 <calibration+0xac>
 8001a92:	4b48      	ldr	r3, [pc, #288]	@ (8001bb4 <calibration+0x1c0>)
 8001a94:	6959      	ldr	r1, [r3, #20]
 8001a96:	4b47      	ldr	r3, [pc, #284]	@ (8001bb4 <calibration+0x1c0>)
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	6413      	str	r3, [r2, #64]	@ 0x40
	HAL_Delay(1200);
 8001aa0:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001aa4:	f000 fed6 	bl	8002854 <HAL_Delay>
	red_photoresistor_task.zero = red_photoresistor_task.adc_val;
 8001aa8:	4b43      	ldr	r3, [pc, #268]	@ (8001bb8 <calibration+0x1c4>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4a42      	ldr	r2, [pc, #264]	@ (8001bb8 <calibration+0x1c4>)
 8001aae:	6153      	str	r3, [r2, #20]
	blue_photoresistor_task.zero = blue_photoresistor_task.adc_val;
 8001ab0:	4b42      	ldr	r3, [pc, #264]	@ (8001bbc <calibration+0x1c8>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4a41      	ldr	r2, [pc, #260]	@ (8001bbc <calibration+0x1c8>)
 8001ab6:	6153      	str	r3, [r2, #20]

	// dc motors
	set_duty(&mred, 60);
 8001ab8:	213c      	movs	r1, #60	@ 0x3c
 8001aba:	4841      	ldr	r0, [pc, #260]	@ (8001bc0 <calibration+0x1cc>)
 8001abc:	f000 f88e 	bl	8001bdc <set_duty>
	set_duty(&mblue, -60);
 8001ac0:	f06f 013b 	mvn.w	r1, #59	@ 0x3b
 8001ac4:	483f      	ldr	r0, [pc, #252]	@ (8001bc4 <calibration+0x1d0>)
 8001ac6:	f000 f889 	bl	8001bdc <set_duty>

	HAL_Delay(1200);
 8001aca:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001ace:	f000 fec1 	bl	8002854 <HAL_Delay>

	setup_encoder(&red_encoder);
 8001ad2:	483d      	ldr	r0, [pc, #244]	@ (8001bc8 <calibration+0x1d4>)
 8001ad4:	f7fe ff0c 	bl	80008f0 <setup_encoder>
	setup_encoder(&blue_encoder);
 8001ad8:	483c      	ldr	r0, [pc, #240]	@ (8001bcc <calibration+0x1d8>)
 8001ada:	f7fe ff09 	bl	80008f0 <setup_encoder>

	while(1){
		read_encoder(&red_encoder);
 8001ade:	483a      	ldr	r0, [pc, #232]	@ (8001bc8 <calibration+0x1d4>)
 8001ae0:	f7fe ff1c 	bl	800091c <read_encoder>
		read_encoder(&blue_encoder);
 8001ae4:	4839      	ldr	r0, [pc, #228]	@ (8001bcc <calibration+0x1d8>)
 8001ae6:	f7fe ff19 	bl	800091c <read_encoder>
		go_to(&mred, 1, -red_encoder.range/2, -red_encoder.ticks);
 8001aea:	4b37      	ldr	r3, [pc, #220]	@ (8001bc8 <calibration+0x1d4>)
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	425b      	negs	r3, r3
 8001af0:	0fda      	lsrs	r2, r3, #31
 8001af2:	4413      	add	r3, r2
 8001af4:	105b      	asrs	r3, r3, #1
 8001af6:	461a      	mov	r2, r3
 8001af8:	4b33      	ldr	r3, [pc, #204]	@ (8001bc8 <calibration+0x1d4>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	425b      	negs	r3, r3
 8001afe:	2101      	movs	r1, #1
 8001b00:	482f      	ldr	r0, [pc, #188]	@ (8001bc0 <calibration+0x1cc>)
 8001b02:	f000 f97b 	bl	8001dfc <go_to>
		go_to(&mblue, 1, blue_encoder.range/2, blue_encoder.ticks);
 8001b06:	4b31      	ldr	r3, [pc, #196]	@ (8001bcc <calibration+0x1d8>)
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	0fda      	lsrs	r2, r3, #31
 8001b0c:	4413      	add	r3, r2
 8001b0e:	105b      	asrs	r3, r3, #1
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b2e      	ldr	r3, [pc, #184]	@ (8001bcc <calibration+0x1d8>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2101      	movs	r1, #1
 8001b18:	482a      	ldr	r0, [pc, #168]	@ (8001bc4 <calibration+0x1d0>)
 8001b1a:	f000 f96f 	bl	8001dfc <go_to>
		read_encoder(&red_encoder);
 8001b1e:	482a      	ldr	r0, [pc, #168]	@ (8001bc8 <calibration+0x1d4>)
 8001b20:	f7fe fefc 	bl	800091c <read_encoder>
		read_encoder(&blue_encoder);
 8001b24:	4829      	ldr	r0, [pc, #164]	@ (8001bcc <calibration+0x1d8>)
 8001b26:	f7fe fef9 	bl	800091c <read_encoder>
		HAL_Delay(1);
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f000 fe92 	bl	8002854 <HAL_Delay>

		if (abs(red_encoder.ticks - red_encoder.range/2) < 10 && abs(blue_encoder.ticks - blue_encoder.range/2) < 10){
 8001b30:	4b25      	ldr	r3, [pc, #148]	@ (8001bc8 <calibration+0x1d4>)
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	4b24      	ldr	r3, [pc, #144]	@ (8001bc8 <calibration+0x1d4>)
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	0fd9      	lsrs	r1, r3, #31
 8001b3a:	440b      	add	r3, r1
 8001b3c:	105b      	asrs	r3, r3, #1
 8001b3e:	425b      	negs	r3, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	f113 0f09 	cmn.w	r3, #9
 8001b46:	dbca      	blt.n	8001ade <calibration+0xea>
 8001b48:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc8 <calibration+0x1d4>)
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc8 <calibration+0x1d4>)
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	0fd9      	lsrs	r1, r3, #31
 8001b52:	440b      	add	r3, r1
 8001b54:	105b      	asrs	r3, r3, #1
 8001b56:	425b      	negs	r3, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	2b09      	cmp	r3, #9
 8001b5c:	dcbf      	bgt.n	8001ade <calibration+0xea>
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bcc <calibration+0x1d8>)
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <calibration+0x1d8>)
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	0fd9      	lsrs	r1, r3, #31
 8001b68:	440b      	add	r3, r1
 8001b6a:	105b      	asrs	r3, r3, #1
 8001b6c:	425b      	negs	r3, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	f113 0f09 	cmn.w	r3, #9
 8001b74:	dbb3      	blt.n	8001ade <calibration+0xea>
 8001b76:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <calibration+0x1d8>)
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <calibration+0x1d8>)
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	0fd9      	lsrs	r1, r3, #31
 8001b80:	440b      	add	r3, r1
 8001b82:	105b      	asrs	r3, r3, #1
 8001b84:	425b      	negs	r3, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	2b09      	cmp	r3, #9
 8001b8a:	dd00      	ble.n	8001b8e <calibration+0x19a>
		read_encoder(&red_encoder);
 8001b8c:	e7a7      	b.n	8001ade <calibration+0xea>
			break;
 8001b8e:	bf00      	nop
		}
	}

	set_duty(&mred, 0);
 8001b90:	2100      	movs	r1, #0
 8001b92:	480b      	ldr	r0, [pc, #44]	@ (8001bc0 <calibration+0x1cc>)
 8001b94:	f000 f822 	bl	8001bdc <set_duty>
	set_duty(&mblue, 0);
 8001b98:	2100      	movs	r1, #0
 8001b9a:	480a      	ldr	r0, [pc, #40]	@ (8001bc4 <calibration+0x1d0>)
 8001b9c:	f000 f81e 	bl	8001bdc <set_duty>
	setup_encoder(&red_encoder);
 8001ba0:	4809      	ldr	r0, [pc, #36]	@ (8001bc8 <calibration+0x1d4>)
 8001ba2:	f7fe fea5 	bl	80008f0 <setup_encoder>
	setup_encoder(&blue_encoder);
 8001ba6:	4809      	ldr	r0, [pc, #36]	@ (8001bcc <calibration+0x1d8>)
 8001ba8:	f7fe fea2 	bl	80008f0 <setup_encoder>


}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000118 	.word	0x20000118
 8001bb4:	20000148 	.word	0x20000148
 8001bb8:	20000078 	.word	0x20000078
 8001bbc:	2000009c 	.word	0x2000009c
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	2000000c 	.word	0x2000000c
 8001bc8:	20000018 	.word	0x20000018
 8001bcc:	20000030 	.word	0x20000030

08001bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <Error_Handler+0x8>

08001bdc <set_duty>:


#define PWM_MAX 4800

void set_duty(motor_t* p_mot, int32_t duty)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
    duty = duty*PWM_MAX/100;
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	603b      	str	r3, [r7, #0]
	if(duty>=0)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	db46      	blt.n	8001c86 <set_duty+0xaa>
	{
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, duty);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d105      	bne.n	8001c0c <set_duty+0x30>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c0a:	e018      	b.n	8001c3e <set_duty+0x62>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d105      	bne.n	8001c20 <set_duty+0x44>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c1e:	e00e      	b.n	8001c3e <set_duty+0x62>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d105      	bne.n	8001c34 <set_duty+0x58>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001c32:	e004      	b.n	8001c3e <set_duty+0x62>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, 0);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d105      	bne.n	8001c52 <set_duty+0x76>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	635a      	str	r2, [r3, #52]	@ 0x34
	{
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, 0);
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
	}

}
 8001c50:	e076      	b.n	8001d40 <set_duty+0x164>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, 0);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d105      	bne.n	8001c66 <set_duty+0x8a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	2300      	movs	r3, #0
 8001c62:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c64:	e06c      	b.n	8001d40 <set_duty+0x164>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d105      	bne.n	8001c7a <set_duty+0x9e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2300      	movs	r3, #0
 8001c76:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001c78:	e062      	b.n	8001d40 <set_duty+0x164>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2300      	movs	r3, #0
 8001c82:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001c84:	e05c      	b.n	8001d40 <set_duty+0x164>
	else if(duty<0)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	da59      	bge.n	8001d40 <set_duty+0x164>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, 0);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d105      	bne.n	8001ca0 <set_duty+0xc4>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c9e:	e018      	b.n	8001cd2 <set_duty+0xf6>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d105      	bne.n	8001cb4 <set_duty+0xd8>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	6393      	str	r3, [r2, #56]	@ 0x38
 8001cb2:	e00e      	b.n	8001cd2 <set_duty+0xf6>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d105      	bne.n	8001cc8 <set_duty+0xec>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001cc6:	e004      	b.n	8001cd2 <set_duty+0xf6>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d109      	bne.n	8001cee <set_duty+0x112>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001ce0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001cec:	e028      	b.n	8001d40 <set_duty+0x164>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d10a      	bne.n	8001d0c <set_duty+0x130>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001cfc:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	460b      	mov	r3, r1
 8001d08:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001d0a:	e019      	b.n	8001d40 <set_duty+0x164>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d10a      	bne.n	8001d2a <set_duty+0x14e>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001d1a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	460b      	mov	r3, r1
 8001d26:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001d28:	e00a      	b.n	8001d40 <set_duty+0x164>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001d30:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001d3e:	e7ff      	b.n	8001d40 <set_duty+0x164>
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <enable>:
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, 0);

}

void enable(motor_t* p_mot)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, PWM_MAX);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d106      	bne.n	8001d6a <enable+0x1e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001d66:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d68:	e01b      	b.n	8001da2 <enable+0x56>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d106      	bne.n	8001d80 <enable+0x34>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001d7c:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d7e:	e010      	b.n	8001da2 <enable+0x56>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d106      	bne.n	8001d96 <enable+0x4a>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001d92:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001d94:	e005      	b.n	8001da2 <enable+0x56>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001da0:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d106      	bne.n	8001db8 <enable+0x6c>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001db4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001db6:	e01b      	b.n	8001df0 <enable+0xa4>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d106      	bne.n	8001dce <enable+0x82>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001dca:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001dcc:	e010      	b.n	8001df0 <enable+0xa4>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d106      	bne.n	8001de4 <enable+0x98>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001de0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001de2:	e005      	b.n	8001df0 <enable+0xa4>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001dee:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <go_to>:

void go_to(motor_t *p_mot, int k_p, int where, int from){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]

	int error = where-from;
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	617b      	str	r3, [r7, #20]

	if (error >100){
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b64      	cmp	r3, #100	@ 0x64
 8001e16:	dd01      	ble.n	8001e1c <go_to+0x20>
		error = 99;
 8001e18:	2363      	movs	r3, #99	@ 0x63
 8001e1a:	617b      	str	r3, [r7, #20]
	}
	if (error < -100){
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001e22:	da02      	bge.n	8001e2a <go_to+0x2e>
		error = -99;
 8001e24:	f06f 0362 	mvn.w	r3, #98	@ 0x62
 8001e28:	617b      	str	r3, [r7, #20]
	}

	set_duty(p_mot, k_p*error);
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	fb02 f303 	mul.w	r3, r2, r3
 8001e32:	4619      	mov	r1, r3
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f7ff fed1 	bl	8001bdc <set_duty>



}
 8001e3a:	bf00      	nop
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <photoresistor_task_run>:

// game plan is to create two tasks, one for red and one for blue

// A function to run the appropriate state of the task
void photoresistor_task_run(PhotoresistorTask *photoresistor_task)
{    // Check for a valid state
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
    if (photoresistor_task->state >= 0 && photoresistor_task->state < photoresistor_task->num_states)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	db0e      	blt.n	8001e70 <photoresistor_task_run+0x2e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	da08      	bge.n	8001e70 <photoresistor_task_run+0x2e>
    {
        // Index the list of state functions and then call the appropriate
        // method while passing in (this) task_1 object

    	photoresistor_task->state_list[photoresistor_task->state](photoresistor_task);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3206      	adds	r2, #6
 8001e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	4798      	blx	r3
    else
    {
        while(1){}
    }

}
 8001e6e:	e000      	b.n	8001e72 <photoresistor_task_run+0x30>
        while(1){}
 8001e70:	e7fe      	b.n	8001e70 <photoresistor_task_run+0x2e>
}
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <photoresistor_task_state_0_init>:


// A function to initialize the task
// init button, laser and photoresistor
void photoresistor_task_state_0_init(PhotoresistorTask *photoresistor_task)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	photoresistor_task->state = 1;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <photoresistor_task_state_1_look>:
// A function to implement state 1 of the task
// wait for button to be pressed which should be on an interrupt that changes a flag
void photoresistor_task_state_1_look(PhotoresistorTask *photoresistor_task)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
	if ((photoresistor_task->adc_val - photoresistor_task->zero) > photoresistor_task->thresh){
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	1ad2      	subs	r2, r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	dd05      	ble.n	8001eb8 <photoresistor_task_state_1_look+0x26>
		photoresistor_task->hit_flag = 1;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	609a      	str	r2, [r3, #8]
		photoresistor_task->state = 2;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	601a      	str	r2, [r3, #0]
	}

}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <photoresistor_task_state_2_hit>:
// A function to implement state 2 which is for when the game is being played
// This keeps track of score, prints score messages
void photoresistor_task_state_2_hit(PhotoresistorTask *photoresistor_task)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	if (photoresistor_task->hit_flag == 0){ // game_task will change when they have recorded the score
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d102      	bne.n	8001eda <photoresistor_task_state_2_hit+0x16>
		photoresistor_task->state = 1;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
	}
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <shoot_task_run>:

// game plan is to create two tasks, one for red and one for blue

// A function to run the appropriate state of the task
void shoot_task_run(ShootTask *shoot_task)
{    // Check for a valid state
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
    if (shoot_task->state >= 0 && shoot_task->state < shoot_task->num_states)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	db0e      	blt.n	8001f14 <shoot_task_run+0x2e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	da08      	bge.n	8001f14 <shoot_task_run+0x2e>
    {
        // Index the list of state functions and then call the appropriate
        // method while passing in (this) task_1 object

        shoot_task->state_list[shoot_task->state](shoot_task);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3208      	adds	r2, #8
 8001f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	4798      	blx	r3
    else
    {
        while(1){}
    }

}
 8001f12:	e000      	b.n	8001f16 <shoot_task_run+0x30>
        while(1){}
 8001f14:	e7fe      	b.n	8001f14 <shoot_task_run+0x2e>
}
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <shoot_task_state_0_init>:
// servo -- 300 at shiel

// A function to initialize the task
// init button, laser and photoresistor
void shoot_task_state_0_init(ShootTask *shoot_task)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	shoot_task->state = 1;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, shoot_task->laser_gpio, GPIO_PIN_SET);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2201      	movs	r2, #1
 8001f32:	4619      	mov	r1, r3
 8001f34:	4818      	ldr	r0, [pc, #96]	@ (8001f98 <shoot_task_state_0_init+0x7c>)
 8001f36:	f001 fed5 	bl	8003ce4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <shoot_task_state_0_init+0x34>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001f4e:	e01e      	b.n	8001f8e <shoot_task_state_0_init+0x72>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d107      	bne.n	8001f68 <shoot_task_state_0_init+0x4c>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6999      	ldr	r1, [r3, #24]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	460b      	mov	r3, r1
 8001f64:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001f66:	e012      	b.n	8001f8e <shoot_task_state_0_init+0x72>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d107      	bne.n	8001f80 <shoot_task_state_0_init+0x64>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6999      	ldr	r1, [r3, #24]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001f7e:	e006      	b.n	8001f8e <shoot_task_state_0_init+0x72>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6999      	ldr	r1, [r3, #24]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40020400 	.word	0x40020400

08001f9c <shoot_task_state_1_wait>:
// A function to implement state 1 of the task
// wait for button to be pressed which should be on an interrupt that changes a flag
void shoot_task_state_1_wait(ShootTask *shoot_task)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, shoot_task->laser_gpio, GPIO_PIN_SET);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2201      	movs	r2, #1
 8001fac:	4619      	mov	r1, r3
 8001fae:	481c      	ldr	r0, [pc, #112]	@ (8002020 <shoot_task_state_1_wait+0x84>)
 8001fb0:	f001 fe98 	bl	8003ce4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d106      	bne.n	8001fca <shoot_task_state_1_wait+0x2e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699a      	ldr	r2, [r3, #24]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fc8:	e01e      	b.n	8002008 <shoot_task_state_1_wait+0x6c>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d107      	bne.n	8001fe2 <shoot_task_state_1_wait+0x46>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6999      	ldr	r1, [r3, #24]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	6393      	str	r3, [r2, #56]	@ 0x38
 8001fe0:	e012      	b.n	8002008 <shoot_task_state_1_wait+0x6c>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d107      	bne.n	8001ffa <shoot_task_state_1_wait+0x5e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6999      	ldr	r1, [r3, #24]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001ff8:	e006      	b.n	8002008 <shoot_task_state_1_wait+0x6c>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6999      	ldr	r1, [r3, #24]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	460b      	mov	r3, r1
 8002006:	6413      	str	r3, [r2, #64]	@ 0x40
	if (shoot_task->button == 1){
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d102      	bne.n	8002016 <shoot_task_state_1_wait+0x7a>
		shoot_task->state = 2;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2202      	movs	r2, #2
 8002014:	601a      	str	r2, [r3, #0]
	}
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40020400 	.word	0x40020400

08002024 <shoot_task_state_2_unshield>:
// A function to implement state 2 which is for when the game is being played
// This keeps track of score, prints score messages
void shoot_task_state_2_unshield(ShootTask *shoot_task)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->shield_val);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d106      	bne.n	8002042 <shoot_task_state_2_unshield+0x1e>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	695a      	ldr	r2, [r3, #20]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002040:	e01e      	b.n	8002080 <shoot_task_state_2_unshield+0x5c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2b04      	cmp	r3, #4
 8002048:	d107      	bne.n	800205a <shoot_task_state_2_unshield+0x36>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6959      	ldr	r1, [r3, #20]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	460b      	mov	r3, r1
 8002056:	6393      	str	r3, [r2, #56]	@ 0x38
 8002058:	e012      	b.n	8002080 <shoot_task_state_2_unshield+0x5c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2b08      	cmp	r3, #8
 8002060:	d107      	bne.n	8002072 <shoot_task_state_2_unshield+0x4e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6959      	ldr	r1, [r3, #20]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	460b      	mov	r3, r1
 800206e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002070:	e006      	b.n	8002080 <shoot_task_state_2_unshield+0x5c>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6959      	ldr	r1, [r3, #20]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	460b      	mov	r3, r1
 800207e:	6413      	str	r3, [r2, #64]	@ 0x40
	if (1){ // add delay using some ticks and tune it
		shoot_task->state = 3;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2203      	movs	r2, #3
 8002084:	601a      	str	r2, [r3, #0]
	}
	if(shoot_task->button == 0){
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d102      	bne.n	8002094 <shoot_task_state_2_unshield+0x70>
		shoot_task->state = 1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]
	}
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <shoot_task_state_3_shoot>:
// A function to implement state 3

void shoot_task_state_3_shoot(ShootTask *shoot_task)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, shoot_task->laser_gpio, GPIO_PIN_RESET);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	2200      	movs	r2, #0
 80020b0:	4619      	mov	r1, r3
 80020b2:	4807      	ldr	r0, [pc, #28]	@ (80020d0 <shoot_task_state_3_shoot+0x30>)
 80020b4:	f001 fe16 	bl	8003ce4 <HAL_GPIO_WritePin>
	if(shoot_task->button == 0){
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d102      	bne.n	80020c6 <shoot_task_state_3_shoot+0x26>
		shoot_task->state = 1;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
	}

}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40020400 	.word	0x40020400

080020d4 <sound_task_state_0_init>:
}


// A function to initialize the task
void sound_task_state_0_init(SoundTask *sound_task)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
    //add init stuff

}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <sound_task_state_1_wait>:

void sound_task_state_1_wait(SoundTask *sound_task)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	if (sound_task->laser_snd == 1){
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d103      	bne.n	8002100 <sound_task_state_1_wait+0x18>
		sound_task->state = 2;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	601a      	str	r2, [r3, #0]
	}
	else if(sound_task->start_snd == 1){
		sound_task->state = 5;
	}

}
 80020fe:	e016      	b.n	800212e <sound_task_state_1_wait+0x46>
	else if(sound_task->hit_snd == 1){
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d103      	bne.n	8002110 <sound_task_state_1_wait+0x28>
		sound_task->state = 3;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2203      	movs	r2, #3
 800210c:	601a      	str	r2, [r3, #0]
}
 800210e:	e00e      	b.n	800212e <sound_task_state_1_wait+0x46>
	else if(sound_task->win_snd == 1){
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d103      	bne.n	8002120 <sound_task_state_1_wait+0x38>
		sound_task->state = 4;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2204      	movs	r2, #4
 800211c:	601a      	str	r2, [r3, #0]
}
 800211e:	e006      	b.n	800212e <sound_task_state_1_wait+0x46>
	else if(sound_task->start_snd == 1){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d102      	bne.n	800212e <sound_task_state_1_wait+0x46>
		sound_task->state = 5;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2205      	movs	r2, #5
 800212c:	601a      	str	r2, [r3, #0]
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <sound_task_state_2_laser>:
void sound_task_state_2_laser(SoundTask *sound_task)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
    // add sound with associated time (nonblocking, like HAL_Get_Ticks or something like that)
	// if sound done then
	// laser_snd_flg = 0;
	// sound_task.state = 1;

}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <sound_task_state_3_hit>:
void sound_task_state_3_hit(SoundTask *sound_task)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]


}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <sound_task_state_4_win>:
void sound_task_state_4_win(SoundTask *sound_task)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]


}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <sound_task_state_5_start>:

void sound_task_state_5_start(SoundTask *sound_task)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]


}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <HAL_MspInit+0x4c>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219a:	4a0f      	ldr	r2, [pc, #60]	@ (80021d8 <HAL_MspInit+0x4c>)
 800219c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021a2:	4b0d      	ldr	r3, [pc, #52]	@ (80021d8 <HAL_MspInit+0x4c>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	4b09      	ldr	r3, [pc, #36]	@ (80021d8 <HAL_MspInit+0x4c>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	4a08      	ldr	r2, [pc, #32]	@ (80021d8 <HAL_MspInit+0x4c>)
 80021b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021be:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_MspInit+0x4c>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800

080021dc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	@ 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a2f      	ldr	r2, [pc, #188]	@ (80022b8 <HAL_ADC_MspInit+0xdc>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d158      	bne.n	80022b0 <HAL_ADC_MspInit+0xd4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	4b2e      	ldr	r3, [pc, #184]	@ (80022bc <HAL_ADC_MspInit+0xe0>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	4a2d      	ldr	r2, [pc, #180]	@ (80022bc <HAL_ADC_MspInit+0xe0>)
 8002208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800220c:	6453      	str	r3, [r2, #68]	@ 0x44
 800220e:	4b2b      	ldr	r3, [pc, #172]	@ (80022bc <HAL_ADC_MspInit+0xe0>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b27      	ldr	r3, [pc, #156]	@ (80022bc <HAL_ADC_MspInit+0xe0>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	4a26      	ldr	r2, [pc, #152]	@ (80022bc <HAL_ADC_MspInit+0xe0>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6313      	str	r3, [r2, #48]	@ 0x30
 800222a:	4b24      	ldr	r3, [pc, #144]	@ (80022bc <HAL_ADC_MspInit+0xe0>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002236:	23f0      	movs	r3, #240	@ 0xf0
 8002238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800223a:	2303      	movs	r3, #3
 800223c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4619      	mov	r1, r3
 8002248:	481d      	ldr	r0, [pc, #116]	@ (80022c0 <HAL_ADC_MspInit+0xe4>)
 800224a:	f001 fbaf 	bl	80039ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800224e:	4b1d      	ldr	r3, [pc, #116]	@ (80022c4 <HAL_ADC_MspInit+0xe8>)
 8002250:	4a1d      	ldr	r2, [pc, #116]	@ (80022c8 <HAL_ADC_MspInit+0xec>)
 8002252:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002254:	4b1b      	ldr	r3, [pc, #108]	@ (80022c4 <HAL_ADC_MspInit+0xe8>)
 8002256:	2200      	movs	r2, #0
 8002258:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800225a:	4b1a      	ldr	r3, [pc, #104]	@ (80022c4 <HAL_ADC_MspInit+0xe8>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002260:	4b18      	ldr	r3, [pc, #96]	@ (80022c4 <HAL_ADC_MspInit+0xe8>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002266:	4b17      	ldr	r3, [pc, #92]	@ (80022c4 <HAL_ADC_MspInit+0xe8>)
 8002268:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800226c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800226e:	4b15      	ldr	r3, [pc, #84]	@ (80022c4 <HAL_ADC_MspInit+0xe8>)
 8002270:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002274:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002276:	4b13      	ldr	r3, [pc, #76]	@ (80022c4 <HAL_ADC_MspInit+0xe8>)
 8002278:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800227c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800227e:	4b11      	ldr	r3, [pc, #68]	@ (80022c4 <HAL_ADC_MspInit+0xe8>)
 8002280:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002284:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002286:	4b0f      	ldr	r3, [pc, #60]	@ (80022c4 <HAL_ADC_MspInit+0xe8>)
 8002288:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800228c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800228e:	4b0d      	ldr	r3, [pc, #52]	@ (80022c4 <HAL_ADC_MspInit+0xe8>)
 8002290:	2200      	movs	r2, #0
 8002292:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002294:	480b      	ldr	r0, [pc, #44]	@ (80022c4 <HAL_ADC_MspInit+0xe8>)
 8002296:	f001 f819 	bl	80032cc <HAL_DMA_Init>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80022a0:	f7ff fc96 	bl	8001bd0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a07      	ldr	r2, [pc, #28]	@ (80022c4 <HAL_ADC_MspInit+0xe8>)
 80022a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80022aa:	4a06      	ldr	r2, [pc, #24]	@ (80022c4 <HAL_ADC_MspInit+0xe8>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80022b0:	bf00      	nop
 80022b2:	3728      	adds	r7, #40	@ 0x28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40012000 	.word	0x40012000
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40020000 	.word	0x40020000
 80022c4:	2000032c 	.word	0x2000032c
 80022c8:	40026410 	.word	0x40026410

080022cc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	@ 0x28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a19      	ldr	r2, [pc, #100]	@ (8002350 <HAL_I2C_MspInit+0x84>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d12c      	bne.n	8002348 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	4b18      	ldr	r3, [pc, #96]	@ (8002354 <HAL_I2C_MspInit+0x88>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	4a17      	ldr	r2, [pc, #92]	@ (8002354 <HAL_I2C_MspInit+0x88>)
 80022f8:	f043 0302 	orr.w	r3, r3, #2
 80022fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fe:	4b15      	ldr	r3, [pc, #84]	@ (8002354 <HAL_I2C_MspInit+0x88>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800230a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800230e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002310:	2312      	movs	r3, #18
 8002312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002318:	2303      	movs	r3, #3
 800231a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800231c:	2304      	movs	r3, #4
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	4619      	mov	r1, r3
 8002326:	480c      	ldr	r0, [pc, #48]	@ (8002358 <HAL_I2C_MspInit+0x8c>)
 8002328:	f001 fb40 	bl	80039ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <HAL_I2C_MspInit+0x88>)
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	4a07      	ldr	r2, [pc, #28]	@ (8002354 <HAL_I2C_MspInit+0x88>)
 8002336:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800233a:	6413      	str	r3, [r2, #64]	@ 0x40
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <HAL_I2C_MspInit+0x88>)
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002348:	bf00      	nop
 800234a:	3728      	adds	r7, #40	@ 0x28
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40005400 	.word	0x40005400
 8002354:	40023800 	.word	0x40023800
 8002358:	40020400 	.word	0x40020400

0800235c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a1f      	ldr	r2, [pc, #124]	@ (80023e8 <HAL_TIM_PWM_MspInit+0x8c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d10e      	bne.n	800238c <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	4b1e      	ldr	r3, [pc, #120]	@ (80023ec <HAL_TIM_PWM_MspInit+0x90>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002376:	4a1d      	ldr	r2, [pc, #116]	@ (80023ec <HAL_TIM_PWM_MspInit+0x90>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6453      	str	r3, [r2, #68]	@ 0x44
 800237e:	4b1b      	ldr	r3, [pc, #108]	@ (80023ec <HAL_TIM_PWM_MspInit+0x90>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800238a:	e026      	b.n	80023da <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002394:	d10e      	bne.n	80023b4 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	4b14      	ldr	r3, [pc, #80]	@ (80023ec <HAL_TIM_PWM_MspInit+0x90>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239e:	4a13      	ldr	r2, [pc, #76]	@ (80023ec <HAL_TIM_PWM_MspInit+0x90>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023a6:	4b11      	ldr	r3, [pc, #68]	@ (80023ec <HAL_TIM_PWM_MspInit+0x90>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
}
 80023b2:	e012      	b.n	80023da <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0d      	ldr	r2, [pc, #52]	@ (80023f0 <HAL_TIM_PWM_MspInit+0x94>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d10d      	bne.n	80023da <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b0a      	ldr	r3, [pc, #40]	@ (80023ec <HAL_TIM_PWM_MspInit+0x90>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	4a09      	ldr	r2, [pc, #36]	@ (80023ec <HAL_TIM_PWM_MspInit+0x90>)
 80023c8:	f043 0304 	orr.w	r3, r3, #4
 80023cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ce:	4b07      	ldr	r3, [pc, #28]	@ (80023ec <HAL_TIM_PWM_MspInit+0x90>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
}
 80023da:	bf00      	nop
 80023dc:	371c      	adds	r7, #28
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40010000 	.word	0x40010000
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40000800 	.word	0x40000800

080023f4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08c      	sub	sp, #48	@ 0x30
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 031c 	add.w	r3, r7, #28
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a32      	ldr	r2, [pc, #200]	@ (80024dc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d12c      	bne.n	8002470 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	4b31      	ldr	r3, [pc, #196]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0xec>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	4a30      	ldr	r2, [pc, #192]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002420:	f043 0302 	orr.w	r3, r3, #2
 8002424:	6413      	str	r3, [r2, #64]	@ 0x40
 8002426:	4b2e      	ldr	r3, [pc, #184]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	4b2a      	ldr	r3, [pc, #168]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	4a29      	ldr	r2, [pc, #164]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0xec>)
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	6313      	str	r3, [r2, #48]	@ 0x30
 8002442:	4b27      	ldr	r3, [pc, #156]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800244e:	2330      	movs	r3, #48	@ 0x30
 8002450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002452:	2302      	movs	r3, #2
 8002454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245a:	2300      	movs	r3, #0
 800245c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800245e:	2302      	movs	r3, #2
 8002460:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002462:	f107 031c 	add.w	r3, r7, #28
 8002466:	4619      	mov	r1, r3
 8002468:	481e      	ldr	r0, [pc, #120]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800246a:	f001 fa9f 	bl	80039ac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 800246e:	e030      	b.n	80024d2 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1c      	ldr	r2, [pc, #112]	@ (80024e8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d12b      	bne.n	80024d2 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	4b18      	ldr	r3, [pc, #96]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	4a17      	ldr	r2, [pc, #92]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002484:	f043 0308 	orr.w	r3, r3, #8
 8002488:	6413      	str	r3, [r2, #64]	@ 0x40
 800248a:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0xec>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b11      	ldr	r3, [pc, #68]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0xec>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	4a10      	ldr	r2, [pc, #64]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0xec>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024a6:	4b0e      	ldr	r3, [pc, #56]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0xec>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024b2:	2303      	movs	r3, #3
 80024b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b6:	2302      	movs	r3, #2
 80024b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024be:	2300      	movs	r3, #0
 80024c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80024c2:	2302      	movs	r3, #2
 80024c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c6:	f107 031c 	add.w	r3, r7, #28
 80024ca:	4619      	mov	r1, r3
 80024cc:	4807      	ldr	r0, [pc, #28]	@ (80024ec <HAL_TIM_Encoder_MspInit+0xf8>)
 80024ce:	f001 fa6d 	bl	80039ac <HAL_GPIO_Init>
}
 80024d2:	bf00      	nop
 80024d4:	3730      	adds	r7, #48	@ 0x30
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40000400 	.word	0x40000400
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40020400 	.word	0x40020400
 80024e8:	40000c00 	.word	0x40000c00
 80024ec:	40020000 	.word	0x40020000

080024f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	@ 0x28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a37      	ldr	r2, [pc, #220]	@ (80025ec <HAL_TIM_MspPostInit+0xfc>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d11f      	bne.n	8002552 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	4b36      	ldr	r3, [pc, #216]	@ (80025f0 <HAL_TIM_MspPostInit+0x100>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	4a35      	ldr	r2, [pc, #212]	@ (80025f0 <HAL_TIM_MspPostInit+0x100>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6313      	str	r3, [r2, #48]	@ 0x30
 8002522:	4b33      	ldr	r3, [pc, #204]	@ (80025f0 <HAL_TIM_MspPostInit+0x100>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800252e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253c:	2300      	movs	r3, #0
 800253e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002540:	2301      	movs	r3, #1
 8002542:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	4619      	mov	r1, r3
 800254a:	482a      	ldr	r0, [pc, #168]	@ (80025f4 <HAL_TIM_MspPostInit+0x104>)
 800254c:	f001 fa2e 	bl	80039ac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002550:	e047      	b.n	80025e2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800255a:	d11f      	bne.n	800259c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	4b23      	ldr	r3, [pc, #140]	@ (80025f0 <HAL_TIM_MspPostInit+0x100>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002564:	4a22      	ldr	r2, [pc, #136]	@ (80025f0 <HAL_TIM_MspPostInit+0x100>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6313      	str	r3, [r2, #48]	@ 0x30
 800256c:	4b20      	ldr	r3, [pc, #128]	@ (80025f0 <HAL_TIM_MspPostInit+0x100>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002578:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800257c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800258a:	2301      	movs	r3, #1
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	4619      	mov	r1, r3
 8002594:	4817      	ldr	r0, [pc, #92]	@ (80025f4 <HAL_TIM_MspPostInit+0x104>)
 8002596:	f001 fa09 	bl	80039ac <HAL_GPIO_Init>
}
 800259a:	e022      	b.n	80025e2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a15      	ldr	r2, [pc, #84]	@ (80025f8 <HAL_TIM_MspPostInit+0x108>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d11d      	bne.n	80025e2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <HAL_TIM_MspPostInit+0x100>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	4a10      	ldr	r2, [pc, #64]	@ (80025f0 <HAL_TIM_MspPostInit+0x100>)
 80025b0:	f043 0302 	orr.w	r3, r3, #2
 80025b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b6:	4b0e      	ldr	r3, [pc, #56]	@ (80025f0 <HAL_TIM_MspPostInit+0x100>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025c2:	23c0      	movs	r3, #192	@ 0xc0
 80025c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ce:	2300      	movs	r3, #0
 80025d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025d2:	2302      	movs	r3, #2
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d6:	f107 0314 	add.w	r3, r7, #20
 80025da:	4619      	mov	r1, r3
 80025dc:	4807      	ldr	r0, [pc, #28]	@ (80025fc <HAL_TIM_MspPostInit+0x10c>)
 80025de:	f001 f9e5 	bl	80039ac <HAL_GPIO_Init>
}
 80025e2:	bf00      	nop
 80025e4:	3728      	adds	r7, #40	@ 0x28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40010000 	.word	0x40010000
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40020000 	.word	0x40020000
 80025f8:	40000800 	.word	0x40000800
 80025fc:	40020400 	.word	0x40020400

08002600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002604:	bf00      	nop
 8002606:	e7fd      	b.n	8002604 <NMI_Handler+0x4>

08002608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800260c:	bf00      	nop
 800260e:	e7fd      	b.n	800260c <HardFault_Handler+0x4>

08002610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002614:	bf00      	nop
 8002616:	e7fd      	b.n	8002614 <MemManage_Handler+0x4>

08002618 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800261c:	bf00      	nop
 800261e:	e7fd      	b.n	800261c <BusFault_Handler+0x4>

08002620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <UsageFault_Handler+0x4>

08002628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002656:	f000 f8dd 	bl	8002814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}

0800265e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002662:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002666:	f001 fb57 	bl	8003d18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800266a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800266e:	f001 fb53 	bl	8003d18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800267c:	4802      	ldr	r0, [pc, #8]	@ (8002688 <DMA2_Stream0_IRQHandler+0x10>)
 800267e:	f000 ff2b 	bl	80034d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	2000032c 	.word	0x2000032c

0800268c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002694:	4a14      	ldr	r2, [pc, #80]	@ (80026e8 <_sbrk+0x5c>)
 8002696:	4b15      	ldr	r3, [pc, #84]	@ (80026ec <_sbrk+0x60>)
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026a0:	4b13      	ldr	r3, [pc, #76]	@ (80026f0 <_sbrk+0x64>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d102      	bne.n	80026ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a8:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <_sbrk+0x64>)
 80026aa:	4a12      	ldr	r2, [pc, #72]	@ (80026f4 <_sbrk+0x68>)
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ae:	4b10      	ldr	r3, [pc, #64]	@ (80026f0 <_sbrk+0x64>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d207      	bcs.n	80026cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026bc:	f003 fae6 	bl	8005c8c <__errno>
 80026c0:	4603      	mov	r3, r0
 80026c2:	220c      	movs	r2, #12
 80026c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026ca:	e009      	b.n	80026e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026cc:	4b08      	ldr	r3, [pc, #32]	@ (80026f0 <_sbrk+0x64>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026d2:	4b07      	ldr	r3, [pc, #28]	@ (80026f0 <_sbrk+0x64>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	4a05      	ldr	r2, [pc, #20]	@ (80026f0 <_sbrk+0x64>)
 80026dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026de:	68fb      	ldr	r3, [r7, #12]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20020000 	.word	0x20020000
 80026ec:	00000400 	.word	0x00000400
 80026f0:	2000055c 	.word	0x2000055c
 80026f4:	200006b0 	.word	0x200006b0

080026f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026fc:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <SystemInit+0x20>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002702:	4a05      	ldr	r2, [pc, #20]	@ (8002718 <SystemInit+0x20>)
 8002704:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002708:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800271c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002754 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002720:	f7ff ffea 	bl	80026f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002724:	480c      	ldr	r0, [pc, #48]	@ (8002758 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002726:	490d      	ldr	r1, [pc, #52]	@ (800275c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002728:	4a0d      	ldr	r2, [pc, #52]	@ (8002760 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800272a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800272c:	e002      	b.n	8002734 <LoopCopyDataInit>

0800272e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002732:	3304      	adds	r3, #4

08002734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002738:	d3f9      	bcc.n	800272e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273a:	4a0a      	ldr	r2, [pc, #40]	@ (8002764 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800273c:	4c0a      	ldr	r4, [pc, #40]	@ (8002768 <LoopFillZerobss+0x22>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002740:	e001      	b.n	8002746 <LoopFillZerobss>

08002742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002744:	3204      	adds	r2, #4

08002746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002748:	d3fb      	bcc.n	8002742 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800274a:	f003 faa5 	bl	8005c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800274e:	f7fe fbe1 	bl	8000f14 <main>
  bx  lr    
 8002752:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002754:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800275c:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 8002760:	0800671c 	.word	0x0800671c
  ldr r2, =_sbss
 8002764:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8002768:	200006ac 	.word	0x200006ac

0800276c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800276c:	e7fe      	b.n	800276c <ADC_IRQHandler>
	...

08002770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002774:	4b0e      	ldr	r3, [pc, #56]	@ (80027b0 <HAL_Init+0x40>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0d      	ldr	r2, [pc, #52]	@ (80027b0 <HAL_Init+0x40>)
 800277a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800277e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002780:	4b0b      	ldr	r3, [pc, #44]	@ (80027b0 <HAL_Init+0x40>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0a      	ldr	r2, [pc, #40]	@ (80027b0 <HAL_Init+0x40>)
 8002786:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800278a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800278c:	4b08      	ldr	r3, [pc, #32]	@ (80027b0 <HAL_Init+0x40>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a07      	ldr	r2, [pc, #28]	@ (80027b0 <HAL_Init+0x40>)
 8002792:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002796:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002798:	2003      	movs	r0, #3
 800279a:	f000 fd55 	bl	8003248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800279e:	200f      	movs	r0, #15
 80027a0:	f000 f808 	bl	80027b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027a4:	f7ff fcf2 	bl	800218c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023c00 	.word	0x40023c00

080027b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027bc:	4b12      	ldr	r3, [pc, #72]	@ (8002808 <HAL_InitTick+0x54>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b12      	ldr	r3, [pc, #72]	@ (800280c <HAL_InitTick+0x58>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	4619      	mov	r1, r3
 80027c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 fd6d 	bl	80032b2 <HAL_SYSTICK_Config>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e00e      	b.n	8002800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b0f      	cmp	r3, #15
 80027e6:	d80a      	bhi.n	80027fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e8:	2200      	movs	r2, #0
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027f0:	f000 fd35 	bl	800325e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027f4:	4a06      	ldr	r2, [pc, #24]	@ (8002810 <HAL_InitTick+0x5c>)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e000      	b.n	8002800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000264 	.word	0x20000264
 800280c:	2000026c 	.word	0x2000026c
 8002810:	20000268 	.word	0x20000268

08002814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002818:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <HAL_IncTick+0x20>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <HAL_IncTick+0x24>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4413      	add	r3, r2
 8002824:	4a04      	ldr	r2, [pc, #16]	@ (8002838 <HAL_IncTick+0x24>)
 8002826:	6013      	str	r3, [r2, #0]
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	2000026c 	.word	0x2000026c
 8002838:	20000560 	.word	0x20000560

0800283c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return uwTick;
 8002840:	4b03      	ldr	r3, [pc, #12]	@ (8002850 <HAL_GetTick+0x14>)
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000560 	.word	0x20000560

08002854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800285c:	f7ff ffee 	bl	800283c <HAL_GetTick>
 8002860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800286c:	d005      	beq.n	800287a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800286e:	4b0a      	ldr	r3, [pc, #40]	@ (8002898 <HAL_Delay+0x44>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4413      	add	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800287a:	bf00      	nop
 800287c:	f7ff ffde 	bl	800283c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	429a      	cmp	r2, r3
 800288a:	d8f7      	bhi.n	800287c <HAL_Delay+0x28>
  {
  }
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	2000026c 	.word	0x2000026c

0800289c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e033      	b.n	800291a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d109      	bne.n	80028ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff fc8e 	bl	80021dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d118      	bne.n	800290c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028e2:	f023 0302 	bic.w	r3, r3, #2
 80028e6:	f043 0202 	orr.w	r2, r3, #2
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fa5c 	bl	8002dac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	f023 0303 	bic.w	r3, r3, #3
 8002902:	f043 0201 	orr.w	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	641a      	str	r2, [r3, #64]	@ 0x40
 800290a:	e001      	b.n	8002910 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002918:	7bfb      	ldrb	r3, [r7, #15]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_ADC_Start_DMA+0x22>
 8002942:	2302      	movs	r3, #2
 8002944:	e0d0      	b.n	8002ae8 <HAL_ADC_Start_DMA+0x1c4>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b01      	cmp	r3, #1
 800295a:	d018      	beq.n	800298e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800296c:	4b60      	ldr	r3, [pc, #384]	@ (8002af0 <HAL_ADC_Start_DMA+0x1cc>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a60      	ldr	r2, [pc, #384]	@ (8002af4 <HAL_ADC_Start_DMA+0x1d0>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	0c9a      	lsrs	r2, r3, #18
 8002978:	4613      	mov	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002980:	e002      	b.n	8002988 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	3b01      	subs	r3, #1
 8002986:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f9      	bne.n	8002982 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002998:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800299c:	d107      	bne.n	80029ae <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029ac:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	f040 8088 	bne.w	8002ace <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80029c6:	f023 0301 	bic.w	r3, r3, #1
 80029ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d007      	beq.n	80029f0 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029fc:	d106      	bne.n	8002a0c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a02:	f023 0206 	bic.w	r2, r3, #6
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a0a:	e002      	b.n	8002a12 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a1a:	4b37      	ldr	r3, [pc, #220]	@ (8002af8 <HAL_ADC_Start_DMA+0x1d4>)
 8002a1c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a22:	4a36      	ldr	r2, [pc, #216]	@ (8002afc <HAL_ADC_Start_DMA+0x1d8>)
 8002a24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2a:	4a35      	ldr	r2, [pc, #212]	@ (8002b00 <HAL_ADC_Start_DMA+0x1dc>)
 8002a2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a32:	4a34      	ldr	r2, [pc, #208]	@ (8002b04 <HAL_ADC_Start_DMA+0x1e0>)
 8002a34:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002a3e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002a4e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a5e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	334c      	adds	r3, #76	@ 0x4c
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f000 fcda 	bl	8003428 <HAL_DMA_Start_IT>
 8002a74:	4603      	mov	r3, r0
 8002a76:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10f      	bne.n	8002aa4 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d129      	bne.n	8002ae6 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002aa0:	609a      	str	r2, [r3, #8]
 8002aa2:	e020      	b.n	8002ae6 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a17      	ldr	r2, [pc, #92]	@ (8002b08 <HAL_ADC_Start_DMA+0x1e4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d11b      	bne.n	8002ae6 <HAL_ADC_Start_DMA+0x1c2>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d114      	bne.n	8002ae6 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	e00b      	b.n	8002ae6 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	f043 0210 	orr.w	r2, r3, #16
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ade:	f043 0201 	orr.w	r2, r3, #1
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002ae6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3720      	adds	r7, #32
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000264 	.word	0x20000264
 8002af4:	431bde83 	.word	0x431bde83
 8002af8:	40012300 	.word	0x40012300
 8002afc:	08002fa5 	.word	0x08002fa5
 8002b00:	0800305f 	.word	0x0800305f
 8002b04:	0800307b 	.word	0x0800307b
 8002b08:	40012000 	.word	0x40012000

08002b0c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x1c>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e113      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x244>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b09      	cmp	r3, #9
 8002b72:	d925      	bls.n	8002bc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68d9      	ldr	r1, [r3, #12]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	4613      	mov	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4413      	add	r3, r2
 8002b88:	3b1e      	subs	r3, #30
 8002b8a:	2207      	movs	r2, #7
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43da      	mvns	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	400a      	ands	r2, r1
 8002b98:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68d9      	ldr	r1, [r3, #12]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	4618      	mov	r0, r3
 8002bac:	4603      	mov	r3, r0
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4403      	add	r3, r0
 8002bb2:	3b1e      	subs	r3, #30
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	e022      	b.n	8002c06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6919      	ldr	r1, [r3, #16]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4613      	mov	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4413      	add	r3, r2
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	400a      	ands	r2, r1
 8002be2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6919      	ldr	r1, [r3, #16]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4403      	add	r3, r0
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d824      	bhi.n	8002c58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3b05      	subs	r3, #5
 8002c20:	221f      	movs	r2, #31
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43da      	mvns	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	400a      	ands	r2, r1
 8002c2e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	3b05      	subs	r3, #5
 8002c4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c56:	e04c      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b0c      	cmp	r3, #12
 8002c5e:	d824      	bhi.n	8002caa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	3b23      	subs	r3, #35	@ 0x23
 8002c72:	221f      	movs	r2, #31
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43da      	mvns	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	400a      	ands	r2, r1
 8002c80:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	4618      	mov	r0, r3
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	3b23      	subs	r3, #35	@ 0x23
 8002c9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ca8:	e023      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	3b41      	subs	r3, #65	@ 0x41
 8002cbc:	221f      	movs	r2, #31
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43da      	mvns	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	400a      	ands	r2, r1
 8002cca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	4618      	mov	r0, r3
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3b41      	subs	r3, #65	@ 0x41
 8002ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cf2:	4b29      	ldr	r3, [pc, #164]	@ (8002d98 <HAL_ADC_ConfigChannel+0x250>)
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a28      	ldr	r2, [pc, #160]	@ (8002d9c <HAL_ADC_ConfigChannel+0x254>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d10f      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x1d8>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b12      	cmp	r3, #18
 8002d06:	d10b      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1d      	ldr	r2, [pc, #116]	@ (8002d9c <HAL_ADC_ConfigChannel+0x254>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d12b      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x23a>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002da0 <HAL_ADC_ConfigChannel+0x258>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d003      	beq.n	8002d3c <HAL_ADC_ConfigChannel+0x1f4>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b11      	cmp	r3, #17
 8002d3a:	d122      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a11      	ldr	r2, [pc, #68]	@ (8002da0 <HAL_ADC_ConfigChannel+0x258>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d111      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d5e:	4b11      	ldr	r3, [pc, #68]	@ (8002da4 <HAL_ADC_ConfigChannel+0x25c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a11      	ldr	r2, [pc, #68]	@ (8002da8 <HAL_ADC_ConfigChannel+0x260>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	0c9a      	lsrs	r2, r3, #18
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d74:	e002      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f9      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	40012300 	.word	0x40012300
 8002d9c:	40012000 	.word	0x40012000
 8002da0:	10000012 	.word	0x10000012
 8002da4:	20000264 	.word	0x20000264
 8002da8:	431bde83 	.word	0x431bde83

08002dac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002db4:	4b79      	ldr	r3, [pc, #484]	@ (8002f9c <ADC_Init+0x1f0>)
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002de0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6859      	ldr	r1, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	021a      	lsls	r2, r3, #8
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002e04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6859      	ldr	r1, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6899      	ldr	r1, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3e:	4a58      	ldr	r2, [pc, #352]	@ (8002fa0 <ADC_Init+0x1f4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d022      	beq.n	8002e8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6899      	ldr	r1, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6899      	ldr	r1, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	e00f      	b.n	8002eaa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ea8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0202 	bic.w	r2, r2, #2
 8002eb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6899      	ldr	r1, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	7e1b      	ldrb	r3, [r3, #24]
 8002ec4:	005a      	lsls	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01b      	beq.n	8002f10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ee6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002ef6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6859      	ldr	r1, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	3b01      	subs	r3, #1
 8002f04:	035a      	lsls	r2, r3, #13
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	e007      	b.n	8002f20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f1e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	051a      	lsls	r2, r3, #20
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6899      	ldr	r1, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f62:	025a      	lsls	r2, r3, #9
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6899      	ldr	r1, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	029a      	lsls	r2, r3, #10
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	609a      	str	r2, [r3, #8]
}
 8002f90:	bf00      	nop
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	40012300 	.word	0x40012300
 8002fa0:	0f000001 	.word	0x0f000001

08002fa4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d13c      	bne.n	8003038 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d12b      	bne.n	8003030 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d127      	bne.n	8003030 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d006      	beq.n	8002ffc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d119      	bne.n	8003030 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0220 	bic.w	r2, r2, #32
 800300a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003010:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d105      	bne.n	8003030 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003028:	f043 0201 	orr.w	r2, r3, #1
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f7ff fd6b 	bl	8002b0c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003036:	e00e      	b.n	8003056 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7ff fd75 	bl	8002b34 <HAL_ADC_ErrorCallback>
}
 800304a:	e004      	b.n	8003056 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	4798      	blx	r3
}
 8003056:	bf00      	nop
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7ff fd57 	bl	8002b20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003086:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2240      	movs	r2, #64	@ 0x40
 800308c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003092:	f043 0204 	orr.w	r2, r3, #4
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f7ff fd4a 	bl	8002b34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030a0:	bf00      	nop
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b8:	4b0c      	ldr	r3, [pc, #48]	@ (80030ec <__NVIC_SetPriorityGrouping+0x44>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030c4:	4013      	ands	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030da:	4a04      	ldr	r2, [pc, #16]	@ (80030ec <__NVIC_SetPriorityGrouping+0x44>)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	60d3      	str	r3, [r2, #12]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f4:	4b04      	ldr	r3, [pc, #16]	@ (8003108 <__NVIC_GetPriorityGrouping+0x18>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	0a1b      	lsrs	r3, r3, #8
 80030fa:	f003 0307 	and.w	r3, r3, #7
}
 80030fe:	4618      	mov	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	2b00      	cmp	r3, #0
 800311c:	db0b      	blt.n	8003136 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	f003 021f 	and.w	r2, r3, #31
 8003124:	4907      	ldr	r1, [pc, #28]	@ (8003144 <__NVIC_EnableIRQ+0x38>)
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	2001      	movs	r0, #1
 800312e:	fa00 f202 	lsl.w	r2, r0, r2
 8003132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	e000e100 	.word	0xe000e100

08003148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	6039      	str	r1, [r7, #0]
 8003152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003158:	2b00      	cmp	r3, #0
 800315a:	db0a      	blt.n	8003172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	b2da      	uxtb	r2, r3
 8003160:	490c      	ldr	r1, [pc, #48]	@ (8003194 <__NVIC_SetPriority+0x4c>)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	0112      	lsls	r2, r2, #4
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	440b      	add	r3, r1
 800316c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003170:	e00a      	b.n	8003188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	b2da      	uxtb	r2, r3
 8003176:	4908      	ldr	r1, [pc, #32]	@ (8003198 <__NVIC_SetPriority+0x50>)
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	3b04      	subs	r3, #4
 8003180:	0112      	lsls	r2, r2, #4
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	440b      	add	r3, r1
 8003186:	761a      	strb	r2, [r3, #24]
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000e100 	.word	0xe000e100
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800319c:	b480      	push	{r7}
 800319e:	b089      	sub	sp, #36	@ 0x24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f1c3 0307 	rsb	r3, r3, #7
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	bf28      	it	cs
 80031ba:	2304      	movcs	r3, #4
 80031bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3304      	adds	r3, #4
 80031c2:	2b06      	cmp	r3, #6
 80031c4:	d902      	bls.n	80031cc <NVIC_EncodePriority+0x30>
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3b03      	subs	r3, #3
 80031ca:	e000      	b.n	80031ce <NVIC_EncodePriority+0x32>
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43da      	mvns	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	401a      	ands	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	fa01 f303 	lsl.w	r3, r1, r3
 80031ee:	43d9      	mvns	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f4:	4313      	orrs	r3, r2
         );
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3724      	adds	r7, #36	@ 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3b01      	subs	r3, #1
 8003210:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003214:	d301      	bcc.n	800321a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003216:	2301      	movs	r3, #1
 8003218:	e00f      	b.n	800323a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800321a:	4a0a      	ldr	r2, [pc, #40]	@ (8003244 <SysTick_Config+0x40>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003222:	210f      	movs	r1, #15
 8003224:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003228:	f7ff ff8e 	bl	8003148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800322c:	4b05      	ldr	r3, [pc, #20]	@ (8003244 <SysTick_Config+0x40>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003232:	4b04      	ldr	r3, [pc, #16]	@ (8003244 <SysTick_Config+0x40>)
 8003234:	2207      	movs	r2, #7
 8003236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	e000e010 	.word	0xe000e010

08003248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ff29 	bl	80030a8 <__NVIC_SetPriorityGrouping>
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800325e:	b580      	push	{r7, lr}
 8003260:	b086      	sub	sp, #24
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003270:	f7ff ff3e 	bl	80030f0 <__NVIC_GetPriorityGrouping>
 8003274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	6978      	ldr	r0, [r7, #20]
 800327c:	f7ff ff8e 	bl	800319c <NVIC_EncodePriority>
 8003280:	4602      	mov	r2, r0
 8003282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003286:	4611      	mov	r1, r2
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff5d 	bl	8003148 <__NVIC_SetPriority>
}
 800328e:	bf00      	nop
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	4603      	mov	r3, r0
 800329e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ff31 	bl	800310c <__NVIC_EnableIRQ>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff ffa2 	bl	8003204 <SysTick_Config>
 80032c0:	4603      	mov	r3, r0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032d8:	f7ff fab0 	bl	800283c <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e099      	b.n	800341c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0201 	bic.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003308:	e00f      	b.n	800332a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800330a:	f7ff fa97 	bl	800283c <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b05      	cmp	r3, #5
 8003316:	d908      	bls.n	800332a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2203      	movs	r2, #3
 8003322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e078      	b.n	800341c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1e8      	bne.n	800330a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4b38      	ldr	r3, [pc, #224]	@ (8003424 <HAL_DMA_Init+0x158>)
 8003344:	4013      	ands	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003356:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003362:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800336e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	2b04      	cmp	r3, #4
 8003382:	d107      	bne.n	8003394 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338c:	4313      	orrs	r3, r2
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f023 0307 	bic.w	r3, r3, #7
 80033aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d117      	bne.n	80033ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00e      	beq.n	80033ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fa6f 	bl	80038b4 <DMA_CheckFifoParam>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2240      	movs	r2, #64	@ 0x40
 80033e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80033ea:	2301      	movs	r3, #1
 80033ec:	e016      	b.n	800341c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fa26 	bl	8003848 <DMA_CalcBaseAndBitshift>
 80033fc:	4603      	mov	r3, r0
 80033fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003404:	223f      	movs	r2, #63	@ 0x3f
 8003406:	409a      	lsls	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	f010803f 	.word	0xf010803f

08003428 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_DMA_Start_IT+0x26>
 800344a:	2302      	movs	r3, #2
 800344c:	e040      	b.n	80034d0 <HAL_DMA_Start_IT+0xa8>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d12f      	bne.n	80034c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2202      	movs	r2, #2
 8003466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f9b8 	bl	80037ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003480:	223f      	movs	r2, #63	@ 0x3f
 8003482:	409a      	lsls	r2, r3
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0216 	orr.w	r2, r2, #22
 8003496:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d007      	beq.n	80034b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0208 	orr.w	r2, r2, #8
 80034ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	e005      	b.n	80034ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034ca:	2302      	movs	r3, #2
 80034cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034e4:	4b8e      	ldr	r3, [pc, #568]	@ (8003720 <HAL_DMA_IRQHandler+0x248>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a8e      	ldr	r2, [pc, #568]	@ (8003724 <HAL_DMA_IRQHandler+0x24c>)
 80034ea:	fba2 2303 	umull	r2, r3, r2, r3
 80034ee:	0a9b      	lsrs	r3, r3, #10
 80034f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003502:	2208      	movs	r2, #8
 8003504:	409a      	lsls	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4013      	ands	r3, r2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d01a      	beq.n	8003544 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d013      	beq.n	8003544 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0204 	bic.w	r2, r2, #4
 800352a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003530:	2208      	movs	r2, #8
 8003532:	409a      	lsls	r2, r3
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353c:	f043 0201 	orr.w	r2, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003548:	2201      	movs	r2, #1
 800354a:	409a      	lsls	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d012      	beq.n	800357a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00b      	beq.n	800357a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003566:	2201      	movs	r2, #1
 8003568:	409a      	lsls	r2, r3
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003572:	f043 0202 	orr.w	r2, r3, #2
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357e:	2204      	movs	r2, #4
 8003580:	409a      	lsls	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d012      	beq.n	80035b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00b      	beq.n	80035b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800359c:	2204      	movs	r2, #4
 800359e:	409a      	lsls	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a8:	f043 0204 	orr.w	r2, r3, #4
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b4:	2210      	movs	r2, #16
 80035b6:	409a      	lsls	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d043      	beq.n	8003648 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d03c      	beq.n	8003648 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d2:	2210      	movs	r2, #16
 80035d4:	409a      	lsls	r2, r3
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d018      	beq.n	800361a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d108      	bne.n	8003608 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d024      	beq.n	8003648 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	4798      	blx	r3
 8003606:	e01f      	b.n	8003648 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01b      	beq.n	8003648 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4798      	blx	r3
 8003618:	e016      	b.n	8003648 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d107      	bne.n	8003638 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0208 	bic.w	r2, r2, #8
 8003636:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364c:	2220      	movs	r2, #32
 800364e:	409a      	lsls	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 808f 	beq.w	8003778 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8087 	beq.w	8003778 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366e:	2220      	movs	r2, #32
 8003670:	409a      	lsls	r2, r3
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b05      	cmp	r3, #5
 8003680:	d136      	bne.n	80036f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0216 	bic.w	r2, r2, #22
 8003690:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d103      	bne.n	80036b2 <HAL_DMA_IRQHandler+0x1da>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d007      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0208 	bic.w	r2, r2, #8
 80036c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c6:	223f      	movs	r2, #63	@ 0x3f
 80036c8:	409a      	lsls	r2, r3
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d07e      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
        }
        return;
 80036ee:	e079      	b.n	80037e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01d      	beq.n	800373a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10d      	bne.n	8003728 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003710:	2b00      	cmp	r3, #0
 8003712:	d031      	beq.n	8003778 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
 800371c:	e02c      	b.n	8003778 <HAL_DMA_IRQHandler+0x2a0>
 800371e:	bf00      	nop
 8003720:	20000264 	.word	0x20000264
 8003724:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372c:	2b00      	cmp	r3, #0
 800372e:	d023      	beq.n	8003778 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	4798      	blx	r3
 8003738:	e01e      	b.n	8003778 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10f      	bne.n	8003768 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0210 	bic.w	r2, r2, #16
 8003756:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800377c:	2b00      	cmp	r3, #0
 800377e:	d032      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d022      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2205      	movs	r2, #5
 8003790:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	3301      	adds	r3, #1
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d307      	bcc.n	80037c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f2      	bne.n	80037a4 <HAL_DMA_IRQHandler+0x2cc>
 80037be:	e000      	b.n	80037c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	4798      	blx	r3
 80037e2:	e000      	b.n	80037e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80037e4:	bf00      	nop
    }
  }
}
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003808:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b40      	cmp	r3, #64	@ 0x40
 8003818:	d108      	bne.n	800382c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800382a:	e007      	b.n	800383c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	60da      	str	r2, [r3, #12]
}
 800383c:	bf00      	nop
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	3b10      	subs	r3, #16
 8003858:	4a14      	ldr	r2, [pc, #80]	@ (80038ac <DMA_CalcBaseAndBitshift+0x64>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	091b      	lsrs	r3, r3, #4
 8003860:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003862:	4a13      	ldr	r2, [pc, #76]	@ (80038b0 <DMA_CalcBaseAndBitshift+0x68>)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4413      	add	r3, r2
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2b03      	cmp	r3, #3
 8003874:	d909      	bls.n	800388a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800387e:	f023 0303 	bic.w	r3, r3, #3
 8003882:	1d1a      	adds	r2, r3, #4
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	659a      	str	r2, [r3, #88]	@ 0x58
 8003888:	e007      	b.n	800389a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003892:	f023 0303 	bic.w	r3, r3, #3
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	aaaaaaab 	.word	0xaaaaaaab
 80038b0:	080066d0 	.word	0x080066d0

080038b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d11f      	bne.n	800390e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d856      	bhi.n	8003982 <DMA_CheckFifoParam+0xce>
 80038d4:	a201      	add	r2, pc, #4	@ (adr r2, 80038dc <DMA_CheckFifoParam+0x28>)
 80038d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038da:	bf00      	nop
 80038dc:	080038ed 	.word	0x080038ed
 80038e0:	080038ff 	.word	0x080038ff
 80038e4:	080038ed 	.word	0x080038ed
 80038e8:	08003983 	.word	0x08003983
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d046      	beq.n	8003986 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038fc:	e043      	b.n	8003986 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003902:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003906:	d140      	bne.n	800398a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800390c:	e03d      	b.n	800398a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003916:	d121      	bne.n	800395c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b03      	cmp	r3, #3
 800391c:	d837      	bhi.n	800398e <DMA_CheckFifoParam+0xda>
 800391e:	a201      	add	r2, pc, #4	@ (adr r2, 8003924 <DMA_CheckFifoParam+0x70>)
 8003920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003924:	08003935 	.word	0x08003935
 8003928:	0800393b 	.word	0x0800393b
 800392c:	08003935 	.word	0x08003935
 8003930:	0800394d 	.word	0x0800394d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]
      break;
 8003938:	e030      	b.n	800399c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d025      	beq.n	8003992 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800394a:	e022      	b.n	8003992 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003950:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003954:	d11f      	bne.n	8003996 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800395a:	e01c      	b.n	8003996 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d903      	bls.n	800396a <DMA_CheckFifoParam+0xb6>
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b03      	cmp	r3, #3
 8003966:	d003      	beq.n	8003970 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003968:	e018      	b.n	800399c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
      break;
 800396e:	e015      	b.n	800399c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003974:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00e      	beq.n	800399a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
      break;
 8003980:	e00b      	b.n	800399a <DMA_CheckFifoParam+0xe6>
      break;
 8003982:	bf00      	nop
 8003984:	e00a      	b.n	800399c <DMA_CheckFifoParam+0xe8>
      break;
 8003986:	bf00      	nop
 8003988:	e008      	b.n	800399c <DMA_CheckFifoParam+0xe8>
      break;
 800398a:	bf00      	nop
 800398c:	e006      	b.n	800399c <DMA_CheckFifoParam+0xe8>
      break;
 800398e:	bf00      	nop
 8003990:	e004      	b.n	800399c <DMA_CheckFifoParam+0xe8>
      break;
 8003992:	bf00      	nop
 8003994:	e002      	b.n	800399c <DMA_CheckFifoParam+0xe8>
      break;   
 8003996:	bf00      	nop
 8003998:	e000      	b.n	800399c <DMA_CheckFifoParam+0xe8>
      break;
 800399a:	bf00      	nop
    }
  } 
  
  return status; 
 800399c:	7bfb      	ldrb	r3, [r7, #15]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop

080039ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b089      	sub	sp, #36	@ 0x24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039be:	2300      	movs	r3, #0
 80039c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
 80039c6:	e159      	b.n	8003c7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039c8:	2201      	movs	r2, #1
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4013      	ands	r3, r2
 80039da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	f040 8148 	bne.w	8003c76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d005      	beq.n	80039fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d130      	bne.n	8003a60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	2203      	movs	r2, #3
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4013      	ands	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a34:	2201      	movs	r2, #1
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	091b      	lsrs	r3, r3, #4
 8003a4a:	f003 0201 	and.w	r2, r3, #1
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d017      	beq.n	8003a9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	2203      	movs	r2, #3
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4013      	ands	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d123      	bne.n	8003af0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	08da      	lsrs	r2, r3, #3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3208      	adds	r2, #8
 8003ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	220f      	movs	r2, #15
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	691a      	ldr	r2, [r3, #16]
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	08da      	lsrs	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3208      	adds	r2, #8
 8003aea:	69b9      	ldr	r1, [r7, #24]
 8003aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	2203      	movs	r2, #3
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f003 0203 	and.w	r2, r3, #3
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80a2 	beq.w	8003c76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	4b57      	ldr	r3, [pc, #348]	@ (8003c94 <HAL_GPIO_Init+0x2e8>)
 8003b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3a:	4a56      	ldr	r2, [pc, #344]	@ (8003c94 <HAL_GPIO_Init+0x2e8>)
 8003b3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b40:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b42:	4b54      	ldr	r3, [pc, #336]	@ (8003c94 <HAL_GPIO_Init+0x2e8>)
 8003b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b4e:	4a52      	ldr	r2, [pc, #328]	@ (8003c98 <HAL_GPIO_Init+0x2ec>)
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	089b      	lsrs	r3, r3, #2
 8003b54:	3302      	adds	r3, #2
 8003b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	220f      	movs	r2, #15
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a49      	ldr	r2, [pc, #292]	@ (8003c9c <HAL_GPIO_Init+0x2f0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d019      	beq.n	8003bae <HAL_GPIO_Init+0x202>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a48      	ldr	r2, [pc, #288]	@ (8003ca0 <HAL_GPIO_Init+0x2f4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <HAL_GPIO_Init+0x1fe>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a47      	ldr	r2, [pc, #284]	@ (8003ca4 <HAL_GPIO_Init+0x2f8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00d      	beq.n	8003ba6 <HAL_GPIO_Init+0x1fa>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a46      	ldr	r2, [pc, #280]	@ (8003ca8 <HAL_GPIO_Init+0x2fc>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d007      	beq.n	8003ba2 <HAL_GPIO_Init+0x1f6>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a45      	ldr	r2, [pc, #276]	@ (8003cac <HAL_GPIO_Init+0x300>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d101      	bne.n	8003b9e <HAL_GPIO_Init+0x1f2>
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	e008      	b.n	8003bb0 <HAL_GPIO_Init+0x204>
 8003b9e:	2307      	movs	r3, #7
 8003ba0:	e006      	b.n	8003bb0 <HAL_GPIO_Init+0x204>
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e004      	b.n	8003bb0 <HAL_GPIO_Init+0x204>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e002      	b.n	8003bb0 <HAL_GPIO_Init+0x204>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <HAL_GPIO_Init+0x204>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	69fa      	ldr	r2, [r7, #28]
 8003bb2:	f002 0203 	and.w	r2, r2, #3
 8003bb6:	0092      	lsls	r2, r2, #2
 8003bb8:	4093      	lsls	r3, r2
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bc0:	4935      	ldr	r1, [pc, #212]	@ (8003c98 <HAL_GPIO_Init+0x2ec>)
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	089b      	lsrs	r3, r3, #2
 8003bc6:	3302      	adds	r3, #2
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bce:	4b38      	ldr	r3, [pc, #224]	@ (8003cb0 <HAL_GPIO_Init+0x304>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bf2:	4a2f      	ldr	r2, [pc, #188]	@ (8003cb0 <HAL_GPIO_Init+0x304>)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb0 <HAL_GPIO_Init+0x304>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	43db      	mvns	r3, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4013      	ands	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c1c:	4a24      	ldr	r2, [pc, #144]	@ (8003cb0 <HAL_GPIO_Init+0x304>)
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c22:	4b23      	ldr	r3, [pc, #140]	@ (8003cb0 <HAL_GPIO_Init+0x304>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c46:	4a1a      	ldr	r2, [pc, #104]	@ (8003cb0 <HAL_GPIO_Init+0x304>)
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c4c:	4b18      	ldr	r3, [pc, #96]	@ (8003cb0 <HAL_GPIO_Init+0x304>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	43db      	mvns	r3, r3
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c70:	4a0f      	ldr	r2, [pc, #60]	@ (8003cb0 <HAL_GPIO_Init+0x304>)
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	61fb      	str	r3, [r7, #28]
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	2b0f      	cmp	r3, #15
 8003c80:	f67f aea2 	bls.w	80039c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	3724      	adds	r7, #36	@ 0x24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40013800 	.word	0x40013800
 8003c9c:	40020000 	.word	0x40020000
 8003ca0:	40020400 	.word	0x40020400
 8003ca4:	40020800 	.word	0x40020800
 8003ca8:	40020c00 	.word	0x40020c00
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40013c00 	.word	0x40013c00

08003cb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	887b      	ldrh	r3, [r7, #2]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	73fb      	strb	r3, [r7, #15]
 8003cd0:	e001      	b.n	8003cd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	807b      	strh	r3, [r7, #2]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cf4:	787b      	ldrb	r3, [r7, #1]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cfa:	887a      	ldrh	r2, [r7, #2]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d00:	e003      	b.n	8003d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d02:	887b      	ldrh	r3, [r7, #2]
 8003d04:	041a      	lsls	r2, r3, #16
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	619a      	str	r2, [r3, #24]
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d22:	4b08      	ldr	r3, [pc, #32]	@ (8003d44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d24:	695a      	ldr	r2, [r3, #20]
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d006      	beq.n	8003d3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d2e:	4a05      	ldr	r2, [pc, #20]	@ (8003d44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d30:	88fb      	ldrh	r3, [r7, #6]
 8003d32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fd fde4 	bl	8001904 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d3c:	bf00      	nop
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40013c00 	.word	0x40013c00

08003d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e12b      	b.n	8003fb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fe faac 	bl	80022cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2224      	movs	r2, #36	@ 0x24
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0201 	bic.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003daa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dac:	f001 f89a 	bl	8004ee4 <HAL_RCC_GetPCLK1Freq>
 8003db0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	4a81      	ldr	r2, [pc, #516]	@ (8003fbc <HAL_I2C_Init+0x274>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d807      	bhi.n	8003dcc <HAL_I2C_Init+0x84>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a80      	ldr	r2, [pc, #512]	@ (8003fc0 <HAL_I2C_Init+0x278>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	bf94      	ite	ls
 8003dc4:	2301      	movls	r3, #1
 8003dc6:	2300      	movhi	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e006      	b.n	8003dda <HAL_I2C_Init+0x92>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4a7d      	ldr	r2, [pc, #500]	@ (8003fc4 <HAL_I2C_Init+0x27c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	bf94      	ite	ls
 8003dd4:	2301      	movls	r3, #1
 8003dd6:	2300      	movhi	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e0e7      	b.n	8003fb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4a78      	ldr	r2, [pc, #480]	@ (8003fc8 <HAL_I2C_Init+0x280>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	0c9b      	lsrs	r3, r3, #18
 8003dec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4a6a      	ldr	r2, [pc, #424]	@ (8003fbc <HAL_I2C_Init+0x274>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d802      	bhi.n	8003e1c <HAL_I2C_Init+0xd4>
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	e009      	b.n	8003e30 <HAL_I2C_Init+0xe8>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	4a69      	ldr	r2, [pc, #420]	@ (8003fcc <HAL_I2C_Init+0x284>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	099b      	lsrs	r3, r3, #6
 8003e2e:	3301      	adds	r3, #1
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003e42:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	495c      	ldr	r1, [pc, #368]	@ (8003fbc <HAL_I2C_Init+0x274>)
 8003e4c:	428b      	cmp	r3, r1
 8003e4e:	d819      	bhi.n	8003e84 <HAL_I2C_Init+0x13c>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1e59      	subs	r1, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e5e:	1c59      	adds	r1, r3, #1
 8003e60:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e64:	400b      	ands	r3, r1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_I2C_Init+0x138>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1e59      	subs	r1, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e78:	3301      	adds	r3, #1
 8003e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7e:	e051      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003e80:	2304      	movs	r3, #4
 8003e82:	e04f      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d111      	bne.n	8003eb0 <HAL_I2C_Init+0x168>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	1e58      	subs	r0, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6859      	ldr	r1, [r3, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	440b      	add	r3, r1
 8003e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	e012      	b.n	8003ed6 <HAL_I2C_Init+0x18e>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1e58      	subs	r0, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6859      	ldr	r1, [r3, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	0099      	lsls	r1, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_Init+0x196>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e022      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10e      	bne.n	8003f04 <HAL_I2C_Init+0x1bc>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1e58      	subs	r0, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6859      	ldr	r1, [r3, #4]
 8003eee:	460b      	mov	r3, r1
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	440b      	add	r3, r1
 8003ef4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef8:	3301      	adds	r3, #1
 8003efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f02:	e00f      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	1e58      	subs	r0, r3, #1
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6859      	ldr	r1, [r3, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	0099      	lsls	r1, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	6809      	ldr	r1, [r1, #0]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69da      	ldr	r2, [r3, #28]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6911      	ldr	r1, [r2, #16]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68d2      	ldr	r2, [r2, #12]
 8003f5e:	4311      	orrs	r1, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	000186a0 	.word	0x000186a0
 8003fc0:	001e847f 	.word	0x001e847f
 8003fc4:	003d08ff 	.word	0x003d08ff
 8003fc8:	431bde83 	.word	0x431bde83
 8003fcc:	10624dd3 	.word	0x10624dd3

08003fd0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	607a      	str	r2, [r7, #4]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	460b      	mov	r3, r1
 8003fde:	817b      	strh	r3, [r7, #10]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fe4:	f7fe fc2a 	bl	800283c <HAL_GetTick>
 8003fe8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	f040 80e0 	bne.w	80041b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	2319      	movs	r3, #25
 8003ffe:	2201      	movs	r2, #1
 8004000:	4970      	ldr	r1, [pc, #448]	@ (80041c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f964 	bl	80042d0 <I2C_WaitOnFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800400e:	2302      	movs	r3, #2
 8004010:	e0d3      	b.n	80041ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_I2C_Master_Transmit+0x50>
 800401c:	2302      	movs	r3, #2
 800401e:	e0cc      	b.n	80041ba <HAL_I2C_Master_Transmit+0x1ea>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b01      	cmp	r3, #1
 8004034:	d007      	beq.n	8004046 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0201 	orr.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004054:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2221      	movs	r2, #33	@ 0x21
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2210      	movs	r2, #16
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	893a      	ldrh	r2, [r7, #8]
 8004076:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4a50      	ldr	r2, [pc, #320]	@ (80041c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004086:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004088:	8979      	ldrh	r1, [r7, #10]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	6a3a      	ldr	r2, [r7, #32]
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 f89c 	bl	80041cc <I2C_MasterRequestWrite>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e08d      	b.n	80041ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409e:	2300      	movs	r3, #0
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040b4:	e066      	b.n	8004184 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	6a39      	ldr	r1, [r7, #32]
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 fa22 	bl	8004504 <I2C_WaitOnTXEFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00d      	beq.n	80040e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d107      	bne.n	80040de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e06b      	b.n	80041ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e6:	781a      	ldrb	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b04      	cmp	r3, #4
 800411e:	d11b      	bne.n	8004158 <HAL_I2C_Master_Transmit+0x188>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004124:	2b00      	cmp	r3, #0
 8004126:	d017      	beq.n	8004158 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412c:	781a      	ldrb	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	6a39      	ldr	r1, [r7, #32]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fa19 	bl	8004594 <I2C_WaitOnBTFFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00d      	beq.n	8004184 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416c:	2b04      	cmp	r3, #4
 800416e:	d107      	bne.n	8004180 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800417e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e01a      	b.n	80041ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004188:	2b00      	cmp	r3, #0
 800418a:	d194      	bne.n	80040b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800419a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	00100002 	.word	0x00100002
 80041c8:	ffff0000 	.word	0xffff0000

080041cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	607a      	str	r2, [r7, #4]
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	460b      	mov	r3, r1
 80041da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d006      	beq.n	80041f6 <I2C_MasterRequestWrite+0x2a>
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d003      	beq.n	80041f6 <I2C_MasterRequestWrite+0x2a>
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041f4:	d108      	bne.n	8004208 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	e00b      	b.n	8004220 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420c:	2b12      	cmp	r3, #18
 800420e:	d107      	bne.n	8004220 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800421e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f84f 	bl	80042d0 <I2C_WaitOnFlagUntilTimeout>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00d      	beq.n	8004254 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004246:	d103      	bne.n	8004250 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800424e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e035      	b.n	80042c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800425c:	d108      	bne.n	8004270 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800425e:	897b      	ldrh	r3, [r7, #10]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	461a      	mov	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800426c:	611a      	str	r2, [r3, #16]
 800426e:	e01b      	b.n	80042a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004270:	897b      	ldrh	r3, [r7, #10]
 8004272:	11db      	asrs	r3, r3, #7
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f003 0306 	and.w	r3, r3, #6
 800427a:	b2db      	uxtb	r3, r3
 800427c:	f063 030f 	orn	r3, r3, #15
 8004280:	b2da      	uxtb	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	490e      	ldr	r1, [pc, #56]	@ (80042c8 <I2C_MasterRequestWrite+0xfc>)
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f898 	bl	80043c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e010      	b.n	80042c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800429e:	897b      	ldrh	r3, [r7, #10]
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4907      	ldr	r1, [pc, #28]	@ (80042cc <I2C_MasterRequestWrite+0x100>)
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f888 	bl	80043c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	00010008 	.word	0x00010008
 80042cc:	00010002 	.word	0x00010002

080042d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042e0:	e048      	b.n	8004374 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042e8:	d044      	beq.n	8004374 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ea:	f7fe faa7 	bl	800283c <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d302      	bcc.n	8004300 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d139      	bne.n	8004374 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	0c1b      	lsrs	r3, r3, #16
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b01      	cmp	r3, #1
 8004308:	d10d      	bne.n	8004326 <I2C_WaitOnFlagUntilTimeout+0x56>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	43da      	mvns	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4013      	ands	r3, r2
 8004316:	b29b      	uxth	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	bf0c      	ite	eq
 800431c:	2301      	moveq	r3, #1
 800431e:	2300      	movne	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	461a      	mov	r2, r3
 8004324:	e00c      	b.n	8004340 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	43da      	mvns	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4013      	ands	r3, r2
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	bf0c      	ite	eq
 8004338:	2301      	moveq	r3, #1
 800433a:	2300      	movne	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	461a      	mov	r2, r3
 8004340:	79fb      	ldrb	r3, [r7, #7]
 8004342:	429a      	cmp	r2, r3
 8004344:	d116      	bne.n	8004374 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004360:	f043 0220 	orr.w	r2, r3, #32
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e023      	b.n	80043bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	0c1b      	lsrs	r3, r3, #16
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b01      	cmp	r3, #1
 800437c:	d10d      	bne.n	800439a <I2C_WaitOnFlagUntilTimeout+0xca>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	43da      	mvns	r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4013      	ands	r3, r2
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	bf0c      	ite	eq
 8004390:	2301      	moveq	r3, #1
 8004392:	2300      	movne	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	e00c      	b.n	80043b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	43da      	mvns	r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	4013      	ands	r3, r2
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf0c      	ite	eq
 80043ac:	2301      	moveq	r3, #1
 80043ae:	2300      	movne	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d093      	beq.n	80042e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043d2:	e071      	b.n	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043e2:	d123      	bne.n	800442c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004418:	f043 0204 	orr.w	r2, r3, #4
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e067      	b.n	80044fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004432:	d041      	beq.n	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004434:	f7fe fa02 	bl	800283c <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	429a      	cmp	r2, r3
 8004442:	d302      	bcc.n	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d136      	bne.n	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	0c1b      	lsrs	r3, r3, #16
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d10c      	bne.n	800446e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	43da      	mvns	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4013      	ands	r3, r2
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	bf14      	ite	ne
 8004466:	2301      	movne	r3, #1
 8004468:	2300      	moveq	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	e00b      	b.n	8004486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	43da      	mvns	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	4013      	ands	r3, r2
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	bf14      	ite	ne
 8004480:	2301      	movne	r3, #1
 8004482:	2300      	moveq	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d016      	beq.n	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a4:	f043 0220 	orr.w	r2, r3, #32
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e021      	b.n	80044fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	0c1b      	lsrs	r3, r3, #16
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d10c      	bne.n	80044dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	43da      	mvns	r2, r3
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	4013      	ands	r3, r2
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	bf14      	ite	ne
 80044d4:	2301      	movne	r3, #1
 80044d6:	2300      	moveq	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	e00b      	b.n	80044f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	43da      	mvns	r2, r3
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4013      	ands	r3, r2
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	bf14      	ite	ne
 80044ee:	2301      	movne	r3, #1
 80044f0:	2300      	moveq	r3, #0
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f47f af6d 	bne.w	80043d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004510:	e034      	b.n	800457c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f886 	bl	8004624 <I2C_IsAcknowledgeFailed>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e034      	b.n	800458c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004528:	d028      	beq.n	800457c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452a:	f7fe f987 	bl	800283c <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	429a      	cmp	r2, r3
 8004538:	d302      	bcc.n	8004540 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d11d      	bne.n	800457c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454a:	2b80      	cmp	r3, #128	@ 0x80
 800454c:	d016      	beq.n	800457c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004568:	f043 0220 	orr.w	r2, r3, #32
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e007      	b.n	800458c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004586:	2b80      	cmp	r3, #128	@ 0x80
 8004588:	d1c3      	bne.n	8004512 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045a0:	e034      	b.n	800460c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 f83e 	bl	8004624 <I2C_IsAcknowledgeFailed>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e034      	b.n	800461c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045b8:	d028      	beq.n	800460c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ba:	f7fe f93f 	bl	800283c <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d302      	bcc.n	80045d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d11d      	bne.n	800460c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d016      	beq.n	800460c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f8:	f043 0220 	orr.w	r2, r3, #32
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e007      	b.n	800461c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b04      	cmp	r3, #4
 8004618:	d1c3      	bne.n	80045a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800463a:	d11b      	bne.n	8004674 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004644:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004660:	f043 0204 	orr.w	r2, r3, #4
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
	...

08004684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e267      	b.n	8004b66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d075      	beq.n	800478e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046a2:	4b88      	ldr	r3, [pc, #544]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 030c 	and.w	r3, r3, #12
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d00c      	beq.n	80046c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ae:	4b85      	ldr	r3, [pc, #532]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d112      	bne.n	80046e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ba:	4b82      	ldr	r3, [pc, #520]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046c6:	d10b      	bne.n	80046e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c8:	4b7e      	ldr	r3, [pc, #504]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d05b      	beq.n	800478c <HAL_RCC_OscConfig+0x108>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d157      	bne.n	800478c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e242      	b.n	8004b66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e8:	d106      	bne.n	80046f8 <HAL_RCC_OscConfig+0x74>
 80046ea:	4b76      	ldr	r3, [pc, #472]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a75      	ldr	r2, [pc, #468]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 80046f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	e01d      	b.n	8004734 <HAL_RCC_OscConfig+0xb0>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004700:	d10c      	bne.n	800471c <HAL_RCC_OscConfig+0x98>
 8004702:	4b70      	ldr	r3, [pc, #448]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a6f      	ldr	r2, [pc, #444]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 8004708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	4b6d      	ldr	r3, [pc, #436]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a6c      	ldr	r2, [pc, #432]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 8004714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	e00b      	b.n	8004734 <HAL_RCC_OscConfig+0xb0>
 800471c:	4b69      	ldr	r3, [pc, #420]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a68      	ldr	r2, [pc, #416]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 8004722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	4b66      	ldr	r3, [pc, #408]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a65      	ldr	r2, [pc, #404]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 800472e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d013      	beq.n	8004764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473c:	f7fe f87e 	bl	800283c <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004744:	f7fe f87a 	bl	800283c <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b64      	cmp	r3, #100	@ 0x64
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e207      	b.n	8004b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004756:	4b5b      	ldr	r3, [pc, #364]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f0      	beq.n	8004744 <HAL_RCC_OscConfig+0xc0>
 8004762:	e014      	b.n	800478e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004764:	f7fe f86a 	bl	800283c <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800476c:	f7fe f866 	bl	800283c <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b64      	cmp	r3, #100	@ 0x64
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e1f3      	b.n	8004b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800477e:	4b51      	ldr	r3, [pc, #324]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f0      	bne.n	800476c <HAL_RCC_OscConfig+0xe8>
 800478a:	e000      	b.n	800478e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800478c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d063      	beq.n	8004862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800479a:	4b4a      	ldr	r3, [pc, #296]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 030c 	and.w	r3, r3, #12
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00b      	beq.n	80047be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047a6:	4b47      	ldr	r3, [pc, #284]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d11c      	bne.n	80047ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047b2:	4b44      	ldr	r3, [pc, #272]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d116      	bne.n	80047ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047be:	4b41      	ldr	r3, [pc, #260]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <HAL_RCC_OscConfig+0x152>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d001      	beq.n	80047d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e1c7      	b.n	8004b66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d6:	4b3b      	ldr	r3, [pc, #236]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	4937      	ldr	r1, [pc, #220]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ea:	e03a      	b.n	8004862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d020      	beq.n	8004836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047f4:	4b34      	ldr	r3, [pc, #208]	@ (80048c8 <HAL_RCC_OscConfig+0x244>)
 80047f6:	2201      	movs	r2, #1
 80047f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fa:	f7fe f81f 	bl	800283c <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004802:	f7fe f81b 	bl	800283c <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e1a8      	b.n	8004b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004814:	4b2b      	ldr	r3, [pc, #172]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0f0      	beq.n	8004802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004820:	4b28      	ldr	r3, [pc, #160]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	4925      	ldr	r1, [pc, #148]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 8004830:	4313      	orrs	r3, r2
 8004832:	600b      	str	r3, [r1, #0]
 8004834:	e015      	b.n	8004862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004836:	4b24      	ldr	r3, [pc, #144]	@ (80048c8 <HAL_RCC_OscConfig+0x244>)
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483c:	f7fd fffe 	bl	800283c <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004844:	f7fd fffa 	bl	800283c <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e187      	b.n	8004b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004856:	4b1b      	ldr	r3, [pc, #108]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f0      	bne.n	8004844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d036      	beq.n	80048dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d016      	beq.n	80048a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004876:	4b15      	ldr	r3, [pc, #84]	@ (80048cc <HAL_RCC_OscConfig+0x248>)
 8004878:	2201      	movs	r2, #1
 800487a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487c:	f7fd ffde 	bl	800283c <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004884:	f7fd ffda 	bl	800283c <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e167      	b.n	8004b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004896:	4b0b      	ldr	r3, [pc, #44]	@ (80048c4 <HAL_RCC_OscConfig+0x240>)
 8004898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0f0      	beq.n	8004884 <HAL_RCC_OscConfig+0x200>
 80048a2:	e01b      	b.n	80048dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048a4:	4b09      	ldr	r3, [pc, #36]	@ (80048cc <HAL_RCC_OscConfig+0x248>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048aa:	f7fd ffc7 	bl	800283c <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048b0:	e00e      	b.n	80048d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048b2:	f7fd ffc3 	bl	800283c <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d907      	bls.n	80048d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e150      	b.n	8004b66 <HAL_RCC_OscConfig+0x4e2>
 80048c4:	40023800 	.word	0x40023800
 80048c8:	42470000 	.word	0x42470000
 80048cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d0:	4b88      	ldr	r3, [pc, #544]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 80048d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1ea      	bne.n	80048b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 8097 	beq.w	8004a18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ea:	2300      	movs	r3, #0
 80048ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ee:	4b81      	ldr	r3, [pc, #516]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 80048f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10f      	bne.n	800491a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	60bb      	str	r3, [r7, #8]
 80048fe:	4b7d      	ldr	r3, [pc, #500]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004902:	4a7c      	ldr	r2, [pc, #496]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 8004904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004908:	6413      	str	r3, [r2, #64]	@ 0x40
 800490a:	4b7a      	ldr	r3, [pc, #488]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004912:	60bb      	str	r3, [r7, #8]
 8004914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004916:	2301      	movs	r3, #1
 8004918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491a:	4b77      	ldr	r3, [pc, #476]	@ (8004af8 <HAL_RCC_OscConfig+0x474>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004922:	2b00      	cmp	r3, #0
 8004924:	d118      	bne.n	8004958 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004926:	4b74      	ldr	r3, [pc, #464]	@ (8004af8 <HAL_RCC_OscConfig+0x474>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a73      	ldr	r2, [pc, #460]	@ (8004af8 <HAL_RCC_OscConfig+0x474>)
 800492c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004932:	f7fd ff83 	bl	800283c <HAL_GetTick>
 8004936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800493a:	f7fd ff7f 	bl	800283c <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e10c      	b.n	8004b66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494c:	4b6a      	ldr	r3, [pc, #424]	@ (8004af8 <HAL_RCC_OscConfig+0x474>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0f0      	beq.n	800493a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d106      	bne.n	800496e <HAL_RCC_OscConfig+0x2ea>
 8004960:	4b64      	ldr	r3, [pc, #400]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 8004962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004964:	4a63      	ldr	r2, [pc, #396]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 8004966:	f043 0301 	orr.w	r3, r3, #1
 800496a:	6713      	str	r3, [r2, #112]	@ 0x70
 800496c:	e01c      	b.n	80049a8 <HAL_RCC_OscConfig+0x324>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b05      	cmp	r3, #5
 8004974:	d10c      	bne.n	8004990 <HAL_RCC_OscConfig+0x30c>
 8004976:	4b5f      	ldr	r3, [pc, #380]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800497a:	4a5e      	ldr	r2, [pc, #376]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 800497c:	f043 0304 	orr.w	r3, r3, #4
 8004980:	6713      	str	r3, [r2, #112]	@ 0x70
 8004982:	4b5c      	ldr	r3, [pc, #368]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 8004984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004986:	4a5b      	ldr	r2, [pc, #364]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 8004988:	f043 0301 	orr.w	r3, r3, #1
 800498c:	6713      	str	r3, [r2, #112]	@ 0x70
 800498e:	e00b      	b.n	80049a8 <HAL_RCC_OscConfig+0x324>
 8004990:	4b58      	ldr	r3, [pc, #352]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 8004992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004994:	4a57      	ldr	r2, [pc, #348]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 8004996:	f023 0301 	bic.w	r3, r3, #1
 800499a:	6713      	str	r3, [r2, #112]	@ 0x70
 800499c:	4b55      	ldr	r3, [pc, #340]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a0:	4a54      	ldr	r2, [pc, #336]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 80049a2:	f023 0304 	bic.w	r3, r3, #4
 80049a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d015      	beq.n	80049dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b0:	f7fd ff44 	bl	800283c <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b6:	e00a      	b.n	80049ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b8:	f7fd ff40 	bl	800283c <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e0cb      	b.n	8004b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ce:	4b49      	ldr	r3, [pc, #292]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 80049d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0ee      	beq.n	80049b8 <HAL_RCC_OscConfig+0x334>
 80049da:	e014      	b.n	8004a06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049dc:	f7fd ff2e 	bl	800283c <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e2:	e00a      	b.n	80049fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e4:	f7fd ff2a 	bl	800283c <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e0b5      	b.n	8004b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fa:	4b3e      	ldr	r3, [pc, #248]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 80049fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1ee      	bne.n	80049e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a06:	7dfb      	ldrb	r3, [r7, #23]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d105      	bne.n	8004a18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a0c:	4b39      	ldr	r3, [pc, #228]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a10:	4a38      	ldr	r2, [pc, #224]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 8004a12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 80a1 	beq.w	8004b64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a22:	4b34      	ldr	r3, [pc, #208]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d05c      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d141      	bne.n	8004aba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a36:	4b31      	ldr	r3, [pc, #196]	@ (8004afc <HAL_RCC_OscConfig+0x478>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3c:	f7fd fefe 	bl	800283c <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a44:	f7fd fefa 	bl	800283c <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e087      	b.n	8004b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a56:	4b27      	ldr	r3, [pc, #156]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69da      	ldr	r2, [r3, #28]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a70:	019b      	lsls	r3, r3, #6
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a78:	085b      	lsrs	r3, r3, #1
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	041b      	lsls	r3, r3, #16
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a84:	061b      	lsls	r3, r3, #24
 8004a86:	491b      	ldr	r1, [pc, #108]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004afc <HAL_RCC_OscConfig+0x478>)
 8004a8e:	2201      	movs	r2, #1
 8004a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a92:	f7fd fed3 	bl	800283c <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a9a:	f7fd fecf 	bl	800283c <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e05c      	b.n	8004b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aac:	4b11      	ldr	r3, [pc, #68]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0f0      	beq.n	8004a9a <HAL_RCC_OscConfig+0x416>
 8004ab8:	e054      	b.n	8004b64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aba:	4b10      	ldr	r3, [pc, #64]	@ (8004afc <HAL_RCC_OscConfig+0x478>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac0:	f7fd febc 	bl	800283c <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac8:	f7fd feb8 	bl	800283c <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e045      	b.n	8004b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ada:	4b06      	ldr	r3, [pc, #24]	@ (8004af4 <HAL_RCC_OscConfig+0x470>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x444>
 8004ae6:	e03d      	b.n	8004b64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d107      	bne.n	8004b00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e038      	b.n	8004b66 <HAL_RCC_OscConfig+0x4e2>
 8004af4:	40023800 	.word	0x40023800
 8004af8:	40007000 	.word	0x40007000
 8004afc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b00:	4b1b      	ldr	r3, [pc, #108]	@ (8004b70 <HAL_RCC_OscConfig+0x4ec>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d028      	beq.n	8004b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d121      	bne.n	8004b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d11a      	bne.n	8004b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b30:	4013      	ands	r3, r2
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d111      	bne.n	8004b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b46:	085b      	lsrs	r3, r3, #1
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d107      	bne.n	8004b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d001      	beq.n	8004b64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	40023800 	.word	0x40023800

08004b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0cc      	b.n	8004d22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b88:	4b68      	ldr	r3, [pc, #416]	@ (8004d2c <HAL_RCC_ClockConfig+0x1b8>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d90c      	bls.n	8004bb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b96:	4b65      	ldr	r3, [pc, #404]	@ (8004d2c <HAL_RCC_ClockConfig+0x1b8>)
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9e:	4b63      	ldr	r3, [pc, #396]	@ (8004d2c <HAL_RCC_ClockConfig+0x1b8>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d001      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e0b8      	b.n	8004d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d020      	beq.n	8004bfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bc8:	4b59      	ldr	r3, [pc, #356]	@ (8004d30 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	4a58      	ldr	r2, [pc, #352]	@ (8004d30 <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0308 	and.w	r3, r3, #8
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004be0:	4b53      	ldr	r3, [pc, #332]	@ (8004d30 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	4a52      	ldr	r2, [pc, #328]	@ (8004d30 <HAL_RCC_ClockConfig+0x1bc>)
 8004be6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004bea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bec:	4b50      	ldr	r3, [pc, #320]	@ (8004d30 <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	494d      	ldr	r1, [pc, #308]	@ (8004d30 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d044      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d107      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c12:	4b47      	ldr	r3, [pc, #284]	@ (8004d30 <HAL_RCC_ClockConfig+0x1bc>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d119      	bne.n	8004c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e07f      	b.n	8004d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d003      	beq.n	8004c32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d107      	bne.n	8004c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c32:	4b3f      	ldr	r3, [pc, #252]	@ (8004d30 <HAL_RCC_ClockConfig+0x1bc>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d109      	bne.n	8004c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e06f      	b.n	8004d22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c42:	4b3b      	ldr	r3, [pc, #236]	@ (8004d30 <HAL_RCC_ClockConfig+0x1bc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e067      	b.n	8004d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c52:	4b37      	ldr	r3, [pc, #220]	@ (8004d30 <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f023 0203 	bic.w	r2, r3, #3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	4934      	ldr	r1, [pc, #208]	@ (8004d30 <HAL_RCC_ClockConfig+0x1bc>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c64:	f7fd fdea 	bl	800283c <HAL_GetTick>
 8004c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6a:	e00a      	b.n	8004c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c6c:	f7fd fde6 	bl	800283c <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e04f      	b.n	8004d22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c82:	4b2b      	ldr	r3, [pc, #172]	@ (8004d30 <HAL_RCC_ClockConfig+0x1bc>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 020c 	and.w	r2, r3, #12
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d1eb      	bne.n	8004c6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c94:	4b25      	ldr	r3, [pc, #148]	@ (8004d2c <HAL_RCC_ClockConfig+0x1b8>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d20c      	bcs.n	8004cbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca2:	4b22      	ldr	r3, [pc, #136]	@ (8004d2c <HAL_RCC_ClockConfig+0x1b8>)
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004caa:	4b20      	ldr	r3, [pc, #128]	@ (8004d2c <HAL_RCC_ClockConfig+0x1b8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d001      	beq.n	8004cbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e032      	b.n	8004d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d008      	beq.n	8004cda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cc8:	4b19      	ldr	r3, [pc, #100]	@ (8004d30 <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	4916      	ldr	r1, [pc, #88]	@ (8004d30 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d009      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ce6:	4b12      	ldr	r3, [pc, #72]	@ (8004d30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	490e      	ldr	r1, [pc, #56]	@ (8004d30 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cfa:	f000 f821 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	4b0b      	ldr	r3, [pc, #44]	@ (8004d30 <HAL_RCC_ClockConfig+0x1bc>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	091b      	lsrs	r3, r3, #4
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	490a      	ldr	r1, [pc, #40]	@ (8004d34 <HAL_RCC_ClockConfig+0x1c0>)
 8004d0c:	5ccb      	ldrb	r3, [r1, r3]
 8004d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d12:	4a09      	ldr	r2, [pc, #36]	@ (8004d38 <HAL_RCC_ClockConfig+0x1c4>)
 8004d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d16:	4b09      	ldr	r3, [pc, #36]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fd fd4a 	bl	80027b4 <HAL_InitTick>

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40023c00 	.word	0x40023c00
 8004d30:	40023800 	.word	0x40023800
 8004d34:	080066b8 	.word	0x080066b8
 8004d38:	20000264 	.word	0x20000264
 8004d3c:	20000268 	.word	0x20000268

08004d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d44:	b090      	sub	sp, #64	@ 0x40
 8004d46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d58:	4b59      	ldr	r3, [pc, #356]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 030c 	and.w	r3, r3, #12
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d00d      	beq.n	8004d80 <HAL_RCC_GetSysClockFreq+0x40>
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	f200 80a1 	bhi.w	8004eac <HAL_RCC_GetSysClockFreq+0x16c>
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <HAL_RCC_GetSysClockFreq+0x34>
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d003      	beq.n	8004d7a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d72:	e09b      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d74:	4b53      	ldr	r3, [pc, #332]	@ (8004ec4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d78:	e09b      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d7a:	4b53      	ldr	r3, [pc, #332]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d7e:	e098      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d80:	4b4f      	ldr	r3, [pc, #316]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d88:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d8a:	4b4d      	ldr	r3, [pc, #308]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d028      	beq.n	8004de8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d96:	4b4a      	ldr	r3, [pc, #296]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	099b      	lsrs	r3, r3, #6
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	623b      	str	r3, [r7, #32]
 8004da0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004da8:	2100      	movs	r1, #0
 8004daa:	4b47      	ldr	r3, [pc, #284]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004dac:	fb03 f201 	mul.w	r2, r3, r1
 8004db0:	2300      	movs	r3, #0
 8004db2:	fb00 f303 	mul.w	r3, r0, r3
 8004db6:	4413      	add	r3, r2
 8004db8:	4a43      	ldr	r2, [pc, #268]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004dba:	fba0 1202 	umull	r1, r2, r0, r2
 8004dbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dc0:	460a      	mov	r2, r1
 8004dc2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004dc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dc6:	4413      	add	r3, r2
 8004dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dcc:	2200      	movs	r2, #0
 8004dce:	61bb      	str	r3, [r7, #24]
 8004dd0:	61fa      	str	r2, [r7, #28]
 8004dd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004dda:	f7fb fa51 	bl	8000280 <__aeabi_uldivmod>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4613      	mov	r3, r2
 8004de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004de6:	e053      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004de8:	4b35      	ldr	r3, [pc, #212]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	099b      	lsrs	r3, r3, #6
 8004dee:	2200      	movs	r2, #0
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	617a      	str	r2, [r7, #20]
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004dfa:	f04f 0b00 	mov.w	fp, #0
 8004dfe:	4652      	mov	r2, sl
 8004e00:	465b      	mov	r3, fp
 8004e02:	f04f 0000 	mov.w	r0, #0
 8004e06:	f04f 0100 	mov.w	r1, #0
 8004e0a:	0159      	lsls	r1, r3, #5
 8004e0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e10:	0150      	lsls	r0, r2, #5
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	ebb2 080a 	subs.w	r8, r2, sl
 8004e1a:	eb63 090b 	sbc.w	r9, r3, fp
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e32:	ebb2 0408 	subs.w	r4, r2, r8
 8004e36:	eb63 0509 	sbc.w	r5, r3, r9
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	f04f 0300 	mov.w	r3, #0
 8004e42:	00eb      	lsls	r3, r5, #3
 8004e44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e48:	00e2      	lsls	r2, r4, #3
 8004e4a:	4614      	mov	r4, r2
 8004e4c:	461d      	mov	r5, r3
 8004e4e:	eb14 030a 	adds.w	r3, r4, sl
 8004e52:	603b      	str	r3, [r7, #0]
 8004e54:	eb45 030b 	adc.w	r3, r5, fp
 8004e58:	607b      	str	r3, [r7, #4]
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e66:	4629      	mov	r1, r5
 8004e68:	028b      	lsls	r3, r1, #10
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e70:	4621      	mov	r1, r4
 8004e72:	028a      	lsls	r2, r1, #10
 8004e74:	4610      	mov	r0, r2
 8004e76:	4619      	mov	r1, r3
 8004e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	60bb      	str	r3, [r7, #8]
 8004e7e:	60fa      	str	r2, [r7, #12]
 8004e80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e84:	f7fb f9fc 	bl	8000280 <__aeabi_uldivmod>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e90:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	0c1b      	lsrs	r3, r3, #16
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004ea0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004eaa:	e002      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eac:	4b05      	ldr	r3, [pc, #20]	@ (8004ec4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004eae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3740      	adds	r7, #64	@ 0x40
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	00f42400 	.word	0x00f42400
 8004ec8:	017d7840 	.word	0x017d7840

08004ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ed0:	4b03      	ldr	r3, [pc, #12]	@ (8004ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000264 	.word	0x20000264

08004ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ee8:	f7ff fff0 	bl	8004ecc <HAL_RCC_GetHCLKFreq>
 8004eec:	4602      	mov	r2, r0
 8004eee:	4b05      	ldr	r3, [pc, #20]	@ (8004f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	0a9b      	lsrs	r3, r3, #10
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	4903      	ldr	r1, [pc, #12]	@ (8004f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004efa:	5ccb      	ldrb	r3, [r1, r3]
 8004efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40023800 	.word	0x40023800
 8004f08:	080066c8 	.word	0x080066c8

08004f0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d001      	beq.n	8004f24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e03c      	b.n	8004f9e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1e      	ldr	r2, [pc, #120]	@ (8004fac <HAL_TIM_Base_Start+0xa0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d018      	beq.n	8004f68 <HAL_TIM_Base_Start+0x5c>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f3e:	d013      	beq.n	8004f68 <HAL_TIM_Base_Start+0x5c>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a1a      	ldr	r2, [pc, #104]	@ (8004fb0 <HAL_TIM_Base_Start+0xa4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d00e      	beq.n	8004f68 <HAL_TIM_Base_Start+0x5c>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a19      	ldr	r2, [pc, #100]	@ (8004fb4 <HAL_TIM_Base_Start+0xa8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d009      	beq.n	8004f68 <HAL_TIM_Base_Start+0x5c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a17      	ldr	r2, [pc, #92]	@ (8004fb8 <HAL_TIM_Base_Start+0xac>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d004      	beq.n	8004f68 <HAL_TIM_Base_Start+0x5c>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a16      	ldr	r2, [pc, #88]	@ (8004fbc <HAL_TIM_Base_Start+0xb0>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d111      	bne.n	8004f8c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b06      	cmp	r3, #6
 8004f78:	d010      	beq.n	8004f9c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f042 0201 	orr.w	r2, r2, #1
 8004f88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8a:	e007      	b.n	8004f9c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0201 	orr.w	r2, r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40010000 	.word	0x40010000
 8004fb0:	40000400 	.word	0x40000400
 8004fb4:	40000800 	.word	0x40000800
 8004fb8:	40000c00 	.word	0x40000c00
 8004fbc:	40014000 	.word	0x40014000

08004fc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e041      	b.n	8005056 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d106      	bne.n	8004fec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fd f9b8 	bl	800235c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4610      	mov	r0, r2
 8005000:	f000 fb22 	bl	8005648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d109      	bne.n	8005088 <HAL_TIM_PWM_Start_IT+0x28>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b01      	cmp	r3, #1
 800507e:	bf14      	ite	ne
 8005080:	2301      	movne	r3, #1
 8005082:	2300      	moveq	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	e022      	b.n	80050ce <HAL_TIM_PWM_Start_IT+0x6e>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2b04      	cmp	r3, #4
 800508c:	d109      	bne.n	80050a2 <HAL_TIM_PWM_Start_IT+0x42>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b01      	cmp	r3, #1
 8005098:	bf14      	ite	ne
 800509a:	2301      	movne	r3, #1
 800509c:	2300      	moveq	r3, #0
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	e015      	b.n	80050ce <HAL_TIM_PWM_Start_IT+0x6e>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d109      	bne.n	80050bc <HAL_TIM_PWM_Start_IT+0x5c>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	bf14      	ite	ne
 80050b4:	2301      	movne	r3, #1
 80050b6:	2300      	moveq	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	e008      	b.n	80050ce <HAL_TIM_PWM_Start_IT+0x6e>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	bf14      	ite	ne
 80050c8:	2301      	movne	r3, #1
 80050ca:	2300      	moveq	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e0b3      	b.n	800523e <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d104      	bne.n	80050e6 <HAL_TIM_PWM_Start_IT+0x86>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050e4:	e013      	b.n	800510e <HAL_TIM_PWM_Start_IT+0xae>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d104      	bne.n	80050f6 <HAL_TIM_PWM_Start_IT+0x96>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050f4:	e00b      	b.n	800510e <HAL_TIM_PWM_Start_IT+0xae>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d104      	bne.n	8005106 <HAL_TIM_PWM_Start_IT+0xa6>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005104:	e003      	b.n	800510e <HAL_TIM_PWM_Start_IT+0xae>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2202      	movs	r2, #2
 800510a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b0c      	cmp	r3, #12
 8005112:	d841      	bhi.n	8005198 <HAL_TIM_PWM_Start_IT+0x138>
 8005114:	a201      	add	r2, pc, #4	@ (adr r2, 800511c <HAL_TIM_PWM_Start_IT+0xbc>)
 8005116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511a:	bf00      	nop
 800511c:	08005151 	.word	0x08005151
 8005120:	08005199 	.word	0x08005199
 8005124:	08005199 	.word	0x08005199
 8005128:	08005199 	.word	0x08005199
 800512c:	08005163 	.word	0x08005163
 8005130:	08005199 	.word	0x08005199
 8005134:	08005199 	.word	0x08005199
 8005138:	08005199 	.word	0x08005199
 800513c:	08005175 	.word	0x08005175
 8005140:	08005199 	.word	0x08005199
 8005144:	08005199 	.word	0x08005199
 8005148:	08005199 	.word	0x08005199
 800514c:	08005187 	.word	0x08005187
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0202 	orr.w	r2, r2, #2
 800515e:	60da      	str	r2, [r3, #12]
      break;
 8005160:	e01d      	b.n	800519e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0204 	orr.w	r2, r2, #4
 8005170:	60da      	str	r2, [r3, #12]
      break;
 8005172:	e014      	b.n	800519e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0208 	orr.w	r2, r2, #8
 8005182:	60da      	str	r2, [r3, #12]
      break;
 8005184:	e00b      	b.n	800519e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0210 	orr.w	r2, r2, #16
 8005194:	60da      	str	r2, [r3, #12]
      break;
 8005196:	e002      	b.n	800519e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	73fb      	strb	r3, [r7, #15]
      break;
 800519c:	bf00      	nop
  }

  if (status == HAL_OK)
 800519e:	7bfb      	ldrb	r3, [r7, #15]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d14b      	bne.n	800523c <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2201      	movs	r2, #1
 80051aa:	6839      	ldr	r1, [r7, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fc5d 	bl	8005a6c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a24      	ldr	r2, [pc, #144]	@ (8005248 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d107      	bne.n	80051cc <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051ca:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005248 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d018      	beq.n	8005208 <HAL_TIM_PWM_Start_IT+0x1a8>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051de:	d013      	beq.n	8005208 <HAL_TIM_PWM_Start_IT+0x1a8>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a19      	ldr	r2, [pc, #100]	@ (800524c <HAL_TIM_PWM_Start_IT+0x1ec>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00e      	beq.n	8005208 <HAL_TIM_PWM_Start_IT+0x1a8>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a18      	ldr	r2, [pc, #96]	@ (8005250 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d009      	beq.n	8005208 <HAL_TIM_PWM_Start_IT+0x1a8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a16      	ldr	r2, [pc, #88]	@ (8005254 <HAL_TIM_PWM_Start_IT+0x1f4>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d004      	beq.n	8005208 <HAL_TIM_PWM_Start_IT+0x1a8>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a15      	ldr	r2, [pc, #84]	@ (8005258 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d111      	bne.n	800522c <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b06      	cmp	r3, #6
 8005218:	d010      	beq.n	800523c <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0201 	orr.w	r2, r2, #1
 8005228:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800522a:	e007      	b.n	800523c <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800523c:	7bfb      	ldrb	r3, [r7, #15]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	40010000 	.word	0x40010000
 800524c:	40000400 	.word	0x40000400
 8005250:	40000800 	.word	0x40000800
 8005254:	40000c00 	.word	0x40000c00
 8005258:	40014000 	.word	0x40014000

0800525c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e097      	b.n	80053a0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d106      	bne.n	800528a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7fd f8b5 	bl	80023f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2202      	movs	r2, #2
 800528e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052a0:	f023 0307 	bic.w	r3, r3, #7
 80052a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3304      	adds	r3, #4
 80052ae:	4619      	mov	r1, r3
 80052b0:	4610      	mov	r0, r2
 80052b2:	f000 f9c9 	bl	8005648 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052de:	f023 0303 	bic.w	r3, r3, #3
 80052e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	021b      	lsls	r3, r3, #8
 80052ee:	4313      	orrs	r3, r2
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80052fc:	f023 030c 	bic.w	r3, r3, #12
 8005300:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005308:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800530c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	4313      	orrs	r3, r2
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	4313      	orrs	r3, r2
 800531e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	011a      	lsls	r2, r3, #4
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	031b      	lsls	r3, r3, #12
 800532c:	4313      	orrs	r3, r2
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800533a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005342:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	4313      	orrs	r3, r2
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3718      	adds	r7, #24
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80053d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d110      	bne.n	80053fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d102      	bne.n	80053e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80053de:	7b7b      	ldrb	r3, [r7, #13]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d001      	beq.n	80053e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e069      	b.n	80054bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053f8:	e031      	b.n	800545e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d110      	bne.n	8005422 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005400:	7bbb      	ldrb	r3, [r7, #14]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d102      	bne.n	800540c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005406:	7b3b      	ldrb	r3, [r7, #12]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d001      	beq.n	8005410 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e055      	b.n	80054bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005420:	e01d      	b.n	800545e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005422:	7bfb      	ldrb	r3, [r7, #15]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d108      	bne.n	800543a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005428:	7bbb      	ldrb	r3, [r7, #14]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d105      	bne.n	800543a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800542e:	7b7b      	ldrb	r3, [r7, #13]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d102      	bne.n	800543a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005434:	7b3b      	ldrb	r3, [r7, #12]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d001      	beq.n	800543e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e03e      	b.n	80054bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2202      	movs	r2, #2
 8005442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2202      	movs	r2, #2
 800544a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2202      	movs	r2, #2
 8005452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2202      	movs	r2, #2
 800545a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <HAL_TIM_Encoder_Start+0xc4>
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b04      	cmp	r3, #4
 8005468:	d008      	beq.n	800547c <HAL_TIM_Encoder_Start+0xd4>
 800546a:	e00f      	b.n	800548c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2201      	movs	r2, #1
 8005472:	2100      	movs	r1, #0
 8005474:	4618      	mov	r0, r3
 8005476:	f000 faf9 	bl	8005a6c <TIM_CCxChannelCmd>
      break;
 800547a:	e016      	b.n	80054aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2201      	movs	r2, #1
 8005482:	2104      	movs	r1, #4
 8005484:	4618      	mov	r0, r3
 8005486:	f000 faf1 	bl	8005a6c <TIM_CCxChannelCmd>
      break;
 800548a:	e00e      	b.n	80054aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2201      	movs	r2, #1
 8005492:	2100      	movs	r1, #0
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fae9 	bl	8005a6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2201      	movs	r2, #1
 80054a0:	2104      	movs	r1, #4
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 fae2 	bl	8005a6c <TIM_CCxChannelCmd>
      break;
 80054a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f042 0201 	orr.w	r2, r2, #1
 80054b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054de:	2302      	movs	r3, #2
 80054e0:	e0ae      	b.n	8005640 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b0c      	cmp	r3, #12
 80054ee:	f200 809f 	bhi.w	8005630 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80054f2:	a201      	add	r2, pc, #4	@ (adr r2, 80054f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	0800552d 	.word	0x0800552d
 80054fc:	08005631 	.word	0x08005631
 8005500:	08005631 	.word	0x08005631
 8005504:	08005631 	.word	0x08005631
 8005508:	0800556d 	.word	0x0800556d
 800550c:	08005631 	.word	0x08005631
 8005510:	08005631 	.word	0x08005631
 8005514:	08005631 	.word	0x08005631
 8005518:	080055af 	.word	0x080055af
 800551c:	08005631 	.word	0x08005631
 8005520:	08005631 	.word	0x08005631
 8005524:	08005631 	.word	0x08005631
 8005528:	080055ef 	.word	0x080055ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 f90e 	bl	8005754 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0208 	orr.w	r2, r2, #8
 8005546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0204 	bic.w	r2, r2, #4
 8005556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6999      	ldr	r1, [r3, #24]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	619a      	str	r2, [r3, #24]
      break;
 800556a:	e064      	b.n	8005636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 f954 	bl	8005820 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6999      	ldr	r1, [r3, #24]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	021a      	lsls	r2, r3, #8
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	619a      	str	r2, [r3, #24]
      break;
 80055ac:	e043      	b.n	8005636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 f99f 	bl	80058f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0208 	orr.w	r2, r2, #8
 80055c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0204 	bic.w	r2, r2, #4
 80055d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69d9      	ldr	r1, [r3, #28]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	61da      	str	r2, [r3, #28]
      break;
 80055ec:	e023      	b.n	8005636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 f9e9 	bl	80059cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69d9      	ldr	r1, [r3, #28]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	021a      	lsls	r2, r3, #8
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	61da      	str	r2, [r3, #28]
      break;
 800562e:	e002      	b.n	8005636 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	75fb      	strb	r3, [r7, #23]
      break;
 8005634:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800563e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a37      	ldr	r2, [pc, #220]	@ (8005738 <TIM_Base_SetConfig+0xf0>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d00f      	beq.n	8005680 <TIM_Base_SetConfig+0x38>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005666:	d00b      	beq.n	8005680 <TIM_Base_SetConfig+0x38>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a34      	ldr	r2, [pc, #208]	@ (800573c <TIM_Base_SetConfig+0xf4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d007      	beq.n	8005680 <TIM_Base_SetConfig+0x38>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a33      	ldr	r2, [pc, #204]	@ (8005740 <TIM_Base_SetConfig+0xf8>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d003      	beq.n	8005680 <TIM_Base_SetConfig+0x38>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a32      	ldr	r2, [pc, #200]	@ (8005744 <TIM_Base_SetConfig+0xfc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d108      	bne.n	8005692 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a28      	ldr	r2, [pc, #160]	@ (8005738 <TIM_Base_SetConfig+0xf0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d01b      	beq.n	80056d2 <TIM_Base_SetConfig+0x8a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056a0:	d017      	beq.n	80056d2 <TIM_Base_SetConfig+0x8a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a25      	ldr	r2, [pc, #148]	@ (800573c <TIM_Base_SetConfig+0xf4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d013      	beq.n	80056d2 <TIM_Base_SetConfig+0x8a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a24      	ldr	r2, [pc, #144]	@ (8005740 <TIM_Base_SetConfig+0xf8>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00f      	beq.n	80056d2 <TIM_Base_SetConfig+0x8a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a23      	ldr	r2, [pc, #140]	@ (8005744 <TIM_Base_SetConfig+0xfc>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00b      	beq.n	80056d2 <TIM_Base_SetConfig+0x8a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a22      	ldr	r2, [pc, #136]	@ (8005748 <TIM_Base_SetConfig+0x100>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d007      	beq.n	80056d2 <TIM_Base_SetConfig+0x8a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a21      	ldr	r2, [pc, #132]	@ (800574c <TIM_Base_SetConfig+0x104>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d003      	beq.n	80056d2 <TIM_Base_SetConfig+0x8a>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a20      	ldr	r2, [pc, #128]	@ (8005750 <TIM_Base_SetConfig+0x108>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d108      	bne.n	80056e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	689a      	ldr	r2, [r3, #8]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a0c      	ldr	r2, [pc, #48]	@ (8005738 <TIM_Base_SetConfig+0xf0>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d103      	bne.n	8005712 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f043 0204 	orr.w	r2, r3, #4
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	601a      	str	r2, [r3, #0]
}
 800572a:	bf00      	nop
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40010000 	.word	0x40010000
 800573c:	40000400 	.word	0x40000400
 8005740:	40000800 	.word	0x40000800
 8005744:	40000c00 	.word	0x40000c00
 8005748:	40014000 	.word	0x40014000
 800574c:	40014400 	.word	0x40014400
 8005750:	40014800 	.word	0x40014800

08005754 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	f023 0201 	bic.w	r2, r3, #1
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0303 	bic.w	r3, r3, #3
 800578a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f023 0302 	bic.w	r3, r3, #2
 800579c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a1c      	ldr	r2, [pc, #112]	@ (800581c <TIM_OC1_SetConfig+0xc8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d10c      	bne.n	80057ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f023 0308 	bic.w	r3, r3, #8
 80057b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	4313      	orrs	r3, r2
 80057c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f023 0304 	bic.w	r3, r3, #4
 80057c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a13      	ldr	r2, [pc, #76]	@ (800581c <TIM_OC1_SetConfig+0xc8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d111      	bne.n	80057f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	621a      	str	r2, [r3, #32]
}
 8005810:	bf00      	nop
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	40010000 	.word	0x40010000

08005820 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	f023 0210 	bic.w	r2, r3, #16
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800584e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	021b      	lsls	r3, r3, #8
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f023 0320 	bic.w	r3, r3, #32
 800586a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	4313      	orrs	r3, r2
 8005876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a1e      	ldr	r2, [pc, #120]	@ (80058f4 <TIM_OC2_SetConfig+0xd4>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d10d      	bne.n	800589c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800589a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a15      	ldr	r2, [pc, #84]	@ (80058f4 <TIM_OC2_SetConfig+0xd4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d113      	bne.n	80058cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	4313      	orrs	r3, r2
 80058be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	621a      	str	r2, [r3, #32]
}
 80058e6:	bf00      	nop
 80058e8:	371c      	adds	r7, #28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	40010000 	.word	0x40010000

080058f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0303 	bic.w	r3, r3, #3
 800592e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a1d      	ldr	r2, [pc, #116]	@ (80059c8 <TIM_OC3_SetConfig+0xd0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d10d      	bne.n	8005972 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800595c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	021b      	lsls	r3, r3, #8
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a14      	ldr	r2, [pc, #80]	@ (80059c8 <TIM_OC3_SetConfig+0xd0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d113      	bne.n	80059a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	011b      	lsls	r3, r3, #4
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4313      	orrs	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	4313      	orrs	r3, r2
 80059a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	621a      	str	r2, [r3, #32]
}
 80059bc:	bf00      	nop
 80059be:	371c      	adds	r7, #28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	40010000 	.word	0x40010000

080059cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	021b      	lsls	r3, r3, #8
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	031b      	lsls	r3, r3, #12
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a10      	ldr	r2, [pc, #64]	@ (8005a68 <TIM_OC4_SetConfig+0x9c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d109      	bne.n	8005a40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	019b      	lsls	r3, r3, #6
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	621a      	str	r2, [r3, #32]
}
 8005a5a:	bf00      	nop
 8005a5c:	371c      	adds	r7, #28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	40010000 	.word	0x40010000

08005a6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f003 031f 	and.w	r3, r3, #31
 8005a7e:	2201      	movs	r2, #1
 8005a80:	fa02 f303 	lsl.w	r3, r2, r3
 8005a84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a1a      	ldr	r2, [r3, #32]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	401a      	ands	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a1a      	ldr	r2, [r3, #32]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f003 031f 	and.w	r3, r3, #31
 8005a9e:	6879      	ldr	r1, [r7, #4]
 8005aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	621a      	str	r2, [r3, #32]
}
 8005aaa:	bf00      	nop
 8005aac:	371c      	adds	r7, #28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e050      	b.n	8005b72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005af6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d018      	beq.n	8005b46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b1c:	d013      	beq.n	8005b46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a18      	ldr	r2, [pc, #96]	@ (8005b84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d00e      	beq.n	8005b46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a16      	ldr	r2, [pc, #88]	@ (8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d009      	beq.n	8005b46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a15      	ldr	r2, [pc, #84]	@ (8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d004      	beq.n	8005b46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a13      	ldr	r2, [pc, #76]	@ (8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d10c      	bne.n	8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	40010000 	.word	0x40010000
 8005b84:	40000400 	.word	0x40000400
 8005b88:	40000800 	.word	0x40000800
 8005b8c:	40000c00 	.word	0x40000c00
 8005b90:	40014000 	.word	0x40014000

08005b94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e03d      	b.n	8005c2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <siprintf>:
 8005c38:	b40e      	push	{r1, r2, r3}
 8005c3a:	b510      	push	{r4, lr}
 8005c3c:	b09d      	sub	sp, #116	@ 0x74
 8005c3e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005c40:	9002      	str	r0, [sp, #8]
 8005c42:	9006      	str	r0, [sp, #24]
 8005c44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005c48:	480a      	ldr	r0, [pc, #40]	@ (8005c74 <siprintf+0x3c>)
 8005c4a:	9107      	str	r1, [sp, #28]
 8005c4c:	9104      	str	r1, [sp, #16]
 8005c4e:	490a      	ldr	r1, [pc, #40]	@ (8005c78 <siprintf+0x40>)
 8005c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c54:	9105      	str	r1, [sp, #20]
 8005c56:	2400      	movs	r4, #0
 8005c58:	a902      	add	r1, sp, #8
 8005c5a:	6800      	ldr	r0, [r0, #0]
 8005c5c:	9301      	str	r3, [sp, #4]
 8005c5e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005c60:	f000 f89c 	bl	8005d9c <_svfiprintf_r>
 8005c64:	9b02      	ldr	r3, [sp, #8]
 8005c66:	701c      	strb	r4, [r3, #0]
 8005c68:	b01d      	add	sp, #116	@ 0x74
 8005c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c6e:	b003      	add	sp, #12
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	20000270 	.word	0x20000270
 8005c78:	ffff0208 	.word	0xffff0208

08005c7c <memset>:
 8005c7c:	4402      	add	r2, r0
 8005c7e:	4603      	mov	r3, r0
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d100      	bne.n	8005c86 <memset+0xa>
 8005c84:	4770      	bx	lr
 8005c86:	f803 1b01 	strb.w	r1, [r3], #1
 8005c8a:	e7f9      	b.n	8005c80 <memset+0x4>

08005c8c <__errno>:
 8005c8c:	4b01      	ldr	r3, [pc, #4]	@ (8005c94 <__errno+0x8>)
 8005c8e:	6818      	ldr	r0, [r3, #0]
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	20000270 	.word	0x20000270

08005c98 <__libc_init_array>:
 8005c98:	b570      	push	{r4, r5, r6, lr}
 8005c9a:	4d0d      	ldr	r5, [pc, #52]	@ (8005cd0 <__libc_init_array+0x38>)
 8005c9c:	4c0d      	ldr	r4, [pc, #52]	@ (8005cd4 <__libc_init_array+0x3c>)
 8005c9e:	1b64      	subs	r4, r4, r5
 8005ca0:	10a4      	asrs	r4, r4, #2
 8005ca2:	2600      	movs	r6, #0
 8005ca4:	42a6      	cmp	r6, r4
 8005ca6:	d109      	bne.n	8005cbc <__libc_init_array+0x24>
 8005ca8:	4d0b      	ldr	r5, [pc, #44]	@ (8005cd8 <__libc_init_array+0x40>)
 8005caa:	4c0c      	ldr	r4, [pc, #48]	@ (8005cdc <__libc_init_array+0x44>)
 8005cac:	f000 fc64 	bl	8006578 <_init>
 8005cb0:	1b64      	subs	r4, r4, r5
 8005cb2:	10a4      	asrs	r4, r4, #2
 8005cb4:	2600      	movs	r6, #0
 8005cb6:	42a6      	cmp	r6, r4
 8005cb8:	d105      	bne.n	8005cc6 <__libc_init_array+0x2e>
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
 8005cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc0:	4798      	blx	r3
 8005cc2:	3601      	adds	r6, #1
 8005cc4:	e7ee      	b.n	8005ca4 <__libc_init_array+0xc>
 8005cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cca:	4798      	blx	r3
 8005ccc:	3601      	adds	r6, #1
 8005cce:	e7f2      	b.n	8005cb6 <__libc_init_array+0x1e>
 8005cd0:	08006714 	.word	0x08006714
 8005cd4:	08006714 	.word	0x08006714
 8005cd8:	08006714 	.word	0x08006714
 8005cdc:	08006718 	.word	0x08006718

08005ce0 <__retarget_lock_acquire_recursive>:
 8005ce0:	4770      	bx	lr

08005ce2 <__retarget_lock_release_recursive>:
 8005ce2:	4770      	bx	lr

08005ce4 <__ssputs_r>:
 8005ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce8:	688e      	ldr	r6, [r1, #8]
 8005cea:	461f      	mov	r7, r3
 8005cec:	42be      	cmp	r6, r7
 8005cee:	680b      	ldr	r3, [r1, #0]
 8005cf0:	4682      	mov	sl, r0
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	4690      	mov	r8, r2
 8005cf6:	d82d      	bhi.n	8005d54 <__ssputs_r+0x70>
 8005cf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005cfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d00:	d026      	beq.n	8005d50 <__ssputs_r+0x6c>
 8005d02:	6965      	ldr	r5, [r4, #20]
 8005d04:	6909      	ldr	r1, [r1, #16]
 8005d06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d0a:	eba3 0901 	sub.w	r9, r3, r1
 8005d0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d12:	1c7b      	adds	r3, r7, #1
 8005d14:	444b      	add	r3, r9
 8005d16:	106d      	asrs	r5, r5, #1
 8005d18:	429d      	cmp	r5, r3
 8005d1a:	bf38      	it	cc
 8005d1c:	461d      	movcc	r5, r3
 8005d1e:	0553      	lsls	r3, r2, #21
 8005d20:	d527      	bpl.n	8005d72 <__ssputs_r+0x8e>
 8005d22:	4629      	mov	r1, r5
 8005d24:	f000 f958 	bl	8005fd8 <_malloc_r>
 8005d28:	4606      	mov	r6, r0
 8005d2a:	b360      	cbz	r0, 8005d86 <__ssputs_r+0xa2>
 8005d2c:	6921      	ldr	r1, [r4, #16]
 8005d2e:	464a      	mov	r2, r9
 8005d30:	f000 fbc2 	bl	80064b8 <memcpy>
 8005d34:	89a3      	ldrh	r3, [r4, #12]
 8005d36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d3e:	81a3      	strh	r3, [r4, #12]
 8005d40:	6126      	str	r6, [r4, #16]
 8005d42:	6165      	str	r5, [r4, #20]
 8005d44:	444e      	add	r6, r9
 8005d46:	eba5 0509 	sub.w	r5, r5, r9
 8005d4a:	6026      	str	r6, [r4, #0]
 8005d4c:	60a5      	str	r5, [r4, #8]
 8005d4e:	463e      	mov	r6, r7
 8005d50:	42be      	cmp	r6, r7
 8005d52:	d900      	bls.n	8005d56 <__ssputs_r+0x72>
 8005d54:	463e      	mov	r6, r7
 8005d56:	6820      	ldr	r0, [r4, #0]
 8005d58:	4632      	mov	r2, r6
 8005d5a:	4641      	mov	r1, r8
 8005d5c:	f000 fb82 	bl	8006464 <memmove>
 8005d60:	68a3      	ldr	r3, [r4, #8]
 8005d62:	1b9b      	subs	r3, r3, r6
 8005d64:	60a3      	str	r3, [r4, #8]
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	4433      	add	r3, r6
 8005d6a:	6023      	str	r3, [r4, #0]
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d72:	462a      	mov	r2, r5
 8005d74:	f000 fb48 	bl	8006408 <_realloc_r>
 8005d78:	4606      	mov	r6, r0
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d1e0      	bne.n	8005d40 <__ssputs_r+0x5c>
 8005d7e:	6921      	ldr	r1, [r4, #16]
 8005d80:	4650      	mov	r0, sl
 8005d82:	f000 fba7 	bl	80064d4 <_free_r>
 8005d86:	230c      	movs	r3, #12
 8005d88:	f8ca 3000 	str.w	r3, [sl]
 8005d8c:	89a3      	ldrh	r3, [r4, #12]
 8005d8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d92:	81a3      	strh	r3, [r4, #12]
 8005d94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d98:	e7e9      	b.n	8005d6e <__ssputs_r+0x8a>
	...

08005d9c <_svfiprintf_r>:
 8005d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da0:	4698      	mov	r8, r3
 8005da2:	898b      	ldrh	r3, [r1, #12]
 8005da4:	061b      	lsls	r3, r3, #24
 8005da6:	b09d      	sub	sp, #116	@ 0x74
 8005da8:	4607      	mov	r7, r0
 8005daa:	460d      	mov	r5, r1
 8005dac:	4614      	mov	r4, r2
 8005dae:	d510      	bpl.n	8005dd2 <_svfiprintf_r+0x36>
 8005db0:	690b      	ldr	r3, [r1, #16]
 8005db2:	b973      	cbnz	r3, 8005dd2 <_svfiprintf_r+0x36>
 8005db4:	2140      	movs	r1, #64	@ 0x40
 8005db6:	f000 f90f 	bl	8005fd8 <_malloc_r>
 8005dba:	6028      	str	r0, [r5, #0]
 8005dbc:	6128      	str	r0, [r5, #16]
 8005dbe:	b930      	cbnz	r0, 8005dce <_svfiprintf_r+0x32>
 8005dc0:	230c      	movs	r3, #12
 8005dc2:	603b      	str	r3, [r7, #0]
 8005dc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005dc8:	b01d      	add	sp, #116	@ 0x74
 8005dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dce:	2340      	movs	r3, #64	@ 0x40
 8005dd0:	616b      	str	r3, [r5, #20]
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dd6:	2320      	movs	r3, #32
 8005dd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ddc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005de0:	2330      	movs	r3, #48	@ 0x30
 8005de2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005f80 <_svfiprintf_r+0x1e4>
 8005de6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005dea:	f04f 0901 	mov.w	r9, #1
 8005dee:	4623      	mov	r3, r4
 8005df0:	469a      	mov	sl, r3
 8005df2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005df6:	b10a      	cbz	r2, 8005dfc <_svfiprintf_r+0x60>
 8005df8:	2a25      	cmp	r2, #37	@ 0x25
 8005dfa:	d1f9      	bne.n	8005df0 <_svfiprintf_r+0x54>
 8005dfc:	ebba 0b04 	subs.w	fp, sl, r4
 8005e00:	d00b      	beq.n	8005e1a <_svfiprintf_r+0x7e>
 8005e02:	465b      	mov	r3, fp
 8005e04:	4622      	mov	r2, r4
 8005e06:	4629      	mov	r1, r5
 8005e08:	4638      	mov	r0, r7
 8005e0a:	f7ff ff6b 	bl	8005ce4 <__ssputs_r>
 8005e0e:	3001      	adds	r0, #1
 8005e10:	f000 80a7 	beq.w	8005f62 <_svfiprintf_r+0x1c6>
 8005e14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e16:	445a      	add	r2, fp
 8005e18:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 809f 	beq.w	8005f62 <_svfiprintf_r+0x1c6>
 8005e24:	2300      	movs	r3, #0
 8005e26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e2e:	f10a 0a01 	add.w	sl, sl, #1
 8005e32:	9304      	str	r3, [sp, #16]
 8005e34:	9307      	str	r3, [sp, #28]
 8005e36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e3c:	4654      	mov	r4, sl
 8005e3e:	2205      	movs	r2, #5
 8005e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e44:	484e      	ldr	r0, [pc, #312]	@ (8005f80 <_svfiprintf_r+0x1e4>)
 8005e46:	f7fa f9cb 	bl	80001e0 <memchr>
 8005e4a:	9a04      	ldr	r2, [sp, #16]
 8005e4c:	b9d8      	cbnz	r0, 8005e86 <_svfiprintf_r+0xea>
 8005e4e:	06d0      	lsls	r0, r2, #27
 8005e50:	bf44      	itt	mi
 8005e52:	2320      	movmi	r3, #32
 8005e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e58:	0711      	lsls	r1, r2, #28
 8005e5a:	bf44      	itt	mi
 8005e5c:	232b      	movmi	r3, #43	@ 0x2b
 8005e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e62:	f89a 3000 	ldrb.w	r3, [sl]
 8005e66:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e68:	d015      	beq.n	8005e96 <_svfiprintf_r+0xfa>
 8005e6a:	9a07      	ldr	r2, [sp, #28]
 8005e6c:	4654      	mov	r4, sl
 8005e6e:	2000      	movs	r0, #0
 8005e70:	f04f 0c0a 	mov.w	ip, #10
 8005e74:	4621      	mov	r1, r4
 8005e76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e7a:	3b30      	subs	r3, #48	@ 0x30
 8005e7c:	2b09      	cmp	r3, #9
 8005e7e:	d94b      	bls.n	8005f18 <_svfiprintf_r+0x17c>
 8005e80:	b1b0      	cbz	r0, 8005eb0 <_svfiprintf_r+0x114>
 8005e82:	9207      	str	r2, [sp, #28]
 8005e84:	e014      	b.n	8005eb0 <_svfiprintf_r+0x114>
 8005e86:	eba0 0308 	sub.w	r3, r0, r8
 8005e8a:	fa09 f303 	lsl.w	r3, r9, r3
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	9304      	str	r3, [sp, #16]
 8005e92:	46a2      	mov	sl, r4
 8005e94:	e7d2      	b.n	8005e3c <_svfiprintf_r+0xa0>
 8005e96:	9b03      	ldr	r3, [sp, #12]
 8005e98:	1d19      	adds	r1, r3, #4
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	9103      	str	r1, [sp, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bfbb      	ittet	lt
 8005ea2:	425b      	neglt	r3, r3
 8005ea4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ea8:	9307      	strge	r3, [sp, #28]
 8005eaa:	9307      	strlt	r3, [sp, #28]
 8005eac:	bfb8      	it	lt
 8005eae:	9204      	strlt	r2, [sp, #16]
 8005eb0:	7823      	ldrb	r3, [r4, #0]
 8005eb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005eb4:	d10a      	bne.n	8005ecc <_svfiprintf_r+0x130>
 8005eb6:	7863      	ldrb	r3, [r4, #1]
 8005eb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005eba:	d132      	bne.n	8005f22 <_svfiprintf_r+0x186>
 8005ebc:	9b03      	ldr	r3, [sp, #12]
 8005ebe:	1d1a      	adds	r2, r3, #4
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	9203      	str	r2, [sp, #12]
 8005ec4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ec8:	3402      	adds	r4, #2
 8005eca:	9305      	str	r3, [sp, #20]
 8005ecc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005f90 <_svfiprintf_r+0x1f4>
 8005ed0:	7821      	ldrb	r1, [r4, #0]
 8005ed2:	2203      	movs	r2, #3
 8005ed4:	4650      	mov	r0, sl
 8005ed6:	f7fa f983 	bl	80001e0 <memchr>
 8005eda:	b138      	cbz	r0, 8005eec <_svfiprintf_r+0x150>
 8005edc:	9b04      	ldr	r3, [sp, #16]
 8005ede:	eba0 000a 	sub.w	r0, r0, sl
 8005ee2:	2240      	movs	r2, #64	@ 0x40
 8005ee4:	4082      	lsls	r2, r0
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	3401      	adds	r4, #1
 8005eea:	9304      	str	r3, [sp, #16]
 8005eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef0:	4824      	ldr	r0, [pc, #144]	@ (8005f84 <_svfiprintf_r+0x1e8>)
 8005ef2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ef6:	2206      	movs	r2, #6
 8005ef8:	f7fa f972 	bl	80001e0 <memchr>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d036      	beq.n	8005f6e <_svfiprintf_r+0x1d2>
 8005f00:	4b21      	ldr	r3, [pc, #132]	@ (8005f88 <_svfiprintf_r+0x1ec>)
 8005f02:	bb1b      	cbnz	r3, 8005f4c <_svfiprintf_r+0x1b0>
 8005f04:	9b03      	ldr	r3, [sp, #12]
 8005f06:	3307      	adds	r3, #7
 8005f08:	f023 0307 	bic.w	r3, r3, #7
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	9303      	str	r3, [sp, #12]
 8005f10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f12:	4433      	add	r3, r6
 8005f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f16:	e76a      	b.n	8005dee <_svfiprintf_r+0x52>
 8005f18:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	2001      	movs	r0, #1
 8005f20:	e7a8      	b.n	8005e74 <_svfiprintf_r+0xd8>
 8005f22:	2300      	movs	r3, #0
 8005f24:	3401      	adds	r4, #1
 8005f26:	9305      	str	r3, [sp, #20]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	f04f 0c0a 	mov.w	ip, #10
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f34:	3a30      	subs	r2, #48	@ 0x30
 8005f36:	2a09      	cmp	r2, #9
 8005f38:	d903      	bls.n	8005f42 <_svfiprintf_r+0x1a6>
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0c6      	beq.n	8005ecc <_svfiprintf_r+0x130>
 8005f3e:	9105      	str	r1, [sp, #20]
 8005f40:	e7c4      	b.n	8005ecc <_svfiprintf_r+0x130>
 8005f42:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f46:	4604      	mov	r4, r0
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e7f0      	b.n	8005f2e <_svfiprintf_r+0x192>
 8005f4c:	ab03      	add	r3, sp, #12
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	462a      	mov	r2, r5
 8005f52:	4b0e      	ldr	r3, [pc, #56]	@ (8005f8c <_svfiprintf_r+0x1f0>)
 8005f54:	a904      	add	r1, sp, #16
 8005f56:	4638      	mov	r0, r7
 8005f58:	f3af 8000 	nop.w
 8005f5c:	1c42      	adds	r2, r0, #1
 8005f5e:	4606      	mov	r6, r0
 8005f60:	d1d6      	bne.n	8005f10 <_svfiprintf_r+0x174>
 8005f62:	89ab      	ldrh	r3, [r5, #12]
 8005f64:	065b      	lsls	r3, r3, #25
 8005f66:	f53f af2d 	bmi.w	8005dc4 <_svfiprintf_r+0x28>
 8005f6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f6c:	e72c      	b.n	8005dc8 <_svfiprintf_r+0x2c>
 8005f6e:	ab03      	add	r3, sp, #12
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	462a      	mov	r2, r5
 8005f74:	4b05      	ldr	r3, [pc, #20]	@ (8005f8c <_svfiprintf_r+0x1f0>)
 8005f76:	a904      	add	r1, sp, #16
 8005f78:	4638      	mov	r0, r7
 8005f7a:	f000 f91b 	bl	80061b4 <_printf_i>
 8005f7e:	e7ed      	b.n	8005f5c <_svfiprintf_r+0x1c0>
 8005f80:	080066d8 	.word	0x080066d8
 8005f84:	080066e2 	.word	0x080066e2
 8005f88:	00000000 	.word	0x00000000
 8005f8c:	08005ce5 	.word	0x08005ce5
 8005f90:	080066de 	.word	0x080066de

08005f94 <sbrk_aligned>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	4e0f      	ldr	r6, [pc, #60]	@ (8005fd4 <sbrk_aligned+0x40>)
 8005f98:	460c      	mov	r4, r1
 8005f9a:	6831      	ldr	r1, [r6, #0]
 8005f9c:	4605      	mov	r5, r0
 8005f9e:	b911      	cbnz	r1, 8005fa6 <sbrk_aligned+0x12>
 8005fa0:	f000 fa7a 	bl	8006498 <_sbrk_r>
 8005fa4:	6030      	str	r0, [r6, #0]
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f000 fa75 	bl	8006498 <_sbrk_r>
 8005fae:	1c43      	adds	r3, r0, #1
 8005fb0:	d103      	bne.n	8005fba <sbrk_aligned+0x26>
 8005fb2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	bd70      	pop	{r4, r5, r6, pc}
 8005fba:	1cc4      	adds	r4, r0, #3
 8005fbc:	f024 0403 	bic.w	r4, r4, #3
 8005fc0:	42a0      	cmp	r0, r4
 8005fc2:	d0f8      	beq.n	8005fb6 <sbrk_aligned+0x22>
 8005fc4:	1a21      	subs	r1, r4, r0
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	f000 fa66 	bl	8006498 <_sbrk_r>
 8005fcc:	3001      	adds	r0, #1
 8005fce:	d1f2      	bne.n	8005fb6 <sbrk_aligned+0x22>
 8005fd0:	e7ef      	b.n	8005fb2 <sbrk_aligned+0x1e>
 8005fd2:	bf00      	nop
 8005fd4:	200006a0 	.word	0x200006a0

08005fd8 <_malloc_r>:
 8005fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fdc:	1ccd      	adds	r5, r1, #3
 8005fde:	f025 0503 	bic.w	r5, r5, #3
 8005fe2:	3508      	adds	r5, #8
 8005fe4:	2d0c      	cmp	r5, #12
 8005fe6:	bf38      	it	cc
 8005fe8:	250c      	movcc	r5, #12
 8005fea:	2d00      	cmp	r5, #0
 8005fec:	4606      	mov	r6, r0
 8005fee:	db01      	blt.n	8005ff4 <_malloc_r+0x1c>
 8005ff0:	42a9      	cmp	r1, r5
 8005ff2:	d904      	bls.n	8005ffe <_malloc_r+0x26>
 8005ff4:	230c      	movs	r3, #12
 8005ff6:	6033      	str	r3, [r6, #0]
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ffe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060d4 <_malloc_r+0xfc>
 8006002:	f000 f9f5 	bl	80063f0 <__malloc_lock>
 8006006:	f8d8 3000 	ldr.w	r3, [r8]
 800600a:	461c      	mov	r4, r3
 800600c:	bb44      	cbnz	r4, 8006060 <_malloc_r+0x88>
 800600e:	4629      	mov	r1, r5
 8006010:	4630      	mov	r0, r6
 8006012:	f7ff ffbf 	bl	8005f94 <sbrk_aligned>
 8006016:	1c43      	adds	r3, r0, #1
 8006018:	4604      	mov	r4, r0
 800601a:	d158      	bne.n	80060ce <_malloc_r+0xf6>
 800601c:	f8d8 4000 	ldr.w	r4, [r8]
 8006020:	4627      	mov	r7, r4
 8006022:	2f00      	cmp	r7, #0
 8006024:	d143      	bne.n	80060ae <_malloc_r+0xd6>
 8006026:	2c00      	cmp	r4, #0
 8006028:	d04b      	beq.n	80060c2 <_malloc_r+0xea>
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	4639      	mov	r1, r7
 800602e:	4630      	mov	r0, r6
 8006030:	eb04 0903 	add.w	r9, r4, r3
 8006034:	f000 fa30 	bl	8006498 <_sbrk_r>
 8006038:	4581      	cmp	r9, r0
 800603a:	d142      	bne.n	80060c2 <_malloc_r+0xea>
 800603c:	6821      	ldr	r1, [r4, #0]
 800603e:	1a6d      	subs	r5, r5, r1
 8006040:	4629      	mov	r1, r5
 8006042:	4630      	mov	r0, r6
 8006044:	f7ff ffa6 	bl	8005f94 <sbrk_aligned>
 8006048:	3001      	adds	r0, #1
 800604a:	d03a      	beq.n	80060c2 <_malloc_r+0xea>
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	442b      	add	r3, r5
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	f8d8 3000 	ldr.w	r3, [r8]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	bb62      	cbnz	r2, 80060b4 <_malloc_r+0xdc>
 800605a:	f8c8 7000 	str.w	r7, [r8]
 800605e:	e00f      	b.n	8006080 <_malloc_r+0xa8>
 8006060:	6822      	ldr	r2, [r4, #0]
 8006062:	1b52      	subs	r2, r2, r5
 8006064:	d420      	bmi.n	80060a8 <_malloc_r+0xd0>
 8006066:	2a0b      	cmp	r2, #11
 8006068:	d917      	bls.n	800609a <_malloc_r+0xc2>
 800606a:	1961      	adds	r1, r4, r5
 800606c:	42a3      	cmp	r3, r4
 800606e:	6025      	str	r5, [r4, #0]
 8006070:	bf18      	it	ne
 8006072:	6059      	strne	r1, [r3, #4]
 8006074:	6863      	ldr	r3, [r4, #4]
 8006076:	bf08      	it	eq
 8006078:	f8c8 1000 	streq.w	r1, [r8]
 800607c:	5162      	str	r2, [r4, r5]
 800607e:	604b      	str	r3, [r1, #4]
 8006080:	4630      	mov	r0, r6
 8006082:	f000 f9bb 	bl	80063fc <__malloc_unlock>
 8006086:	f104 000b 	add.w	r0, r4, #11
 800608a:	1d23      	adds	r3, r4, #4
 800608c:	f020 0007 	bic.w	r0, r0, #7
 8006090:	1ac2      	subs	r2, r0, r3
 8006092:	bf1c      	itt	ne
 8006094:	1a1b      	subne	r3, r3, r0
 8006096:	50a3      	strne	r3, [r4, r2]
 8006098:	e7af      	b.n	8005ffa <_malloc_r+0x22>
 800609a:	6862      	ldr	r2, [r4, #4]
 800609c:	42a3      	cmp	r3, r4
 800609e:	bf0c      	ite	eq
 80060a0:	f8c8 2000 	streq.w	r2, [r8]
 80060a4:	605a      	strne	r2, [r3, #4]
 80060a6:	e7eb      	b.n	8006080 <_malloc_r+0xa8>
 80060a8:	4623      	mov	r3, r4
 80060aa:	6864      	ldr	r4, [r4, #4]
 80060ac:	e7ae      	b.n	800600c <_malloc_r+0x34>
 80060ae:	463c      	mov	r4, r7
 80060b0:	687f      	ldr	r7, [r7, #4]
 80060b2:	e7b6      	b.n	8006022 <_malloc_r+0x4a>
 80060b4:	461a      	mov	r2, r3
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	42a3      	cmp	r3, r4
 80060ba:	d1fb      	bne.n	80060b4 <_malloc_r+0xdc>
 80060bc:	2300      	movs	r3, #0
 80060be:	6053      	str	r3, [r2, #4]
 80060c0:	e7de      	b.n	8006080 <_malloc_r+0xa8>
 80060c2:	230c      	movs	r3, #12
 80060c4:	6033      	str	r3, [r6, #0]
 80060c6:	4630      	mov	r0, r6
 80060c8:	f000 f998 	bl	80063fc <__malloc_unlock>
 80060cc:	e794      	b.n	8005ff8 <_malloc_r+0x20>
 80060ce:	6005      	str	r5, [r0, #0]
 80060d0:	e7d6      	b.n	8006080 <_malloc_r+0xa8>
 80060d2:	bf00      	nop
 80060d4:	200006a4 	.word	0x200006a4

080060d8 <_printf_common>:
 80060d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060dc:	4616      	mov	r6, r2
 80060de:	4698      	mov	r8, r3
 80060e0:	688a      	ldr	r2, [r1, #8]
 80060e2:	690b      	ldr	r3, [r1, #16]
 80060e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060e8:	4293      	cmp	r3, r2
 80060ea:	bfb8      	it	lt
 80060ec:	4613      	movlt	r3, r2
 80060ee:	6033      	str	r3, [r6, #0]
 80060f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060f4:	4607      	mov	r7, r0
 80060f6:	460c      	mov	r4, r1
 80060f8:	b10a      	cbz	r2, 80060fe <_printf_common+0x26>
 80060fa:	3301      	adds	r3, #1
 80060fc:	6033      	str	r3, [r6, #0]
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	0699      	lsls	r1, r3, #26
 8006102:	bf42      	ittt	mi
 8006104:	6833      	ldrmi	r3, [r6, #0]
 8006106:	3302      	addmi	r3, #2
 8006108:	6033      	strmi	r3, [r6, #0]
 800610a:	6825      	ldr	r5, [r4, #0]
 800610c:	f015 0506 	ands.w	r5, r5, #6
 8006110:	d106      	bne.n	8006120 <_printf_common+0x48>
 8006112:	f104 0a19 	add.w	sl, r4, #25
 8006116:	68e3      	ldr	r3, [r4, #12]
 8006118:	6832      	ldr	r2, [r6, #0]
 800611a:	1a9b      	subs	r3, r3, r2
 800611c:	42ab      	cmp	r3, r5
 800611e:	dc26      	bgt.n	800616e <_printf_common+0x96>
 8006120:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006124:	6822      	ldr	r2, [r4, #0]
 8006126:	3b00      	subs	r3, #0
 8006128:	bf18      	it	ne
 800612a:	2301      	movne	r3, #1
 800612c:	0692      	lsls	r2, r2, #26
 800612e:	d42b      	bmi.n	8006188 <_printf_common+0xb0>
 8006130:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006134:	4641      	mov	r1, r8
 8006136:	4638      	mov	r0, r7
 8006138:	47c8      	blx	r9
 800613a:	3001      	adds	r0, #1
 800613c:	d01e      	beq.n	800617c <_printf_common+0xa4>
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	6922      	ldr	r2, [r4, #16]
 8006142:	f003 0306 	and.w	r3, r3, #6
 8006146:	2b04      	cmp	r3, #4
 8006148:	bf02      	ittt	eq
 800614a:	68e5      	ldreq	r5, [r4, #12]
 800614c:	6833      	ldreq	r3, [r6, #0]
 800614e:	1aed      	subeq	r5, r5, r3
 8006150:	68a3      	ldr	r3, [r4, #8]
 8006152:	bf0c      	ite	eq
 8006154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006158:	2500      	movne	r5, #0
 800615a:	4293      	cmp	r3, r2
 800615c:	bfc4      	itt	gt
 800615e:	1a9b      	subgt	r3, r3, r2
 8006160:	18ed      	addgt	r5, r5, r3
 8006162:	2600      	movs	r6, #0
 8006164:	341a      	adds	r4, #26
 8006166:	42b5      	cmp	r5, r6
 8006168:	d11a      	bne.n	80061a0 <_printf_common+0xc8>
 800616a:	2000      	movs	r0, #0
 800616c:	e008      	b.n	8006180 <_printf_common+0xa8>
 800616e:	2301      	movs	r3, #1
 8006170:	4652      	mov	r2, sl
 8006172:	4641      	mov	r1, r8
 8006174:	4638      	mov	r0, r7
 8006176:	47c8      	blx	r9
 8006178:	3001      	adds	r0, #1
 800617a:	d103      	bne.n	8006184 <_printf_common+0xac>
 800617c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006184:	3501      	adds	r5, #1
 8006186:	e7c6      	b.n	8006116 <_printf_common+0x3e>
 8006188:	18e1      	adds	r1, r4, r3
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	2030      	movs	r0, #48	@ 0x30
 800618e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006192:	4422      	add	r2, r4
 8006194:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006198:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800619c:	3302      	adds	r3, #2
 800619e:	e7c7      	b.n	8006130 <_printf_common+0x58>
 80061a0:	2301      	movs	r3, #1
 80061a2:	4622      	mov	r2, r4
 80061a4:	4641      	mov	r1, r8
 80061a6:	4638      	mov	r0, r7
 80061a8:	47c8      	blx	r9
 80061aa:	3001      	adds	r0, #1
 80061ac:	d0e6      	beq.n	800617c <_printf_common+0xa4>
 80061ae:	3601      	adds	r6, #1
 80061b0:	e7d9      	b.n	8006166 <_printf_common+0x8e>
	...

080061b4 <_printf_i>:
 80061b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061b8:	7e0f      	ldrb	r7, [r1, #24]
 80061ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061bc:	2f78      	cmp	r7, #120	@ 0x78
 80061be:	4691      	mov	r9, r2
 80061c0:	4680      	mov	r8, r0
 80061c2:	460c      	mov	r4, r1
 80061c4:	469a      	mov	sl, r3
 80061c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061ca:	d807      	bhi.n	80061dc <_printf_i+0x28>
 80061cc:	2f62      	cmp	r7, #98	@ 0x62
 80061ce:	d80a      	bhi.n	80061e6 <_printf_i+0x32>
 80061d0:	2f00      	cmp	r7, #0
 80061d2:	f000 80d1 	beq.w	8006378 <_printf_i+0x1c4>
 80061d6:	2f58      	cmp	r7, #88	@ 0x58
 80061d8:	f000 80b8 	beq.w	800634c <_printf_i+0x198>
 80061dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061e4:	e03a      	b.n	800625c <_printf_i+0xa8>
 80061e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061ea:	2b15      	cmp	r3, #21
 80061ec:	d8f6      	bhi.n	80061dc <_printf_i+0x28>
 80061ee:	a101      	add	r1, pc, #4	@ (adr r1, 80061f4 <_printf_i+0x40>)
 80061f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061f4:	0800624d 	.word	0x0800624d
 80061f8:	08006261 	.word	0x08006261
 80061fc:	080061dd 	.word	0x080061dd
 8006200:	080061dd 	.word	0x080061dd
 8006204:	080061dd 	.word	0x080061dd
 8006208:	080061dd 	.word	0x080061dd
 800620c:	08006261 	.word	0x08006261
 8006210:	080061dd 	.word	0x080061dd
 8006214:	080061dd 	.word	0x080061dd
 8006218:	080061dd 	.word	0x080061dd
 800621c:	080061dd 	.word	0x080061dd
 8006220:	0800635f 	.word	0x0800635f
 8006224:	0800628b 	.word	0x0800628b
 8006228:	08006319 	.word	0x08006319
 800622c:	080061dd 	.word	0x080061dd
 8006230:	080061dd 	.word	0x080061dd
 8006234:	08006381 	.word	0x08006381
 8006238:	080061dd 	.word	0x080061dd
 800623c:	0800628b 	.word	0x0800628b
 8006240:	080061dd 	.word	0x080061dd
 8006244:	080061dd 	.word	0x080061dd
 8006248:	08006321 	.word	0x08006321
 800624c:	6833      	ldr	r3, [r6, #0]
 800624e:	1d1a      	adds	r2, r3, #4
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6032      	str	r2, [r6, #0]
 8006254:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006258:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800625c:	2301      	movs	r3, #1
 800625e:	e09c      	b.n	800639a <_printf_i+0x1e6>
 8006260:	6833      	ldr	r3, [r6, #0]
 8006262:	6820      	ldr	r0, [r4, #0]
 8006264:	1d19      	adds	r1, r3, #4
 8006266:	6031      	str	r1, [r6, #0]
 8006268:	0606      	lsls	r6, r0, #24
 800626a:	d501      	bpl.n	8006270 <_printf_i+0xbc>
 800626c:	681d      	ldr	r5, [r3, #0]
 800626e:	e003      	b.n	8006278 <_printf_i+0xc4>
 8006270:	0645      	lsls	r5, r0, #25
 8006272:	d5fb      	bpl.n	800626c <_printf_i+0xb8>
 8006274:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006278:	2d00      	cmp	r5, #0
 800627a:	da03      	bge.n	8006284 <_printf_i+0xd0>
 800627c:	232d      	movs	r3, #45	@ 0x2d
 800627e:	426d      	negs	r5, r5
 8006280:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006284:	4858      	ldr	r0, [pc, #352]	@ (80063e8 <_printf_i+0x234>)
 8006286:	230a      	movs	r3, #10
 8006288:	e011      	b.n	80062ae <_printf_i+0xfa>
 800628a:	6821      	ldr	r1, [r4, #0]
 800628c:	6833      	ldr	r3, [r6, #0]
 800628e:	0608      	lsls	r0, r1, #24
 8006290:	f853 5b04 	ldr.w	r5, [r3], #4
 8006294:	d402      	bmi.n	800629c <_printf_i+0xe8>
 8006296:	0649      	lsls	r1, r1, #25
 8006298:	bf48      	it	mi
 800629a:	b2ad      	uxthmi	r5, r5
 800629c:	2f6f      	cmp	r7, #111	@ 0x6f
 800629e:	4852      	ldr	r0, [pc, #328]	@ (80063e8 <_printf_i+0x234>)
 80062a0:	6033      	str	r3, [r6, #0]
 80062a2:	bf14      	ite	ne
 80062a4:	230a      	movne	r3, #10
 80062a6:	2308      	moveq	r3, #8
 80062a8:	2100      	movs	r1, #0
 80062aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062ae:	6866      	ldr	r6, [r4, #4]
 80062b0:	60a6      	str	r6, [r4, #8]
 80062b2:	2e00      	cmp	r6, #0
 80062b4:	db05      	blt.n	80062c2 <_printf_i+0x10e>
 80062b6:	6821      	ldr	r1, [r4, #0]
 80062b8:	432e      	orrs	r6, r5
 80062ba:	f021 0104 	bic.w	r1, r1, #4
 80062be:	6021      	str	r1, [r4, #0]
 80062c0:	d04b      	beq.n	800635a <_printf_i+0x1a6>
 80062c2:	4616      	mov	r6, r2
 80062c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80062c8:	fb03 5711 	mls	r7, r3, r1, r5
 80062cc:	5dc7      	ldrb	r7, [r0, r7]
 80062ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062d2:	462f      	mov	r7, r5
 80062d4:	42bb      	cmp	r3, r7
 80062d6:	460d      	mov	r5, r1
 80062d8:	d9f4      	bls.n	80062c4 <_printf_i+0x110>
 80062da:	2b08      	cmp	r3, #8
 80062dc:	d10b      	bne.n	80062f6 <_printf_i+0x142>
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	07df      	lsls	r7, r3, #31
 80062e2:	d508      	bpl.n	80062f6 <_printf_i+0x142>
 80062e4:	6923      	ldr	r3, [r4, #16]
 80062e6:	6861      	ldr	r1, [r4, #4]
 80062e8:	4299      	cmp	r1, r3
 80062ea:	bfde      	ittt	le
 80062ec:	2330      	movle	r3, #48	@ 0x30
 80062ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062f2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80062f6:	1b92      	subs	r2, r2, r6
 80062f8:	6122      	str	r2, [r4, #16]
 80062fa:	f8cd a000 	str.w	sl, [sp]
 80062fe:	464b      	mov	r3, r9
 8006300:	aa03      	add	r2, sp, #12
 8006302:	4621      	mov	r1, r4
 8006304:	4640      	mov	r0, r8
 8006306:	f7ff fee7 	bl	80060d8 <_printf_common>
 800630a:	3001      	adds	r0, #1
 800630c:	d14a      	bne.n	80063a4 <_printf_i+0x1f0>
 800630e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006312:	b004      	add	sp, #16
 8006314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	f043 0320 	orr.w	r3, r3, #32
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	4832      	ldr	r0, [pc, #200]	@ (80063ec <_printf_i+0x238>)
 8006322:	2778      	movs	r7, #120	@ 0x78
 8006324:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	6831      	ldr	r1, [r6, #0]
 800632c:	061f      	lsls	r7, r3, #24
 800632e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006332:	d402      	bmi.n	800633a <_printf_i+0x186>
 8006334:	065f      	lsls	r7, r3, #25
 8006336:	bf48      	it	mi
 8006338:	b2ad      	uxthmi	r5, r5
 800633a:	6031      	str	r1, [r6, #0]
 800633c:	07d9      	lsls	r1, r3, #31
 800633e:	bf44      	itt	mi
 8006340:	f043 0320 	orrmi.w	r3, r3, #32
 8006344:	6023      	strmi	r3, [r4, #0]
 8006346:	b11d      	cbz	r5, 8006350 <_printf_i+0x19c>
 8006348:	2310      	movs	r3, #16
 800634a:	e7ad      	b.n	80062a8 <_printf_i+0xf4>
 800634c:	4826      	ldr	r0, [pc, #152]	@ (80063e8 <_printf_i+0x234>)
 800634e:	e7e9      	b.n	8006324 <_printf_i+0x170>
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	f023 0320 	bic.w	r3, r3, #32
 8006356:	6023      	str	r3, [r4, #0]
 8006358:	e7f6      	b.n	8006348 <_printf_i+0x194>
 800635a:	4616      	mov	r6, r2
 800635c:	e7bd      	b.n	80062da <_printf_i+0x126>
 800635e:	6833      	ldr	r3, [r6, #0]
 8006360:	6825      	ldr	r5, [r4, #0]
 8006362:	6961      	ldr	r1, [r4, #20]
 8006364:	1d18      	adds	r0, r3, #4
 8006366:	6030      	str	r0, [r6, #0]
 8006368:	062e      	lsls	r6, r5, #24
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	d501      	bpl.n	8006372 <_printf_i+0x1be>
 800636e:	6019      	str	r1, [r3, #0]
 8006370:	e002      	b.n	8006378 <_printf_i+0x1c4>
 8006372:	0668      	lsls	r0, r5, #25
 8006374:	d5fb      	bpl.n	800636e <_printf_i+0x1ba>
 8006376:	8019      	strh	r1, [r3, #0]
 8006378:	2300      	movs	r3, #0
 800637a:	6123      	str	r3, [r4, #16]
 800637c:	4616      	mov	r6, r2
 800637e:	e7bc      	b.n	80062fa <_printf_i+0x146>
 8006380:	6833      	ldr	r3, [r6, #0]
 8006382:	1d1a      	adds	r2, r3, #4
 8006384:	6032      	str	r2, [r6, #0]
 8006386:	681e      	ldr	r6, [r3, #0]
 8006388:	6862      	ldr	r2, [r4, #4]
 800638a:	2100      	movs	r1, #0
 800638c:	4630      	mov	r0, r6
 800638e:	f7f9 ff27 	bl	80001e0 <memchr>
 8006392:	b108      	cbz	r0, 8006398 <_printf_i+0x1e4>
 8006394:	1b80      	subs	r0, r0, r6
 8006396:	6060      	str	r0, [r4, #4]
 8006398:	6863      	ldr	r3, [r4, #4]
 800639a:	6123      	str	r3, [r4, #16]
 800639c:	2300      	movs	r3, #0
 800639e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063a2:	e7aa      	b.n	80062fa <_printf_i+0x146>
 80063a4:	6923      	ldr	r3, [r4, #16]
 80063a6:	4632      	mov	r2, r6
 80063a8:	4649      	mov	r1, r9
 80063aa:	4640      	mov	r0, r8
 80063ac:	47d0      	blx	sl
 80063ae:	3001      	adds	r0, #1
 80063b0:	d0ad      	beq.n	800630e <_printf_i+0x15a>
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	079b      	lsls	r3, r3, #30
 80063b6:	d413      	bmi.n	80063e0 <_printf_i+0x22c>
 80063b8:	68e0      	ldr	r0, [r4, #12]
 80063ba:	9b03      	ldr	r3, [sp, #12]
 80063bc:	4298      	cmp	r0, r3
 80063be:	bfb8      	it	lt
 80063c0:	4618      	movlt	r0, r3
 80063c2:	e7a6      	b.n	8006312 <_printf_i+0x15e>
 80063c4:	2301      	movs	r3, #1
 80063c6:	4632      	mov	r2, r6
 80063c8:	4649      	mov	r1, r9
 80063ca:	4640      	mov	r0, r8
 80063cc:	47d0      	blx	sl
 80063ce:	3001      	adds	r0, #1
 80063d0:	d09d      	beq.n	800630e <_printf_i+0x15a>
 80063d2:	3501      	adds	r5, #1
 80063d4:	68e3      	ldr	r3, [r4, #12]
 80063d6:	9903      	ldr	r1, [sp, #12]
 80063d8:	1a5b      	subs	r3, r3, r1
 80063da:	42ab      	cmp	r3, r5
 80063dc:	dcf2      	bgt.n	80063c4 <_printf_i+0x210>
 80063de:	e7eb      	b.n	80063b8 <_printf_i+0x204>
 80063e0:	2500      	movs	r5, #0
 80063e2:	f104 0619 	add.w	r6, r4, #25
 80063e6:	e7f5      	b.n	80063d4 <_printf_i+0x220>
 80063e8:	080066e9 	.word	0x080066e9
 80063ec:	080066fa 	.word	0x080066fa

080063f0 <__malloc_lock>:
 80063f0:	4801      	ldr	r0, [pc, #4]	@ (80063f8 <__malloc_lock+0x8>)
 80063f2:	f7ff bc75 	b.w	8005ce0 <__retarget_lock_acquire_recursive>
 80063f6:	bf00      	nop
 80063f8:	2000069c 	.word	0x2000069c

080063fc <__malloc_unlock>:
 80063fc:	4801      	ldr	r0, [pc, #4]	@ (8006404 <__malloc_unlock+0x8>)
 80063fe:	f7ff bc70 	b.w	8005ce2 <__retarget_lock_release_recursive>
 8006402:	bf00      	nop
 8006404:	2000069c 	.word	0x2000069c

08006408 <_realloc_r>:
 8006408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800640c:	4607      	mov	r7, r0
 800640e:	4614      	mov	r4, r2
 8006410:	460d      	mov	r5, r1
 8006412:	b921      	cbnz	r1, 800641e <_realloc_r+0x16>
 8006414:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006418:	4611      	mov	r1, r2
 800641a:	f7ff bddd 	b.w	8005fd8 <_malloc_r>
 800641e:	b92a      	cbnz	r2, 800642c <_realloc_r+0x24>
 8006420:	f000 f858 	bl	80064d4 <_free_r>
 8006424:	4625      	mov	r5, r4
 8006426:	4628      	mov	r0, r5
 8006428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800642c:	f000 f89c 	bl	8006568 <_malloc_usable_size_r>
 8006430:	4284      	cmp	r4, r0
 8006432:	4606      	mov	r6, r0
 8006434:	d802      	bhi.n	800643c <_realloc_r+0x34>
 8006436:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800643a:	d8f4      	bhi.n	8006426 <_realloc_r+0x1e>
 800643c:	4621      	mov	r1, r4
 800643e:	4638      	mov	r0, r7
 8006440:	f7ff fdca 	bl	8005fd8 <_malloc_r>
 8006444:	4680      	mov	r8, r0
 8006446:	b908      	cbnz	r0, 800644c <_realloc_r+0x44>
 8006448:	4645      	mov	r5, r8
 800644a:	e7ec      	b.n	8006426 <_realloc_r+0x1e>
 800644c:	42b4      	cmp	r4, r6
 800644e:	4622      	mov	r2, r4
 8006450:	4629      	mov	r1, r5
 8006452:	bf28      	it	cs
 8006454:	4632      	movcs	r2, r6
 8006456:	f000 f82f 	bl	80064b8 <memcpy>
 800645a:	4629      	mov	r1, r5
 800645c:	4638      	mov	r0, r7
 800645e:	f000 f839 	bl	80064d4 <_free_r>
 8006462:	e7f1      	b.n	8006448 <_realloc_r+0x40>

08006464 <memmove>:
 8006464:	4288      	cmp	r0, r1
 8006466:	b510      	push	{r4, lr}
 8006468:	eb01 0402 	add.w	r4, r1, r2
 800646c:	d902      	bls.n	8006474 <memmove+0x10>
 800646e:	4284      	cmp	r4, r0
 8006470:	4623      	mov	r3, r4
 8006472:	d807      	bhi.n	8006484 <memmove+0x20>
 8006474:	1e43      	subs	r3, r0, #1
 8006476:	42a1      	cmp	r1, r4
 8006478:	d008      	beq.n	800648c <memmove+0x28>
 800647a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800647e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006482:	e7f8      	b.n	8006476 <memmove+0x12>
 8006484:	4402      	add	r2, r0
 8006486:	4601      	mov	r1, r0
 8006488:	428a      	cmp	r2, r1
 800648a:	d100      	bne.n	800648e <memmove+0x2a>
 800648c:	bd10      	pop	{r4, pc}
 800648e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006496:	e7f7      	b.n	8006488 <memmove+0x24>

08006498 <_sbrk_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	4d06      	ldr	r5, [pc, #24]	@ (80064b4 <_sbrk_r+0x1c>)
 800649c:	2300      	movs	r3, #0
 800649e:	4604      	mov	r4, r0
 80064a0:	4608      	mov	r0, r1
 80064a2:	602b      	str	r3, [r5, #0]
 80064a4:	f7fc f8f2 	bl	800268c <_sbrk>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d102      	bne.n	80064b2 <_sbrk_r+0x1a>
 80064ac:	682b      	ldr	r3, [r5, #0]
 80064ae:	b103      	cbz	r3, 80064b2 <_sbrk_r+0x1a>
 80064b0:	6023      	str	r3, [r4, #0]
 80064b2:	bd38      	pop	{r3, r4, r5, pc}
 80064b4:	200006a8 	.word	0x200006a8

080064b8 <memcpy>:
 80064b8:	440a      	add	r2, r1
 80064ba:	4291      	cmp	r1, r2
 80064bc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80064c0:	d100      	bne.n	80064c4 <memcpy+0xc>
 80064c2:	4770      	bx	lr
 80064c4:	b510      	push	{r4, lr}
 80064c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064ce:	4291      	cmp	r1, r2
 80064d0:	d1f9      	bne.n	80064c6 <memcpy+0xe>
 80064d2:	bd10      	pop	{r4, pc}

080064d4 <_free_r>:
 80064d4:	b538      	push	{r3, r4, r5, lr}
 80064d6:	4605      	mov	r5, r0
 80064d8:	2900      	cmp	r1, #0
 80064da:	d041      	beq.n	8006560 <_free_r+0x8c>
 80064dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064e0:	1f0c      	subs	r4, r1, #4
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	bfb8      	it	lt
 80064e6:	18e4      	addlt	r4, r4, r3
 80064e8:	f7ff ff82 	bl	80063f0 <__malloc_lock>
 80064ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006564 <_free_r+0x90>)
 80064ee:	6813      	ldr	r3, [r2, #0]
 80064f0:	b933      	cbnz	r3, 8006500 <_free_r+0x2c>
 80064f2:	6063      	str	r3, [r4, #4]
 80064f4:	6014      	str	r4, [r2, #0]
 80064f6:	4628      	mov	r0, r5
 80064f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064fc:	f7ff bf7e 	b.w	80063fc <__malloc_unlock>
 8006500:	42a3      	cmp	r3, r4
 8006502:	d908      	bls.n	8006516 <_free_r+0x42>
 8006504:	6820      	ldr	r0, [r4, #0]
 8006506:	1821      	adds	r1, r4, r0
 8006508:	428b      	cmp	r3, r1
 800650a:	bf01      	itttt	eq
 800650c:	6819      	ldreq	r1, [r3, #0]
 800650e:	685b      	ldreq	r3, [r3, #4]
 8006510:	1809      	addeq	r1, r1, r0
 8006512:	6021      	streq	r1, [r4, #0]
 8006514:	e7ed      	b.n	80064f2 <_free_r+0x1e>
 8006516:	461a      	mov	r2, r3
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	b10b      	cbz	r3, 8006520 <_free_r+0x4c>
 800651c:	42a3      	cmp	r3, r4
 800651e:	d9fa      	bls.n	8006516 <_free_r+0x42>
 8006520:	6811      	ldr	r1, [r2, #0]
 8006522:	1850      	adds	r0, r2, r1
 8006524:	42a0      	cmp	r0, r4
 8006526:	d10b      	bne.n	8006540 <_free_r+0x6c>
 8006528:	6820      	ldr	r0, [r4, #0]
 800652a:	4401      	add	r1, r0
 800652c:	1850      	adds	r0, r2, r1
 800652e:	4283      	cmp	r3, r0
 8006530:	6011      	str	r1, [r2, #0]
 8006532:	d1e0      	bne.n	80064f6 <_free_r+0x22>
 8006534:	6818      	ldr	r0, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	6053      	str	r3, [r2, #4]
 800653a:	4408      	add	r0, r1
 800653c:	6010      	str	r0, [r2, #0]
 800653e:	e7da      	b.n	80064f6 <_free_r+0x22>
 8006540:	d902      	bls.n	8006548 <_free_r+0x74>
 8006542:	230c      	movs	r3, #12
 8006544:	602b      	str	r3, [r5, #0]
 8006546:	e7d6      	b.n	80064f6 <_free_r+0x22>
 8006548:	6820      	ldr	r0, [r4, #0]
 800654a:	1821      	adds	r1, r4, r0
 800654c:	428b      	cmp	r3, r1
 800654e:	bf04      	itt	eq
 8006550:	6819      	ldreq	r1, [r3, #0]
 8006552:	685b      	ldreq	r3, [r3, #4]
 8006554:	6063      	str	r3, [r4, #4]
 8006556:	bf04      	itt	eq
 8006558:	1809      	addeq	r1, r1, r0
 800655a:	6021      	streq	r1, [r4, #0]
 800655c:	6054      	str	r4, [r2, #4]
 800655e:	e7ca      	b.n	80064f6 <_free_r+0x22>
 8006560:	bd38      	pop	{r3, r4, r5, pc}
 8006562:	bf00      	nop
 8006564:	200006a4 	.word	0x200006a4

08006568 <_malloc_usable_size_r>:
 8006568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800656c:	1f18      	subs	r0, r3, #4
 800656e:	2b00      	cmp	r3, #0
 8006570:	bfbc      	itt	lt
 8006572:	580b      	ldrlt	r3, [r1, r0]
 8006574:	18c0      	addlt	r0, r0, r3
 8006576:	4770      	bx	lr

08006578 <_init>:
 8006578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657a:	bf00      	nop
 800657c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800657e:	bc08      	pop	{r3}
 8006580:	469e      	mov	lr, r3
 8006582:	4770      	bx	lr

08006584 <_fini>:
 8006584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006586:	bf00      	nop
 8006588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800658a:	bc08      	pop	{r3}
 800658c:	469e      	mov	lr, r3
 800658e:	4770      	bx	lr
