
CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a2c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004bc4  08004bc4  00005bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004be4  08004be4  000061d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004be4  08004be4  00005be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bec  08004bec  000061d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bec  08004bec  00005bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bf0  08004bf0  00005bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08004bf4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  200001d8  08004dcc  000061d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08004dcc  00006464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d19  00000000  00000000  00006208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002741  00000000  00000000  00016f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00019668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be1  00000000  00000000  0001a5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d53  00000000  00000000  0001b189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d5a  00000000  00000000  00033edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a6f0  00000000  00000000  00047c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2326  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fa0  00000000  00000000  000e236c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e630c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001d8 	.word	0x200001d8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004bac 	.word	0x08004bac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001dc 	.word	0x200001dc
 80001d4:	08004bac 	.word	0x08004bac

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <adc_task_run>:

static uint16_t dma_buffer[4];

// A function to run the appropriate state of the task
void adc_task_run(ADCTask *adc_task)
{    // Check for a valid state
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
    if (adc_task->state >= 0 && adc_task->state < adc_task->num_states)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	db0f      	blt.n	8000534 <adc_task_run+0x30>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	429a      	cmp	r2, r3
 800051e:	da09      	bge.n	8000534 <adc_task_run+0x30>

    	// game_task is a pointer right now
    	// -> dereferences pointer and accesses class member in one step
    	// the same as (*ptr).member

    	adc_task->state_list[adc_task->state](adc_task);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	3306      	adds	r3, #6
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	4413      	add	r3, r2
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	4798      	blx	r3
    {

        while(1){}
    }

}
 8000532:	e000      	b.n	8000536 <adc_task_run+0x32>
        while(1){}
 8000534:	e7fe      	b.n	8000534 <adc_task_run+0x30>
}
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <adc_task_state_0_init>:

void adc_task_state_0_init(ADCTask *adc_task){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]

	adc_task->state = 1;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2201      	movs	r2, #1
 8000548:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(adc_task->hadc,
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	2204      	movs	r2, #4
 8000550:	4903      	ldr	r1, [pc, #12]	@ (8000560 <adc_task_state_0_init+0x24>)
 8000552:	4618      	mov	r0, r3
 8000554:	f001 fcce 	bl	8001ef4 <HAL_ADC_Start_DMA>
	                      (uint32_t*)dma_buffer,
	                      4);
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	200001f4 	.word	0x200001f4

08000564 <adc_task_state_1_read>:

void adc_task_state_1_read(ADCTask *adc_task){
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
//	}
//
//
//
//	HAL_ADC_Stop(adc_task->hadc);
	adc_task->red_photor_ptr->adc_val   = dma_buffer[0];
 800056c:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <adc_task_state_1_read+0x3c>)
 800056e:	881a      	ldrh	r2, [r3, #0]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	691b      	ldr	r3, [r3, #16]
 8000574:	60da      	str	r2, [r3, #12]
	adc_task->blue_photor_ptr->adc_val  = dma_buffer[1];
 8000576:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <adc_task_state_1_read+0x3c>)
 8000578:	885a      	ldrh	r2, [r3, #2]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	60da      	str	r2, [r3, #12]
	adc_task->blue_contr_ptr->adc_val   = dma_buffer[2];
 8000580:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <adc_task_state_1_read+0x3c>)
 8000582:	889a      	ldrh	r2, [r3, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	639a      	str	r2, [r3, #56]	@ 0x38
	adc_task->red_contr_ptr->adc_val    = dma_buffer[3];
 800058a:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <adc_task_state_1_read+0x3c>)
 800058c:	88da      	ldrh	r2, [r3, #6]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	639a      	str	r2, [r3, #56]	@ 0x38


}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	200001f4 	.word	0x200001f4

080005a4 <controller_task_state_0_init>:
}


// init stuff and zero pot
void controller_task_state_0_init(ControllerTask *controller_task)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	controller_task->prev_error = 0;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f04f 0200 	mov.w	r2, #0
 80005b2:	651a      	str	r2, [r3, #80]	@ 0x50

    enable(controller_task->motor);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 ff7f 	bl	80014bc <enable>

    controller_task->pot_zero = controller_task->adc_val;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005c2:	461a      	mov	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	615a      	str	r2, [r3, #20]

    controller_task->state = 1;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2201      	movs	r2, #1
 80005cc:	605a      	str	r2, [r3, #4]
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <controller_task_state_1_calc_vel>:
// run state for velocity controller based on pot input
void controller_task_state_1_calc_vel(ControllerTask *controller_task)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b090      	sub	sp, #64	@ 0x40
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	int32_t high_thres = controller_task->pot_zero + controller_task->ccw_deadzone;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	695a      	ldr	r2, [r3, #20]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005e8:	4413      	add	r3, r2
 80005ea:	637b      	str	r3, [r7, #52]	@ 0x34
	int32_t low_thres = controller_task->pot_zero - controller_task->cw_deadzone;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	695a      	ldr	r2, [r3, #20]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	633b      	str	r3, [r7, #48]	@ 0x30




    // calc vel des
    const float MAX_ADC = 4095.0f;
 80005f8:	4b6f      	ldr	r3, [pc, #444]	@ (80007b8 <controller_task_state_1_calc_vel+0x1e0>)
 80005fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const float MAX_VELOCITY = 8.0f;
 80005fc:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8000600:	62bb      	str	r3, [r7, #40]	@ 0x28

    int32_t adc_val_here = controller_task->adc_val;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000606:	627b      	str	r3, [r7, #36]	@ 0x24



    float desired_velocity = 0.0f;
 8000608:	f04f 0300 	mov.w	r3, #0
 800060c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (adc_val_here > high_thres){ //&& (adc_val_here+high_thres)<4095
 800060e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000612:	429a      	cmp	r2, r3
 8000614:	dd18      	ble.n	8000648 <controller_task_state_1_calc_vel+0x70>
    	adc_val_here += high_thres;
 8000616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800061a:	4413      	add	r3, r2
 800061c:	627b      	str	r3, [r7, #36]	@ 0x24
    	adc_val_here -= controller_task->pot_zero;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	627b      	str	r3, [r7, #36]	@ 0x24
        desired_velocity = ((float)adc_val_here / MAX_ADC) * MAX_VELOCITY;
 8000628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800062a:	ee07 3a90 	vmov	s15, r3
 800062e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000632:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800063a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800063e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000642:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8000646:	e01f      	b.n	8000688 <controller_task_state_1_calc_vel+0xb0>
    }
    else if (adc_val_here < low_thres){ // && (adc_val_here-low_thres)>0
 8000648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800064a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800064c:	429a      	cmp	r2, r3
 800064e:	da18      	bge.n	8000682 <controller_task_state_1_calc_vel+0xaa>
    	adc_val_here -= low_thres;
 8000650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	627b      	str	r3, [r7, #36]	@ 0x24
    	adc_val_here -= controller_task->pot_zero;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800065e:	1ad3      	subs	r3, r2, r3
 8000660:	627b      	str	r3, [r7, #36]	@ 0x24
		desired_velocity = ((float)adc_val_here / MAX_ADC) * MAX_VELOCITY;
 8000662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000664:	ee07 3a90 	vmov	s15, r3
 8000668:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800066c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000674:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800067c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8000680:	e002      	b.n	8000688 <controller_task_state_1_calc_vel+0xb0>
    }
    else {
        desired_velocity = 0.0f;
 8000682:	f04f 0300 	mov.w	r3, #0
 8000686:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // read encoder
    int32_t current_ticks = __HAL_TIM_GET_COUNTER(controller_task->htim_encoder);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000690:	623b      	str	r3, [r7, #32]
    int32_t delta_ticks = current_ticks - controller_task->prev_ticks;
 8000692:	6a3a      	ldr	r2, [r7, #32]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	61fb      	str	r3, [r7, #28]
    controller_task->prev_ticks = current_ticks;
 800069c:	6a3a      	ldr	r2, [r7, #32]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	625a      	str	r2, [r3, #36]	@ 0x24

    controller_task->current_time = __HAL_TIM_GET_COUNTER(controller_task->htim_dt);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	621a      	str	r2, [r3, #32]
    uint32_t dt_ticks = (controller_task->current_time >= controller_task->prev_time) ? // calcs time diff in ticks
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6a1a      	ldr	r2, [r3, #32]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	69db      	ldr	r3, [r3, #28]
    		(controller_task->current_time - controller_task->prev_time) :
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d305      	bcc.n	80006c6 <controller_task_state_1_calc_vel+0xee>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6a1a      	ldr	r2, [r3, #32]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	e005      	b.n	80006d2 <controller_task_state_1_calc_vel+0xfa>
			(0xFFFFFFFF - controller_task->prev_time + controller_task->current_time); // overflow
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6a1a      	ldr	r2, [r3, #32]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	1ad3      	subs	r3, r2, r3
    		(controller_task->current_time - controller_task->prev_time) :
 80006d0:	3b01      	subs	r3, #1
    uint32_t dt_ticks = (controller_task->current_time >= controller_task->prev_time) ? // calcs time diff in ticks
 80006d2:	61bb      	str	r3, [r7, #24]
    if (dt_ticks == 0) return;
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d06a      	beq.n	80007b0 <controller_task_state_1_calc_vel+0x1d8>
    float delta_time = dt_ticks / 1000.0f; // ms
 80006da:	69bb      	ldr	r3, [r7, #24]
 80006dc:	ee07 3a90 	vmov	s15, r3
 80006e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006e4:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80007bc <controller_task_state_1_calc_vel+0x1e4>
 80006e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006ec:	edc7 7a05 	vstr	s15, [r7, #20]

    // calc actual vel, error, derivative part
    float current_velocity = (float)delta_ticks / delta_time;
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	ee07 3a90 	vmov	s15, r3
 80006f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80006fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80006fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000702:	edc7 7a04 	vstr	s15, [r7, #16]
    float error = desired_velocity - current_velocity;
 8000706:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800070a:	edd7 7a04 	vldr	s15, [r7, #16]
 800070e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000712:	edc7 7a03 	vstr	s15, [r7, #12]
    float derivative = (error - controller_task->prev_error) / delta_time;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800071c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000720:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000724:	ed97 7a05 	vldr	s14, [r7, #20]
 8000728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800072c:	edc7 7a02 	vstr	s15, [r7, #8]
    controller_task->prev_error = error;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	651a      	str	r2, [r3, #80]	@ 0x50

    // calc control signal and do saturation stuff
    controller_task->control_signal = controller_task->k_p * error + controller_task->k_d * derivative;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800073c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800074a:	edd7 7a02 	vldr	s15, [r7, #8]
 800074e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	edc3 7a06 	vstr	s15, [r3, #24]
    float control_signal = controller_task->control_signal;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (control_signal > 100.0f) control_signal = 100.0f;
 8000762:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000766:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80007c0 <controller_task_state_1_calc_vel+0x1e8>
 800076a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800076e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000772:	dd02      	ble.n	800077a <controller_task_state_1_calc_vel+0x1a2>
 8000774:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <controller_task_state_1_calc_vel+0x1ec>)
 8000776:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000778:	e00a      	b.n	8000790 <controller_task_state_1_calc_vel+0x1b8>
    else if (control_signal < -100.0f) control_signal = -100.0f;
 800077a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800077e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80007c8 <controller_task_state_1_calc_vel+0x1f0>
 8000782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078a:	d501      	bpl.n	8000790 <controller_task_state_1_calc_vel+0x1b8>
 800078c:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <controller_task_state_1_calc_vel+0x1f4>)
 800078e:	63bb      	str	r3, [r7, #56]	@ 0x38

    // set duty on the motor
    set_duty(controller_task->motor, (int32_t)control_signal);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000794:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800079c:	ee17 1a90 	vmov	r1, s15
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 fdd3 	bl	800134c <set_duty>

    // remember the time that was used this time
    controller_task->prev_time = controller_task->current_time;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6a1a      	ldr	r2, [r3, #32]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	61da      	str	r2, [r3, #28]
 80007ae:	e000      	b.n	80007b2 <controller_task_state_1_calc_vel+0x1da>
    if (dt_ticks == 0) return;
 80007b0:	bf00      	nop
}
 80007b2:	3740      	adds	r7, #64	@ 0x40
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	457ff000 	.word	0x457ff000
 80007bc:	447a0000 	.word	0x447a0000
 80007c0:	42c80000 	.word	0x42c80000
 80007c4:	42c80000 	.word	0x42c80000
 80007c8:	c2c80000 	.word	0xc2c80000
 80007cc:	c2c80000 	.word	0xc2c80000

080007d0 <setup_encoder>:
#include "encoder_driver.h"
#include <stdio.h>
#include "stm32f4xx_hal.h"


void setup_encoder(encoder_t *p_enc){
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	p_enc->zero = __HAL_TIM_GET_COUNTER(p_enc->htim);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	695b      	ldr	r3, [r3, #20]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	601a      	str	r2, [r3, #0]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <read_encoder>:
void read_encoder(encoder_t *p_enc){
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

	uint32_t current_ticks = __HAL_TIM_GET_COUNTER(p_enc->htim);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000800:	60bb      	str	r3, [r7, #8]
	int32_t delta = current_ticks - p_enc->last_ticks;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	68db      	ldr	r3, [r3, #12]
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	60fb      	str	r3, [r7, #12]

	if (delta > (p_enc->ar + 1)/2){
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	3301      	adds	r3, #1
 8000812:	085a      	lsrs	r2, r3, #1
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	429a      	cmp	r2, r3
 8000818:	d206      	bcs.n	8000828 <read_encoder+0x38>
		delta -= p_enc->ar + 1;
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	3b01      	subs	r3, #1
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	e00c      	b.n	8000842 <read_encoder+0x52>
	}
	else if (delta < (-p_enc->ar-1)/2){
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	43db      	mvns	r3, r3
 800082e:	085a      	lsrs	r2, r3, #1
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	429a      	cmp	r2, r3
 8000834:	d905      	bls.n	8000842 <read_encoder+0x52>
		delta += p_enc->ar + 1;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	4413      	add	r3, r2
 800083e:	3301      	adds	r3, #1
 8000840:	60fb      	str	r3, [r7, #12]
	}

	p_enc->last_ticks = current_ticks;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	68ba      	ldr	r2, [r7, #8]
 8000846:	60da      	str	r2, [r3, #12]
	p_enc->ticks += delta;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689a      	ldr	r2, [r3, #8]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	441a      	add	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	609a      	str	r2, [r3, #8]


}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000864:	f001 fa6c 	bl	8001d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000868:	f000 f880 	bl	800096c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086c:	f000 fbbc 	bl	8000fe8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000870:	f000 fb9a 	bl	8000fa8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000874:	f000 f95e 	bl	8000b34 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000878:	f000 f98a 	bl	8000b90 <MX_TIM1_Init>
  MX_TIM3_Init();
 800087c:	f000 fa88 	bl	8000d90 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000880:	f000 fada 	bl	8000e38 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000884:	f000 fb3c 	bl	8000f00 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000888:	f000 fa2a 	bl	8000ce0 <MX_TIM2_Init>
  MX_ADC1_Init();
 800088c:	f000 f8d6 	bl	8000a3c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000890:	2100      	movs	r1, #0
 8000892:	482d      	ldr	r0, [pc, #180]	@ (8000948 <main+0xe8>)
 8000894:	f003 fb72 	bl	8003f7c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8000898:	2104      	movs	r1, #4
 800089a:	482b      	ldr	r0, [pc, #172]	@ (8000948 <main+0xe8>)
 800089c:	f003 fb6e 	bl	8003f7c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);
 80008a0:	2108      	movs	r1, #8
 80008a2:	4829      	ldr	r0, [pc, #164]	@ (8000948 <main+0xe8>)
 80008a4:	f003 fb6a 	bl	8003f7c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 80008a8:	210c      	movs	r1, #12
 80008aa:	4827      	ldr	r0, [pc, #156]	@ (8000948 <main+0xe8>)
 80008ac:	f003 fb66 	bl	8003f7c <HAL_TIM_PWM_Start_IT>

  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 80008b0:	2100      	movs	r1, #0
 80008b2:	4826      	ldr	r0, [pc, #152]	@ (800094c <main+0xec>)
 80008b4:	f003 fb62 	bl	8003f7c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 80008b8:	2104      	movs	r1, #4
 80008ba:	4824      	ldr	r0, [pc, #144]	@ (800094c <main+0xec>)
 80008bc:	f003 fb5e 	bl	8003f7c <HAL_TIM_PWM_Start_IT>

  HAL_TIM_Base_Start(&htim1);
 80008c0:	4821      	ldr	r0, [pc, #132]	@ (8000948 <main+0xe8>)
 80008c2:	f003 fab1 	bl	8003e28 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 80008c6:	4822      	ldr	r0, [pc, #136]	@ (8000950 <main+0xf0>)
 80008c8:	f003 faae 	bl	8003e28 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 80008cc:	481f      	ldr	r0, [pc, #124]	@ (800094c <main+0xec>)
 80008ce:	f003 faab 	bl	8003e28 <HAL_TIM_Base_Start>

  HAL_TIM_Encoder_Start(red_encoder.htim, TIM_CHANNEL_ALL);
 80008d2:	4b20      	ldr	r3, [pc, #128]	@ (8000954 <main+0xf4>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	213c      	movs	r1, #60	@ 0x3c
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 fcf3 	bl	80042c4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(blue_encoder.htim, TIM_CHANNEL_ALL);
 80008de:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <main+0xf8>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	213c      	movs	r1, #60	@ 0x3c
 80008e4:	4618      	mov	r0, r3
 80008e6:	f003 fced 	bl	80042c4 <HAL_TIM_Encoder_Start>

  enable(&mred);
 80008ea:	481c      	ldr	r0, [pc, #112]	@ (800095c <main+0xfc>)
 80008ec:	f000 fde6 	bl	80014bc <enable>
  enable(&mblue);
 80008f0:	481b      	ldr	r0, [pc, #108]	@ (8000960 <main+0x100>)
 80008f2:	f000 fde3 	bl	80014bc <enable>
  //
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2104      	movs	r1, #4
 80008fa:	481a      	ldr	r0, [pc, #104]	@ (8000964 <main+0x104>)
 80008fc:	f002 fcda 	bl	80032b4 <HAL_GPIO_WritePin>
  // sleep pins
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000900:	2201      	movs	r2, #1
 8000902:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000906:	4817      	ldr	r0, [pc, #92]	@ (8000964 <main+0x104>)
 8000908:	f002 fcd4 	bl	80032b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800090c:	2201      	movs	r2, #1
 800090e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000912:	4814      	ldr	r0, [pc, #80]	@ (8000964 <main+0x104>)
 8000914:	f002 fcce 	bl	80032b4 <HAL_GPIO_WritePin>
  adc_task_run(&adc_task);
 8000918:	4813      	ldr	r0, [pc, #76]	@ (8000968 <main+0x108>)
 800091a:	f7ff fdf3 	bl	8000504 <adc_task_run>
  HAL_Delay(2000); // 2 second delay to let stuff get set up
 800091e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000922:	f001 fa7f 	bl	8001e24 <HAL_Delay>
  calibration();
 8000926:	f000 fc43 	bl	80011b0 <calibration>
  HAL_Delay(1000);
 800092a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800092e:	f001 fa79 	bl	8001e24 <HAL_Delay>
  setup_encoder(&red_encoder);
 8000932:	4808      	ldr	r0, [pc, #32]	@ (8000954 <main+0xf4>)
 8000934:	f7ff ff4c 	bl	80007d0 <setup_encoder>
  setup_encoder(&blue_encoder);
 8000938:	4807      	ldr	r0, [pc, #28]	@ (8000958 <main+0xf8>)
 800093a:	f7ff ff49 	bl	80007d0 <setup_encoder>
	  //__HAL_TIM_SET_COMPARE(red_shoot_task.servo_tim, red_shoot_task.channel, a);
	  //__HAL_TIM_SET_COMPARE(blue_shoot_task.servo_tim, blue_shoot_task.channel, b);
	  //controller_task_run(&blue_controller_task);
	  //controller_task_run(&red_controller_task);
	  //add delay
	  HAL_Delay(1);
 800093e:	2001      	movs	r0, #1
 8000940:	f001 fa70 	bl	8001e24 <HAL_Delay>
 8000944:	e7fb      	b.n	800093e <main+0xde>
 8000946:	bf00      	nop
 8000948:	200002f8 	.word	0x200002f8
 800094c:	200003d0 	.word	0x200003d0
 8000950:	20000340 	.word	0x20000340
 8000954:	20000018 	.word	0x20000018
 8000958:	20000030 	.word	0x20000030
 800095c:	20000000 	.word	0x20000000
 8000960:	2000000c 	.word	0x2000000c
 8000964:	40020400 	.word	0x40020400
 8000968:	200001a8 	.word	0x200001a8

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b094      	sub	sp, #80	@ 0x50
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0320 	add.w	r3, r7, #32
 8000976:	2230      	movs	r2, #48	@ 0x30
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f004 f8ea 	bl	8004b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	4b27      	ldr	r3, [pc, #156]	@ (8000a34 <SystemClock_Config+0xc8>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000998:	4a26      	ldr	r2, [pc, #152]	@ (8000a34 <SystemClock_Config+0xc8>)
 800099a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800099e:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a0:	4b24      	ldr	r3, [pc, #144]	@ (8000a34 <SystemClock_Config+0xc8>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	4b21      	ldr	r3, [pc, #132]	@ (8000a38 <SystemClock_Config+0xcc>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a20      	ldr	r2, [pc, #128]	@ (8000a38 <SystemClock_Config+0xcc>)
 80009b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009ba:	6013      	str	r3, [r2, #0]
 80009bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a38 <SystemClock_Config+0xcc>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c8:	2301      	movs	r3, #1
 80009ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d2:	2302      	movs	r3, #2
 80009d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80009dc:	2319      	movs	r3, #25
 80009de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80009e0:	23c0      	movs	r3, #192	@ 0xc0
 80009e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009e8:	2304      	movs	r3, #4
 80009ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ec:	f107 0320 	add.w	r3, r7, #32
 80009f0:	4618      	mov	r0, r3
 80009f2:	f002 fdd5 	bl	80035a0 <HAL_RCC_OscConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009fc:	f000 fca0 	bl	8001340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a00:	230f      	movs	r3, #15
 8000a02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a04:	2302      	movs	r3, #2
 8000a06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a16:	f107 030c 	add.w	r3, r7, #12
 8000a1a:	2103      	movs	r1, #3
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f003 f837 	bl	8003a90 <HAL_RCC_ClockConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a28:	f000 fc8a 	bl	8001340 <Error_Handler>
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	3750      	adds	r7, #80	@ 0x50
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40007000 	.word	0x40007000

08000a3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a42:	463b      	mov	r3, r7
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a4e:	4b36      	ldr	r3, [pc, #216]	@ (8000b28 <MX_ADC1_Init+0xec>)
 8000a50:	4a36      	ldr	r2, [pc, #216]	@ (8000b2c <MX_ADC1_Init+0xf0>)
 8000a52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a54:	4b34      	ldr	r3, [pc, #208]	@ (8000b28 <MX_ADC1_Init+0xec>)
 8000a56:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a5c:	4b32      	ldr	r3, [pc, #200]	@ (8000b28 <MX_ADC1_Init+0xec>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a62:	4b31      	ldr	r3, [pc, #196]	@ (8000b28 <MX_ADC1_Init+0xec>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a68:	4b2f      	ldr	r3, [pc, #188]	@ (8000b28 <MX_ADC1_Init+0xec>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000b28 <MX_ADC1_Init+0xec>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a76:	4b2c      	ldr	r3, [pc, #176]	@ (8000b28 <MX_ADC1_Init+0xec>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b28 <MX_ADC1_Init+0xec>)
 8000a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8000b30 <MX_ADC1_Init+0xf4>)
 8000a80:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a82:	4b29      	ldr	r3, [pc, #164]	@ (8000b28 <MX_ADC1_Init+0xec>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000a88:	4b27      	ldr	r3, [pc, #156]	@ (8000b28 <MX_ADC1_Init+0xec>)
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a8e:	4b26      	ldr	r3, [pc, #152]	@ (8000b28 <MX_ADC1_Init+0xec>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a96:	4b24      	ldr	r3, [pc, #144]	@ (8000b28 <MX_ADC1_Init+0xec>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a9c:	4822      	ldr	r0, [pc, #136]	@ (8000b28 <MX_ADC1_Init+0xec>)
 8000a9e:	f001 f9e5 	bl	8001e6c <HAL_ADC_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000aa8:	f000 fc4a 	bl	8001340 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000aac:	2304      	movs	r3, #4
 8000aae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab8:	463b      	mov	r3, r7
 8000aba:	4619      	mov	r1, r3
 8000abc:	481a      	ldr	r0, [pc, #104]	@ (8000b28 <MX_ADC1_Init+0xec>)
 8000abe:	f001 fb2b 	bl	8002118 <HAL_ADC_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ac8:	f000 fc3a 	bl	8001340 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000acc:	2305      	movs	r3, #5
 8000ace:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4813      	ldr	r0, [pc, #76]	@ (8000b28 <MX_ADC1_Init+0xec>)
 8000ada:	f001 fb1d 	bl	8002118 <HAL_ADC_ConfigChannel>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ae4:	f000 fc2c 	bl	8001340 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ae8:	2306      	movs	r3, #6
 8000aea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000aec:	2303      	movs	r3, #3
 8000aee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af0:	463b      	mov	r3, r7
 8000af2:	4619      	mov	r1, r3
 8000af4:	480c      	ldr	r0, [pc, #48]	@ (8000b28 <MX_ADC1_Init+0xec>)
 8000af6:	f001 fb0f 	bl	8002118 <HAL_ADC_ConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000b00:	f000 fc1e 	bl	8001340 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b04:	2307      	movs	r3, #7
 8000b06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <MX_ADC1_Init+0xec>)
 8000b12:	f001 fb01 	bl	8002118 <HAL_ADC_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000b1c:	f000 fc10 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200001fc 	.word	0x200001fc
 8000b2c:	40012000 	.word	0x40012000
 8000b30:	0f000001 	.word	0x0f000001

08000b34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b38:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <MX_I2C1_Init+0x50>)
 8000b3a:	4a13      	ldr	r2, [pc, #76]	@ (8000b88 <MX_I2C1_Init+0x54>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <MX_I2C1_Init+0x50>)
 8000b40:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <MX_I2C1_Init+0x58>)
 8000b42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <MX_I2C1_Init+0x50>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <MX_I2C1_Init+0x50>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <MX_I2C1_Init+0x50>)
 8000b52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b58:	4b0a      	ldr	r3, [pc, #40]	@ (8000b84 <MX_I2C1_Init+0x50>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <MX_I2C1_Init+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b64:	4b07      	ldr	r3, [pc, #28]	@ (8000b84 <MX_I2C1_Init+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <MX_I2C1_Init+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b70:	4804      	ldr	r0, [pc, #16]	@ (8000b84 <MX_I2C1_Init+0x50>)
 8000b72:	f002 fbd1 	bl	8003318 <HAL_I2C_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b7c:	f000 fbe0 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200002a4 	.word	0x200002a4
 8000b88:	40005400 	.word	0x40005400
 8000b8c:	000186a0 	.word	0x000186a0

08000b90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b092      	sub	sp, #72	@ 0x48
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b96:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
 8000bb0:	615a      	str	r2, [r3, #20]
 8000bb2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f003 ffca 	bl	8004b54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bc0:	4b45      	ldr	r3, [pc, #276]	@ (8000cd8 <MX_TIM1_Init+0x148>)
 8000bc2:	4a46      	ldr	r2, [pc, #280]	@ (8000cdc <MX_TIM1_Init+0x14c>)
 8000bc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bc6:	4b44      	ldr	r3, [pc, #272]	@ (8000cd8 <MX_TIM1_Init+0x148>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bcc:	4b42      	ldr	r3, [pc, #264]	@ (8000cd8 <MX_TIM1_Init+0x148>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4799;
 8000bd2:	4b41      	ldr	r3, [pc, #260]	@ (8000cd8 <MX_TIM1_Init+0x148>)
 8000bd4:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8000bd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bda:	4b3f      	ldr	r3, [pc, #252]	@ (8000cd8 <MX_TIM1_Init+0x148>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000be0:	4b3d      	ldr	r3, [pc, #244]	@ (8000cd8 <MX_TIM1_Init+0x148>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	4b3c      	ldr	r3, [pc, #240]	@ (8000cd8 <MX_TIM1_Init+0x148>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bec:	483a      	ldr	r0, [pc, #232]	@ (8000cd8 <MX_TIM1_Init+0x148>)
 8000bee:	f003 f975 	bl	8003edc <HAL_TIM_PWM_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000bf8:	f000 fba2 	bl	8001340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c04:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4833      	ldr	r0, [pc, #204]	@ (8000cd8 <MX_TIM1_Init+0x148>)
 8000c0c:	f003 fee2 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000c16:	f000 fb93 	bl	8001340 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000c1a:	2370      	movs	r3, #112	@ 0x70
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c32:	2300      	movs	r3, #0
 8000c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4826      	ldr	r0, [pc, #152]	@ (8000cd8 <MX_TIM1_Init+0x148>)
 8000c40:	f003 fbce 	bl	80043e0 <HAL_TIM_PWM_ConfigChannel>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000c4a:	f000 fb79 	bl	8001340 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c52:	2204      	movs	r2, #4
 8000c54:	4619      	mov	r1, r3
 8000c56:	4820      	ldr	r0, [pc, #128]	@ (8000cd8 <MX_TIM1_Init+0x148>)
 8000c58:	f003 fbc2 	bl	80043e0 <HAL_TIM_PWM_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000c62:	f000 fb6d 	bl	8001340 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6a:	2208      	movs	r2, #8
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	481a      	ldr	r0, [pc, #104]	@ (8000cd8 <MX_TIM1_Init+0x148>)
 8000c70:	f003 fbb6 	bl	80043e0 <HAL_TIM_PWM_ConfigChannel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000c7a:	f000 fb61 	bl	8001340 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c82:	220c      	movs	r2, #12
 8000c84:	4619      	mov	r1, r3
 8000c86:	4814      	ldr	r0, [pc, #80]	@ (8000cd8 <MX_TIM1_Init+0x148>)
 8000c88:	f003 fbaa 	bl	80043e0 <HAL_TIM_PWM_ConfigChannel>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000c92:	f000 fb55 	bl	8001340 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000caa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4807      	ldr	r0, [pc, #28]	@ (8000cd8 <MX_TIM1_Init+0x148>)
 8000cba:	f003 fef9 	bl	8004ab0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000cc4:	f000 fb3c 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cc8:	4803      	ldr	r0, [pc, #12]	@ (8000cd8 <MX_TIM1_Init+0x148>)
 8000cca:	f000 ff2f 	bl	8001b2c <HAL_TIM_MspPostInit>

}
 8000cce:	bf00      	nop
 8000cd0:	3748      	adds	r7, #72	@ 0x48
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200002f8 	.word	0x200002f8
 8000cdc:	40010000 	.word	0x40010000

08000ce0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	@ 0x28
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce6:	f107 0320 	add.w	r3, r7, #32
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]
 8000cfe:	615a      	str	r2, [r3, #20]
 8000d00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d02:	4b22      	ldr	r3, [pc, #136]	@ (8000d8c <MX_TIM2_Init+0xac>)
 8000d04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8000d0a:	4b20      	ldr	r3, [pc, #128]	@ (8000d8c <MX_TIM2_Init+0xac>)
 8000d0c:	225f      	movs	r2, #95	@ 0x5f
 8000d0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b1e      	ldr	r3, [pc, #120]	@ (8000d8c <MX_TIM2_Init+0xac>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d16:	4b1d      	ldr	r3, [pc, #116]	@ (8000d8c <MX_TIM2_Init+0xac>)
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d8c <MX_TIM2_Init+0xac>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <MX_TIM2_Init+0xac>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d2a:	4818      	ldr	r0, [pc, #96]	@ (8000d8c <MX_TIM2_Init+0xac>)
 8000d2c:	f003 f8d6 	bl	8003edc <HAL_TIM_PWM_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000d36:	f000 fb03 	bl	8001340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d42:	f107 0320 	add.w	r3, r7, #32
 8000d46:	4619      	mov	r1, r3
 8000d48:	4810      	ldr	r0, [pc, #64]	@ (8000d8c <MX_TIM2_Init+0xac>)
 8000d4a:	f003 fe43 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d54:	f000 faf4 	bl	8001340 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d58:	2360      	movs	r3, #96	@ 0x60
 8000d5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4807      	ldr	r0, [pc, #28]	@ (8000d8c <MX_TIM2_Init+0xac>)
 8000d70:	f003 fb36 	bl	80043e0 <HAL_TIM_PWM_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000d7a:	f000 fae1 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d7e:	4803      	ldr	r0, [pc, #12]	@ (8000d8c <MX_TIM2_Init+0xac>)
 8000d80:	f000 fed4 	bl	8001b2c <HAL_TIM_MspPostInit>

}
 8000d84:	bf00      	nop
 8000d86:	3728      	adds	r7, #40	@ 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000340 	.word	0x20000340

08000d90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08c      	sub	sp, #48	@ 0x30
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	2224      	movs	r2, #36	@ 0x24
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f003 fed8 	bl	8004b54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dac:	4b20      	ldr	r3, [pc, #128]	@ (8000e30 <MX_TIM3_Init+0xa0>)
 8000dae:	4a21      	ldr	r2, [pc, #132]	@ (8000e34 <MX_TIM3_Init+0xa4>)
 8000db0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000db2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e30 <MX_TIM3_Init+0xa0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e30 <MX_TIM3_Init+0xa0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <MX_TIM3_Init+0xa0>)
 8000dc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dc4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <MX_TIM3_Init+0xa0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <MX_TIM3_Init+0xa0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dea:	2301      	movs	r3, #1
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <MX_TIM3_Init+0xa0>)
 8000dfe:	f003 f9bb 	bl	8004178 <HAL_TIM_Encoder_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000e08:	f000 fa9a 	bl	8001340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <MX_TIM3_Init+0xa0>)
 8000e1a:	f003 fddb 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000e24:	f000 fa8c 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	3730      	adds	r7, #48	@ 0x30
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000388 	.word	0x20000388
 8000e34:	40000400 	.word	0x40000400

08000e38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	@ 0x28
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e3e:	f107 0320 	add.w	r3, r7, #32
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]
 8000e56:	615a      	str	r2, [r3, #20]
 8000e58:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e5a:	4b27      	ldr	r3, [pc, #156]	@ (8000ef8 <MX_TIM4_Init+0xc0>)
 8000e5c:	4a27      	ldr	r2, [pc, #156]	@ (8000efc <MX_TIM4_Init+0xc4>)
 8000e5e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000e60:	4b25      	ldr	r3, [pc, #148]	@ (8000ef8 <MX_TIM4_Init+0xc0>)
 8000e62:	2253      	movs	r2, #83	@ 0x53
 8000e64:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e66:	4b24      	ldr	r3, [pc, #144]	@ (8000ef8 <MX_TIM4_Init+0xc0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000e6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ef8 <MX_TIM4_Init+0xc0>)
 8000e6e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000e72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e74:	4b20      	ldr	r3, [pc, #128]	@ (8000ef8 <MX_TIM4_Init+0xc0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef8 <MX_TIM4_Init+0xc0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e80:	481d      	ldr	r0, [pc, #116]	@ (8000ef8 <MX_TIM4_Init+0xc0>)
 8000e82:	f003 f82b 	bl	8003edc <HAL_TIM_PWM_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000e8c:	f000 fa58 	bl	8001340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e90:	2300      	movs	r3, #0
 8000e92:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e98:	f107 0320 	add.w	r3, r7, #32
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4816      	ldr	r0, [pc, #88]	@ (8000ef8 <MX_TIM4_Init+0xc0>)
 8000ea0:	f003 fd98 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000eaa:	f000 fa49 	bl	8001340 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eae:	2360      	movs	r3, #96	@ 0x60
 8000eb0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480c      	ldr	r0, [pc, #48]	@ (8000ef8 <MX_TIM4_Init+0xc0>)
 8000ec6:	f003 fa8b 	bl	80043e0 <HAL_TIM_PWM_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000ed0:	f000 fa36 	bl	8001340 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4807      	ldr	r0, [pc, #28]	@ (8000ef8 <MX_TIM4_Init+0xc0>)
 8000edc:	f003 fa80 	bl	80043e0 <HAL_TIM_PWM_ConfigChannel>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000ee6:	f000 fa2b 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000eea:	4803      	ldr	r0, [pc, #12]	@ (8000ef8 <MX_TIM4_Init+0xc0>)
 8000eec:	f000 fe1e 	bl	8001b2c <HAL_TIM_MspPostInit>

}
 8000ef0:	bf00      	nop
 8000ef2:	3728      	adds	r7, #40	@ 0x28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200003d0 	.word	0x200003d0
 8000efc:	40000800 	.word	0x40000800

08000f00 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08c      	sub	sp, #48	@ 0x30
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	2224      	movs	r2, #36	@ 0x24
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fe20 	bl	8004b54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f1c:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <MX_TIM5_Init+0xa0>)
 8000f1e:	4a21      	ldr	r2, [pc, #132]	@ (8000fa4 <MX_TIM5_Init+0xa4>)
 8000f20:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f22:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa0 <MX_TIM5_Init+0xa0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <MX_TIM5_Init+0xa0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <MX_TIM5_Init+0xa0>)
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f34:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f36:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <MX_TIM5_Init+0xa0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <MX_TIM5_Init+0xa0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480c      	ldr	r0, [pc, #48]	@ (8000fa0 <MX_TIM5_Init+0xa0>)
 8000f6e:	f003 f903 	bl	8004178 <HAL_TIM_Encoder_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000f78:	f000 f9e2 	bl	8001340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <MX_TIM5_Init+0xa0>)
 8000f8a:	f003 fd23 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000f94:	f000 f9d4 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	3730      	adds	r7, #48	@ 0x30
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000418 	.word	0x20000418
 8000fa4:	40000c00 	.word	0x40000c00

08000fa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <MX_DMA_Init+0x3c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe4 <MX_DMA_Init+0x3c>)
 8000fb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <MX_DMA_Init+0x3c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2038      	movs	r0, #56	@ 0x38
 8000fd0:	f001 fc2d 	bl	800282e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000fd4:	2038      	movs	r0, #56	@ 0x38
 8000fd6:	f001 fc46 	bl	8002866 <HAL_NVIC_EnableIRQ>

}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800

08000fe8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b4c      	ldr	r3, [pc, #304]	@ (8001134 <MX_GPIO_Init+0x14c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a4b      	ldr	r2, [pc, #300]	@ (8001134 <MX_GPIO_Init+0x14c>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b49      	ldr	r3, [pc, #292]	@ (8001134 <MX_GPIO_Init+0x14c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b45      	ldr	r3, [pc, #276]	@ (8001134 <MX_GPIO_Init+0x14c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a44      	ldr	r2, [pc, #272]	@ (8001134 <MX_GPIO_Init+0x14c>)
 8001024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b42      	ldr	r3, [pc, #264]	@ (8001134 <MX_GPIO_Init+0x14c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	4b3e      	ldr	r3, [pc, #248]	@ (8001134 <MX_GPIO_Init+0x14c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a3d      	ldr	r2, [pc, #244]	@ (8001134 <MX_GPIO_Init+0x14c>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b3b      	ldr	r3, [pc, #236]	@ (8001134 <MX_GPIO_Init+0x14c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b37      	ldr	r3, [pc, #220]	@ (8001134 <MX_GPIO_Init+0x14c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a36      	ldr	r2, [pc, #216]	@ (8001134 <MX_GPIO_Init+0x14c>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b34      	ldr	r3, [pc, #208]	@ (8001134 <MX_GPIO_Init+0x14c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001074:	4830      	ldr	r0, [pc, #192]	@ (8001138 <MX_GPIO_Init+0x150>)
 8001076:	f002 f91d 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	f24c 0104 	movw	r1, #49156	@ 0xc004
 8001080:	482e      	ldr	r0, [pc, #184]	@ (800113c <MX_GPIO_Init+0x154>)
 8001082:	f002 f917 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001086:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800108a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	2301      	movs	r3, #1
 800108e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4619      	mov	r1, r3
 800109e:	4826      	ldr	r0, [pc, #152]	@ (8001138 <MX_GPIO_Init+0x150>)
 80010a0:	f001 ff6c 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010a4:	230c      	movs	r3, #12
 80010a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010b4:	2307      	movs	r3, #7
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	4820      	ldr	r0, [pc, #128]	@ (8001140 <MX_GPIO_Init+0x158>)
 80010c0:	f001 ff5c 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010c4:	2304      	movs	r3, #4
 80010c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	4818      	ldr	r0, [pc, #96]	@ (800113c <MX_GPIO_Init+0x154>)
 80010dc:	f001 ff4e 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80010e0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80010e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010e6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80010ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	4811      	ldr	r0, [pc, #68]	@ (800113c <MX_GPIO_Init+0x154>)
 80010f8:	f001 ff40 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80010fc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001102:	2311      	movs	r3, #17
 8001104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4809      	ldr	r0, [pc, #36]	@ (800113c <MX_GPIO_Init+0x154>)
 8001116:	f001 ff31 	bl	8002f7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2102      	movs	r1, #2
 800111e:	2028      	movs	r0, #40	@ 0x28
 8001120:	f001 fb85 	bl	800282e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001124:	2028      	movs	r0, #40	@ 0x28
 8001126:	f001 fb9e 	bl	8002866 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	@ 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40020800 	.word	0x40020800
 800113c:	40020400 	.word	0x40020400
 8001140:	40020000 	.word	0x40020000

08001144 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_12)
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001154:	d10e      	bne.n	8001174 <HAL_GPIO_EXTI_Callback+0x30>
    {
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8001156:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800115a:	4812      	ldr	r0, [pc, #72]	@ (80011a4 <HAL_GPIO_EXTI_Callback+0x60>)
 800115c:	f002 f892 	bl	8003284 <HAL_GPIO_ReadPin>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d103      	bne.n	800116e <HAL_GPIO_EXTI_Callback+0x2a>
        {
            // turn on laser
        	blue_shoot_task.button = 1;
 8001166:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <HAL_GPIO_EXTI_Callback+0x64>)
 8001168:	2201      	movs	r2, #1
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	e002      	b.n	8001174 <HAL_GPIO_EXTI_Callback+0x30>
        }
        else
        {
            // turn off laser
        	blue_shoot_task.button = 0;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <HAL_GPIO_EXTI_Callback+0x64>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
        }
    }
    if (GPIO_Pin == GPIO_PIN_13)
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800117a:	d10e      	bne.n	800119a <HAL_GPIO_EXTI_Callback+0x56>
	{
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET)
 800117c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001180:	4808      	ldr	r0, [pc, #32]	@ (80011a4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001182:	f002 f87f 	bl	8003284 <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d103      	bne.n	8001194 <HAL_GPIO_EXTI_Callback+0x50>
		{
			// turn on laser
			red_shoot_task.button = 1;
 800118c:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <HAL_GPIO_EXTI_Callback+0x68>)
 800118e:	2201      	movs	r2, #1
 8001190:	609a      	str	r2, [r3, #8]
//    	red_photoresistor_task.hit_flag = 1;
//    }
//    if (GPIO_Pin == GPIO_PIN_5){
//    	blue_photoresistor_task.hit_flag = 1;
//	}
}
 8001192:	e002      	b.n	800119a <HAL_GPIO_EXTI_Callback+0x56>
			red_shoot_task.button = 0;
 8001194:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <HAL_GPIO_EXTI_Callback+0x68>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40020400 	.word	0x40020400
 80011a8:	200000c0 	.word	0x200000c0
 80011ac:	20000090 	.word	0x20000090

080011b0 <calibration>:

void calibration(void){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(red_shoot_task.servo_tim, red_shoot_task.channel, red_shoot_task.shield_val);
 80011b4:	4b5a      	ldr	r3, [pc, #360]	@ (8001320 <calibration+0x170>)
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d106      	bne.n	80011ca <calibration+0x1a>
 80011bc:	4b58      	ldr	r3, [pc, #352]	@ (8001320 <calibration+0x170>)
 80011be:	695a      	ldr	r2, [r3, #20]
 80011c0:	4b57      	ldr	r3, [pc, #348]	@ (8001320 <calibration+0x170>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80011c8:	e01e      	b.n	8001208 <calibration+0x58>
 80011ca:	4b55      	ldr	r3, [pc, #340]	@ (8001320 <calibration+0x170>)
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	d107      	bne.n	80011e2 <calibration+0x32>
 80011d2:	4b53      	ldr	r3, [pc, #332]	@ (8001320 <calibration+0x170>)
 80011d4:	6959      	ldr	r1, [r3, #20]
 80011d6:	4b52      	ldr	r3, [pc, #328]	@ (8001320 <calibration+0x170>)
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	460b      	mov	r3, r1
 80011de:	6393      	str	r3, [r2, #56]	@ 0x38
 80011e0:	e012      	b.n	8001208 <calibration+0x58>
 80011e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001320 <calibration+0x170>)
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d107      	bne.n	80011fa <calibration+0x4a>
 80011ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001320 <calibration+0x170>)
 80011ec:	6959      	ldr	r1, [r3, #20]
 80011ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001320 <calibration+0x170>)
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	460b      	mov	r3, r1
 80011f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80011f8:	e006      	b.n	8001208 <calibration+0x58>
 80011fa:	4b49      	ldr	r3, [pc, #292]	@ (8001320 <calibration+0x170>)
 80011fc:	6959      	ldr	r1, [r3, #20]
 80011fe:	4b48      	ldr	r3, [pc, #288]	@ (8001320 <calibration+0x170>)
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	460b      	mov	r3, r1
 8001206:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(blue_shoot_task.servo_tim, blue_shoot_task.channel, blue_shoot_task.shield_val);
 8001208:	4b46      	ldr	r3, [pc, #280]	@ (8001324 <calibration+0x174>)
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d106      	bne.n	800121e <calibration+0x6e>
 8001210:	4b44      	ldr	r3, [pc, #272]	@ (8001324 <calibration+0x174>)
 8001212:	695a      	ldr	r2, [r3, #20]
 8001214:	4b43      	ldr	r3, [pc, #268]	@ (8001324 <calibration+0x174>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	635a      	str	r2, [r3, #52]	@ 0x34
 800121c:	e01e      	b.n	800125c <calibration+0xac>
 800121e:	4b41      	ldr	r3, [pc, #260]	@ (8001324 <calibration+0x174>)
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	2b04      	cmp	r3, #4
 8001224:	d107      	bne.n	8001236 <calibration+0x86>
 8001226:	4b3f      	ldr	r3, [pc, #252]	@ (8001324 <calibration+0x174>)
 8001228:	6959      	ldr	r1, [r3, #20]
 800122a:	4b3e      	ldr	r3, [pc, #248]	@ (8001324 <calibration+0x174>)
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	460b      	mov	r3, r1
 8001232:	6393      	str	r3, [r2, #56]	@ 0x38
 8001234:	e012      	b.n	800125c <calibration+0xac>
 8001236:	4b3b      	ldr	r3, [pc, #236]	@ (8001324 <calibration+0x174>)
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	2b08      	cmp	r3, #8
 800123c:	d107      	bne.n	800124e <calibration+0x9e>
 800123e:	4b39      	ldr	r3, [pc, #228]	@ (8001324 <calibration+0x174>)
 8001240:	6959      	ldr	r1, [r3, #20]
 8001242:	4b38      	ldr	r3, [pc, #224]	@ (8001324 <calibration+0x174>)
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	460b      	mov	r3, r1
 800124a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800124c:	e006      	b.n	800125c <calibration+0xac>
 800124e:	4b35      	ldr	r3, [pc, #212]	@ (8001324 <calibration+0x174>)
 8001250:	6959      	ldr	r1, [r3, #20]
 8001252:	4b34      	ldr	r3, [pc, #208]	@ (8001324 <calibration+0x174>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	460b      	mov	r3, r1
 800125a:	6413      	str	r3, [r2, #64]	@ 0x40
	HAL_Delay(1200);
 800125c:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001260:	f000 fde0 	bl	8001e24 <HAL_Delay>
	red_photoresistor_task.zero = red_photoresistor_task.adc_val;
 8001264:	4b30      	ldr	r3, [pc, #192]	@ (8001328 <calibration+0x178>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	4a2f      	ldr	r2, [pc, #188]	@ (8001328 <calibration+0x178>)
 800126a:	6153      	str	r3, [r2, #20]
	blue_photoresistor_task.zero = blue_photoresistor_task.adc_val;
 800126c:	4b2f      	ldr	r3, [pc, #188]	@ (800132c <calibration+0x17c>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	4a2e      	ldr	r2, [pc, #184]	@ (800132c <calibration+0x17c>)
 8001272:	6153      	str	r3, [r2, #20]

	// dc motors
	set_duty(&mred, -30);
 8001274:	f06f 011d 	mvn.w	r1, #29
 8001278:	482d      	ldr	r0, [pc, #180]	@ (8001330 <calibration+0x180>)
 800127a:	f000 f867 	bl	800134c <set_duty>
	set_duty(&mblue, -30);
 800127e:	f06f 011d 	mvn.w	r1, #29
 8001282:	482c      	ldr	r0, [pc, #176]	@ (8001334 <calibration+0x184>)
 8001284:	f000 f862 	bl	800134c <set_duty>

	HAL_Delay(100);
 8001288:	2064      	movs	r0, #100	@ 0x64
 800128a:	f000 fdcb 	bl	8001e24 <HAL_Delay>

	setup_encoder(&red_encoder);
 800128e:	482a      	ldr	r0, [pc, #168]	@ (8001338 <calibration+0x188>)
 8001290:	f7ff fa9e 	bl	80007d0 <setup_encoder>
	setup_encoder(&blue_encoder);
 8001294:	4829      	ldr	r0, [pc, #164]	@ (800133c <calibration+0x18c>)
 8001296:	f7ff fa9b 	bl	80007d0 <setup_encoder>

	while(abs(red_encoder.ticks - red_encoder.range/2) > 10 && abs(blue_encoder.ticks - blue_encoder.range/2) > 10){
 800129a:	e01d      	b.n	80012d8 <calibration+0x128>
		read_encoder(&red_encoder);
 800129c:	4826      	ldr	r0, [pc, #152]	@ (8001338 <calibration+0x188>)
 800129e:	f7ff faa7 	bl	80007f0 <read_encoder>
		read_encoder(&blue_encoder);
 80012a2:	4826      	ldr	r0, [pc, #152]	@ (800133c <calibration+0x18c>)
 80012a4:	f7ff faa4 	bl	80007f0 <read_encoder>

		go_to(&mred, 1, red_encoder.range/2, red_encoder.ticks);
 80012a8:	4b23      	ldr	r3, [pc, #140]	@ (8001338 <calibration+0x188>)
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	0fda      	lsrs	r2, r3, #31
 80012ae:	4413      	add	r3, r2
 80012b0:	105b      	asrs	r3, r3, #1
 80012b2:	461a      	mov	r2, r3
 80012b4:	4b20      	ldr	r3, [pc, #128]	@ (8001338 <calibration+0x188>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2101      	movs	r1, #1
 80012ba:	481d      	ldr	r0, [pc, #116]	@ (8001330 <calibration+0x180>)
 80012bc:	f000 f956 	bl	800156c <go_to>
		go_to(&mblue, 1, blue_encoder.range/2, blue_encoder.ticks);
 80012c0:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <calibration+0x18c>)
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	0fda      	lsrs	r2, r3, #31
 80012c6:	4413      	add	r3, r2
 80012c8:	105b      	asrs	r3, r3, #1
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <calibration+0x18c>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2101      	movs	r1, #1
 80012d2:	4818      	ldr	r0, [pc, #96]	@ (8001334 <calibration+0x184>)
 80012d4:	f000 f94a 	bl	800156c <go_to>
	while(abs(red_encoder.ticks - red_encoder.range/2) > 10 && abs(blue_encoder.ticks - blue_encoder.range/2) > 10){
 80012d8:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <calibration+0x188>)
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <calibration+0x188>)
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	0fd9      	lsrs	r1, r3, #31
 80012e2:	440b      	add	r3, r1
 80012e4:	105b      	asrs	r3, r3, #1
 80012e6:	425b      	negs	r3, r3
 80012e8:	4413      	add	r3, r2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	bfb8      	it	lt
 80012ee:	425b      	neglt	r3, r3
 80012f0:	2b0a      	cmp	r3, #10
 80012f2:	dd0d      	ble.n	8001310 <calibration+0x160>
 80012f4:	4b11      	ldr	r3, [pc, #68]	@ (800133c <calibration+0x18c>)
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	4b10      	ldr	r3, [pc, #64]	@ (800133c <calibration+0x18c>)
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	0fd9      	lsrs	r1, r3, #31
 80012fe:	440b      	add	r3, r1
 8001300:	105b      	asrs	r3, r3, #1
 8001302:	425b      	negs	r3, r3
 8001304:	4413      	add	r3, r2
 8001306:	2b00      	cmp	r3, #0
 8001308:	bfb8      	it	lt
 800130a:	425b      	neglt	r3, r3
 800130c:	2b0a      	cmp	r3, #10
 800130e:	dcc5      	bgt.n	800129c <calibration+0xec>
	}

	setup_encoder(&red_encoder);
 8001310:	4809      	ldr	r0, [pc, #36]	@ (8001338 <calibration+0x188>)
 8001312:	f7ff fa5d 	bl	80007d0 <setup_encoder>
	setup_encoder(&blue_encoder);
 8001316:	4809      	ldr	r0, [pc, #36]	@ (800133c <calibration+0x18c>)
 8001318:	f7ff fa5a 	bl	80007d0 <setup_encoder>


}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000090 	.word	0x20000090
 8001324:	200000c0 	.word	0x200000c0
 8001328:	20000048 	.word	0x20000048
 800132c:	2000006c 	.word	0x2000006c
 8001330:	20000000 	.word	0x20000000
 8001334:	2000000c 	.word	0x2000000c
 8001338:	20000018 	.word	0x20000018
 800133c:	20000030 	.word	0x20000030

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <Error_Handler+0x8>

0800134c <set_duty>:


#define PWM_MAX 4800

void set_duty(motor_t* p_mot, int32_t duty)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
    duty = duty*PWM_MAX/100;
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	4613      	mov	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	603b      	str	r3, [r7, #0]
	if(duty>=0)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	db46      	blt.n	80013f6 <set_duty+0xaa>
	{
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, duty);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d105      	bne.n	800137c <set_duty+0x30>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	635a      	str	r2, [r3, #52]	@ 0x34
 800137a:	e018      	b.n	80013ae <set_duty+0x62>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b04      	cmp	r3, #4
 8001382:	d105      	bne.n	8001390 <set_duty+0x44>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	6393      	str	r3, [r2, #56]	@ 0x38
 800138e:	e00e      	b.n	80013ae <set_duty+0x62>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b08      	cmp	r3, #8
 8001396:	d105      	bne.n	80013a4 <set_duty+0x58>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80013a2:	e004      	b.n	80013ae <set_duty+0x62>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, 0);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d105      	bne.n	80013c2 <set_duty+0x76>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2200      	movs	r2, #0
 80013be:	635a      	str	r2, [r3, #52]	@ 0x34
	{
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, 0);
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
	}

}
 80013c0:	e076      	b.n	80014b0 <set_duty+0x164>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, 0);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d105      	bne.n	80013d6 <set_duty+0x8a>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	2300      	movs	r3, #0
 80013d2:	6393      	str	r3, [r2, #56]	@ 0x38
 80013d4:	e06c      	b.n	80014b0 <set_duty+0x164>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d105      	bne.n	80013ea <set_duty+0x9e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2300      	movs	r3, #0
 80013e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80013e8:	e062      	b.n	80014b0 <set_duty+0x164>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	2300      	movs	r3, #0
 80013f2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80013f4:	e05c      	b.n	80014b0 <set_duty+0x164>
	else if(duty<0)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	da59      	bge.n	80014b0 <set_duty+0x164>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, 0);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d105      	bne.n	8001410 <set_duty+0xc4>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2200      	movs	r2, #0
 800140c:	635a      	str	r2, [r3, #52]	@ 0x34
 800140e:	e018      	b.n	8001442 <set_duty+0xf6>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b04      	cmp	r3, #4
 8001416:	d105      	bne.n	8001424 <set_duty+0xd8>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	2300      	movs	r3, #0
 8001420:	6393      	str	r3, [r2, #56]	@ 0x38
 8001422:	e00e      	b.n	8001442 <set_duty+0xf6>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b08      	cmp	r3, #8
 800142a:	d105      	bne.n	8001438 <set_duty+0xec>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	2300      	movs	r3, #0
 8001434:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001436:	e004      	b.n	8001442 <set_duty+0xf6>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	2300      	movs	r3, #0
 8001440:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d109      	bne.n	800145e <set_duty+0x112>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001450:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800145c:	e028      	b.n	80014b0 <set_duty+0x164>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b04      	cmp	r3, #4
 8001464:	d10a      	bne.n	800147c <set_duty+0x130>
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800146c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	460b      	mov	r3, r1
 8001478:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800147a:	e019      	b.n	80014b0 <set_duty+0x164>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b08      	cmp	r3, #8
 8001482:	d10a      	bne.n	800149a <set_duty+0x14e>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800148a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	460b      	mov	r3, r1
 8001496:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001498:	e00a      	b.n	80014b0 <set_duty+0x164>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80014a0:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	460b      	mov	r3, r1
 80014ac:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80014ae:	e7ff      	b.n	80014b0 <set_duty+0x164>
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <enable>:
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, 0);

}

void enable(motor_t* p_mot)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, PWM_MAX);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d106      	bne.n	80014da <enable+0x1e>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 80014d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80014d8:	e01b      	b.n	8001512 <enable+0x56>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b04      	cmp	r3, #4
 80014e0:	d106      	bne.n	80014f0 <enable+0x34>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 80014ec:	6393      	str	r3, [r2, #56]	@ 0x38
 80014ee:	e010      	b.n	8001512 <enable+0x56>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d106      	bne.n	8001506 <enable+0x4a>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001502:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001504:	e005      	b.n	8001512 <enable+0x56>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001510:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d106      	bne.n	8001528 <enable+0x6c>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001524:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001526:	e01b      	b.n	8001560 <enable+0xa4>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b04      	cmp	r3, #4
 800152e:	d106      	bne.n	800153e <enable+0x82>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 800153a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800153c:	e010      	b.n	8001560 <enable+0xa4>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b08      	cmp	r3, #8
 8001544:	d106      	bne.n	8001554 <enable+0x98>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001550:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001552:	e005      	b.n	8001560 <enable+0xa4>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 800155e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <go_to>:

void go_to(motor_t *p_mot, int k_p, int where, int from){
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	603b      	str	r3, [r7, #0]


	int error = where-from;
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	617b      	str	r3, [r7, #20]

	set_duty(p_mot, k_p*error);
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	fb02 f303 	mul.w	r3, r2, r3
 800158a:	4619      	mov	r1, r3
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f7ff fedd 	bl	800134c <set_duty>



}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <photoresistor_task_state_0_init>:


// A function to initialize the task
// init button, laser and photoresistor
void photoresistor_task_state_0_init(PhotoresistorTask *photoresistor_task)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	photoresistor_task->state = 1;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <photoresistor_task_state_1_look>:
// A function to implement state 1 of the task
// wait for button to be pressed which should be on an interrupt that changes a flag
void photoresistor_task_state_1_look(PhotoresistorTask *photoresistor_task)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	if ((photoresistor_task->adc_val- photoresistor_task->zero) > photoresistor_task->thresh){
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68da      	ldr	r2, [r3, #12]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	1ad2      	subs	r2, r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dd02      	ble.n	80015d4 <photoresistor_task_state_1_look+0x20>
		photoresistor_task->hit_flag = 1;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	609a      	str	r2, [r3, #8]
	}

	if (photoresistor_task->hit_flag == 1){ //interrupt will change the hit flag
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d102      	bne.n	80015e2 <photoresistor_task_state_1_look+0x2e>
		photoresistor_task->state = 2;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2202      	movs	r2, #2
 80015e0:	601a      	str	r2, [r3, #0]

	}
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <photoresistor_task_state_2_hit>:
// A function to implement state 2 which is for when the game is being played
// This keeps track of score, prints score messages
void photoresistor_task_state_2_hit(PhotoresistorTask *photoresistor_task)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
	if (photoresistor_task->hit_flag == 0){ // game_task will change when they have recorded the score
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <photoresistor_task_state_2_hit+0x16>
		photoresistor_task->state = 1;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	601a      	str	r2, [r3, #0]
	}
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <shoot_task_state_0_init>:
// servo -- 300 at shiel

// A function to initialize the task
// init button, laser and photoresistor
void shoot_task_state_0_init(ShootTask *shoot_task)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	shoot_task->state = 1;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, shoot_task->laser_gpio, GPIO_PIN_SET);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	b29b      	uxth	r3, r3
 8001624:	2201      	movs	r2, #1
 8001626:	4619      	mov	r1, r3
 8001628:	4818      	ldr	r0, [pc, #96]	@ (800168c <shoot_task_state_0_init+0x7c>)
 800162a:	f001 fe43 	bl	80032b4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d106      	bne.n	8001644 <shoot_task_state_0_init+0x34>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699a      	ldr	r2, [r3, #24]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001642:	e01e      	b.n	8001682 <shoot_task_state_0_init+0x72>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	2b04      	cmp	r3, #4
 800164a:	d107      	bne.n	800165c <shoot_task_state_0_init+0x4c>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6999      	ldr	r1, [r3, #24]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	460b      	mov	r3, r1
 8001658:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800165a:	e012      	b.n	8001682 <shoot_task_state_0_init+0x72>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	2b08      	cmp	r3, #8
 8001662:	d107      	bne.n	8001674 <shoot_task_state_0_init+0x64>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6999      	ldr	r1, [r3, #24]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	460b      	mov	r3, r1
 8001670:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001672:	e006      	b.n	8001682 <shoot_task_state_0_init+0x72>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6999      	ldr	r1, [r3, #24]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	460b      	mov	r3, r1
 8001680:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40020400 	.word	0x40020400

08001690 <shoot_task_state_1_wait>:
// A function to implement state 1 of the task
// wait for button to be pressed which should be on an interrupt that changes a flag
void shoot_task_state_1_wait(ShootTask *shoot_task)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, shoot_task->laser_gpio, GPIO_PIN_SET);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	b29b      	uxth	r3, r3
 800169e:	2201      	movs	r2, #1
 80016a0:	4619      	mov	r1, r3
 80016a2:	481c      	ldr	r0, [pc, #112]	@ (8001714 <shoot_task_state_1_wait+0x84>)
 80016a4:	f001 fe06 	bl	80032b4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d106      	bne.n	80016be <shoot_task_state_1_wait+0x2e>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699a      	ldr	r2, [r3, #24]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80016bc:	e01e      	b.n	80016fc <shoot_task_state_1_wait+0x6c>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d107      	bne.n	80016d6 <shoot_task_state_1_wait+0x46>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6999      	ldr	r1, [r3, #24]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	460b      	mov	r3, r1
 80016d2:	6393      	str	r3, [r2, #56]	@ 0x38
 80016d4:	e012      	b.n	80016fc <shoot_task_state_1_wait+0x6c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d107      	bne.n	80016ee <shoot_task_state_1_wait+0x5e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6999      	ldr	r1, [r3, #24]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	460b      	mov	r3, r1
 80016ea:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80016ec:	e006      	b.n	80016fc <shoot_task_state_1_wait+0x6c>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6999      	ldr	r1, [r3, #24]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	460b      	mov	r3, r1
 80016fa:	6413      	str	r3, [r2, #64]	@ 0x40
	if (shoot_task->button == 1){
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d102      	bne.n	800170a <shoot_task_state_1_wait+0x7a>
		shoot_task->state = 2;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2202      	movs	r2, #2
 8001708:	601a      	str	r2, [r3, #0]
	}
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40020400 	.word	0x40020400

08001718 <shoot_task_state_2_unshield>:
// A function to implement state 2 which is for when the game is being played
// This keeps track of score, prints score messages
void shoot_task_state_2_unshield(ShootTask *shoot_task)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->shield_val);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d106      	bne.n	8001736 <shoot_task_state_2_unshield+0x1e>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695a      	ldr	r2, [r3, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	635a      	str	r2, [r3, #52]	@ 0x34
 8001734:	e01e      	b.n	8001774 <shoot_task_state_2_unshield+0x5c>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	2b04      	cmp	r3, #4
 800173c:	d107      	bne.n	800174e <shoot_task_state_2_unshield+0x36>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6959      	ldr	r1, [r3, #20]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	460b      	mov	r3, r1
 800174a:	6393      	str	r3, [r2, #56]	@ 0x38
 800174c:	e012      	b.n	8001774 <shoot_task_state_2_unshield+0x5c>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	2b08      	cmp	r3, #8
 8001754:	d107      	bne.n	8001766 <shoot_task_state_2_unshield+0x4e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6959      	ldr	r1, [r3, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	460b      	mov	r3, r1
 8001762:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001764:	e006      	b.n	8001774 <shoot_task_state_2_unshield+0x5c>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6959      	ldr	r1, [r3, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	460b      	mov	r3, r1
 8001772:	6413      	str	r3, [r2, #64]	@ 0x40
	if (1){ // add delay using some ticks and tune it
		shoot_task->state = 3;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2203      	movs	r2, #3
 8001778:	601a      	str	r2, [r3, #0]
	}
	if(shoot_task->button == 0){
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d102      	bne.n	8001788 <shoot_task_state_2_unshield+0x70>
		shoot_task->state = 1;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	601a      	str	r2, [r3, #0]
	}
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <shoot_task_state_3_shoot>:
// A function to implement state 3

void shoot_task_state_3_shoot(ShootTask *shoot_task)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, shoot_task->laser_gpio, GPIO_PIN_RESET);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	2200      	movs	r2, #0
 80017a4:	4619      	mov	r1, r3
 80017a6:	4807      	ldr	r0, [pc, #28]	@ (80017c4 <shoot_task_state_3_shoot+0x30>)
 80017a8:	f001 fd84 	bl	80032b4 <HAL_GPIO_WritePin>
	if(shoot_task->button == 0){
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <shoot_task_state_3_shoot+0x26>
		shoot_task->state = 1;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]
	}

}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40020400 	.word	0x40020400

080017c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <HAL_MspInit+0x4c>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001814 <HAL_MspInit+0x4c>)
 80017d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017de:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <HAL_MspInit+0x4c>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <HAL_MspInit+0x4c>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f2:	4a08      	ldr	r2, [pc, #32]	@ (8001814 <HAL_MspInit+0x4c>)
 80017f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_MspInit+0x4c>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800

08001818 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	@ 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a2f      	ldr	r2, [pc, #188]	@ (80018f4 <HAL_ADC_MspInit+0xdc>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d158      	bne.n	80018ec <HAL_ADC_MspInit+0xd4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	4b2e      	ldr	r3, [pc, #184]	@ (80018f8 <HAL_ADC_MspInit+0xe0>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001842:	4a2d      	ldr	r2, [pc, #180]	@ (80018f8 <HAL_ADC_MspInit+0xe0>)
 8001844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001848:	6453      	str	r3, [r2, #68]	@ 0x44
 800184a:	4b2b      	ldr	r3, [pc, #172]	@ (80018f8 <HAL_ADC_MspInit+0xe0>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b27      	ldr	r3, [pc, #156]	@ (80018f8 <HAL_ADC_MspInit+0xe0>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4a26      	ldr	r2, [pc, #152]	@ (80018f8 <HAL_ADC_MspInit+0xe0>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4b24      	ldr	r3, [pc, #144]	@ (80018f8 <HAL_ADC_MspInit+0xe0>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001872:	23f0      	movs	r3, #240	@ 0xf0
 8001874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001876:	2303      	movs	r3, #3
 8001878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	481d      	ldr	r0, [pc, #116]	@ (80018fc <HAL_ADC_MspInit+0xe4>)
 8001886:	f001 fb79 	bl	8002f7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800188a:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <HAL_ADC_MspInit+0xe8>)
 800188c:	4a1d      	ldr	r2, [pc, #116]	@ (8001904 <HAL_ADC_MspInit+0xec>)
 800188e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001890:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <HAL_ADC_MspInit+0xe8>)
 8001892:	2200      	movs	r2, #0
 8001894:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001896:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <HAL_ADC_MspInit+0xe8>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800189c:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <HAL_ADC_MspInit+0xe8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018a2:	4b17      	ldr	r3, [pc, #92]	@ (8001900 <HAL_ADC_MspInit+0xe8>)
 80018a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018aa:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <HAL_ADC_MspInit+0xe8>)
 80018ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018b2:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <HAL_ADC_MspInit+0xe8>)
 80018b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018ba:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <HAL_ADC_MspInit+0xe8>)
 80018bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80018c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <HAL_ADC_MspInit+0xe8>)
 80018c4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018c8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001900 <HAL_ADC_MspInit+0xe8>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018d0:	480b      	ldr	r0, [pc, #44]	@ (8001900 <HAL_ADC_MspInit+0xe8>)
 80018d2:	f000 ffe3 	bl	800289c <HAL_DMA_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80018dc:	f7ff fd30 	bl	8001340 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a07      	ldr	r2, [pc, #28]	@ (8001900 <HAL_ADC_MspInit+0xe8>)
 80018e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80018e6:	4a06      	ldr	r2, [pc, #24]	@ (8001900 <HAL_ADC_MspInit+0xe8>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80018ec:	bf00      	nop
 80018ee:	3728      	adds	r7, #40	@ 0x28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40012000 	.word	0x40012000
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020000 	.word	0x40020000
 8001900:	20000244 	.word	0x20000244
 8001904:	40026410 	.word	0x40026410

08001908 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	@ 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a19      	ldr	r2, [pc, #100]	@ (800198c <HAL_I2C_MspInit+0x84>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d12c      	bne.n	8001984 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b18      	ldr	r3, [pc, #96]	@ (8001990 <HAL_I2C_MspInit+0x88>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	4a17      	ldr	r2, [pc, #92]	@ (8001990 <HAL_I2C_MspInit+0x88>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	6313      	str	r3, [r2, #48]	@ 0x30
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <HAL_I2C_MspInit+0x88>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001946:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800194a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800194c:	2312      	movs	r3, #18
 800194e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001958:	2304      	movs	r3, #4
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	480c      	ldr	r0, [pc, #48]	@ (8001994 <HAL_I2C_MspInit+0x8c>)
 8001964:	f001 fb0a 	bl	8002f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <HAL_I2C_MspInit+0x88>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	4a07      	ldr	r2, [pc, #28]	@ (8001990 <HAL_I2C_MspInit+0x88>)
 8001972:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001976:	6413      	str	r3, [r2, #64]	@ 0x40
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_I2C_MspInit+0x88>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001984:	bf00      	nop
 8001986:	3728      	adds	r7, #40	@ 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40005400 	.word	0x40005400
 8001990:	40023800 	.word	0x40023800
 8001994:	40020400 	.word	0x40020400

08001998 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001a24 <HAL_TIM_PWM_MspInit+0x8c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d10e      	bne.n	80019c8 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001a28 <HAL_TIM_PWM_MspInit+0x90>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a28 <HAL_TIM_PWM_MspInit+0x90>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001a28 <HAL_TIM_PWM_MspInit+0x90>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019c6:	e026      	b.n	8001a16 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019d0:	d10e      	bne.n	80019f0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b14      	ldr	r3, [pc, #80]	@ (8001a28 <HAL_TIM_PWM_MspInit+0x90>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	4a13      	ldr	r2, [pc, #76]	@ (8001a28 <HAL_TIM_PWM_MspInit+0x90>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e2:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <HAL_TIM_PWM_MspInit+0x90>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
}
 80019ee:	e012      	b.n	8001a16 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a2c <HAL_TIM_PWM_MspInit+0x94>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d10d      	bne.n	8001a16 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <HAL_TIM_PWM_MspInit+0x90>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	4a09      	ldr	r2, [pc, #36]	@ (8001a28 <HAL_TIM_PWM_MspInit+0x90>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0a:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <HAL_TIM_PWM_MspInit+0x90>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
}
 8001a16:	bf00      	nop
 8001a18:	371c      	adds	r7, #28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40010000 	.word	0x40010000
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40000800 	.word	0x40000800

08001a30 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08c      	sub	sp, #48	@ 0x30
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a32      	ldr	r2, [pc, #200]	@ (8001b18 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d12c      	bne.n	8001aac <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	4b31      	ldr	r3, [pc, #196]	@ (8001b1c <HAL_TIM_Encoder_MspInit+0xec>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	4a30      	ldr	r2, [pc, #192]	@ (8001b1c <HAL_TIM_Encoder_MspInit+0xec>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a62:	4b2e      	ldr	r3, [pc, #184]	@ (8001b1c <HAL_TIM_Encoder_MspInit+0xec>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	4b2a      	ldr	r3, [pc, #168]	@ (8001b1c <HAL_TIM_Encoder_MspInit+0xec>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	4a29      	ldr	r2, [pc, #164]	@ (8001b1c <HAL_TIM_Encoder_MspInit+0xec>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7e:	4b27      	ldr	r3, [pc, #156]	@ (8001b1c <HAL_TIM_Encoder_MspInit+0xec>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a8a:	2330      	movs	r3, #48	@ 0x30
 8001a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	2300      	movs	r3, #0
 8001a98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9e:	f107 031c 	add.w	r3, r7, #28
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	481e      	ldr	r0, [pc, #120]	@ (8001b20 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001aa6:	f001 fa69 	bl	8002f7c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001aaa:	e030      	b.n	8001b0e <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8001b24 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d12b      	bne.n	8001b0e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	4b18      	ldr	r3, [pc, #96]	@ (8001b1c <HAL_TIM_Encoder_MspInit+0xec>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	4a17      	ldr	r2, [pc, #92]	@ (8001b1c <HAL_TIM_Encoder_MspInit+0xec>)
 8001ac0:	f043 0308 	orr.w	r3, r3, #8
 8001ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac6:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <HAL_TIM_Encoder_MspInit+0xec>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <HAL_TIM_Encoder_MspInit+0xec>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	4a10      	ldr	r2, [pc, #64]	@ (8001b1c <HAL_TIM_Encoder_MspInit+0xec>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <HAL_TIM_Encoder_MspInit+0xec>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aee:	2303      	movs	r3, #3
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001afe:	2302      	movs	r3, #2
 8001b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	4619      	mov	r1, r3
 8001b08:	4807      	ldr	r0, [pc, #28]	@ (8001b28 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001b0a:	f001 fa37 	bl	8002f7c <HAL_GPIO_Init>
}
 8001b0e:	bf00      	nop
 8001b10:	3730      	adds	r7, #48	@ 0x30
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40000400 	.word	0x40000400
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020400 	.word	0x40020400
 8001b24:	40000c00 	.word	0x40000c00
 8001b28:	40020000 	.word	0x40020000

08001b2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	@ 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a37      	ldr	r2, [pc, #220]	@ (8001c28 <HAL_TIM_MspPostInit+0xfc>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d11f      	bne.n	8001b8e <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	4b36      	ldr	r3, [pc, #216]	@ (8001c2c <HAL_TIM_MspPostInit+0x100>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	4a35      	ldr	r2, [pc, #212]	@ (8001c2c <HAL_TIM_MspPostInit+0x100>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5e:	4b33      	ldr	r3, [pc, #204]	@ (8001c2c <HAL_TIM_MspPostInit+0x100>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001b6a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4619      	mov	r1, r3
 8001b86:	482a      	ldr	r0, [pc, #168]	@ (8001c30 <HAL_TIM_MspPostInit+0x104>)
 8001b88:	f001 f9f8 	bl	8002f7c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b8c:	e047      	b.n	8001c1e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b96:	d11f      	bne.n	8001bd8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	4b23      	ldr	r3, [pc, #140]	@ (8001c2c <HAL_TIM_MspPostInit+0x100>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba0:	4a22      	ldr	r2, [pc, #136]	@ (8001c2c <HAL_TIM_MspPostInit+0x100>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba8:	4b20      	ldr	r3, [pc, #128]	@ (8001c2c <HAL_TIM_MspPostInit+0x100>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4817      	ldr	r0, [pc, #92]	@ (8001c30 <HAL_TIM_MspPostInit+0x104>)
 8001bd2:	f001 f9d3 	bl	8002f7c <HAL_GPIO_Init>
}
 8001bd6:	e022      	b.n	8001c1e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a15      	ldr	r2, [pc, #84]	@ (8001c34 <HAL_TIM_MspPostInit+0x108>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d11d      	bne.n	8001c1e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <HAL_TIM_MspPostInit+0x100>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	4a10      	ldr	r2, [pc, #64]	@ (8001c2c <HAL_TIM_MspPostInit+0x100>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c2c <HAL_TIM_MspPostInit+0x100>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bfe:	23c0      	movs	r3, #192	@ 0xc0
 8001c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	4807      	ldr	r0, [pc, #28]	@ (8001c38 <HAL_TIM_MspPostInit+0x10c>)
 8001c1a:	f001 f9af 	bl	8002f7c <HAL_GPIO_Init>
}
 8001c1e:	bf00      	nop
 8001c20:	3728      	adds	r7, #40	@ 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020000 	.word	0x40020000
 8001c34:	40000800 	.word	0x40000800
 8001c38:	40020400 	.word	0x40020400

08001c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <NMI_Handler+0x4>

08001c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <HardFault_Handler+0x4>

08001c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <MemManage_Handler+0x4>

08001c54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <BusFault_Handler+0x4>

08001c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <UsageFault_Handler+0x4>

08001c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c92:	f000 f8a7 	bl	8001de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001c9e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001ca2:	f001 fb21 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ca6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001caa:	f001 fb1d 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cb8:	4802      	ldr	r0, [pc, #8]	@ (8001cc4 <DMA2_Stream0_IRQHandler+0x10>)
 8001cba:	f000 fef5 	bl	8002aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000244 	.word	0x20000244

08001cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <SystemInit+0x20>)
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cd2:	4a05      	ldr	r2, [pc, #20]	@ (8001ce8 <SystemInit+0x20>)
 8001cd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cf0:	f7ff ffea 	bl	8001cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cf4:	480c      	ldr	r0, [pc, #48]	@ (8001d28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cf6:	490d      	ldr	r1, [pc, #52]	@ (8001d2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cfc:	e002      	b.n	8001d04 <LoopCopyDataInit>

08001cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d02:	3304      	adds	r3, #4

08001d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d08:	d3f9      	bcc.n	8001cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d10:	e001      	b.n	8001d16 <LoopFillZerobss>

08001d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d14:	3204      	adds	r2, #4

08001d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d18:	d3fb      	bcc.n	8001d12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f002 ff23 	bl	8004b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d1e:	f7fe fd9f 	bl	8000860 <main>
  bx  lr    
 8001d22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d2c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001d30:	08004bf4 	.word	0x08004bf4
  ldr r2, =_sbss
 8001d34:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001d38:	20000464 	.word	0x20000464

08001d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d3c:	e7fe      	b.n	8001d3c <ADC_IRQHandler>
	...

08001d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d44:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <HAL_Init+0x40>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0d      	ldr	r2, [pc, #52]	@ (8001d80 <HAL_Init+0x40>)
 8001d4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d50:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <HAL_Init+0x40>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <HAL_Init+0x40>)
 8001d56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d5c:	4b08      	ldr	r3, [pc, #32]	@ (8001d80 <HAL_Init+0x40>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a07      	ldr	r2, [pc, #28]	@ (8001d80 <HAL_Init+0x40>)
 8001d62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d68:	2003      	movs	r0, #3
 8001d6a:	f000 fd55 	bl	8002818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6e:	200f      	movs	r0, #15
 8001d70:	f000 f808 	bl	8001d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d74:	f7ff fd28 	bl	80017c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023c00 	.word	0x40023c00

08001d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d8c:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <HAL_InitTick+0x54>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <HAL_InitTick+0x58>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4619      	mov	r1, r3
 8001d96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 fd6d 	bl	8002882 <HAL_SYSTICK_Config>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00e      	b.n	8001dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b0f      	cmp	r3, #15
 8001db6:	d80a      	bhi.n	8001dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db8:	2200      	movs	r2, #0
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dc0:	f000 fd35 	bl	800282e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc4:	4a06      	ldr	r2, [pc, #24]	@ (8001de0 <HAL_InitTick+0x5c>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e000      	b.n	8001dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	200001cc 	.word	0x200001cc
 8001ddc:	200001d4 	.word	0x200001d4
 8001de0:	200001d0 	.word	0x200001d0

08001de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de8:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <HAL_IncTick+0x20>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_IncTick+0x24>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	4a04      	ldr	r2, [pc, #16]	@ (8001e08 <HAL_IncTick+0x24>)
 8001df6:	6013      	str	r3, [r2, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	200001d4 	.word	0x200001d4
 8001e08:	20000460 	.word	0x20000460

08001e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b03      	ldr	r3, [pc, #12]	@ (8001e20 <HAL_GetTick+0x14>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000460 	.word	0x20000460

08001e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff ffee 	bl	8001e0c <HAL_GetTick>
 8001e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e3c:	d005      	beq.n	8001e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <HAL_Delay+0x44>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e4a:	bf00      	nop
 8001e4c:	f7ff ffde 	bl	8001e0c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d8f7      	bhi.n	8001e4c <HAL_Delay+0x28>
  {
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200001d4 	.word	0x200001d4

08001e6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e033      	b.n	8001eea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d109      	bne.n	8001e9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fcc4 	bl	8001818 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	f003 0310 	and.w	r3, r3, #16
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d118      	bne.n	8001edc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001eb2:	f023 0302 	bic.w	r3, r3, #2
 8001eb6:	f043 0202 	orr.w	r2, r3, #2
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 fa5c 	bl	800237c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	f023 0303 	bic.w	r3, r3, #3
 8001ed2:	f043 0201 	orr.w	r2, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001eda:	e001      	b.n	8001ee0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_ADC_Start_DMA+0x22>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e0d0      	b.n	80020b8 <HAL_ADC_Start_DMA+0x1c4>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d018      	beq.n	8001f5e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f3c:	4b60      	ldr	r3, [pc, #384]	@ (80020c0 <HAL_ADC_Start_DMA+0x1cc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a60      	ldr	r2, [pc, #384]	@ (80020c4 <HAL_ADC_Start_DMA+0x1d0>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	0c9a      	lsrs	r2, r3, #18
 8001f48:	4613      	mov	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001f50:	e002      	b.n	8001f58 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f9      	bne.n	8001f52 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f6c:	d107      	bne.n	8001f7e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f7c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	f040 8088 	bne.w	800209e <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001f96:	f023 0301 	bic.w	r3, r3, #1
 8001f9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d007      	beq.n	8001fc0 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fb8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fcc:	d106      	bne.n	8001fdc <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f023 0206 	bic.w	r2, r3, #6
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	645a      	str	r2, [r3, #68]	@ 0x44
 8001fda:	e002      	b.n	8001fe2 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fea:	4b37      	ldr	r3, [pc, #220]	@ (80020c8 <HAL_ADC_Start_DMA+0x1d4>)
 8001fec:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff2:	4a36      	ldr	r2, [pc, #216]	@ (80020cc <HAL_ADC_Start_DMA+0x1d8>)
 8001ff4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ffa:	4a35      	ldr	r2, [pc, #212]	@ (80020d0 <HAL_ADC_Start_DMA+0x1dc>)
 8001ffc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002002:	4a34      	ldr	r2, [pc, #208]	@ (80020d4 <HAL_ADC_Start_DMA+0x1e0>)
 8002004:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800200e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800201e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800202e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	334c      	adds	r3, #76	@ 0x4c
 800203a:	4619      	mov	r1, r3
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f000 fcda 	bl	80029f8 <HAL_DMA_Start_IT>
 8002044:	4603      	mov	r3, r0
 8002046:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10f      	bne.n	8002074 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d129      	bne.n	80020b6 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	e020      	b.n	80020b6 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a17      	ldr	r2, [pc, #92]	@ (80020d8 <HAL_ADC_Start_DMA+0x1e4>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d11b      	bne.n	80020b6 <HAL_ADC_Start_DMA+0x1c2>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d114      	bne.n	80020b6 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	e00b      	b.n	80020b6 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	f043 0210 	orr.w	r2, r3, #16
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	f043 0201 	orr.w	r2, r3, #1
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80020b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3720      	adds	r7, #32
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	200001cc 	.word	0x200001cc
 80020c4:	431bde83 	.word	0x431bde83
 80020c8:	40012300 	.word	0x40012300
 80020cc:	08002575 	.word	0x08002575
 80020d0:	0800262f 	.word	0x0800262f
 80020d4:	0800264b 	.word	0x0800264b
 80020d8:	40012000 	.word	0x40012000

080020dc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x1c>
 8002130:	2302      	movs	r3, #2
 8002132:	e113      	b.n	800235c <HAL_ADC_ConfigChannel+0x244>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b09      	cmp	r3, #9
 8002142:	d925      	bls.n	8002190 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68d9      	ldr	r1, [r3, #12]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	4613      	mov	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	3b1e      	subs	r3, #30
 800215a:	2207      	movs	r2, #7
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43da      	mvns	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	400a      	ands	r2, r1
 8002168:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68d9      	ldr	r1, [r3, #12]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	b29b      	uxth	r3, r3
 800217a:	4618      	mov	r0, r3
 800217c:	4603      	mov	r3, r0
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	4403      	add	r3, r0
 8002182:	3b1e      	subs	r3, #30
 8002184:	409a      	lsls	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	e022      	b.n	80021d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6919      	ldr	r1, [r3, #16]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	4613      	mov	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4413      	add	r3, r2
 80021a4:	2207      	movs	r2, #7
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43da      	mvns	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	400a      	ands	r2, r1
 80021b2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6919      	ldr	r1, [r3, #16]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	4618      	mov	r0, r3
 80021c6:	4603      	mov	r3, r0
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4403      	add	r3, r0
 80021cc:	409a      	lsls	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d824      	bhi.n	8002228 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	3b05      	subs	r3, #5
 80021f0:	221f      	movs	r2, #31
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43da      	mvns	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	400a      	ands	r2, r1
 80021fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	4618      	mov	r0, r3
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	3b05      	subs	r3, #5
 800221a:	fa00 f203 	lsl.w	r2, r0, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	635a      	str	r2, [r3, #52]	@ 0x34
 8002226:	e04c      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b0c      	cmp	r3, #12
 800222e:	d824      	bhi.n	800227a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	3b23      	subs	r3, #35	@ 0x23
 8002242:	221f      	movs	r2, #31
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43da      	mvns	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	400a      	ands	r2, r1
 8002250:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	b29b      	uxth	r3, r3
 800225e:	4618      	mov	r0, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	3b23      	subs	r3, #35	@ 0x23
 800226c:	fa00 f203 	lsl.w	r2, r0, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	631a      	str	r2, [r3, #48]	@ 0x30
 8002278:	e023      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	3b41      	subs	r3, #65	@ 0x41
 800228c:	221f      	movs	r2, #31
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43da      	mvns	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	400a      	ands	r2, r1
 800229a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	4618      	mov	r0, r3
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	3b41      	subs	r3, #65	@ 0x41
 80022b6:	fa00 f203 	lsl.w	r2, r0, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022c2:	4b29      	ldr	r3, [pc, #164]	@ (8002368 <HAL_ADC_ConfigChannel+0x250>)
 80022c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a28      	ldr	r2, [pc, #160]	@ (800236c <HAL_ADC_ConfigChannel+0x254>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d10f      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x1d8>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b12      	cmp	r3, #18
 80022d6:	d10b      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a1d      	ldr	r2, [pc, #116]	@ (800236c <HAL_ADC_ConfigChannel+0x254>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d12b      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x23a>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002370 <HAL_ADC_ConfigChannel+0x258>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d003      	beq.n	800230c <HAL_ADC_ConfigChannel+0x1f4>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b11      	cmp	r3, #17
 800230a:	d122      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a11      	ldr	r2, [pc, #68]	@ (8002370 <HAL_ADC_ConfigChannel+0x258>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d111      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800232e:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <HAL_ADC_ConfigChannel+0x25c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a11      	ldr	r2, [pc, #68]	@ (8002378 <HAL_ADC_ConfigChannel+0x260>)
 8002334:	fba2 2303 	umull	r2, r3, r2, r3
 8002338:	0c9a      	lsrs	r2, r3, #18
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002344:	e002      	b.n	800234c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	3b01      	subs	r3, #1
 800234a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f9      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	40012300 	.word	0x40012300
 800236c:	40012000 	.word	0x40012000
 8002370:	10000012 	.word	0x10000012
 8002374:	200001cc 	.word	0x200001cc
 8002378:	431bde83 	.word	0x431bde83

0800237c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002384:	4b79      	ldr	r3, [pc, #484]	@ (800256c <ADC_Init+0x1f0>)
 8002386:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	431a      	orrs	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	021a      	lsls	r2, r3, #8
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80023d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6899      	ldr	r1, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240e:	4a58      	ldr	r2, [pc, #352]	@ (8002570 <ADC_Init+0x1f4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d022      	beq.n	800245a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002422:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6899      	ldr	r1, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002444:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6899      	ldr	r1, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	e00f      	b.n	800247a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002468:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002478:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0202 	bic.w	r2, r2, #2
 8002488:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6899      	ldr	r1, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	7e1b      	ldrb	r3, [r3, #24]
 8002494:	005a      	lsls	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01b      	beq.n	80024e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024b6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80024c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	3b01      	subs	r3, #1
 80024d4:	035a      	lsls	r2, r3, #13
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	e007      	b.n	80024f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024ee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80024fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	3b01      	subs	r3, #1
 800250c:	051a      	lsls	r2, r3, #20
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002524:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6899      	ldr	r1, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002532:	025a      	lsls	r2, r3, #9
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800254a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6899      	ldr	r1, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	029a      	lsls	r2, r3, #10
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	609a      	str	r2, [r3, #8]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	40012300 	.word	0x40012300
 8002570:	0f000001 	.word	0x0f000001

08002574 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002580:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800258a:	2b00      	cmp	r3, #0
 800258c:	d13c      	bne.n	8002608 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d12b      	bne.n	8002600 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d127      	bne.n	8002600 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d006      	beq.n	80025cc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d119      	bne.n	8002600 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0220 	bic.w	r2, r2, #32
 80025da:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d105      	bne.n	8002600 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	f043 0201 	orr.w	r2, r3, #1
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f7ff fd6b 	bl	80020dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002606:	e00e      	b.n	8002626 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f7ff fd75 	bl	8002104 <HAL_ADC_ErrorCallback>
}
 800261a:	e004      	b.n	8002626 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	4798      	blx	r3
}
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b084      	sub	sp, #16
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800263a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f7ff fd57 	bl	80020f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b084      	sub	sp, #16
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002656:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2240      	movs	r2, #64	@ 0x40
 800265c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002662:	f043 0204 	orr.w	r2, r3, #4
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f7ff fd4a 	bl	8002104 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002688:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002694:	4013      	ands	r3, r2
 8002696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026aa:	4a04      	ldr	r2, [pc, #16]	@ (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	60d3      	str	r3, [r2, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c4:	4b04      	ldr	r3, [pc, #16]	@ (80026d8 <__NVIC_GetPriorityGrouping+0x18>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	f003 0307 	and.w	r3, r3, #7
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	db0b      	blt.n	8002706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	f003 021f 	and.w	r2, r3, #31
 80026f4:	4907      	ldr	r1, [pc, #28]	@ (8002714 <__NVIC_EnableIRQ+0x38>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	2001      	movs	r0, #1
 80026fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000e100 	.word	0xe000e100

08002718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	6039      	str	r1, [r7, #0]
 8002722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002728:	2b00      	cmp	r3, #0
 800272a:	db0a      	blt.n	8002742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	b2da      	uxtb	r2, r3
 8002730:	490c      	ldr	r1, [pc, #48]	@ (8002764 <__NVIC_SetPriority+0x4c>)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	0112      	lsls	r2, r2, #4
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	440b      	add	r3, r1
 800273c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002740:	e00a      	b.n	8002758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	4908      	ldr	r1, [pc, #32]	@ (8002768 <__NVIC_SetPriority+0x50>)
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	3b04      	subs	r3, #4
 8002750:	0112      	lsls	r2, r2, #4
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	440b      	add	r3, r1
 8002756:	761a      	strb	r2, [r3, #24]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000e100 	.word	0xe000e100
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	@ 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f1c3 0307 	rsb	r3, r3, #7
 8002786:	2b04      	cmp	r3, #4
 8002788:	bf28      	it	cs
 800278a:	2304      	movcs	r3, #4
 800278c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3304      	adds	r3, #4
 8002792:	2b06      	cmp	r3, #6
 8002794:	d902      	bls.n	800279c <NVIC_EncodePriority+0x30>
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3b03      	subs	r3, #3
 800279a:	e000      	b.n	800279e <NVIC_EncodePriority+0x32>
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43da      	mvns	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	401a      	ands	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	43d9      	mvns	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	4313      	orrs	r3, r2
         );
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3724      	adds	r7, #36	@ 0x24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027e4:	d301      	bcc.n	80027ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027e6:	2301      	movs	r3, #1
 80027e8:	e00f      	b.n	800280a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002814 <SysTick_Config+0x40>)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027f2:	210f      	movs	r1, #15
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027f8:	f7ff ff8e 	bl	8002718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027fc:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <SysTick_Config+0x40>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002802:	4b04      	ldr	r3, [pc, #16]	@ (8002814 <SysTick_Config+0x40>)
 8002804:	2207      	movs	r2, #7
 8002806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	e000e010 	.word	0xe000e010

08002818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff ff29 	bl	8002678 <__NVIC_SetPriorityGrouping>
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800282e:	b580      	push	{r7, lr}
 8002830:	b086      	sub	sp, #24
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002840:	f7ff ff3e 	bl	80026c0 <__NVIC_GetPriorityGrouping>
 8002844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	6978      	ldr	r0, [r7, #20]
 800284c:	f7ff ff8e 	bl	800276c <NVIC_EncodePriority>
 8002850:	4602      	mov	r2, r0
 8002852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002856:	4611      	mov	r1, r2
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff5d 	bl	8002718 <__NVIC_SetPriority>
}
 800285e:	bf00      	nop
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	4603      	mov	r3, r0
 800286e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff ff31 	bl	80026dc <__NVIC_EnableIRQ>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff ffa2 	bl	80027d4 <SysTick_Config>
 8002890:	4603      	mov	r3, r0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028a8:	f7ff fab0 	bl	8001e0c <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e099      	b.n	80029ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d8:	e00f      	b.n	80028fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028da:	f7ff fa97 	bl	8001e0c <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b05      	cmp	r3, #5
 80028e6:	d908      	bls.n	80028fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2220      	movs	r2, #32
 80028ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2203      	movs	r2, #3
 80028f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e078      	b.n	80029ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1e8      	bne.n	80028da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4b38      	ldr	r3, [pc, #224]	@ (80029f4 <HAL_DMA_Init+0x158>)
 8002914:	4013      	ands	r3, r2
 8002916:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002926:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002932:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800293e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	2b04      	cmp	r3, #4
 8002952:	d107      	bne.n	8002964 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295c:	4313      	orrs	r3, r2
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f023 0307 	bic.w	r3, r3, #7
 800297a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	4313      	orrs	r3, r2
 8002984:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	2b04      	cmp	r3, #4
 800298c:	d117      	bne.n	80029be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4313      	orrs	r3, r2
 8002996:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00e      	beq.n	80029be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fa6f 	bl	8002e84 <DMA_CheckFifoParam>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2240      	movs	r2, #64	@ 0x40
 80029b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80029ba:	2301      	movs	r3, #1
 80029bc:	e016      	b.n	80029ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fa26 	bl	8002e18 <DMA_CalcBaseAndBitshift>
 80029cc:	4603      	mov	r3, r0
 80029ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d4:	223f      	movs	r2, #63	@ 0x3f
 80029d6:	409a      	lsls	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	f010803f 	.word	0xf010803f

080029f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_DMA_Start_IT+0x26>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e040      	b.n	8002aa0 <HAL_DMA_Start_IT+0xa8>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d12f      	bne.n	8002a92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2202      	movs	r2, #2
 8002a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f9b8 	bl	8002dbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a50:	223f      	movs	r2, #63	@ 0x3f
 8002a52:	409a      	lsls	r2, r3
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0216 	orr.w	r2, r2, #22
 8002a66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d007      	beq.n	8002a80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0208 	orr.w	r2, r2, #8
 8002a7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	e005      	b.n	8002a9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ab4:	4b8e      	ldr	r3, [pc, #568]	@ (8002cf0 <HAL_DMA_IRQHandler+0x248>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a8e      	ldr	r2, [pc, #568]	@ (8002cf4 <HAL_DMA_IRQHandler+0x24c>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	0a9b      	lsrs	r3, r3, #10
 8002ac0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad2:	2208      	movs	r2, #8
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d01a      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d013      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0204 	bic.w	r2, r2, #4
 8002afa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b00:	2208      	movs	r2, #8
 8002b02:	409a      	lsls	r2, r3
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0c:	f043 0201 	orr.w	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b18:	2201      	movs	r2, #1
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d012      	beq.n	8002b4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b36:	2201      	movs	r2, #1
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b42:	f043 0202 	orr.w	r2, r3, #2
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4e:	2204      	movs	r2, #4
 8002b50:	409a      	lsls	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d012      	beq.n	8002b80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00b      	beq.n	8002b80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b78:	f043 0204 	orr.w	r2, r3, #4
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b84:	2210      	movs	r2, #16
 8002b86:	409a      	lsls	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d043      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d03c      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba2:	2210      	movs	r2, #16
 8002ba4:	409a      	lsls	r2, r3
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d018      	beq.n	8002bea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d108      	bne.n	8002bd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d024      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4798      	blx	r3
 8002bd6:	e01f      	b.n	8002c18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01b      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	4798      	blx	r3
 8002be8:	e016      	b.n	8002c18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d107      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0208 	bic.w	r2, r2, #8
 8002c06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 808f 	beq.w	8002d48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 8087 	beq.w	8002d48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3e:	2220      	movs	r2, #32
 8002c40:	409a      	lsls	r2, r3
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b05      	cmp	r3, #5
 8002c50:	d136      	bne.n	8002cc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0216 	bic.w	r2, r2, #22
 8002c60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d103      	bne.n	8002c82 <HAL_DMA_IRQHandler+0x1da>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0208 	bic.w	r2, r2, #8
 8002c90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c96:	223f      	movs	r2, #63	@ 0x3f
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d07e      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	4798      	blx	r3
        }
        return;
 8002cbe:	e079      	b.n	8002db4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d01d      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10d      	bne.n	8002cf8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d031      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4798      	blx	r3
 8002cec:	e02c      	b.n	8002d48 <HAL_DMA_IRQHandler+0x2a0>
 8002cee:	bf00      	nop
 8002cf0:	200001cc 	.word	0x200001cc
 8002cf4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d023      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	4798      	blx	r3
 8002d08:	e01e      	b.n	8002d48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10f      	bne.n	8002d38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0210 	bic.w	r2, r2, #16
 8002d26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d032      	beq.n	8002db6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d022      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2205      	movs	r2, #5
 8002d60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	3301      	adds	r3, #1
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d307      	bcc.n	8002d90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f2      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x2cc>
 8002d8e:	e000      	b.n	8002d92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	4798      	blx	r3
 8002db2:	e000      	b.n	8002db6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002db4:	bf00      	nop
    }
  }
}
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002dd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b40      	cmp	r3, #64	@ 0x40
 8002de8:	d108      	bne.n	8002dfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dfa:	e007      	b.n	8002e0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	60da      	str	r2, [r3, #12]
}
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	3b10      	subs	r3, #16
 8002e28:	4a14      	ldr	r2, [pc, #80]	@ (8002e7c <DMA_CalcBaseAndBitshift+0x64>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	091b      	lsrs	r3, r3, #4
 8002e30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e32:	4a13      	ldr	r2, [pc, #76]	@ (8002e80 <DMA_CalcBaseAndBitshift+0x68>)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4413      	add	r3, r2
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d909      	bls.n	8002e5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e4e:	f023 0303 	bic.w	r3, r3, #3
 8002e52:	1d1a      	adds	r2, r3, #4
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e58:	e007      	b.n	8002e6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e62:	f023 0303 	bic.w	r3, r3, #3
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	aaaaaaab 	.word	0xaaaaaaab
 8002e80:	08004bdc 	.word	0x08004bdc

08002e84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d11f      	bne.n	8002ede <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d856      	bhi.n	8002f52 <DMA_CheckFifoParam+0xce>
 8002ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8002eac <DMA_CheckFifoParam+0x28>)
 8002ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eaa:	bf00      	nop
 8002eac:	08002ebd 	.word	0x08002ebd
 8002eb0:	08002ecf 	.word	0x08002ecf
 8002eb4:	08002ebd 	.word	0x08002ebd
 8002eb8:	08002f53 	.word	0x08002f53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d046      	beq.n	8002f56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ecc:	e043      	b.n	8002f56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ed6:	d140      	bne.n	8002f5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002edc:	e03d      	b.n	8002f5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ee6:	d121      	bne.n	8002f2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d837      	bhi.n	8002f5e <DMA_CheckFifoParam+0xda>
 8002eee:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef4 <DMA_CheckFifoParam+0x70>)
 8002ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef4:	08002f05 	.word	0x08002f05
 8002ef8:	08002f0b 	.word	0x08002f0b
 8002efc:	08002f05 	.word	0x08002f05
 8002f00:	08002f1d 	.word	0x08002f1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
      break;
 8002f08:	e030      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d025      	beq.n	8002f62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f1a:	e022      	b.n	8002f62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f20:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f24:	d11f      	bne.n	8002f66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f2a:	e01c      	b.n	8002f66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d903      	bls.n	8002f3a <DMA_CheckFifoParam+0xb6>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d003      	beq.n	8002f40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f38:	e018      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f3e:	e015      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00e      	beq.n	8002f6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f50:	e00b      	b.n	8002f6a <DMA_CheckFifoParam+0xe6>
      break;
 8002f52:	bf00      	nop
 8002f54:	e00a      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;
 8002f56:	bf00      	nop
 8002f58:	e008      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;
 8002f5a:	bf00      	nop
 8002f5c:	e006      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;
 8002f5e:	bf00      	nop
 8002f60:	e004      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;
 8002f62:	bf00      	nop
 8002f64:	e002      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f66:	bf00      	nop
 8002f68:	e000      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;
 8002f6a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop

08002f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	@ 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	e159      	b.n	800324c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f98:	2201      	movs	r2, #1
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	f040 8148 	bne.w	8003246 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d005      	beq.n	8002fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d130      	bne.n	8003030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	2203      	movs	r2, #3
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003004:	2201      	movs	r2, #1
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 0201 	and.w	r2, r3, #1
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	2b03      	cmp	r3, #3
 800303a:	d017      	beq.n	800306c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	2203      	movs	r2, #3
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d123      	bne.n	80030c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	08da      	lsrs	r2, r3, #3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3208      	adds	r2, #8
 8003080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	220f      	movs	r2, #15
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	08da      	lsrs	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3208      	adds	r2, #8
 80030ba:	69b9      	ldr	r1, [r7, #24]
 80030bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	2203      	movs	r2, #3
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 0203 	and.w	r2, r3, #3
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80a2 	beq.w	8003246 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	4b57      	ldr	r3, [pc, #348]	@ (8003264 <HAL_GPIO_Init+0x2e8>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	4a56      	ldr	r2, [pc, #344]	@ (8003264 <HAL_GPIO_Init+0x2e8>)
 800310c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003110:	6453      	str	r3, [r2, #68]	@ 0x44
 8003112:	4b54      	ldr	r3, [pc, #336]	@ (8003264 <HAL_GPIO_Init+0x2e8>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003116:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800311e:	4a52      	ldr	r2, [pc, #328]	@ (8003268 <HAL_GPIO_Init+0x2ec>)
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	3302      	adds	r3, #2
 8003126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800312a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	220f      	movs	r2, #15
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4013      	ands	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a49      	ldr	r2, [pc, #292]	@ (800326c <HAL_GPIO_Init+0x2f0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d019      	beq.n	800317e <HAL_GPIO_Init+0x202>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a48      	ldr	r2, [pc, #288]	@ (8003270 <HAL_GPIO_Init+0x2f4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_GPIO_Init+0x1fe>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a47      	ldr	r2, [pc, #284]	@ (8003274 <HAL_GPIO_Init+0x2f8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00d      	beq.n	8003176 <HAL_GPIO_Init+0x1fa>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a46      	ldr	r2, [pc, #280]	@ (8003278 <HAL_GPIO_Init+0x2fc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d007      	beq.n	8003172 <HAL_GPIO_Init+0x1f6>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a45      	ldr	r2, [pc, #276]	@ (800327c <HAL_GPIO_Init+0x300>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d101      	bne.n	800316e <HAL_GPIO_Init+0x1f2>
 800316a:	2304      	movs	r3, #4
 800316c:	e008      	b.n	8003180 <HAL_GPIO_Init+0x204>
 800316e:	2307      	movs	r3, #7
 8003170:	e006      	b.n	8003180 <HAL_GPIO_Init+0x204>
 8003172:	2303      	movs	r3, #3
 8003174:	e004      	b.n	8003180 <HAL_GPIO_Init+0x204>
 8003176:	2302      	movs	r3, #2
 8003178:	e002      	b.n	8003180 <HAL_GPIO_Init+0x204>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <HAL_GPIO_Init+0x204>
 800317e:	2300      	movs	r3, #0
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	f002 0203 	and.w	r2, r2, #3
 8003186:	0092      	lsls	r2, r2, #2
 8003188:	4093      	lsls	r3, r2
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003190:	4935      	ldr	r1, [pc, #212]	@ (8003268 <HAL_GPIO_Init+0x2ec>)
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	089b      	lsrs	r3, r3, #2
 8003196:	3302      	adds	r3, #2
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800319e:	4b38      	ldr	r3, [pc, #224]	@ (8003280 <HAL_GPIO_Init+0x304>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	43db      	mvns	r3, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4013      	ands	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031c2:	4a2f      	ldr	r2, [pc, #188]	@ (8003280 <HAL_GPIO_Init+0x304>)
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003280 <HAL_GPIO_Init+0x304>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031ec:	4a24      	ldr	r2, [pc, #144]	@ (8003280 <HAL_GPIO_Init+0x304>)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031f2:	4b23      	ldr	r3, [pc, #140]	@ (8003280 <HAL_GPIO_Init+0x304>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4013      	ands	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003216:	4a1a      	ldr	r2, [pc, #104]	@ (8003280 <HAL_GPIO_Init+0x304>)
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800321c:	4b18      	ldr	r3, [pc, #96]	@ (8003280 <HAL_GPIO_Init+0x304>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003240:	4a0f      	ldr	r2, [pc, #60]	@ (8003280 <HAL_GPIO_Init+0x304>)
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3301      	adds	r3, #1
 800324a:	61fb      	str	r3, [r7, #28]
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	2b0f      	cmp	r3, #15
 8003250:	f67f aea2 	bls.w	8002f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	3724      	adds	r7, #36	@ 0x24
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800
 8003268:	40013800 	.word	0x40013800
 800326c:	40020000 	.word	0x40020000
 8003270:	40020400 	.word	0x40020400
 8003274:	40020800 	.word	0x40020800
 8003278:	40020c00 	.word	0x40020c00
 800327c:	40021000 	.word	0x40021000
 8003280:	40013c00 	.word	0x40013c00

08003284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	887b      	ldrh	r3, [r7, #2]
 8003296:	4013      	ands	r3, r2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
 80032a0:	e001      	b.n	80032a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032a2:	2300      	movs	r3, #0
 80032a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]
 80032c0:	4613      	mov	r3, r2
 80032c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032c4:	787b      	ldrb	r3, [r7, #1]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032d0:	e003      	b.n	80032da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032d2:	887b      	ldrh	r3, [r7, #2]
 80032d4:	041a      	lsls	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	619a      	str	r2, [r3, #24]
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032f2:	4b08      	ldr	r3, [pc, #32]	@ (8003314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d006      	beq.n	800330c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032fe:	4a05      	ldr	r2, [pc, #20]	@ (8003314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003304:	88fb      	ldrh	r3, [r7, #6]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd ff1c 	bl	8001144 <HAL_GPIO_EXTI_Callback>
  }
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40013c00 	.word	0x40013c00

08003318 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e12b      	b.n	8003582 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fe fae2 	bl	8001908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2224      	movs	r2, #36	@ 0x24
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800336a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800337a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800337c:	f000 fd40 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 8003380:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4a81      	ldr	r2, [pc, #516]	@ (800358c <HAL_I2C_Init+0x274>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d807      	bhi.n	800339c <HAL_I2C_Init+0x84>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a80      	ldr	r2, [pc, #512]	@ (8003590 <HAL_I2C_Init+0x278>)
 8003390:	4293      	cmp	r3, r2
 8003392:	bf94      	ite	ls
 8003394:	2301      	movls	r3, #1
 8003396:	2300      	movhi	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	e006      	b.n	80033aa <HAL_I2C_Init+0x92>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4a7d      	ldr	r2, [pc, #500]	@ (8003594 <HAL_I2C_Init+0x27c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	bf94      	ite	ls
 80033a4:	2301      	movls	r3, #1
 80033a6:	2300      	movhi	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e0e7      	b.n	8003582 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4a78      	ldr	r2, [pc, #480]	@ (8003598 <HAL_I2C_Init+0x280>)
 80033b6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ba:	0c9b      	lsrs	r3, r3, #18
 80033bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a6a      	ldr	r2, [pc, #424]	@ (800358c <HAL_I2C_Init+0x274>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d802      	bhi.n	80033ec <HAL_I2C_Init+0xd4>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	3301      	adds	r3, #1
 80033ea:	e009      	b.n	8003400 <HAL_I2C_Init+0xe8>
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80033f2:	fb02 f303 	mul.w	r3, r2, r3
 80033f6:	4a69      	ldr	r2, [pc, #420]	@ (800359c <HAL_I2C_Init+0x284>)
 80033f8:	fba2 2303 	umull	r2, r3, r2, r3
 80033fc:	099b      	lsrs	r3, r3, #6
 80033fe:	3301      	adds	r3, #1
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	430b      	orrs	r3, r1
 8003406:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003412:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	495c      	ldr	r1, [pc, #368]	@ (800358c <HAL_I2C_Init+0x274>)
 800341c:	428b      	cmp	r3, r1
 800341e:	d819      	bhi.n	8003454 <HAL_I2C_Init+0x13c>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1e59      	subs	r1, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	fbb1 f3f3 	udiv	r3, r1, r3
 800342e:	1c59      	adds	r1, r3, #1
 8003430:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003434:	400b      	ands	r3, r1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_I2C_Init+0x138>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1e59      	subs	r1, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	fbb1 f3f3 	udiv	r3, r1, r3
 8003448:	3301      	adds	r3, #1
 800344a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344e:	e051      	b.n	80034f4 <HAL_I2C_Init+0x1dc>
 8003450:	2304      	movs	r3, #4
 8003452:	e04f      	b.n	80034f4 <HAL_I2C_Init+0x1dc>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d111      	bne.n	8003480 <HAL_I2C_Init+0x168>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1e58      	subs	r0, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	440b      	add	r3, r1
 800346a:	fbb0 f3f3 	udiv	r3, r0, r3
 800346e:	3301      	adds	r3, #1
 8003470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003474:	2b00      	cmp	r3, #0
 8003476:	bf0c      	ite	eq
 8003478:	2301      	moveq	r3, #1
 800347a:	2300      	movne	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e012      	b.n	80034a6 <HAL_I2C_Init+0x18e>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1e58      	subs	r0, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6859      	ldr	r1, [r3, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	0099      	lsls	r1, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	fbb0 f3f3 	udiv	r3, r0, r3
 8003496:	3301      	adds	r3, #1
 8003498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_I2C_Init+0x196>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e022      	b.n	80034f4 <HAL_I2C_Init+0x1dc>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10e      	bne.n	80034d4 <HAL_I2C_Init+0x1bc>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1e58      	subs	r0, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6859      	ldr	r1, [r3, #4]
 80034be:	460b      	mov	r3, r1
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	440b      	add	r3, r1
 80034c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034c8:	3301      	adds	r3, #1
 80034ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034d2:	e00f      	b.n	80034f4 <HAL_I2C_Init+0x1dc>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	1e58      	subs	r0, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6859      	ldr	r1, [r3, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	0099      	lsls	r1, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ea:	3301      	adds	r3, #1
 80034ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	6809      	ldr	r1, [r1, #0]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69da      	ldr	r2, [r3, #28]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003522:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6911      	ldr	r1, [r2, #16]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68d2      	ldr	r2, [r2, #12]
 800352e:	4311      	orrs	r1, r2
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	430b      	orrs	r3, r1
 8003536:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	000186a0 	.word	0x000186a0
 8003590:	001e847f 	.word	0x001e847f
 8003594:	003d08ff 	.word	0x003d08ff
 8003598:	431bde83 	.word	0x431bde83
 800359c:	10624dd3 	.word	0x10624dd3

080035a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e267      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d075      	beq.n	80036aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035be:	4b88      	ldr	r3, [pc, #544]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d00c      	beq.n	80035e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ca:	4b85      	ldr	r3, [pc, #532]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d112      	bne.n	80035fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035d6:	4b82      	ldr	r3, [pc, #520]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035e2:	d10b      	bne.n	80035fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	4b7e      	ldr	r3, [pc, #504]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d05b      	beq.n	80036a8 <HAL_RCC_OscConfig+0x108>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d157      	bne.n	80036a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e242      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003604:	d106      	bne.n	8003614 <HAL_RCC_OscConfig+0x74>
 8003606:	4b76      	ldr	r3, [pc, #472]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a75      	ldr	r2, [pc, #468]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e01d      	b.n	8003650 <HAL_RCC_OscConfig+0xb0>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800361c:	d10c      	bne.n	8003638 <HAL_RCC_OscConfig+0x98>
 800361e:	4b70      	ldr	r3, [pc, #448]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a6f      	ldr	r2, [pc, #444]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003624:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	4b6d      	ldr	r3, [pc, #436]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a6c      	ldr	r2, [pc, #432]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e00b      	b.n	8003650 <HAL_RCC_OscConfig+0xb0>
 8003638:	4b69      	ldr	r3, [pc, #420]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a68      	ldr	r2, [pc, #416]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 800363e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4b66      	ldr	r3, [pc, #408]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a65      	ldr	r2, [pc, #404]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 800364a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800364e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d013      	beq.n	8003680 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fe fbd8 	bl	8001e0c <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003660:	f7fe fbd4 	bl	8001e0c <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	@ 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e207      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003672:	4b5b      	ldr	r3, [pc, #364]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0xc0>
 800367e:	e014      	b.n	80036aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003680:	f7fe fbc4 	bl	8001e0c <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003688:	f7fe fbc0 	bl	8001e0c <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	@ 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e1f3      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369a:	4b51      	ldr	r3, [pc, #324]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0xe8>
 80036a6:	e000      	b.n	80036aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d063      	beq.n	800377e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036b6:	4b4a      	ldr	r3, [pc, #296]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036c2:	4b47      	ldr	r3, [pc, #284]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d11c      	bne.n	8003708 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ce:	4b44      	ldr	r3, [pc, #272]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d116      	bne.n	8003708 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036da:	4b41      	ldr	r3, [pc, #260]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <HAL_RCC_OscConfig+0x152>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d001      	beq.n	80036f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e1c7      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f2:	4b3b      	ldr	r3, [pc, #236]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4937      	ldr	r1, [pc, #220]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003702:	4313      	orrs	r3, r2
 8003704:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003706:	e03a      	b.n	800377e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d020      	beq.n	8003752 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003710:	4b34      	ldr	r3, [pc, #208]	@ (80037e4 <HAL_RCC_OscConfig+0x244>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003716:	f7fe fb79 	bl	8001e0c <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800371e:	f7fe fb75 	bl	8001e0c <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e1a8      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003730:	4b2b      	ldr	r3, [pc, #172]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373c:	4b28      	ldr	r3, [pc, #160]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4925      	ldr	r1, [pc, #148]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 800374c:	4313      	orrs	r3, r2
 800374e:	600b      	str	r3, [r1, #0]
 8003750:	e015      	b.n	800377e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003752:	4b24      	ldr	r3, [pc, #144]	@ (80037e4 <HAL_RCC_OscConfig+0x244>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003758:	f7fe fb58 	bl	8001e0c <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003760:	f7fe fb54 	bl	8001e0c <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e187      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003772:	4b1b      	ldr	r3, [pc, #108]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d036      	beq.n	80037f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d016      	beq.n	80037c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003792:	4b15      	ldr	r3, [pc, #84]	@ (80037e8 <HAL_RCC_OscConfig+0x248>)
 8003794:	2201      	movs	r2, #1
 8003796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003798:	f7fe fb38 	bl	8001e0c <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a0:	f7fe fb34 	bl	8001e0c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e167      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b2:	4b0b      	ldr	r3, [pc, #44]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 80037b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x200>
 80037be:	e01b      	b.n	80037f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c0:	4b09      	ldr	r3, [pc, #36]	@ (80037e8 <HAL_RCC_OscConfig+0x248>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c6:	f7fe fb21 	bl	8001e0c <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037cc:	e00e      	b.n	80037ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ce:	f7fe fb1d 	bl	8001e0c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d907      	bls.n	80037ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e150      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
 80037e0:	40023800 	.word	0x40023800
 80037e4:	42470000 	.word	0x42470000
 80037e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ec:	4b88      	ldr	r3, [pc, #544]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80037ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ea      	bne.n	80037ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8097 	beq.w	8003934 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003806:	2300      	movs	r3, #0
 8003808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800380a:	4b81      	ldr	r3, [pc, #516]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10f      	bne.n	8003836 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	4b7d      	ldr	r3, [pc, #500]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	4a7c      	ldr	r2, [pc, #496]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003824:	6413      	str	r3, [r2, #64]	@ 0x40
 8003826:	4b7a      	ldr	r3, [pc, #488]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003832:	2301      	movs	r3, #1
 8003834:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003836:	4b77      	ldr	r3, [pc, #476]	@ (8003a14 <HAL_RCC_OscConfig+0x474>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d118      	bne.n	8003874 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003842:	4b74      	ldr	r3, [pc, #464]	@ (8003a14 <HAL_RCC_OscConfig+0x474>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a73      	ldr	r2, [pc, #460]	@ (8003a14 <HAL_RCC_OscConfig+0x474>)
 8003848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800384c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384e:	f7fe fadd 	bl	8001e0c <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003856:	f7fe fad9 	bl	8001e0c <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e10c      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003868:	4b6a      	ldr	r3, [pc, #424]	@ (8003a14 <HAL_RCC_OscConfig+0x474>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f0      	beq.n	8003856 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d106      	bne.n	800388a <HAL_RCC_OscConfig+0x2ea>
 800387c:	4b64      	ldr	r3, [pc, #400]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003880:	4a63      	ldr	r2, [pc, #396]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6713      	str	r3, [r2, #112]	@ 0x70
 8003888:	e01c      	b.n	80038c4 <HAL_RCC_OscConfig+0x324>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b05      	cmp	r3, #5
 8003890:	d10c      	bne.n	80038ac <HAL_RCC_OscConfig+0x30c>
 8003892:	4b5f      	ldr	r3, [pc, #380]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003896:	4a5e      	ldr	r2, [pc, #376]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003898:	f043 0304 	orr.w	r3, r3, #4
 800389c:	6713      	str	r3, [r2, #112]	@ 0x70
 800389e:	4b5c      	ldr	r3, [pc, #368]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038aa:	e00b      	b.n	80038c4 <HAL_RCC_OscConfig+0x324>
 80038ac:	4b58      	ldr	r3, [pc, #352]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b0:	4a57      	ldr	r2, [pc, #348]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80038b8:	4b55      	ldr	r3, [pc, #340]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038bc:	4a54      	ldr	r2, [pc, #336]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038be:	f023 0304 	bic.w	r3, r3, #4
 80038c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d015      	beq.n	80038f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038cc:	f7fe fa9e 	bl	8001e0c <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d2:	e00a      	b.n	80038ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d4:	f7fe fa9a 	bl	8001e0c <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e0cb      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ea:	4b49      	ldr	r3, [pc, #292]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0ee      	beq.n	80038d4 <HAL_RCC_OscConfig+0x334>
 80038f6:	e014      	b.n	8003922 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f8:	f7fe fa88 	bl	8001e0c <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003900:	f7fe fa84 	bl	8001e0c <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e0b5      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003916:	4b3e      	ldr	r3, [pc, #248]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1ee      	bne.n	8003900 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003922:	7dfb      	ldrb	r3, [r7, #23]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d105      	bne.n	8003934 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003928:	4b39      	ldr	r3, [pc, #228]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	4a38      	ldr	r2, [pc, #224]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 800392e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003932:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 80a1 	beq.w	8003a80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800393e:	4b34      	ldr	r3, [pc, #208]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b08      	cmp	r3, #8
 8003948:	d05c      	beq.n	8003a04 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d141      	bne.n	80039d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003952:	4b31      	ldr	r3, [pc, #196]	@ (8003a18 <HAL_RCC_OscConfig+0x478>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7fe fa58 	bl	8001e0c <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003960:	f7fe fa54 	bl	8001e0c <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e087      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003972:	4b27      	ldr	r3, [pc, #156]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69da      	ldr	r2, [r3, #28]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	019b      	lsls	r3, r3, #6
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003994:	085b      	lsrs	r3, r3, #1
 8003996:	3b01      	subs	r3, #1
 8003998:	041b      	lsls	r3, r3, #16
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a0:	061b      	lsls	r3, r3, #24
 80039a2:	491b      	ldr	r1, [pc, #108]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a18 <HAL_RCC_OscConfig+0x478>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ae:	f7fe fa2d 	bl	8001e0c <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b6:	f7fe fa29 	bl	8001e0c <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e05c      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c8:	4b11      	ldr	r3, [pc, #68]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x416>
 80039d4:	e054      	b.n	8003a80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d6:	4b10      	ldr	r3, [pc, #64]	@ (8003a18 <HAL_RCC_OscConfig+0x478>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039dc:	f7fe fa16 	bl	8001e0c <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e4:	f7fe fa12 	bl	8001e0c <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e045      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	4b06      	ldr	r3, [pc, #24]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x444>
 8003a02:	e03d      	b.n	8003a80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d107      	bne.n	8003a1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e038      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40007000 	.word	0x40007000
 8003a18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003a8c <HAL_RCC_OscConfig+0x4ec>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d028      	beq.n	8003a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d121      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d11a      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d111      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a62:	085b      	lsrs	r3, r3, #1
 8003a64:	3b01      	subs	r3, #1
 8003a66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d107      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40023800 	.word	0x40023800

08003a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0cc      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa4:	4b68      	ldr	r3, [pc, #416]	@ (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d90c      	bls.n	8003acc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab2:	4b65      	ldr	r3, [pc, #404]	@ (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b63      	ldr	r3, [pc, #396]	@ (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0b8      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d020      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ae4:	4b59      	ldr	r3, [pc, #356]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	4a58      	ldr	r2, [pc, #352]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003aee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003afc:	4b53      	ldr	r3, [pc, #332]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4a52      	ldr	r2, [pc, #328]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b08:	4b50      	ldr	r3, [pc, #320]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	494d      	ldr	r1, [pc, #308]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d044      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2e:	4b47      	ldr	r3, [pc, #284]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d119      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e07f      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d003      	beq.n	8003b4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	d107      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d109      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e06f      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e067      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b6e:	4b37      	ldr	r3, [pc, #220]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f023 0203 	bic.w	r2, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	4934      	ldr	r1, [pc, #208]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b80:	f7fe f944 	bl	8001e0c <HAL_GetTick>
 8003b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b86:	e00a      	b.n	8003b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b88:	f7fe f940 	bl	8001e0c <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e04f      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 020c 	and.w	r2, r3, #12
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d1eb      	bne.n	8003b88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb0:	4b25      	ldr	r3, [pc, #148]	@ (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d20c      	bcs.n	8003bd8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bbe:	4b22      	ldr	r3, [pc, #136]	@ (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc6:	4b20      	ldr	r3, [pc, #128]	@ (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e032      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be4:	4b19      	ldr	r3, [pc, #100]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4916      	ldr	r1, [pc, #88]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c02:	4b12      	ldr	r3, [pc, #72]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	490e      	ldr	r1, [pc, #56]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c16:	f000 f821 	bl	8003c5c <HAL_RCC_GetSysClockFreq>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	490a      	ldr	r1, [pc, #40]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c0>)
 8003c28:	5ccb      	ldrb	r3, [r1, r3]
 8003c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2e:	4a09      	ldr	r2, [pc, #36]	@ (8003c54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c32:	4b09      	ldr	r3, [pc, #36]	@ (8003c58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fe f8a4 	bl	8001d84 <HAL_InitTick>

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40023c00 	.word	0x40023c00
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	08004bc4 	.word	0x08004bc4
 8003c54:	200001cc 	.word	0x200001cc
 8003c58:	200001d0 	.word	0x200001d0

08003c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c60:	b090      	sub	sp, #64	@ 0x40
 8003c62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c74:	4b59      	ldr	r3, [pc, #356]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 030c 	and.w	r3, r3, #12
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d00d      	beq.n	8003c9c <HAL_RCC_GetSysClockFreq+0x40>
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	f200 80a1 	bhi.w	8003dc8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <HAL_RCC_GetSysClockFreq+0x34>
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c8e:	e09b      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c90:	4b53      	ldr	r3, [pc, #332]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c94:	e09b      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c96:	4b53      	ldr	r3, [pc, #332]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c9a:	e098      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c9c:	4b4f      	ldr	r3, [pc, #316]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ca4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ca6:	4b4d      	ldr	r3, [pc, #308]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d028      	beq.n	8003d04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb2:	4b4a      	ldr	r3, [pc, #296]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	099b      	lsrs	r3, r3, #6
 8003cb8:	2200      	movs	r2, #0
 8003cba:	623b      	str	r3, [r7, #32]
 8003cbc:	627a      	str	r2, [r7, #36]	@ 0x24
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4b47      	ldr	r3, [pc, #284]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cc8:	fb03 f201 	mul.w	r2, r3, r1
 8003ccc:	2300      	movs	r3, #0
 8003cce:	fb00 f303 	mul.w	r3, r0, r3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	4a43      	ldr	r2, [pc, #268]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cd6:	fba0 1202 	umull	r1, r2, r0, r2
 8003cda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cdc:	460a      	mov	r2, r1
 8003cde:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ce0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ce2:	4413      	add	r3, r2
 8003ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce8:	2200      	movs	r2, #0
 8003cea:	61bb      	str	r3, [r7, #24]
 8003cec:	61fa      	str	r2, [r7, #28]
 8003cee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cf2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003cf6:	f7fc fa6f 	bl	80001d8 <__aeabi_uldivmod>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4613      	mov	r3, r2
 8003d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d02:	e053      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d04:	4b35      	ldr	r3, [pc, #212]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	099b      	lsrs	r3, r3, #6
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	613b      	str	r3, [r7, #16]
 8003d0e:	617a      	str	r2, [r7, #20]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d16:	f04f 0b00 	mov.w	fp, #0
 8003d1a:	4652      	mov	r2, sl
 8003d1c:	465b      	mov	r3, fp
 8003d1e:	f04f 0000 	mov.w	r0, #0
 8003d22:	f04f 0100 	mov.w	r1, #0
 8003d26:	0159      	lsls	r1, r3, #5
 8003d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d2c:	0150      	lsls	r0, r2, #5
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	ebb2 080a 	subs.w	r8, r2, sl
 8003d36:	eb63 090b 	sbc.w	r9, r3, fp
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d4e:	ebb2 0408 	subs.w	r4, r2, r8
 8003d52:	eb63 0509 	sbc.w	r5, r3, r9
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	f04f 0300 	mov.w	r3, #0
 8003d5e:	00eb      	lsls	r3, r5, #3
 8003d60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d64:	00e2      	lsls	r2, r4, #3
 8003d66:	4614      	mov	r4, r2
 8003d68:	461d      	mov	r5, r3
 8003d6a:	eb14 030a 	adds.w	r3, r4, sl
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	eb45 030b 	adc.w	r3, r5, fp
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d82:	4629      	mov	r1, r5
 8003d84:	028b      	lsls	r3, r1, #10
 8003d86:	4621      	mov	r1, r4
 8003d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	028a      	lsls	r2, r1, #10
 8003d90:	4610      	mov	r0, r2
 8003d92:	4619      	mov	r1, r3
 8003d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d96:	2200      	movs	r2, #0
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	60fa      	str	r2, [r7, #12]
 8003d9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003da0:	f7fc fa1a 	bl	80001d8 <__aeabi_uldivmod>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4613      	mov	r3, r2
 8003daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003dac:	4b0b      	ldr	r3, [pc, #44]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	0c1b      	lsrs	r3, r3, #16
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	3301      	adds	r3, #1
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003dbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003dc6:	e002      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dc8:	4b05      	ldr	r3, [pc, #20]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3740      	adds	r7, #64	@ 0x40
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	00f42400 	.word	0x00f42400
 8003de4:	017d7840 	.word	0x017d7840

08003de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dec:	4b03      	ldr	r3, [pc, #12]	@ (8003dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dee:	681b      	ldr	r3, [r3, #0]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	200001cc 	.word	0x200001cc

08003e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e04:	f7ff fff0 	bl	8003de8 <HAL_RCC_GetHCLKFreq>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	4b05      	ldr	r3, [pc, #20]	@ (8003e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	0a9b      	lsrs	r3, r3, #10
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	4903      	ldr	r1, [pc, #12]	@ (8003e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e16:	5ccb      	ldrb	r3, [r1, r3]
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40023800 	.word	0x40023800
 8003e24:	08004bd4 	.word	0x08004bd4

08003e28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d001      	beq.n	8003e40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e03c      	b.n	8003eba <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ec8 <HAL_TIM_Base_Start+0xa0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d018      	beq.n	8003e84 <HAL_TIM_Base_Start+0x5c>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e5a:	d013      	beq.n	8003e84 <HAL_TIM_Base_Start+0x5c>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1a      	ldr	r2, [pc, #104]	@ (8003ecc <HAL_TIM_Base_Start+0xa4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00e      	beq.n	8003e84 <HAL_TIM_Base_Start+0x5c>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a19      	ldr	r2, [pc, #100]	@ (8003ed0 <HAL_TIM_Base_Start+0xa8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d009      	beq.n	8003e84 <HAL_TIM_Base_Start+0x5c>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a17      	ldr	r2, [pc, #92]	@ (8003ed4 <HAL_TIM_Base_Start+0xac>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d004      	beq.n	8003e84 <HAL_TIM_Base_Start+0x5c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a16      	ldr	r2, [pc, #88]	@ (8003ed8 <HAL_TIM_Base_Start+0xb0>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d111      	bne.n	8003ea8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b06      	cmp	r3, #6
 8003e94:	d010      	beq.n	8003eb8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0201 	orr.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea6:	e007      	b.n	8003eb8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	40010000 	.word	0x40010000
 8003ecc:	40000400 	.word	0x40000400
 8003ed0:	40000800 	.word	0x40000800
 8003ed4:	40000c00 	.word	0x40000c00
 8003ed8:	40014000 	.word	0x40014000

08003edc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e041      	b.n	8003f72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fd fd48 	bl	8001998 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3304      	adds	r3, #4
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	f000 fb22 	bl	8004564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d109      	bne.n	8003fa4 <HAL_TIM_PWM_Start_IT+0x28>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	bf14      	ite	ne
 8003f9c:	2301      	movne	r3, #1
 8003f9e:	2300      	moveq	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	e022      	b.n	8003fea <HAL_TIM_PWM_Start_IT+0x6e>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d109      	bne.n	8003fbe <HAL_TIM_PWM_Start_IT+0x42>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	bf14      	ite	ne
 8003fb6:	2301      	movne	r3, #1
 8003fb8:	2300      	moveq	r3, #0
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	e015      	b.n	8003fea <HAL_TIM_PWM_Start_IT+0x6e>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d109      	bne.n	8003fd8 <HAL_TIM_PWM_Start_IT+0x5c>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	bf14      	ite	ne
 8003fd0:	2301      	movne	r3, #1
 8003fd2:	2300      	moveq	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	e008      	b.n	8003fea <HAL_TIM_PWM_Start_IT+0x6e>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	bf14      	ite	ne
 8003fe4:	2301      	movne	r3, #1
 8003fe6:	2300      	moveq	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e0b3      	b.n	800415a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d104      	bne.n	8004002 <HAL_TIM_PWM_Start_IT+0x86>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004000:	e013      	b.n	800402a <HAL_TIM_PWM_Start_IT+0xae>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b04      	cmp	r3, #4
 8004006:	d104      	bne.n	8004012 <HAL_TIM_PWM_Start_IT+0x96>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004010:	e00b      	b.n	800402a <HAL_TIM_PWM_Start_IT+0xae>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b08      	cmp	r3, #8
 8004016:	d104      	bne.n	8004022 <HAL_TIM_PWM_Start_IT+0xa6>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004020:	e003      	b.n	800402a <HAL_TIM_PWM_Start_IT+0xae>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2202      	movs	r2, #2
 8004026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b0c      	cmp	r3, #12
 800402e:	d841      	bhi.n	80040b4 <HAL_TIM_PWM_Start_IT+0x138>
 8004030:	a201      	add	r2, pc, #4	@ (adr r2, 8004038 <HAL_TIM_PWM_Start_IT+0xbc>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	0800406d 	.word	0x0800406d
 800403c:	080040b5 	.word	0x080040b5
 8004040:	080040b5 	.word	0x080040b5
 8004044:	080040b5 	.word	0x080040b5
 8004048:	0800407f 	.word	0x0800407f
 800404c:	080040b5 	.word	0x080040b5
 8004050:	080040b5 	.word	0x080040b5
 8004054:	080040b5 	.word	0x080040b5
 8004058:	08004091 	.word	0x08004091
 800405c:	080040b5 	.word	0x080040b5
 8004060:	080040b5 	.word	0x080040b5
 8004064:	080040b5 	.word	0x080040b5
 8004068:	080040a3 	.word	0x080040a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0202 	orr.w	r2, r2, #2
 800407a:	60da      	str	r2, [r3, #12]
      break;
 800407c:	e01d      	b.n	80040ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0204 	orr.w	r2, r2, #4
 800408c:	60da      	str	r2, [r3, #12]
      break;
 800408e:	e014      	b.n	80040ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0208 	orr.w	r2, r2, #8
 800409e:	60da      	str	r2, [r3, #12]
      break;
 80040a0:	e00b      	b.n	80040ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0210 	orr.w	r2, r2, #16
 80040b0:	60da      	str	r2, [r3, #12]
      break;
 80040b2:	e002      	b.n	80040ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
      break;
 80040b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d14b      	bne.n	8004158 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2201      	movs	r2, #1
 80040c6:	6839      	ldr	r1, [r7, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fc5d 	bl	8004988 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a24      	ldr	r2, [pc, #144]	@ (8004164 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d107      	bne.n	80040e8 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040e6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004164 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d018      	beq.n	8004124 <HAL_TIM_PWM_Start_IT+0x1a8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040fa:	d013      	beq.n	8004124 <HAL_TIM_PWM_Start_IT+0x1a8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a19      	ldr	r2, [pc, #100]	@ (8004168 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00e      	beq.n	8004124 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a18      	ldr	r2, [pc, #96]	@ (800416c <HAL_TIM_PWM_Start_IT+0x1f0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d009      	beq.n	8004124 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a16      	ldr	r2, [pc, #88]	@ (8004170 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <HAL_TIM_PWM_Start_IT+0x1a8>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a15      	ldr	r2, [pc, #84]	@ (8004174 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d111      	bne.n	8004148 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b06      	cmp	r3, #6
 8004134:	d010      	beq.n	8004158 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0201 	orr.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004146:	e007      	b.n	8004158 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004158:	7bfb      	ldrb	r3, [r7, #15]
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40010000 	.word	0x40010000
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800
 8004170:	40000c00 	.word	0x40000c00
 8004174:	40014000 	.word	0x40014000

08004178 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e097      	b.n	80042bc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d106      	bne.n	80041a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7fd fc45 	bl	8001a30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2202      	movs	r2, #2
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6812      	ldr	r2, [r2, #0]
 80041b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041bc:	f023 0307 	bic.w	r3, r3, #7
 80041c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3304      	adds	r3, #4
 80041ca:	4619      	mov	r1, r3
 80041cc:	4610      	mov	r0, r2
 80041ce:	f000 f9c9 	bl	8004564 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041fa:	f023 0303 	bic.w	r3, r3, #3
 80041fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	4313      	orrs	r3, r2
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004218:	f023 030c 	bic.w	r3, r3, #12
 800421c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004224:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004228:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	4313      	orrs	r3, r2
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	011a      	lsls	r2, r3, #4
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	031b      	lsls	r3, r3, #12
 8004248:	4313      	orrs	r3, r2
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004256:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800425e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	4313      	orrs	r3, r2
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80042dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80042ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d110      	bne.n	8004316 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d102      	bne.n	8004300 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80042fa:	7b7b      	ldrb	r3, [r7, #13]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d001      	beq.n	8004304 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e069      	b.n	80043d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004314:	e031      	b.n	800437a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b04      	cmp	r3, #4
 800431a:	d110      	bne.n	800433e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800431c:	7bbb      	ldrb	r3, [r7, #14]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d102      	bne.n	8004328 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004322:	7b3b      	ldrb	r3, [r7, #12]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d001      	beq.n	800432c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e055      	b.n	80043d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800433c:	e01d      	b.n	800437a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d108      	bne.n	8004356 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004344:	7bbb      	ldrb	r3, [r7, #14]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d105      	bne.n	8004356 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800434a:	7b7b      	ldrb	r3, [r7, #13]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d102      	bne.n	8004356 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004350:	7b3b      	ldrb	r3, [r7, #12]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d001      	beq.n	800435a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e03e      	b.n	80043d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2202      	movs	r2, #2
 800435e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2202      	movs	r2, #2
 8004366:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2202      	movs	r2, #2
 800436e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <HAL_TIM_Encoder_Start+0xc4>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2b04      	cmp	r3, #4
 8004384:	d008      	beq.n	8004398 <HAL_TIM_Encoder_Start+0xd4>
 8004386:	e00f      	b.n	80043a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2201      	movs	r2, #1
 800438e:	2100      	movs	r1, #0
 8004390:	4618      	mov	r0, r3
 8004392:	f000 faf9 	bl	8004988 <TIM_CCxChannelCmd>
      break;
 8004396:	e016      	b.n	80043c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2201      	movs	r2, #1
 800439e:	2104      	movs	r1, #4
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 faf1 	bl	8004988 <TIM_CCxChannelCmd>
      break;
 80043a6:	e00e      	b.n	80043c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2201      	movs	r2, #1
 80043ae:	2100      	movs	r1, #0
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 fae9 	bl	8004988 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2201      	movs	r2, #1
 80043bc:	2104      	movs	r1, #4
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fae2 	bl	8004988 <TIM_CCxChannelCmd>
      break;
 80043c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0201 	orr.w	r2, r2, #1
 80043d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e0ae      	b.n	800455c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b0c      	cmp	r3, #12
 800440a:	f200 809f 	bhi.w	800454c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800440e:	a201      	add	r2, pc, #4	@ (adr r2, 8004414 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004414:	08004449 	.word	0x08004449
 8004418:	0800454d 	.word	0x0800454d
 800441c:	0800454d 	.word	0x0800454d
 8004420:	0800454d 	.word	0x0800454d
 8004424:	08004489 	.word	0x08004489
 8004428:	0800454d 	.word	0x0800454d
 800442c:	0800454d 	.word	0x0800454d
 8004430:	0800454d 	.word	0x0800454d
 8004434:	080044cb 	.word	0x080044cb
 8004438:	0800454d 	.word	0x0800454d
 800443c:	0800454d 	.word	0x0800454d
 8004440:	0800454d 	.word	0x0800454d
 8004444:	0800450b 	.word	0x0800450b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68b9      	ldr	r1, [r7, #8]
 800444e:	4618      	mov	r0, r3
 8004450:	f000 f90e 	bl	8004670 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699a      	ldr	r2, [r3, #24]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0208 	orr.w	r2, r2, #8
 8004462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0204 	bic.w	r2, r2, #4
 8004472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6999      	ldr	r1, [r3, #24]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	619a      	str	r2, [r3, #24]
      break;
 8004486:	e064      	b.n	8004552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68b9      	ldr	r1, [r7, #8]
 800448e:	4618      	mov	r0, r3
 8004490:	f000 f954 	bl	800473c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699a      	ldr	r2, [r3, #24]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6999      	ldr	r1, [r3, #24]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	021a      	lsls	r2, r3, #8
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	619a      	str	r2, [r3, #24]
      break;
 80044c8:	e043      	b.n	8004552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 f99f 	bl	8004814 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69da      	ldr	r2, [r3, #28]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0208 	orr.w	r2, r2, #8
 80044e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69da      	ldr	r2, [r3, #28]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0204 	bic.w	r2, r2, #4
 80044f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69d9      	ldr	r1, [r3, #28]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	61da      	str	r2, [r3, #28]
      break;
 8004508:	e023      	b.n	8004552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68b9      	ldr	r1, [r7, #8]
 8004510:	4618      	mov	r0, r3
 8004512:	f000 f9e9 	bl	80048e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	69da      	ldr	r2, [r3, #28]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69d9      	ldr	r1, [r3, #28]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	021a      	lsls	r2, r3, #8
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	61da      	str	r2, [r3, #28]
      break;
 800454a:	e002      	b.n	8004552 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	75fb      	strb	r3, [r7, #23]
      break;
 8004550:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800455a:	7dfb      	ldrb	r3, [r7, #23]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a37      	ldr	r2, [pc, #220]	@ (8004654 <TIM_Base_SetConfig+0xf0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00f      	beq.n	800459c <TIM_Base_SetConfig+0x38>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004582:	d00b      	beq.n	800459c <TIM_Base_SetConfig+0x38>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a34      	ldr	r2, [pc, #208]	@ (8004658 <TIM_Base_SetConfig+0xf4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d007      	beq.n	800459c <TIM_Base_SetConfig+0x38>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a33      	ldr	r2, [pc, #204]	@ (800465c <TIM_Base_SetConfig+0xf8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d003      	beq.n	800459c <TIM_Base_SetConfig+0x38>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a32      	ldr	r2, [pc, #200]	@ (8004660 <TIM_Base_SetConfig+0xfc>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d108      	bne.n	80045ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a28      	ldr	r2, [pc, #160]	@ (8004654 <TIM_Base_SetConfig+0xf0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d01b      	beq.n	80045ee <TIM_Base_SetConfig+0x8a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045bc:	d017      	beq.n	80045ee <TIM_Base_SetConfig+0x8a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a25      	ldr	r2, [pc, #148]	@ (8004658 <TIM_Base_SetConfig+0xf4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d013      	beq.n	80045ee <TIM_Base_SetConfig+0x8a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a24      	ldr	r2, [pc, #144]	@ (800465c <TIM_Base_SetConfig+0xf8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00f      	beq.n	80045ee <TIM_Base_SetConfig+0x8a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a23      	ldr	r2, [pc, #140]	@ (8004660 <TIM_Base_SetConfig+0xfc>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00b      	beq.n	80045ee <TIM_Base_SetConfig+0x8a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a22      	ldr	r2, [pc, #136]	@ (8004664 <TIM_Base_SetConfig+0x100>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d007      	beq.n	80045ee <TIM_Base_SetConfig+0x8a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a21      	ldr	r2, [pc, #132]	@ (8004668 <TIM_Base_SetConfig+0x104>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d003      	beq.n	80045ee <TIM_Base_SetConfig+0x8a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a20      	ldr	r2, [pc, #128]	@ (800466c <TIM_Base_SetConfig+0x108>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d108      	bne.n	8004600 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a0c      	ldr	r2, [pc, #48]	@ (8004654 <TIM_Base_SetConfig+0xf0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d103      	bne.n	800462e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f043 0204 	orr.w	r2, r3, #4
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	601a      	str	r2, [r3, #0]
}
 8004646:	bf00      	nop
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40010000 	.word	0x40010000
 8004658:	40000400 	.word	0x40000400
 800465c:	40000800 	.word	0x40000800
 8004660:	40000c00 	.word	0x40000c00
 8004664:	40014000 	.word	0x40014000
 8004668:	40014400 	.word	0x40014400
 800466c:	40014800 	.word	0x40014800

08004670 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	f023 0201 	bic.w	r2, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800469e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0303 	bic.w	r3, r3, #3
 80046a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f023 0302 	bic.w	r3, r3, #2
 80046b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004738 <TIM_OC1_SetConfig+0xc8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d10c      	bne.n	80046e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f023 0308 	bic.w	r3, r3, #8
 80046d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f023 0304 	bic.w	r3, r3, #4
 80046e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a13      	ldr	r2, [pc, #76]	@ (8004738 <TIM_OC1_SetConfig+0xc8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d111      	bne.n	8004712 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	621a      	str	r2, [r3, #32]
}
 800472c:	bf00      	nop
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	40010000 	.word	0x40010000

0800473c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	f023 0210 	bic.w	r2, r3, #16
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800476a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	021b      	lsls	r3, r3, #8
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f023 0320 	bic.w	r3, r3, #32
 8004786:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a1e      	ldr	r2, [pc, #120]	@ (8004810 <TIM_OC2_SetConfig+0xd4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d10d      	bne.n	80047b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a15      	ldr	r2, [pc, #84]	@ (8004810 <TIM_OC2_SetConfig+0xd4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d113      	bne.n	80047e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	621a      	str	r2, [r3, #32]
}
 8004802:	bf00      	nop
 8004804:	371c      	adds	r7, #28
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40010000 	.word	0x40010000

08004814 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0303 	bic.w	r3, r3, #3
 800484a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800485c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	021b      	lsls	r3, r3, #8
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a1d      	ldr	r2, [pc, #116]	@ (80048e4 <TIM_OC3_SetConfig+0xd0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d10d      	bne.n	800488e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004878:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	021b      	lsls	r3, r3, #8
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800488c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a14      	ldr	r2, [pc, #80]	@ (80048e4 <TIM_OC3_SetConfig+0xd0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d113      	bne.n	80048be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800489c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	621a      	str	r2, [r3, #32]
}
 80048d8:	bf00      	nop
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	40010000 	.word	0x40010000

080048e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800491e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	021b      	lsls	r3, r3, #8
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	031b      	lsls	r3, r3, #12
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a10      	ldr	r2, [pc, #64]	@ (8004984 <TIM_OC4_SetConfig+0x9c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d109      	bne.n	800495c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800494e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	019b      	lsls	r3, r3, #6
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	621a      	str	r2, [r3, #32]
}
 8004976:	bf00      	nop
 8004978:	371c      	adds	r7, #28
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40010000 	.word	0x40010000

08004988 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 031f 	and.w	r3, r3, #31
 800499a:	2201      	movs	r2, #1
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a1a      	ldr	r2, [r3, #32]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	43db      	mvns	r3, r3
 80049aa:	401a      	ands	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a1a      	ldr	r2, [r3, #32]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	fa01 f303 	lsl.w	r3, r1, r3
 80049c0:	431a      	orrs	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	621a      	str	r2, [r3, #32]
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
	...

080049d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e050      	b.n	8004a8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8004a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d018      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a38:	d013      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a18      	ldr	r2, [pc, #96]	@ (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00e      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a16      	ldr	r2, [pc, #88]	@ (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d009      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a15      	ldr	r2, [pc, #84]	@ (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d004      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a13      	ldr	r2, [pc, #76]	@ (8004aac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d10c      	bne.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40000c00 	.word	0x40000c00
 8004aac:	40014000 	.word	0x40014000

08004ab0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e03d      	b.n	8004b48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <memset>:
 8004b54:	4402      	add	r2, r0
 8004b56:	4603      	mov	r3, r0
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d100      	bne.n	8004b5e <memset+0xa>
 8004b5c:	4770      	bx	lr
 8004b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b62:	e7f9      	b.n	8004b58 <memset+0x4>

08004b64 <__libc_init_array>:
 8004b64:	b570      	push	{r4, r5, r6, lr}
 8004b66:	4d0d      	ldr	r5, [pc, #52]	@ (8004b9c <__libc_init_array+0x38>)
 8004b68:	4c0d      	ldr	r4, [pc, #52]	@ (8004ba0 <__libc_init_array+0x3c>)
 8004b6a:	1b64      	subs	r4, r4, r5
 8004b6c:	10a4      	asrs	r4, r4, #2
 8004b6e:	2600      	movs	r6, #0
 8004b70:	42a6      	cmp	r6, r4
 8004b72:	d109      	bne.n	8004b88 <__libc_init_array+0x24>
 8004b74:	4d0b      	ldr	r5, [pc, #44]	@ (8004ba4 <__libc_init_array+0x40>)
 8004b76:	4c0c      	ldr	r4, [pc, #48]	@ (8004ba8 <__libc_init_array+0x44>)
 8004b78:	f000 f818 	bl	8004bac <_init>
 8004b7c:	1b64      	subs	r4, r4, r5
 8004b7e:	10a4      	asrs	r4, r4, #2
 8004b80:	2600      	movs	r6, #0
 8004b82:	42a6      	cmp	r6, r4
 8004b84:	d105      	bne.n	8004b92 <__libc_init_array+0x2e>
 8004b86:	bd70      	pop	{r4, r5, r6, pc}
 8004b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b8c:	4798      	blx	r3
 8004b8e:	3601      	adds	r6, #1
 8004b90:	e7ee      	b.n	8004b70 <__libc_init_array+0xc>
 8004b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b96:	4798      	blx	r3
 8004b98:	3601      	adds	r6, #1
 8004b9a:	e7f2      	b.n	8004b82 <__libc_init_array+0x1e>
 8004b9c:	08004bec 	.word	0x08004bec
 8004ba0:	08004bec 	.word	0x08004bec
 8004ba4:	08004bec 	.word	0x08004bec
 8004ba8:	08004bf0 	.word	0x08004bf0

08004bac <_init>:
 8004bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bae:	bf00      	nop
 8004bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb2:	bc08      	pop	{r3}
 8004bb4:	469e      	mov	lr, r3
 8004bb6:	4770      	bx	lr

08004bb8 <_fini>:
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bba:	bf00      	nop
 8004bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bbe:	bc08      	pop	{r3}
 8004bc0:	469e      	mov	lr, r3
 8004bc2:	4770      	bx	lr
