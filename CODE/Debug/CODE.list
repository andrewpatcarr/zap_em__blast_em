
CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042fc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004494  08004494  00005494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044ac  080044ac  000060bc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080044ac  080044ac  000054ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044b4  080044b4  000060bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044b4  080044b4  000054b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044b8  080044b8  000054b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  080044bc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  200000bc  08004578  000060bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08004578  000062e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000060bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea40  00000000  00000000  000060ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb1  00000000  00000000  00014b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00016ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b18  00000000  00000000  00017908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ede  00000000  00000000  00018420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011772  00000000  00000000  000302fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a245  00000000  00000000  00041a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dbcb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf0  00000000  00000000  000dbcf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000df8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000bc 	.word	0x200000bc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800447c 	.word	0x0800447c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000c0 	.word	0x200000c0
 80001d4:	0800447c 	.word	0x0800447c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <controller_task_run>:
#include <stdio.h>


// A function to run the appropriate state of the task
void controller_task_run(ControllerTask *controller_task)
{    // Check for a valid state
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
    if (controller_task->state >= 0 && controller_task->state < controller_task->num_states)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	2b00      	cmp	r3, #0
 8000512:	db0e      	blt.n	8000532 <controller_task_run+0x2e>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	685a      	ldr	r2, [r3, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	429a      	cmp	r2, r3
 800051e:	da08      	bge.n	8000532 <controller_task_run+0x2e>

    	// game_task is a pointer right now
    	// -> dereferences pointer and accesses class member in one step
    	// the same as (*ptr).member

        controller_task->state_list[controller_task->state](controller_task);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	685a      	ldr	r2, [r3, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	320c      	adds	r2, #12
 8000528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	4798      	blx	r3
    {

        while(1){}
    }

}
 8000530:	e000      	b.n	8000534 <controller_task_run+0x30>
        while(1){}
 8000532:	e7fe      	b.n	8000532 <controller_task_run+0x2e>
}
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <read_adc_channels_scan_mode>:

void read_adc_channels_scan_mode(ADC_HandleTypeDef *hadc, int32_t *adc_val_6, int32_t *adc_val_7)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b084      	sub	sp, #16
 800053e:	af00      	add	r7, sp, #0
 8000540:	60f8      	str	r0, [r7, #12]
 8000542:	60b9      	str	r1, [r7, #8]
 8000544:	607a      	str	r2, [r7, #4]
    HAL_ADC_Start(hadc);
 8000546:	68f8      	ldr	r0, [r7, #12]
 8000548:	f001 fb0e 	bl	8001b68 <HAL_ADC_Start>

    // Wait for first conversion (ADC6)
    if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK) {
 800054c:	210a      	movs	r1, #10
 800054e:	68f8      	ldr	r0, [r7, #12]
 8000550:	f001 fbf1 	bl	8001d36 <HAL_ADC_PollForConversion>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d106      	bne.n	8000568 <read_adc_channels_scan_mode+0x2e>
        *adc_val_6 = HAL_ADC_GetValue(hadc);
 800055a:	68f8      	ldr	r0, [r7, #12]
 800055c:	f001 fc76 	bl	8001e4c <HAL_ADC_GetValue>
 8000560:	4603      	mov	r3, r0
 8000562:	461a      	mov	r2, r3
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	601a      	str	r2, [r3, #0]
    }

    // Wait for second conversion (ADC7)
    if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK) {
 8000568:	210a      	movs	r1, #10
 800056a:	68f8      	ldr	r0, [r7, #12]
 800056c:	f001 fbe3 	bl	8001d36 <HAL_ADC_PollForConversion>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d106      	bne.n	8000584 <read_adc_channels_scan_mode+0x4a>
        *adc_val_7 = HAL_ADC_GetValue(hadc);
 8000576:	68f8      	ldr	r0, [r7, #12]
 8000578:	f001 fc68 	bl	8001e4c <HAL_ADC_GetValue>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	601a      	str	r2, [r3, #0]
    }

    HAL_ADC_Stop(hadc);
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	f001 fba3 	bl	8001cd0 <HAL_ADC_Stop>
}
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <controller_task_state_0_init>:

void controller_task_state_0_init(ControllerTask *controller_task)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	b084      	sub	sp, #16
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
    controller_task->prev_error = 0;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f04f 0200 	mov.w	r2, #0
 80005a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    HAL_TIM_Encoder_Start(controller_task->htim_encoder, TIM_CHANNEL_ALL);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	213c      	movs	r1, #60	@ 0x3c
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 f991 	bl	80038d0 <HAL_TIM_Encoder_Start>
    enable(controller_task->motor);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fe32 	bl	800121c <enable>

    int32_t adc_val_6 = 0, adc_val_7 = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
    HAL_Delay(1);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f001 fa69 	bl	8001a98 <HAL_Delay>
    read_adc_channels_scan_mode(controller_task->hadc, &adc_val_6, &adc_val_7);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005ca:	f107 0208 	add.w	r2, r7, #8
 80005ce:	f107 010c 	add.w	r1, r7, #12
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff ffb1 	bl	800053a <read_adc_channels_scan_mode>

    controller_task->pot_zero = (controller_task->color == 0) ? adc_val_7 : adc_val_6;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d101      	bne.n	80005e4 <controller_task_state_0_init+0x52>
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	e000      	b.n	80005e6 <controller_task_state_0_init+0x54>
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	6153      	str	r3, [r2, #20]

    controller_task->state = 1;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2201      	movs	r2, #1
 80005ee:	605a      	str	r2, [r3, #4]
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <controller_task_state_1_calc_vel>:

void controller_task_state_1_calc_vel(ControllerTask *controller_task)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	@ 0x50
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
    const float Kp = 20.0f;
 8000600:	4b60      	ldr	r3, [pc, #384]	@ (8000784 <controller_task_state_1_calc_vel+0x18c>)
 8000602:	64bb      	str	r3, [r7, #72]	@ 0x48
    const float Kd = 0.0f;
 8000604:	f04f 0300 	mov.w	r3, #0
 8000608:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t t0 = __HAL_TIM_GET_COUNTER(controller_task->htim_dt);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6a1b      	ldr	r3, [r3, #32]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000612:	643b      	str	r3, [r7, #64]	@ 0x40

    int32_t adc_val_6 = 0, adc_val_7 = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
    HAL_Delay(1);
 800061c:	2001      	movs	r0, #1
 800061e:	f001 fa3b 	bl	8001a98 <HAL_Delay>
    read_adc_channels_scan_mode(controller_task->hadc, &adc_val_6, &adc_val_7);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000626:	f107 0208 	add.w	r2, r7, #8
 800062a:	f107 010c 	add.w	r1, r7, #12
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff ff83 	bl	800053a <read_adc_channels_scan_mode>

    int32_t adc_val = (controller_task->color == 0) ? adc_val_7 : adc_val_6;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d101      	bne.n	8000640 <controller_task_state_1_calc_vel+0x48>
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	e000      	b.n	8000642 <controller_task_state_1_calc_vel+0x4a>
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	63fb      	str	r3, [r7, #60]	@ 0x3c
    adc_val -= controller_task->pot_zero;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800064a:	1ad3      	subs	r3, r2, r3
 800064c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    const float MAX_ADC = 4095.0f;
 800064e:	4b4e      	ldr	r3, [pc, #312]	@ (8000788 <controller_task_state_1_calc_vel+0x190>)
 8000650:	63bb      	str	r3, [r7, #56]	@ 0x38
    const float MAX_VELOCITY = 1.0f;
 8000652:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000656:	637b      	str	r3, [r7, #52]	@ 0x34
    float desired_velocity = ((float)adc_val / MAX_ADC) * MAX_VELOCITY;
 8000658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800065a:	ee07 3a90 	vmov	s15, r3
 800065e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000662:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800066a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800066e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000672:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    static volatile int32_t last_ticks = 0;
    int32_t current_ticks = __HAL_TIM_GET_COUNTER(controller_task->htim_encoder);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800067e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int32_t delta_ticks = current_ticks - last_ticks;
 8000680:	4b42      	ldr	r3, [pc, #264]	@ (800078c <controller_task_state_1_calc_vel+0x194>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	62bb      	str	r3, [r7, #40]	@ 0x28
    last_ticks = current_ticks;
 800068a:	4a40      	ldr	r2, [pc, #256]	@ (800078c <controller_task_state_1_calc_vel+0x194>)
 800068c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800068e:	6013      	str	r3, [r2, #0]

    uint32_t t1 = __HAL_TIM_GET_COUNTER(controller_task->htim_dt);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6a1b      	ldr	r3, [r3, #32]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t dt_ticks = (t1 >= t0) ? (t1 - t0) : (0xFFFFFFFF - t0 + t1);
 800069a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800069c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800069e:	429a      	cmp	r2, r3
 80006a0:	d303      	bcc.n	80006aa <controller_task_state_1_calc_vel+0xb2>
 80006a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	e003      	b.n	80006b2 <controller_task_state_1_calc_vel+0xba>
 80006aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	3b01      	subs	r3, #1
 80006b2:	623b      	str	r3, [r7, #32]
    float delta_time = dt_ticks / 875000.0f;;
 80006b4:	6a3b      	ldr	r3, [r7, #32]
 80006b6:	ee07 3a90 	vmov	s15, r3
 80006ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006be:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8000790 <controller_task_state_1_calc_vel+0x198>
 80006c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006c6:	edc7 7a07 	vstr	s15, [r7, #28]

    float current_velocity = (float)delta_ticks / delta_time;
 80006ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006cc:	ee07 3a90 	vmov	s15, r3
 80006d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80006d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80006d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006dc:	edc7 7a06 	vstr	s15, [r7, #24]
    float error = desired_velocity - current_velocity;
 80006e0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80006e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80006e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006ec:	edc7 7a05 	vstr	s15, [r7, #20]
    float derivative = (error - controller_task->prev_error) / delta_time;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80006f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80006fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8000702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000706:	edc7 7a04 	vstr	s15, [r7, #16]
    controller_task->prev_error = error;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	697a      	ldr	r2, [r7, #20]
 800070e:	62da      	str	r2, [r3, #44]	@ 0x2c

    controller_task->control_signal = Kp * error + Kd * derivative;
 8000710:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8000714:	edd7 7a05 	vldr	s15, [r7, #20]
 8000718:	ee27 7a27 	vmul.f32	s14, s14, s15
 800071c:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8000720:	edd7 7a04 	vldr	s15, [r7, #16]
 8000724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	edc3 7a06 	vstr	s15, [r3, #24]
    float control_signal = controller_task->control_signal;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (control_signal > 100.0f) control_signal = 100.0f;
 8000738:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800073c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000794 <controller_task_state_1_calc_vel+0x19c>
 8000740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000748:	dd02      	ble.n	8000750 <controller_task_state_1_calc_vel+0x158>
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <controller_task_state_1_calc_vel+0x1a0>)
 800074c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800074e:	e00a      	b.n	8000766 <controller_task_state_1_calc_vel+0x16e>
    else if (control_signal < -100.0f) control_signal = -100.0f;
 8000750:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000754:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800079c <controller_task_state_1_calc_vel+0x1a4>
 8000758:	eef4 7ac7 	vcmpe.f32	s15, s14
 800075c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000760:	d501      	bpl.n	8000766 <controller_task_state_1_calc_vel+0x16e>
 8000762:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <controller_task_state_1_calc_vel+0x1a8>)
 8000764:	64fb      	str	r3, [r7, #76]	@ 0x4c

    set_duty(controller_task->motor, (int32_t)control_signal);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800076a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800076e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000772:	ee17 1a90 	vmov	r1, s15
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fc98 	bl	80010ac <set_duty>
}
 800077c:	bf00      	nop
 800077e:	3750      	adds	r7, #80	@ 0x50
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	41a00000 	.word	0x41a00000
 8000788:	457ff000 	.word	0x457ff000
 800078c:	200000d8 	.word	0x200000d8
 8000790:	49559f80 	.word	0x49559f80
 8000794:	42c80000 	.word	0x42c80000
 8000798:	42c80000 	.word	0x42c80000
 800079c:	c2c80000 	.word	0xc2c80000
 80007a0:	c2c80000 	.word	0xc2c80000

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f001 f904 	bl	80019b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f858 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b0:	f000 fb76 	bl	8000ea0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007b4:	f000 f8bc 	bl	8000930 <MX_ADC1_Init>
  MX_I2C1_Init();
 80007b8:	f000 f91a 	bl	80009f0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80007bc:	f000 f946 	bl	8000a4c <MX_TIM1_Init>
  MX_TIM3_Init();
 80007c0:	f000 fa62 	bl	8000c88 <MX_TIM3_Init>
  MX_TIM4_Init();
 80007c4:	f000 fab4 	bl	8000d30 <MX_TIM4_Init>
  MX_TIM5_Init();
 80007c8:	f000 fb16 	bl	8000df8 <MX_TIM5_Init>
  MX_TIM2_Init();
 80007cc:	f000 f9e6 	bl	8000b9c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //inits
  //lcd_init(&hi2c1);
  //game_task_state_0_init(&game_task); just gunna run this as in the fsm directly
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 80007d0:	2100      	movs	r1, #0
 80007d2:	481c      	ldr	r0, [pc, #112]	@ (8000844 <main+0xa0>)
 80007d4:	f002 fed8 	bl	8003588 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 80007d8:	2104      	movs	r1, #4
 80007da:	481a      	ldr	r0, [pc, #104]	@ (8000844 <main+0xa0>)
 80007dc:	f002 fed4 	bl	8003588 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 80007e0:	4818      	ldr	r0, [pc, #96]	@ (8000844 <main+0xa0>)
 80007e2:	f002 fe27 	bl	8003434 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 80007e6:	4818      	ldr	r0, [pc, #96]	@ (8000848 <main+0xa4>)
 80007e8:	f002 fe24 	bl	8003434 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80007ec:	2100      	movs	r1, #0
 80007ee:	4817      	ldr	r0, [pc, #92]	@ (800084c <main+0xa8>)
 80007f0:	f002 feca 	bl	8003588 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 80007f4:	2104      	movs	r1, #4
 80007f6:	4815      	ldr	r0, [pc, #84]	@ (800084c <main+0xa8>)
 80007f8:	f002 fec6 	bl	8003588 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);
 80007fc:	2108      	movs	r1, #8
 80007fe:	4813      	ldr	r0, [pc, #76]	@ (800084c <main+0xa8>)
 8000800:	f002 fec2 	bl	8003588 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8000804:	210c      	movs	r1, #12
 8000806:	4811      	ldr	r0, [pc, #68]	@ (800084c <main+0xa8>)
 8000808:	f002 febe 	bl	8003588 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 800080c:	480f      	ldr	r0, [pc, #60]	@ (800084c <main+0xa8>)
 800080e:	f002 fe11 	bl	8003434 <HAL_TIM_Base_Start>
  enable(&mred);
 8000812:	480f      	ldr	r0, [pc, #60]	@ (8000850 <main+0xac>)
 8000814:	f000 fd02 	bl	800121c <enable>
  enable(&mblue);
 8000818:	480e      	ldr	r0, [pc, #56]	@ (8000854 <main+0xb0>)
 800081a:	f000 fcff 	bl	800121c <enable>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	2104      	movs	r1, #4
 8000822:	480d      	ldr	r0, [pc, #52]	@ (8000858 <main+0xb4>)
 8000824:	f001 fffc 	bl	8002820 <HAL_GPIO_WritePin>
////		  a++;
//	  }
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
	  // a from 1000 to 2000
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2104      	movs	r1, #4
 800082c:	480a      	ldr	r0, [pc, #40]	@ (8000858 <main+0xb4>)
 800082e:	f001 fff7 	bl	8002820 <HAL_GPIO_WritePin>
//
//	  HAL_ADC_Stop(&hadc1);
	  //__HAL_TIM_SET_COMPARE(red_shoot_task.servo_tim, red_shoot_task.channel, a);
	  //__HAL_TIM_SET_COMPARE(blue_shoot_task.servo_tim, blue_shoot_task.channel, b);
//	  controller_task_run(&blue_controller_task);
	  controller_task_run(&red_controller_task);
 8000832:	480a      	ldr	r0, [pc, #40]	@ (800085c <main+0xb8>)
 8000834:	f7ff fe66 	bl	8000504 <controller_task_run>
	  //add delay
	  HAL_Delay(1);
 8000838:	2001      	movs	r0, #1
 800083a:	f001 f92d 	bl	8001a98 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800083e:	bf00      	nop
 8000840:	e7f2      	b.n	8000828 <main+0x84>
 8000842:	bf00      	nop
 8000844:	20000250 	.word	0x20000250
 8000848:	200001c0 	.word	0x200001c0
 800084c:	20000178 	.word	0x20000178
 8000850:	20000000 	.word	0x20000000
 8000854:	2000000c 	.word	0x2000000c
 8000858:	40020400 	.word	0x40020400
 800085c:	20000078 	.word	0x20000078

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b094      	sub	sp, #80	@ 0x50
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	2230      	movs	r2, #48	@ 0x30
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f003 fdd8 	bl	8004424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	4b27      	ldr	r3, [pc, #156]	@ (8000928 <SystemClock_Config+0xc8>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088c:	4a26      	ldr	r2, [pc, #152]	@ (8000928 <SystemClock_Config+0xc8>)
 800088e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000892:	6413      	str	r3, [r2, #64]	@ 0x40
 8000894:	4b24      	ldr	r3, [pc, #144]	@ (8000928 <SystemClock_Config+0xc8>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	4b21      	ldr	r3, [pc, #132]	@ (800092c <SystemClock_Config+0xcc>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a20      	ldr	r2, [pc, #128]	@ (800092c <SystemClock_Config+0xcc>)
 80008aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <SystemClock_Config+0xcc>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c6:	2302      	movs	r3, #2
 80008c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008d0:	2319      	movs	r3, #25
 80008d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008d4:	23c0      	movs	r3, #192	@ 0xc0
 80008d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d8:	2302      	movs	r3, #2
 80008da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008dc:	2304      	movs	r3, #4
 80008de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	f107 0320 	add.w	r3, r7, #32
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 f911 	bl	8002b0c <HAL_RCC_OscConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008f0:	f000 fbd6 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	230f      	movs	r3, #15
 80008f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f8:	2302      	movs	r3, #2
 80008fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000900:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000904:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	2103      	movs	r1, #3
 8000910:	4618      	mov	r0, r3
 8000912:	f002 fb73 	bl	8002ffc <HAL_RCC_ClockConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800091c:	f000 fbc0 	bl	80010a0 <Error_Handler>
  }
}
 8000920:	bf00      	nop
 8000922:	3750      	adds	r7, #80	@ 0x50
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	40007000 	.word	0x40007000

08000930 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000936:	463b      	mov	r3, r7
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000942:	4b28      	ldr	r3, [pc, #160]	@ (80009e4 <MX_ADC1_Init+0xb4>)
 8000944:	4a28      	ldr	r2, [pc, #160]	@ (80009e8 <MX_ADC1_Init+0xb8>)
 8000946:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000948:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <MX_ADC1_Init+0xb4>)
 800094a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800094e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000950:	4b24      	ldr	r3, [pc, #144]	@ (80009e4 <MX_ADC1_Init+0xb4>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000956:	4b23      	ldr	r3, [pc, #140]	@ (80009e4 <MX_ADC1_Init+0xb4>)
 8000958:	2201      	movs	r2, #1
 800095a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800095c:	4b21      	ldr	r3, [pc, #132]	@ (80009e4 <MX_ADC1_Init+0xb4>)
 800095e:	2200      	movs	r2, #0
 8000960:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000962:	4b20      	ldr	r3, [pc, #128]	@ (80009e4 <MX_ADC1_Init+0xb4>)
 8000964:	2200      	movs	r2, #0
 8000966:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800096a:	4b1e      	ldr	r3, [pc, #120]	@ (80009e4 <MX_ADC1_Init+0xb4>)
 800096c:	2200      	movs	r2, #0
 800096e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000970:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <MX_ADC1_Init+0xb4>)
 8000972:	4a1e      	ldr	r2, [pc, #120]	@ (80009ec <MX_ADC1_Init+0xbc>)
 8000974:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000976:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <MX_ADC1_Init+0xb4>)
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800097c:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <MX_ADC1_Init+0xb4>)
 800097e:	2202      	movs	r2, #2
 8000980:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000982:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <MX_ADC1_Init+0xb4>)
 8000984:	2200      	movs	r2, #0
 8000986:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800098a:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <MX_ADC1_Init+0xb4>)
 800098c:	2201      	movs	r2, #1
 800098e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000990:	4814      	ldr	r0, [pc, #80]	@ (80009e4 <MX_ADC1_Init+0xb4>)
 8000992:	f001 f8a5 	bl	8001ae0 <HAL_ADC_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800099c:	f000 fb80 	bl	80010a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80009a0:	2306      	movs	r3, #6
 80009a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80009a8:	2301      	movs	r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	4619      	mov	r1, r3
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <MX_ADC1_Init+0xb4>)
 80009b2:	f001 fa59 	bl	8001e68 <HAL_ADC_ConfigChannel>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009bc:	f000 fb70 	bl	80010a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009c0:	2307      	movs	r3, #7
 80009c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_ADC1_Init+0xb4>)
 80009ce:	f001 fa4b 	bl	8001e68 <HAL_ADC_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009d8:	f000 fb62 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  //sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
  /* USER CODE END ADC1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200000dc 	.word	0x200000dc
 80009e8:	40012000 	.word	0x40012000
 80009ec:	0f000001 	.word	0x0f000001

080009f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <MX_I2C1_Init+0x50>)
 80009f6:	4a13      	ldr	r2, [pc, #76]	@ (8000a44 <MX_I2C1_Init+0x54>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009fa:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <MX_I2C1_Init+0x50>)
 80009fc:	4a12      	ldr	r2, [pc, #72]	@ (8000a48 <MX_I2C1_Init+0x58>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <MX_I2C1_Init+0x50>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <MX_I2C1_Init+0x50>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <MX_I2C1_Init+0x50>)
 8000a0e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a14:	4b0a      	ldr	r3, [pc, #40]	@ (8000a40 <MX_I2C1_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <MX_I2C1_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a20:	4b07      	ldr	r3, [pc, #28]	@ (8000a40 <MX_I2C1_Init+0x50>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <MX_I2C1_Init+0x50>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	@ (8000a40 <MX_I2C1_Init+0x50>)
 8000a2e:	f001 ff29 	bl	8002884 <HAL_I2C_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a38:	f000 fb32 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000124 	.word	0x20000124
 8000a44:	40005400 	.word	0x40005400
 8000a48:	000186a0 	.word	0x000186a0

08000a4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b092      	sub	sp, #72	@ 0x48
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a52:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
 8000a6c:	615a      	str	r2, [r3, #20]
 8000a6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2220      	movs	r2, #32
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f003 fcd4 	bl	8004424 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a7c:	4b45      	ldr	r3, [pc, #276]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000a7e:	4a46      	ldr	r2, [pc, #280]	@ (8000b98 <MX_TIM1_Init+0x14c>)
 8000a80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a82:	4b44      	ldr	r3, [pc, #272]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a88:	4b42      	ldr	r3, [pc, #264]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4799;
 8000a8e:	4b41      	ldr	r3, [pc, #260]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000a90:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8000a94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a96:	4b3f      	ldr	r3, [pc, #252]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a9c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000aa8:	483a      	ldr	r0, [pc, #232]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000aaa:	f002 fd1d 	bl	80034e8 <HAL_TIM_PWM_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000ab4:	f000 faf4 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ac0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4833      	ldr	r0, [pc, #204]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000ac8:	f003 fbec 	bl	80042a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000ad2:	f000 fae5 	bl	80010a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000ad6:	2370      	movs	r3, #112	@ 0x70
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aea:	2300      	movs	r3, #0
 8000aec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aee:	2300      	movs	r3, #0
 8000af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af6:	2200      	movs	r2, #0
 8000af8:	4619      	mov	r1, r3
 8000afa:	4826      	ldr	r0, [pc, #152]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000afc:	f002 ff76 	bl	80039ec <HAL_TIM_PWM_ConfigChannel>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000b06:	f000 facb 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0e:	2204      	movs	r2, #4
 8000b10:	4619      	mov	r1, r3
 8000b12:	4820      	ldr	r0, [pc, #128]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000b14:	f002 ff6a 	bl	80039ec <HAL_TIM_PWM_ConfigChannel>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000b1e:	f000 fabf 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b26:	2208      	movs	r2, #8
 8000b28:	4619      	mov	r1, r3
 8000b2a:	481a      	ldr	r0, [pc, #104]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000b2c:	f002 ff5e 	bl	80039ec <HAL_TIM_PWM_ConfigChannel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000b36:	f000 fab3 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3e:	220c      	movs	r2, #12
 8000b40:	4619      	mov	r1, r3
 8000b42:	4814      	ldr	r0, [pc, #80]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000b44:	f002 ff52 	bl	80039ec <HAL_TIM_PWM_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000b4e:	f000 faa7 	bl	80010a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	4619      	mov	r1, r3
 8000b74:	4807      	ldr	r0, [pc, #28]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000b76:	f003 fc03 	bl	8004380 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000b80:	f000 fa8e 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b84:	4803      	ldr	r0, [pc, #12]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000b86:	f000 fe07 	bl	8001798 <HAL_TIM_MspPostInit>

}
 8000b8a:	bf00      	nop
 8000b8c:	3748      	adds	r7, #72	@ 0x48
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000178 	.word	0x20000178
 8000b98:	40010000 	.word	0x40010000

08000b9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08e      	sub	sp, #56	@ 0x38
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb0:	f107 0320 	add.w	r3, r7, #32
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
 8000bc8:	615a      	str	r2, [r3, #20]
 8000bca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8000c84 <MX_TIM2_Init+0xe8>)
 8000bce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8000bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c84 <MX_TIM2_Init+0xe8>)
 8000bd6:	225f      	movs	r2, #95	@ 0x5f
 8000bd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bda:	4b2a      	ldr	r3, [pc, #168]	@ (8000c84 <MX_TIM2_Init+0xe8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000be0:	4b28      	ldr	r3, [pc, #160]	@ (8000c84 <MX_TIM2_Init+0xe8>)
 8000be2:	f04f 32ff 	mov.w	r2, #4294967295
 8000be6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be8:	4b26      	ldr	r3, [pc, #152]	@ (8000c84 <MX_TIM2_Init+0xe8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bee:	4b25      	ldr	r3, [pc, #148]	@ (8000c84 <MX_TIM2_Init+0xe8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bf4:	4823      	ldr	r0, [pc, #140]	@ (8000c84 <MX_TIM2_Init+0xe8>)
 8000bf6:	f002 fbcd 	bl	8003394 <HAL_TIM_Base_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c00:	f000 fa4e 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	481c      	ldr	r0, [pc, #112]	@ (8000c84 <MX_TIM2_Init+0xe8>)
 8000c12:	f002 ffad 	bl	8003b70 <HAL_TIM_ConfigClockSource>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c1c:	f000 fa40 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c20:	4818      	ldr	r0, [pc, #96]	@ (8000c84 <MX_TIM2_Init+0xe8>)
 8000c22:	f002 fc61 	bl	80034e8 <HAL_TIM_PWM_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c2c:	f000 fa38 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c38:	f107 0320 	add.w	r3, r7, #32
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4811      	ldr	r0, [pc, #68]	@ (8000c84 <MX_TIM2_Init+0xe8>)
 8000c40:	f003 fb30 	bl	80042a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c4a:	f000 fa29 	bl	80010a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c4e:	2360      	movs	r3, #96	@ 0x60
 8000c50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	4619      	mov	r1, r3
 8000c64:	4807      	ldr	r0, [pc, #28]	@ (8000c84 <MX_TIM2_Init+0xe8>)
 8000c66:	f002 fec1 	bl	80039ec <HAL_TIM_PWM_ConfigChannel>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c70:	f000 fa16 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c74:	4803      	ldr	r0, [pc, #12]	@ (8000c84 <MX_TIM2_Init+0xe8>)
 8000c76:	f000 fd8f 	bl	8001798 <HAL_TIM_MspPostInit>

}
 8000c7a:	bf00      	nop
 8000c7c:	3738      	adds	r7, #56	@ 0x38
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200001c0 	.word	0x200001c0

08000c88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08c      	sub	sp, #48	@ 0x30
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	2224      	movs	r2, #36	@ 0x24
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 fbc4 	bl	8004424 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ca4:	4b20      	ldr	r3, [pc, #128]	@ (8000d28 <MX_TIM3_Init+0xa0>)
 8000ca6:	4a21      	ldr	r2, [pc, #132]	@ (8000d2c <MX_TIM3_Init+0xa4>)
 8000ca8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000caa:	4b1f      	ldr	r3, [pc, #124]	@ (8000d28 <MX_TIM3_Init+0xa0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d28 <MX_TIM3_Init+0xa0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <MX_TIM3_Init+0xa0>)
 8000cb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <MX_TIM3_Init+0xa0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc4:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <MX_TIM3_Init+0xa0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480c      	ldr	r0, [pc, #48]	@ (8000d28 <MX_TIM3_Init+0xa0>)
 8000cf6:	f002 fd45 	bl	8003784 <HAL_TIM_Encoder_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000d00:	f000 f9ce 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d04:	2300      	movs	r3, #0
 8000d06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <MX_TIM3_Init+0xa0>)
 8000d12:	f003 fac7 	bl	80042a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000d1c:	f000 f9c0 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	3730      	adds	r7, #48	@ 0x30
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000208 	.word	0x20000208
 8000d2c:	40000400 	.word	0x40000400

08000d30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d36:	f107 0320 	add.w	r3, r7, #32
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]
 8000d4e:	615a      	str	r2, [r3, #20]
 8000d50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d52:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <MX_TIM4_Init+0xc0>)
 8000d54:	4a27      	ldr	r2, [pc, #156]	@ (8000df4 <MX_TIM4_Init+0xc4>)
 8000d56:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000d58:	4b25      	ldr	r3, [pc, #148]	@ (8000df0 <MX_TIM4_Init+0xc0>)
 8000d5a:	2253      	movs	r2, #83	@ 0x53
 8000d5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5e:	4b24      	ldr	r3, [pc, #144]	@ (8000df0 <MX_TIM4_Init+0xc0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000d64:	4b22      	ldr	r3, [pc, #136]	@ (8000df0 <MX_TIM4_Init+0xc0>)
 8000d66:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000d6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6c:	4b20      	ldr	r3, [pc, #128]	@ (8000df0 <MX_TIM4_Init+0xc0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d72:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <MX_TIM4_Init+0xc0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d78:	481d      	ldr	r0, [pc, #116]	@ (8000df0 <MX_TIM4_Init+0xc0>)
 8000d7a:	f002 fbb5 	bl	80034e8 <HAL_TIM_PWM_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000d84:	f000 f98c 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d90:	f107 0320 	add.w	r3, r7, #32
 8000d94:	4619      	mov	r1, r3
 8000d96:	4816      	ldr	r0, [pc, #88]	@ (8000df0 <MX_TIM4_Init+0xc0>)
 8000d98:	f003 fa84 	bl	80042a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000da2:	f000 f97d 	bl	80010a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da6:	2360      	movs	r3, #96	@ 0x60
 8000da8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	2200      	movs	r2, #0
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480c      	ldr	r0, [pc, #48]	@ (8000df0 <MX_TIM4_Init+0xc0>)
 8000dbe:	f002 fe15 	bl	80039ec <HAL_TIM_PWM_ConfigChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000dc8:	f000 f96a 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2204      	movs	r2, #4
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4807      	ldr	r0, [pc, #28]	@ (8000df0 <MX_TIM4_Init+0xc0>)
 8000dd4:	f002 fe0a 	bl	80039ec <HAL_TIM_PWM_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000dde:	f000 f95f 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000de2:	4803      	ldr	r0, [pc, #12]	@ (8000df0 <MX_TIM4_Init+0xc0>)
 8000de4:	f000 fcd8 	bl	8001798 <HAL_TIM_MspPostInit>

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	@ 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000250 	.word	0x20000250
 8000df4:	40000800 	.word	0x40000800

08000df8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08c      	sub	sp, #48	@ 0x30
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	2224      	movs	r2, #36	@ 0x24
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f003 fb0c 	bl	8004424 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e14:	4b20      	ldr	r3, [pc, #128]	@ (8000e98 <MX_TIM5_Init+0xa0>)
 8000e16:	4a21      	ldr	r2, [pc, #132]	@ (8000e9c <MX_TIM5_Init+0xa4>)
 8000e18:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e98 <MX_TIM5_Init+0xa0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e20:	4b1d      	ldr	r3, [pc, #116]	@ (8000e98 <MX_TIM5_Init+0xa0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000e26:	4b1c      	ldr	r3, [pc, #112]	@ (8000e98 <MX_TIM5_Init+0xa0>)
 8000e28:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e98 <MX_TIM5_Init+0xa0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e34:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <MX_TIM5_Init+0xa0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e42:	2301      	movs	r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e52:	2301      	movs	r3, #1
 8000e54:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	4619      	mov	r1, r3
 8000e64:	480c      	ldr	r0, [pc, #48]	@ (8000e98 <MX_TIM5_Init+0xa0>)
 8000e66:	f002 fc8d 	bl	8003784 <HAL_TIM_Encoder_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000e70:	f000 f916 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	@ (8000e98 <MX_TIM5_Init+0xa0>)
 8000e82:	f003 fa0f 	bl	80042a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000e8c:	f000 f908 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	3730      	adds	r7, #48	@ 0x30
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000298 	.word	0x20000298
 8000e9c:	40000c00 	.word	0x40000c00

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	@ 0x28
 8000ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	4b5a      	ldr	r3, [pc, #360]	@ (8001024 <MX_GPIO_Init+0x184>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a59      	ldr	r2, [pc, #356]	@ (8001024 <MX_GPIO_Init+0x184>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b57      	ldr	r3, [pc, #348]	@ (8001024 <MX_GPIO_Init+0x184>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	4b53      	ldr	r3, [pc, #332]	@ (8001024 <MX_GPIO_Init+0x184>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a52      	ldr	r2, [pc, #328]	@ (8001024 <MX_GPIO_Init+0x184>)
 8000edc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b50      	ldr	r3, [pc, #320]	@ (8001024 <MX_GPIO_Init+0x184>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	4b4c      	ldr	r3, [pc, #304]	@ (8001024 <MX_GPIO_Init+0x184>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	4a4b      	ldr	r2, [pc, #300]	@ (8001024 <MX_GPIO_Init+0x184>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efe:	4b49      	ldr	r3, [pc, #292]	@ (8001024 <MX_GPIO_Init+0x184>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	4b45      	ldr	r3, [pc, #276]	@ (8001024 <MX_GPIO_Init+0x184>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a44      	ldr	r2, [pc, #272]	@ (8001024 <MX_GPIO_Init+0x184>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b42      	ldr	r3, [pc, #264]	@ (8001024 <MX_GPIO_Init+0x184>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f2c:	483e      	ldr	r0, [pc, #248]	@ (8001028 <MX_GPIO_Init+0x188>)
 8000f2e:	f001 fc77 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f24c 0104 	movw	r1, #49156	@ 0xc004
 8000f38:	483c      	ldr	r0, [pc, #240]	@ (800102c <MX_GPIO_Init+0x18c>)
 8000f3a:	f001 fc71 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	4834      	ldr	r0, [pc, #208]	@ (8001028 <MX_GPIO_Init+0x188>)
 8000f58:	f001 fac6 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f5c:	230c      	movs	r3, #12
 8000f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	482e      	ldr	r0, [pc, #184]	@ (8001030 <MX_GPIO_Init+0x190>)
 8000f78:	f001 fab6 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f7c:	2330      	movs	r3, #48	@ 0x30
 8000f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f80:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4827      	ldr	r0, [pc, #156]	@ (8001030 <MX_GPIO_Init+0x190>)
 8000f92:	f001 faa9 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f96:	2304      	movs	r3, #4
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	481f      	ldr	r0, [pc, #124]	@ (800102c <MX_GPIO_Init+0x18c>)
 8000fae:	f001 fa9b 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000fb2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000fb8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4818      	ldr	r0, [pc, #96]	@ (800102c <MX_GPIO_Init+0x18c>)
 8000fca:	f001 fa8d 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000fce:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fd4:	2311      	movs	r3, #17
 8000fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4811      	ldr	r0, [pc, #68]	@ (800102c <MX_GPIO_Init+0x18c>)
 8000fe8:	f001 fa7e 	bl	80024e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2102      	movs	r1, #2
 8000ff0:	200a      	movs	r0, #10
 8000ff2:	f001 fa42 	bl	800247a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ff6:	200a      	movs	r0, #10
 8000ff8:	f001 fa5b 	bl	80024b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2102      	movs	r1, #2
 8001000:	2017      	movs	r0, #23
 8001002:	f001 fa3a 	bl	800247a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001006:	2017      	movs	r0, #23
 8001008:	f001 fa53 	bl	80024b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	2102      	movs	r1, #2
 8001010:	2028      	movs	r0, #40	@ 0x28
 8001012:	f001 fa32 	bl	800247a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001016:	2028      	movs	r0, #40	@ 0x28
 8001018:	f001 fa4b 	bl	80024b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800101c:	bf00      	nop
 800101e:	3728      	adds	r7, #40	@ 0x28
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800
 8001028:	40020800 	.word	0x40020800
 800102c:	40020400 	.word	0x40020400
 8001030:	40020000 	.word	0x40020000

08001034 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_12)
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001044:	d10e      	bne.n	8001064 <HAL_GPIO_EXTI_Callback+0x30>
    {
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8001046:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800104a:	4812      	ldr	r0, [pc, #72]	@ (8001094 <HAL_GPIO_EXTI_Callback+0x60>)
 800104c:	f001 fbd0 	bl	80027f0 <HAL_GPIO_ReadPin>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d103      	bne.n	800105e <HAL_GPIO_EXTI_Callback+0x2a>
        {
            // turn on laser
        	blue_shoot_task.button = 1;
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <HAL_GPIO_EXTI_Callback+0x64>)
 8001058:	2201      	movs	r2, #1
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	e002      	b.n	8001064 <HAL_GPIO_EXTI_Callback+0x30>
        }
        else
        {
            // turn off laser
        	blue_shoot_task.button = 0;
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <HAL_GPIO_EXTI_Callback+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
        }
    }
    if (GPIO_Pin == GPIO_PIN_13)
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800106a:	d10e      	bne.n	800108a <HAL_GPIO_EXTI_Callback+0x56>
	{
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET)
 800106c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001070:	4808      	ldr	r0, [pc, #32]	@ (8001094 <HAL_GPIO_EXTI_Callback+0x60>)
 8001072:	f001 fbbd 	bl	80027f0 <HAL_GPIO_ReadPin>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d103      	bne.n	8001084 <HAL_GPIO_EXTI_Callback+0x50>
		{
			// turn on laser
			red_shoot_task.button = 1;
 800107c:	4b07      	ldr	r3, [pc, #28]	@ (800109c <HAL_GPIO_EXTI_Callback+0x68>)
 800107e:	2201      	movs	r2, #1
 8001080:	609a      	str	r2, [r3, #8]
		}
	}
    if (GPIO_Pin == GPIO_PIN_4){

    }
}
 8001082:	e002      	b.n	800108a <HAL_GPIO_EXTI_Callback+0x56>
			red_shoot_task.button = 0;
 8001084:	4b05      	ldr	r3, [pc, #20]	@ (800109c <HAL_GPIO_EXTI_Callback+0x68>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40020400 	.word	0x40020400
 8001098:	20000048 	.word	0x20000048
 800109c:	20000018 	.word	0x20000018

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <Error_Handler+0x8>

080010ac <set_duty>:
#include "motor_driver.h"

#define PWM_MAX 4800

void set_duty(motor_t* p_mot, int32_t duty)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
    duty = duty*PWM_MAX/100;
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	603b      	str	r3, [r7, #0]
	if(duty>=0)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db46      	blt.n	8001156 <set_duty+0xaa>
	{
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, duty);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d105      	bne.n	80010dc <set_duty+0x30>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80010da:	e018      	b.n	800110e <set_duty+0x62>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d105      	bne.n	80010f0 <set_duty+0x44>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	6393      	str	r3, [r2, #56]	@ 0x38
 80010ee:	e00e      	b.n	800110e <set_duty+0x62>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b08      	cmp	r3, #8
 80010f6:	d105      	bne.n	8001104 <set_duty+0x58>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001102:	e004      	b.n	800110e <set_duty+0x62>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, 0);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d105      	bne.n	8001122 <set_duty+0x76>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2200      	movs	r2, #0
 800111e:	635a      	str	r2, [r3, #52]	@ 0x34
	{
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, 0);
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
	}

}
 8001120:	e076      	b.n	8001210 <set_duty+0x164>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, 0);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	2b04      	cmp	r3, #4
 8001128:	d105      	bne.n	8001136 <set_duty+0x8a>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	2300      	movs	r3, #0
 8001132:	6393      	str	r3, [r2, #56]	@ 0x38
 8001134:	e06c      	b.n	8001210 <set_duty+0x164>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	2b08      	cmp	r3, #8
 800113c:	d105      	bne.n	800114a <set_duty+0x9e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	2300      	movs	r3, #0
 8001146:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001148:	e062      	b.n	8001210 <set_duty+0x164>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	2300      	movs	r3, #0
 8001152:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001154:	e05c      	b.n	8001210 <set_duty+0x164>
	else if(duty<0)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	da59      	bge.n	8001210 <set_duty+0x164>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, 0);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d105      	bne.n	8001170 <set_duty+0xc4>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2200      	movs	r2, #0
 800116c:	635a      	str	r2, [r3, #52]	@ 0x34
 800116e:	e018      	b.n	80011a2 <set_duty+0xf6>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b04      	cmp	r3, #4
 8001176:	d105      	bne.n	8001184 <set_duty+0xd8>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	2300      	movs	r3, #0
 8001180:	6393      	str	r3, [r2, #56]	@ 0x38
 8001182:	e00e      	b.n	80011a2 <set_duty+0xf6>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b08      	cmp	r3, #8
 800118a:	d105      	bne.n	8001198 <set_duty+0xec>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	2300      	movs	r3, #0
 8001194:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001196:	e004      	b.n	80011a2 <set_duty+0xf6>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	2300      	movs	r3, #0
 80011a0:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d109      	bne.n	80011be <set_duty+0x112>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80011b0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80011bc:	e028      	b.n	8001210 <set_duty+0x164>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	d10a      	bne.n	80011dc <set_duty+0x130>
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80011cc:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	460b      	mov	r3, r1
 80011d8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80011da:	e019      	b.n	8001210 <set_duty+0x164>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	2b08      	cmp	r3, #8
 80011e2:	d10a      	bne.n	80011fa <set_duty+0x14e>
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80011ea:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	460b      	mov	r3, r1
 80011f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80011f8:	e00a      	b.n	8001210 <set_duty+0x164>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001200:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	460b      	mov	r3, r1
 800120c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800120e:	e7ff      	b.n	8001210 <set_duty+0x164>
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <enable>:
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, 0);

}

void enable(motor_t* p_mot)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, PWM_MAX);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d106      	bne.n	800123a <enable+0x1e>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001236:	635a      	str	r2, [r3, #52]	@ 0x34
 8001238:	e01b      	b.n	8001272 <enable+0x56>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b04      	cmp	r3, #4
 8001240:	d106      	bne.n	8001250 <enable+0x34>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 800124c:	6393      	str	r3, [r2, #56]	@ 0x38
 800124e:	e010      	b.n	8001272 <enable+0x56>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b08      	cmp	r3, #8
 8001256:	d106      	bne.n	8001266 <enable+0x4a>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001262:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001264:	e005      	b.n	8001272 <enable+0x56>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001270:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d106      	bne.n	8001288 <enable+0x6c>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001284:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001286:	e01b      	b.n	80012c0 <enable+0xa4>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b04      	cmp	r3, #4
 800128e:	d106      	bne.n	800129e <enable+0x82>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 800129a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800129c:	e010      	b.n	80012c0 <enable+0xa4>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b08      	cmp	r3, #8
 80012a4:	d106      	bne.n	80012b4 <enable+0x98>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 80012b0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80012b2:	e005      	b.n	80012c0 <enable+0xa4>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 80012be:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <shoot_task_state_0_init>:
// servo -- 300 at shiel

// A function to initialize the task
// init button, laser and photoresistor
void shoot_task_state_0_init(ShootTask *shoot_task)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	shoot_task->state = 1;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, shoot_task->laser_gpio, GPIO_PIN_RESET);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	2200      	movs	r2, #0
 80012e2:	4619      	mov	r1, r3
 80012e4:	4818      	ldr	r0, [pc, #96]	@ (8001348 <shoot_task_state_0_init+0x7c>)
 80012e6:	f001 fa9b 	bl	8002820 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d106      	bne.n	8001300 <shoot_task_state_0_init+0x34>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699a      	ldr	r2, [r3, #24]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80012fe:	e01e      	b.n	800133e <shoot_task_state_0_init+0x72>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	2b04      	cmp	r3, #4
 8001306:	d107      	bne.n	8001318 <shoot_task_state_0_init+0x4c>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6999      	ldr	r1, [r3, #24]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	460b      	mov	r3, r1
 8001314:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001316:	e012      	b.n	800133e <shoot_task_state_0_init+0x72>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	2b08      	cmp	r3, #8
 800131e:	d107      	bne.n	8001330 <shoot_task_state_0_init+0x64>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6999      	ldr	r1, [r3, #24]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	460b      	mov	r3, r1
 800132c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800132e:	e006      	b.n	800133e <shoot_task_state_0_init+0x72>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6999      	ldr	r1, [r3, #24]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	460b      	mov	r3, r1
 800133c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40020400 	.word	0x40020400

0800134c <shoot_task_state_1_wait>:
// A function to implement state 1 of the task
// wait for button to be pressed which should be on an interrupt that changes a flag
void shoot_task_state_1_wait(ShootTask *shoot_task)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, shoot_task->laser_gpio, GPIO_PIN_RESET);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	b29b      	uxth	r3, r3
 800135a:	2200      	movs	r2, #0
 800135c:	4619      	mov	r1, r3
 800135e:	481c      	ldr	r0, [pc, #112]	@ (80013d0 <shoot_task_state_1_wait+0x84>)
 8001360:	f001 fa5e 	bl	8002820 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d106      	bne.n	800137a <shoot_task_state_1_wait+0x2e>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	699a      	ldr	r2, [r3, #24]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	635a      	str	r2, [r3, #52]	@ 0x34
 8001378:	e01e      	b.n	80013b8 <shoot_task_state_1_wait+0x6c>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	2b04      	cmp	r3, #4
 8001380:	d107      	bne.n	8001392 <shoot_task_state_1_wait+0x46>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6999      	ldr	r1, [r3, #24]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	460b      	mov	r3, r1
 800138e:	6393      	str	r3, [r2, #56]	@ 0x38
 8001390:	e012      	b.n	80013b8 <shoot_task_state_1_wait+0x6c>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	2b08      	cmp	r3, #8
 8001398:	d107      	bne.n	80013aa <shoot_task_state_1_wait+0x5e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6999      	ldr	r1, [r3, #24]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	460b      	mov	r3, r1
 80013a6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80013a8:	e006      	b.n	80013b8 <shoot_task_state_1_wait+0x6c>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6999      	ldr	r1, [r3, #24]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	460b      	mov	r3, r1
 80013b6:	6413      	str	r3, [r2, #64]	@ 0x40
	if (shoot_task->button == 1){
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d102      	bne.n	80013c6 <shoot_task_state_1_wait+0x7a>
		shoot_task->state = 2;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2202      	movs	r2, #2
 80013c4:	601a      	str	r2, [r3, #0]
	}
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40020400 	.word	0x40020400

080013d4 <shoot_task_state_2_unshield>:
// A function to implement state 2 which is for when the game is being played
// This keeps track of score, prints score messages
void shoot_task_state_2_unshield(ShootTask *shoot_task)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->shield_val);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d106      	bne.n	80013f2 <shoot_task_state_2_unshield+0x1e>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	695a      	ldr	r2, [r3, #20]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80013f0:	e01e      	b.n	8001430 <shoot_task_state_2_unshield+0x5c>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	d107      	bne.n	800140a <shoot_task_state_2_unshield+0x36>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6959      	ldr	r1, [r3, #20]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	460b      	mov	r3, r1
 8001406:	6393      	str	r3, [r2, #56]	@ 0x38
 8001408:	e012      	b.n	8001430 <shoot_task_state_2_unshield+0x5c>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	2b08      	cmp	r3, #8
 8001410:	d107      	bne.n	8001422 <shoot_task_state_2_unshield+0x4e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6959      	ldr	r1, [r3, #20]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	460b      	mov	r3, r1
 800141e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001420:	e006      	b.n	8001430 <shoot_task_state_2_unshield+0x5c>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6959      	ldr	r1, [r3, #20]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	460b      	mov	r3, r1
 800142e:	6413      	str	r3, [r2, #64]	@ 0x40
	if (1){ // add delay using some ticks and tune it
		shoot_task->state = 3;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2203      	movs	r2, #3
 8001434:	601a      	str	r2, [r3, #0]
	}
	if(shoot_task->button == 0){
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <shoot_task_state_2_unshield+0x70>
		shoot_task->state = 1;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]
	}
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <shoot_task_state_3_shoot>:
// A function to implement state 3

void shoot_task_state_3_shoot(ShootTask *shoot_task)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, shoot_task->laser_gpio, GPIO_PIN_SET);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	b29b      	uxth	r3, r3
 800145e:	2201      	movs	r2, #1
 8001460:	4619      	mov	r1, r3
 8001462:	4807      	ldr	r0, [pc, #28]	@ (8001480 <shoot_task_state_3_shoot+0x30>)
 8001464:	f001 f9dc 	bl	8002820 <HAL_GPIO_WritePin>
	if(shoot_task->button == 0){
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <shoot_task_state_3_shoot+0x26>
		shoot_task->state = 1;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]
	}

}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40020400 	.word	0x40020400

08001484 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	4a0f      	ldr	r2, [pc, #60]	@ (80014d0 <HAL_MspInit+0x4c>)
 8001494:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001498:	6453      	str	r3, [r2, #68]	@ 0x44
 800149a:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <HAL_MspInit+0x4c>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	4a08      	ldr	r2, [pc, #32]	@ (80014d0 <HAL_MspInit+0x4c>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <HAL_MspInit+0x4c>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	@ 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a17      	ldr	r2, [pc, #92]	@ (8001550 <HAL_ADC_MspInit+0x7c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d127      	bne.n	8001546 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <HAL_ADC_MspInit+0x80>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	4a15      	ldr	r2, [pc, #84]	@ (8001554 <HAL_ADC_MspInit+0x80>)
 8001500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001504:	6453      	str	r3, [r2, #68]	@ 0x44
 8001506:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <HAL_ADC_MspInit+0x80>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <HAL_ADC_MspInit+0x80>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a0e      	ldr	r2, [pc, #56]	@ (8001554 <HAL_ADC_MspInit+0x80>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <HAL_ADC_MspInit+0x80>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800152e:	23c0      	movs	r3, #192	@ 0xc0
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001532:	2303      	movs	r3, #3
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	@ (8001558 <HAL_ADC_MspInit+0x84>)
 8001542:	f000 ffd1 	bl	80024e8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	@ 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40012000 	.word	0x40012000
 8001554:	40023800 	.word	0x40023800
 8001558:	40020000 	.word	0x40020000

0800155c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	@ 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a19      	ldr	r2, [pc, #100]	@ (80015e0 <HAL_I2C_MspInit+0x84>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d12c      	bne.n	80015d8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b18      	ldr	r3, [pc, #96]	@ (80015e4 <HAL_I2C_MspInit+0x88>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a17      	ldr	r2, [pc, #92]	@ (80015e4 <HAL_I2C_MspInit+0x88>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <HAL_I2C_MspInit+0x88>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800159a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a0:	2312      	movs	r3, #18
 80015a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ac:	2304      	movs	r3, #4
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4619      	mov	r1, r3
 80015b6:	480c      	ldr	r0, [pc, #48]	@ (80015e8 <HAL_I2C_MspInit+0x8c>)
 80015b8:	f000 ff96 	bl	80024e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <HAL_I2C_MspInit+0x88>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c4:	4a07      	ldr	r2, [pc, #28]	@ (80015e4 <HAL_I2C_MspInit+0x88>)
 80015c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80015cc:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <HAL_I2C_MspInit+0x88>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015d8:	bf00      	nop
 80015da:	3728      	adds	r7, #40	@ 0x28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40005400 	.word	0x40005400
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020400 	.word	0x40020400

080015ec <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a15      	ldr	r2, [pc, #84]	@ (8001650 <HAL_TIM_PWM_MspInit+0x64>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d10e      	bne.n	800161c <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b14      	ldr	r3, [pc, #80]	@ (8001654 <HAL_TIM_PWM_MspInit+0x68>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001606:	4a13      	ldr	r2, [pc, #76]	@ (8001654 <HAL_TIM_PWM_MspInit+0x68>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6453      	str	r3, [r2, #68]	@ 0x44
 800160e:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <HAL_TIM_PWM_MspInit+0x68>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800161a:	e012      	b.n	8001642 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0d      	ldr	r2, [pc, #52]	@ (8001658 <HAL_TIM_PWM_MspInit+0x6c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d10d      	bne.n	8001642 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <HAL_TIM_PWM_MspInit+0x68>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	4a09      	ldr	r2, [pc, #36]	@ (8001654 <HAL_TIM_PWM_MspInit+0x68>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	6413      	str	r3, [r2, #64]	@ 0x40
 8001636:	4b07      	ldr	r3, [pc, #28]	@ (8001654 <HAL_TIM_PWM_MspInit+0x68>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40010000 	.word	0x40010000
 8001654:	40023800 	.word	0x40023800
 8001658:	40000800 	.word	0x40000800

0800165c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800166c:	d10d      	bne.n	800168a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <HAL_TIM_Base_MspInit+0x3c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	4a08      	ldr	r2, [pc, #32]	@ (8001698 <HAL_TIM_Base_MspInit+0x3c>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6413      	str	r3, [r2, #64]	@ 0x40
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <HAL_TIM_Base_MspInit+0x3c>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800

0800169c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08c      	sub	sp, #48	@ 0x30
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a32      	ldr	r2, [pc, #200]	@ (8001784 <HAL_TIM_Encoder_MspInit+0xe8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d12c      	bne.n	8001718 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	61bb      	str	r3, [r7, #24]
 80016c2:	4b31      	ldr	r3, [pc, #196]	@ (8001788 <HAL_TIM_Encoder_MspInit+0xec>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	4a30      	ldr	r2, [pc, #192]	@ (8001788 <HAL_TIM_Encoder_MspInit+0xec>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001788 <HAL_TIM_Encoder_MspInit+0xec>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	61bb      	str	r3, [r7, #24]
 80016d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	4b2a      	ldr	r3, [pc, #168]	@ (8001788 <HAL_TIM_Encoder_MspInit+0xec>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	4a29      	ldr	r2, [pc, #164]	@ (8001788 <HAL_TIM_Encoder_MspInit+0xec>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ea:	4b27      	ldr	r3, [pc, #156]	@ (8001788 <HAL_TIM_Encoder_MspInit+0xec>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016f6:	2330      	movs	r3, #48	@ 0x30
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001706:	2302      	movs	r3, #2
 8001708:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f107 031c 	add.w	r3, r7, #28
 800170e:	4619      	mov	r1, r3
 8001710:	481e      	ldr	r0, [pc, #120]	@ (800178c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001712:	f000 fee9 	bl	80024e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001716:	e030      	b.n	800177a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a1c      	ldr	r2, [pc, #112]	@ (8001790 <HAL_TIM_Encoder_MspInit+0xf4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d12b      	bne.n	800177a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <HAL_TIM_Encoder_MspInit+0xec>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	4a17      	ldr	r2, [pc, #92]	@ (8001788 <HAL_TIM_Encoder_MspInit+0xec>)
 800172c:	f043 0308 	orr.w	r3, r3, #8
 8001730:	6413      	str	r3, [r2, #64]	@ 0x40
 8001732:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <HAL_TIM_Encoder_MspInit+0xec>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <HAL_TIM_Encoder_MspInit+0xec>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	4a10      	ldr	r2, [pc, #64]	@ (8001788 <HAL_TIM_Encoder_MspInit+0xec>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6313      	str	r3, [r2, #48]	@ 0x30
 800174e:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <HAL_TIM_Encoder_MspInit+0xec>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800175a:	2303      	movs	r3, #3
 800175c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800176a:	2302      	movs	r3, #2
 800176c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	4619      	mov	r1, r3
 8001774:	4807      	ldr	r0, [pc, #28]	@ (8001794 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001776:	f000 feb7 	bl	80024e8 <HAL_GPIO_Init>
}
 800177a:	bf00      	nop
 800177c:	3730      	adds	r7, #48	@ 0x30
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40000400 	.word	0x40000400
 8001788:	40023800 	.word	0x40023800
 800178c:	40020400 	.word	0x40020400
 8001790:	40000c00 	.word	0x40000c00
 8001794:	40020000 	.word	0x40020000

08001798 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	@ 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a37      	ldr	r2, [pc, #220]	@ (8001894 <HAL_TIM_MspPostInit+0xfc>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d11f      	bne.n	80017fa <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b36      	ldr	r3, [pc, #216]	@ (8001898 <HAL_TIM_MspPostInit+0x100>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a35      	ldr	r2, [pc, #212]	@ (8001898 <HAL_TIM_MspPostInit+0x100>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b33      	ldr	r3, [pc, #204]	@ (8001898 <HAL_TIM_MspPostInit+0x100>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80017d6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80017da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017e8:	2301      	movs	r3, #1
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4619      	mov	r1, r3
 80017f2:	482a      	ldr	r0, [pc, #168]	@ (800189c <HAL_TIM_MspPostInit+0x104>)
 80017f4:	f000 fe78 	bl	80024e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80017f8:	e047      	b.n	800188a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001802:	d11f      	bne.n	8001844 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	4b23      	ldr	r3, [pc, #140]	@ (8001898 <HAL_TIM_MspPostInit+0x100>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180c:	4a22      	ldr	r2, [pc, #136]	@ (8001898 <HAL_TIM_MspPostInit+0x100>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6313      	str	r3, [r2, #48]	@ 0x30
 8001814:	4b20      	ldr	r3, [pc, #128]	@ (8001898 <HAL_TIM_MspPostInit+0x100>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001820:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001832:	2301      	movs	r3, #1
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	4817      	ldr	r0, [pc, #92]	@ (800189c <HAL_TIM_MspPostInit+0x104>)
 800183e:	f000 fe53 	bl	80024e8 <HAL_GPIO_Init>
}
 8001842:	e022      	b.n	800188a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a15      	ldr	r2, [pc, #84]	@ (80018a0 <HAL_TIM_MspPostInit+0x108>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d11d      	bne.n	800188a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <HAL_TIM_MspPostInit+0x100>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a10      	ldr	r2, [pc, #64]	@ (8001898 <HAL_TIM_MspPostInit+0x100>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <HAL_TIM_MspPostInit+0x100>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800186a:	23c0      	movs	r3, #192	@ 0xc0
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800187a:	2302      	movs	r3, #2
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4807      	ldr	r0, [pc, #28]	@ (80018a4 <HAL_TIM_MspPostInit+0x10c>)
 8001886:	f000 fe2f 	bl	80024e8 <HAL_GPIO_Init>
}
 800188a:	bf00      	nop
 800188c:	3728      	adds	r7, #40	@ 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40010000 	.word	0x40010000
 8001898:	40023800 	.word	0x40023800
 800189c:	40020000 	.word	0x40020000
 80018a0:	40000800 	.word	0x40000800
 80018a4:	40020400 	.word	0x40020400

080018a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <NMI_Handler+0x4>

080018b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <HardFault_Handler+0x4>

080018b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <MemManage_Handler+0x4>

080018c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <UsageFault_Handler+0x4>

080018d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018fe:	f000 f8ab 	bl	8001a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}

08001906 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800190a:	2010      	movs	r0, #16
 800190c:	f000 ffa2 	bl	8002854 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}

08001914 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001918:	2020      	movs	r0, #32
 800191a:	f000 ff9b 	bl	8002854 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}

08001922 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001926:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800192a:	f000 ff93 	bl	8002854 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800192e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001932:	f000 ff8f 	bl	8002854 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <SystemInit+0x20>)
 8001942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001946:	4a05      	ldr	r2, [pc, #20]	@ (800195c <SystemInit+0x20>)
 8001948:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800194c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001960:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001998 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001964:	f7ff ffea 	bl	800193c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001968:	480c      	ldr	r0, [pc, #48]	@ (800199c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800196a:	490d      	ldr	r1, [pc, #52]	@ (80019a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800196c:	4a0d      	ldr	r2, [pc, #52]	@ (80019a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001970:	e002      	b.n	8001978 <LoopCopyDataInit>

08001972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001976:	3304      	adds	r3, #4

08001978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800197c:	d3f9      	bcc.n	8001972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197e:	4a0a      	ldr	r2, [pc, #40]	@ (80019a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001980:	4c0a      	ldr	r4, [pc, #40]	@ (80019ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001984:	e001      	b.n	800198a <LoopFillZerobss>

08001986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001988:	3204      	adds	r2, #4

0800198a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800198c:	d3fb      	bcc.n	8001986 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800198e:	f002 fd51 	bl	8004434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001992:	f7fe ff07 	bl	80007a4 <main>
  bx  lr    
 8001996:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001998:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800199c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a0:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80019a4:	080044bc 	.word	0x080044bc
  ldr r2, =_sbss
 80019a8:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 80019ac:	200002e4 	.word	0x200002e4

080019b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b0:	e7fe      	b.n	80019b0 <ADC_IRQHandler>
	...

080019b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019b8:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <HAL_Init+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0d      	ldr	r2, [pc, #52]	@ (80019f4 <HAL_Init+0x40>)
 80019be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019c4:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <HAL_Init+0x40>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <HAL_Init+0x40>)
 80019ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d0:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <HAL_Init+0x40>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a07      	ldr	r2, [pc, #28]	@ (80019f4 <HAL_Init+0x40>)
 80019d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019dc:	2003      	movs	r0, #3
 80019de:	f000 fd41 	bl	8002464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e2:	200f      	movs	r0, #15
 80019e4:	f000 f808 	bl	80019f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e8:	f7ff fd4c 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023c00 	.word	0x40023c00

080019f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a00:	4b12      	ldr	r3, [pc, #72]	@ (8001a4c <HAL_InitTick+0x54>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <HAL_InitTick+0x58>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 fd59 	bl	80024ce <HAL_SYSTICK_Config>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00e      	b.n	8001a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b0f      	cmp	r3, #15
 8001a2a:	d80a      	bhi.n	8001a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f000 fd21 	bl	800247a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a38:	4a06      	ldr	r2, [pc, #24]	@ (8001a54 <HAL_InitTick+0x5c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200000b0 	.word	0x200000b0
 8001a50:	200000b8 	.word	0x200000b8
 8001a54:	200000b4 	.word	0x200000b4

08001a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <HAL_IncTick+0x20>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_IncTick+0x24>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a04      	ldr	r2, [pc, #16]	@ (8001a7c <HAL_IncTick+0x24>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	200000b8 	.word	0x200000b8
 8001a7c:	200002e0 	.word	0x200002e0

08001a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b03      	ldr	r3, [pc, #12]	@ (8001a94 <HAL_GetTick+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	200002e0 	.word	0x200002e0

08001a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff ffee 	bl	8001a80 <HAL_GetTick>
 8001aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d005      	beq.n	8001abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8001adc <HAL_Delay+0x44>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001abe:	bf00      	nop
 8001ac0:	f7ff ffde 	bl	8001a80 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d8f7      	bhi.n	8001ac0 <HAL_Delay+0x28>
  {
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200000b8 	.word	0x200000b8

08001ae0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e033      	b.n	8001b5e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d109      	bne.n	8001b12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fce8 	bl	80014d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d118      	bne.n	8001b50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b26:	f023 0302 	bic.w	r3, r3, #2
 8001b2a:	f043 0202 	orr.w	r2, r3, #2
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 faca 	bl	80020cc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	f023 0303 	bic.w	r3, r3, #3
 8001b46:	f043 0201 	orr.w	r2, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b4e:	e001      	b.n	8001b54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADC_Start+0x1a>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e097      	b.n	8001cb2 <HAL_ADC_Start+0x14a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d018      	beq.n	8001bca <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ba8:	4b45      	ldr	r3, [pc, #276]	@ (8001cc0 <HAL_ADC_Start+0x158>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a45      	ldr	r2, [pc, #276]	@ (8001cc4 <HAL_ADC_Start+0x15c>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	0c9a      	lsrs	r2, r3, #18
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4413      	add	r3, r2
 8001bba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001bbc:	e002      	b.n	8001bc4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f9      	bne.n	8001bbe <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d15f      	bne.n	8001c98 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c02:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c16:	d106      	bne.n	8001c26 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1c:	f023 0206 	bic.w	r2, r3, #6
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	645a      	str	r2, [r3, #68]	@ 0x44
 8001c24:	e002      	b.n	8001c2c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c34:	4b24      	ldr	r3, [pc, #144]	@ (8001cc8 <HAL_ADC_Start+0x160>)
 8001c36:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001c40:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 031f 	and.w	r3, r3, #31
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10f      	bne.n	8001c6e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d129      	bne.n	8001cb0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	e020      	b.n	8001cb0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a16      	ldr	r2, [pc, #88]	@ (8001ccc <HAL_ADC_Start+0x164>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d11b      	bne.n	8001cb0 <HAL_ADC_Start+0x148>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d114      	bne.n	8001cb0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	e00b      	b.n	8001cb0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9c:	f043 0210 	orr.w	r2, r3, #16
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca8:	f043 0201 	orr.w	r2, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	200000b0 	.word	0x200000b0
 8001cc4:	431bde83 	.word	0x431bde83
 8001cc8:	40012300 	.word	0x40012300
 8001ccc:	40012000 	.word	0x40012000

08001cd0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_Stop+0x16>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e021      	b.n	8001d2a <HAL_ADC_Stop+0x5a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0201 	bic.w	r2, r2, #1
 8001cfc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d109      	bne.n	8001d20 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b084      	sub	sp, #16
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d52:	d113      	bne.n	8001d7c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d62:	d10b      	bne.n	8001d7c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d68:	f043 0220 	orr.w	r2, r3, #32
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e063      	b.n	8001e44 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d7c:	f7ff fe80 	bl	8001a80 <HAL_GetTick>
 8001d80:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d82:	e021      	b.n	8001dc8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d8a:	d01d      	beq.n	8001dc8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d007      	beq.n	8001da2 <HAL_ADC_PollForConversion+0x6c>
 8001d92:	f7ff fe75 	bl	8001a80 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d212      	bcs.n	8001dc8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d00b      	beq.n	8001dc8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	f043 0204 	orr.w	r2, r3, #4
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e03d      	b.n	8001e44 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d1d6      	bne.n	8001d84 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f06f 0212 	mvn.w	r2, #18
 8001dde:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d123      	bne.n	8001e42 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d11f      	bne.n	8001e42 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e08:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d006      	beq.n	8001e1e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d111      	bne.n	8001e42 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d105      	bne.n	8001e42 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	f043 0201 	orr.w	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x1c>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e113      	b.n	80020ac <HAL_ADC_ConfigChannel+0x244>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b09      	cmp	r3, #9
 8001e92:	d925      	bls.n	8001ee0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68d9      	ldr	r1, [r3, #12]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3b1e      	subs	r3, #30
 8001eaa:	2207      	movs	r2, #7
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43da      	mvns	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	400a      	ands	r2, r1
 8001eb8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68d9      	ldr	r1, [r3, #12]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	4603      	mov	r3, r0
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4403      	add	r3, r0
 8001ed2:	3b1e      	subs	r3, #30
 8001ed4:	409a      	lsls	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	e022      	b.n	8001f26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6919      	ldr	r1, [r3, #16]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	4613      	mov	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4413      	add	r3, r2
 8001ef4:	2207      	movs	r2, #7
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43da      	mvns	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	400a      	ands	r2, r1
 8001f02:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6919      	ldr	r1, [r3, #16]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	4618      	mov	r0, r3
 8001f16:	4603      	mov	r3, r0
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4403      	add	r3, r0
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b06      	cmp	r3, #6
 8001f2c:	d824      	bhi.n	8001f78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3b05      	subs	r3, #5
 8001f40:	221f      	movs	r2, #31
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43da      	mvns	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	3b05      	subs	r3, #5
 8001f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f76:	e04c      	b.n	8002012 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b0c      	cmp	r3, #12
 8001f7e:	d824      	bhi.n	8001fca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	3b23      	subs	r3, #35	@ 0x23
 8001f92:	221f      	movs	r2, #31
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43da      	mvns	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	3b23      	subs	r3, #35	@ 0x23
 8001fbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fc8:	e023      	b.n	8002012 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b41      	subs	r3, #65	@ 0x41
 8001fdc:	221f      	movs	r2, #31
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	400a      	ands	r2, r1
 8001fea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	3b41      	subs	r3, #65	@ 0x41
 8002006:	fa00 f203 	lsl.w	r2, r0, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002012:	4b29      	ldr	r3, [pc, #164]	@ (80020b8 <HAL_ADC_ConfigChannel+0x250>)
 8002014:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a28      	ldr	r2, [pc, #160]	@ (80020bc <HAL_ADC_ConfigChannel+0x254>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d10f      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x1d8>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b12      	cmp	r3, #18
 8002026:	d10b      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a1d      	ldr	r2, [pc, #116]	@ (80020bc <HAL_ADC_ConfigChannel+0x254>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d12b      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x23a>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1c      	ldr	r2, [pc, #112]	@ (80020c0 <HAL_ADC_ConfigChannel+0x258>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d003      	beq.n	800205c <HAL_ADC_ConfigChannel+0x1f4>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b11      	cmp	r3, #17
 800205a:	d122      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a11      	ldr	r2, [pc, #68]	@ (80020c0 <HAL_ADC_ConfigChannel+0x258>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d111      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800207e:	4b11      	ldr	r3, [pc, #68]	@ (80020c4 <HAL_ADC_ConfigChannel+0x25c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a11      	ldr	r2, [pc, #68]	@ (80020c8 <HAL_ADC_ConfigChannel+0x260>)
 8002084:	fba2 2303 	umull	r2, r3, r2, r3
 8002088:	0c9a      	lsrs	r2, r3, #18
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002094:	e002      	b.n	800209c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	3b01      	subs	r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f9      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	40012300 	.word	0x40012300
 80020bc:	40012000 	.word	0x40012000
 80020c0:	10000012 	.word	0x10000012
 80020c4:	200000b0 	.word	0x200000b0
 80020c8:	431bde83 	.word	0x431bde83

080020cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020d4:	4b79      	ldr	r3, [pc, #484]	@ (80022bc <ADC_Init+0x1f0>)
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	431a      	orrs	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002100:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6859      	ldr	r1, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	021a      	lsls	r2, r3, #8
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002124:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6859      	ldr	r1, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002146:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6899      	ldr	r1, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215e:	4a58      	ldr	r2, [pc, #352]	@ (80022c0 <ADC_Init+0x1f4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d022      	beq.n	80021aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002172:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6899      	ldr	r1, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002194:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6899      	ldr	r1, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	e00f      	b.n	80021ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021c8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0202 	bic.w	r2, r2, #2
 80021d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6899      	ldr	r1, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	7e1b      	ldrb	r3, [r3, #24]
 80021e4:	005a      	lsls	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d01b      	beq.n	8002230 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002206:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002216:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6859      	ldr	r1, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	3b01      	subs	r3, #1
 8002224:	035a      	lsls	r2, r3, #13
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	e007      	b.n	8002240 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800223e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800224e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	3b01      	subs	r3, #1
 800225c:	051a      	lsls	r2, r3, #20
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002274:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6899      	ldr	r1, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002282:	025a      	lsls	r2, r3, #9
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800229a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6899      	ldr	r1, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	029a      	lsls	r2, r3, #10
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	609a      	str	r2, [r3, #8]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	40012300 	.word	0x40012300
 80022c0:	0f000001 	.word	0x0f000001

080022c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022e0:	4013      	ands	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f6:	4a04      	ldr	r2, [pc, #16]	@ (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	60d3      	str	r3, [r2, #12]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002310:	4b04      	ldr	r3, [pc, #16]	@ (8002324 <__NVIC_GetPriorityGrouping+0x18>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	0a1b      	lsrs	r3, r3, #8
 8002316:	f003 0307 	and.w	r3, r3, #7
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	2b00      	cmp	r3, #0
 8002338:	db0b      	blt.n	8002352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	f003 021f 	and.w	r2, r3, #31
 8002340:	4907      	ldr	r1, [pc, #28]	@ (8002360 <__NVIC_EnableIRQ+0x38>)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	2001      	movs	r0, #1
 800234a:	fa00 f202 	lsl.w	r2, r0, r2
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000e100 	.word	0xe000e100

08002364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	2b00      	cmp	r3, #0
 8002376:	db0a      	blt.n	800238e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	490c      	ldr	r1, [pc, #48]	@ (80023b0 <__NVIC_SetPriority+0x4c>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	0112      	lsls	r2, r2, #4
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	440b      	add	r3, r1
 8002388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800238c:	e00a      	b.n	80023a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4908      	ldr	r1, [pc, #32]	@ (80023b4 <__NVIC_SetPriority+0x50>)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	3b04      	subs	r3, #4
 800239c:	0112      	lsls	r2, r2, #4
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	440b      	add	r3, r1
 80023a2:	761a      	strb	r2, [r3, #24]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000e100 	.word	0xe000e100
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	@ 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f1c3 0307 	rsb	r3, r3, #7
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	bf28      	it	cs
 80023d6:	2304      	movcs	r3, #4
 80023d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3304      	adds	r3, #4
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d902      	bls.n	80023e8 <NVIC_EncodePriority+0x30>
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3b03      	subs	r3, #3
 80023e6:	e000      	b.n	80023ea <NVIC_EncodePriority+0x32>
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	401a      	ands	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002400:	f04f 31ff 	mov.w	r1, #4294967295
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	43d9      	mvns	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	4313      	orrs	r3, r2
         );
}
 8002412:	4618      	mov	r0, r3
 8002414:	3724      	adds	r7, #36	@ 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002430:	d301      	bcc.n	8002436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002432:	2301      	movs	r3, #1
 8002434:	e00f      	b.n	8002456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002436:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <SysTick_Config+0x40>)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243e:	210f      	movs	r1, #15
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	f7ff ff8e 	bl	8002364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002448:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <SysTick_Config+0x40>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244e:	4b04      	ldr	r3, [pc, #16]	@ (8002460 <SysTick_Config+0x40>)
 8002450:	2207      	movs	r2, #7
 8002452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	e000e010 	.word	0xe000e010

08002464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ff29 	bl	80022c4 <__NVIC_SetPriorityGrouping>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800248c:	f7ff ff3e 	bl	800230c <__NVIC_GetPriorityGrouping>
 8002490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	6978      	ldr	r0, [r7, #20]
 8002498:	f7ff ff8e 	bl	80023b8 <NVIC_EncodePriority>
 800249c:	4602      	mov	r2, r0
 800249e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff5d 	bl	8002364 <__NVIC_SetPriority>
}
 80024aa:	bf00      	nop
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ff31 	bl	8002328 <__NVIC_EnableIRQ>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff ffa2 	bl	8002420 <SysTick_Config>
 80024dc:	4603      	mov	r3, r0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	@ 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	e159      	b.n	80027b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002504:	2201      	movs	r2, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	429a      	cmp	r2, r3
 800251e:	f040 8148 	bne.w	80027b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b01      	cmp	r3, #1
 800252c:	d005      	beq.n	800253a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002536:	2b02      	cmp	r3, #2
 8002538:	d130      	bne.n	800259c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	2203      	movs	r2, #3
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002570:	2201      	movs	r2, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	091b      	lsrs	r3, r3, #4
 8002586:	f003 0201 	and.w	r2, r3, #1
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d017      	beq.n	80025d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d123      	bne.n	800262c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	08da      	lsrs	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3208      	adds	r2, #8
 80025ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	220f      	movs	r2, #15
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	08da      	lsrs	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3208      	adds	r2, #8
 8002626:	69b9      	ldr	r1, [r7, #24]
 8002628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0203 	and.w	r2, r3, #3
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80a2 	beq.w	80027b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	4b57      	ldr	r3, [pc, #348]	@ (80027d0 <HAL_GPIO_Init+0x2e8>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002676:	4a56      	ldr	r2, [pc, #344]	@ (80027d0 <HAL_GPIO_Init+0x2e8>)
 8002678:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800267c:	6453      	str	r3, [r2, #68]	@ 0x44
 800267e:	4b54      	ldr	r3, [pc, #336]	@ (80027d0 <HAL_GPIO_Init+0x2e8>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800268a:	4a52      	ldr	r2, [pc, #328]	@ (80027d4 <HAL_GPIO_Init+0x2ec>)
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3302      	adds	r3, #2
 8002692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	220f      	movs	r2, #15
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a49      	ldr	r2, [pc, #292]	@ (80027d8 <HAL_GPIO_Init+0x2f0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d019      	beq.n	80026ea <HAL_GPIO_Init+0x202>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a48      	ldr	r2, [pc, #288]	@ (80027dc <HAL_GPIO_Init+0x2f4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d013      	beq.n	80026e6 <HAL_GPIO_Init+0x1fe>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a47      	ldr	r2, [pc, #284]	@ (80027e0 <HAL_GPIO_Init+0x2f8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00d      	beq.n	80026e2 <HAL_GPIO_Init+0x1fa>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a46      	ldr	r2, [pc, #280]	@ (80027e4 <HAL_GPIO_Init+0x2fc>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d007      	beq.n	80026de <HAL_GPIO_Init+0x1f6>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a45      	ldr	r2, [pc, #276]	@ (80027e8 <HAL_GPIO_Init+0x300>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d101      	bne.n	80026da <HAL_GPIO_Init+0x1f2>
 80026d6:	2304      	movs	r3, #4
 80026d8:	e008      	b.n	80026ec <HAL_GPIO_Init+0x204>
 80026da:	2307      	movs	r3, #7
 80026dc:	e006      	b.n	80026ec <HAL_GPIO_Init+0x204>
 80026de:	2303      	movs	r3, #3
 80026e0:	e004      	b.n	80026ec <HAL_GPIO_Init+0x204>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e002      	b.n	80026ec <HAL_GPIO_Init+0x204>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_GPIO_Init+0x204>
 80026ea:	2300      	movs	r3, #0
 80026ec:	69fa      	ldr	r2, [r7, #28]
 80026ee:	f002 0203 	and.w	r2, r2, #3
 80026f2:	0092      	lsls	r2, r2, #2
 80026f4:	4093      	lsls	r3, r2
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026fc:	4935      	ldr	r1, [pc, #212]	@ (80027d4 <HAL_GPIO_Init+0x2ec>)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	089b      	lsrs	r3, r3, #2
 8002702:	3302      	adds	r3, #2
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800270a:	4b38      	ldr	r3, [pc, #224]	@ (80027ec <HAL_GPIO_Init+0x304>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800272e:	4a2f      	ldr	r2, [pc, #188]	@ (80027ec <HAL_GPIO_Init+0x304>)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002734:	4b2d      	ldr	r3, [pc, #180]	@ (80027ec <HAL_GPIO_Init+0x304>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002758:	4a24      	ldr	r2, [pc, #144]	@ (80027ec <HAL_GPIO_Init+0x304>)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800275e:	4b23      	ldr	r3, [pc, #140]	@ (80027ec <HAL_GPIO_Init+0x304>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	43db      	mvns	r3, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4013      	ands	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002782:	4a1a      	ldr	r2, [pc, #104]	@ (80027ec <HAL_GPIO_Init+0x304>)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002788:	4b18      	ldr	r3, [pc, #96]	@ (80027ec <HAL_GPIO_Init+0x304>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ac:	4a0f      	ldr	r2, [pc, #60]	@ (80027ec <HAL_GPIO_Init+0x304>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3301      	adds	r3, #1
 80027b6:	61fb      	str	r3, [r7, #28]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	2b0f      	cmp	r3, #15
 80027bc:	f67f aea2 	bls.w	8002504 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	3724      	adds	r7, #36	@ 0x24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40013800 	.word	0x40013800
 80027d8:	40020000 	.word	0x40020000
 80027dc:	40020400 	.word	0x40020400
 80027e0:	40020800 	.word	0x40020800
 80027e4:	40020c00 	.word	0x40020c00
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40013c00 	.word	0x40013c00

080027f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	887b      	ldrh	r3, [r7, #2]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	e001      	b.n	8002812 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800280e:	2300      	movs	r3, #0
 8002810:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002812:	7bfb      	ldrb	r3, [r7, #15]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
 800282c:	4613      	mov	r3, r2
 800282e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002830:	787b      	ldrb	r3, [r7, #1]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002836:	887a      	ldrh	r2, [r7, #2]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800283c:	e003      	b.n	8002846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800283e:	887b      	ldrh	r3, [r7, #2]
 8002840:	041a      	lsls	r2, r3, #16
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	619a      	str	r2, [r3, #24]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800285e:	4b08      	ldr	r3, [pc, #32]	@ (8002880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002860:	695a      	ldr	r2, [r3, #20]
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d006      	beq.n	8002878 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800286a:	4a05      	ldr	r2, [pc, #20]	@ (8002880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800286c:	88fb      	ldrh	r3, [r7, #6]
 800286e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002870:	88fb      	ldrh	r3, [r7, #6]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe fbde 	bl	8001034 <HAL_GPIO_EXTI_Callback>
  }
}
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40013c00 	.word	0x40013c00

08002884 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e12b      	b.n	8002aee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe fe56 	bl	800155c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2224      	movs	r2, #36	@ 0x24
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0201 	bic.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028e8:	f000 fd40 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 80028ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	4a81      	ldr	r2, [pc, #516]	@ (8002af8 <HAL_I2C_Init+0x274>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d807      	bhi.n	8002908 <HAL_I2C_Init+0x84>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4a80      	ldr	r2, [pc, #512]	@ (8002afc <HAL_I2C_Init+0x278>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	bf94      	ite	ls
 8002900:	2301      	movls	r3, #1
 8002902:	2300      	movhi	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	e006      	b.n	8002916 <HAL_I2C_Init+0x92>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4a7d      	ldr	r2, [pc, #500]	@ (8002b00 <HAL_I2C_Init+0x27c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	bf94      	ite	ls
 8002910:	2301      	movls	r3, #1
 8002912:	2300      	movhi	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e0e7      	b.n	8002aee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	4a78      	ldr	r2, [pc, #480]	@ (8002b04 <HAL_I2C_Init+0x280>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	0c9b      	lsrs	r3, r3, #18
 8002928:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	4a6a      	ldr	r2, [pc, #424]	@ (8002af8 <HAL_I2C_Init+0x274>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d802      	bhi.n	8002958 <HAL_I2C_Init+0xd4>
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	3301      	adds	r3, #1
 8002956:	e009      	b.n	800296c <HAL_I2C_Init+0xe8>
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800295e:	fb02 f303 	mul.w	r3, r2, r3
 8002962:	4a69      	ldr	r2, [pc, #420]	@ (8002b08 <HAL_I2C_Init+0x284>)
 8002964:	fba2 2303 	umull	r2, r3, r2, r3
 8002968:	099b      	lsrs	r3, r3, #6
 800296a:	3301      	adds	r3, #1
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	430b      	orrs	r3, r1
 8002972:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800297e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	495c      	ldr	r1, [pc, #368]	@ (8002af8 <HAL_I2C_Init+0x274>)
 8002988:	428b      	cmp	r3, r1
 800298a:	d819      	bhi.n	80029c0 <HAL_I2C_Init+0x13c>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1e59      	subs	r1, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	fbb1 f3f3 	udiv	r3, r1, r3
 800299a:	1c59      	adds	r1, r3, #1
 800299c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029a0:	400b      	ands	r3, r1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <HAL_I2C_Init+0x138>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1e59      	subs	r1, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80029b4:	3301      	adds	r3, #1
 80029b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ba:	e051      	b.n	8002a60 <HAL_I2C_Init+0x1dc>
 80029bc:	2304      	movs	r3, #4
 80029be:	e04f      	b.n	8002a60 <HAL_I2C_Init+0x1dc>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d111      	bne.n	80029ec <HAL_I2C_Init+0x168>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1e58      	subs	r0, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6859      	ldr	r1, [r3, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	440b      	add	r3, r1
 80029d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029da:	3301      	adds	r3, #1
 80029dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	bf0c      	ite	eq
 80029e4:	2301      	moveq	r3, #1
 80029e6:	2300      	movne	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	e012      	b.n	8002a12 <HAL_I2C_Init+0x18e>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1e58      	subs	r0, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6859      	ldr	r1, [r3, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	0099      	lsls	r1, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf0c      	ite	eq
 8002a0c:	2301      	moveq	r3, #1
 8002a0e:	2300      	movne	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_I2C_Init+0x196>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e022      	b.n	8002a60 <HAL_I2C_Init+0x1dc>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10e      	bne.n	8002a40 <HAL_I2C_Init+0x1bc>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1e58      	subs	r0, r3, #1
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6859      	ldr	r1, [r3, #4]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	440b      	add	r3, r1
 8002a30:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a34:	3301      	adds	r3, #1
 8002a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a3e:	e00f      	b.n	8002a60 <HAL_I2C_Init+0x1dc>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1e58      	subs	r0, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	0099      	lsls	r1, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a56:	3301      	adds	r3, #1
 8002a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	6809      	ldr	r1, [r1, #0]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69da      	ldr	r2, [r3, #28]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6911      	ldr	r1, [r2, #16]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68d2      	ldr	r2, [r2, #12]
 8002a9a:	4311      	orrs	r1, r2
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	000186a0 	.word	0x000186a0
 8002afc:	001e847f 	.word	0x001e847f
 8002b00:	003d08ff 	.word	0x003d08ff
 8002b04:	431bde83 	.word	0x431bde83
 8002b08:	10624dd3 	.word	0x10624dd3

08002b0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e267      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d075      	beq.n	8002c16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b2a:	4b88      	ldr	r3, [pc, #544]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d00c      	beq.n	8002b50 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b36:	4b85      	ldr	r3, [pc, #532]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d112      	bne.n	8002b68 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b42:	4b82      	ldr	r3, [pc, #520]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b4e:	d10b      	bne.n	8002b68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b50:	4b7e      	ldr	r3, [pc, #504]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d05b      	beq.n	8002c14 <HAL_RCC_OscConfig+0x108>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d157      	bne.n	8002c14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e242      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b70:	d106      	bne.n	8002b80 <HAL_RCC_OscConfig+0x74>
 8002b72:	4b76      	ldr	r3, [pc, #472]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a75      	ldr	r2, [pc, #468]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	e01d      	b.n	8002bbc <HAL_RCC_OscConfig+0xb0>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x98>
 8002b8a:	4b70      	ldr	r3, [pc, #448]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a6f      	ldr	r2, [pc, #444]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002b90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	4b6d      	ldr	r3, [pc, #436]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a6c      	ldr	r2, [pc, #432]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e00b      	b.n	8002bbc <HAL_RCC_OscConfig+0xb0>
 8002ba4:	4b69      	ldr	r3, [pc, #420]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a68      	ldr	r2, [pc, #416]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002baa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b66      	ldr	r3, [pc, #408]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a65      	ldr	r2, [pc, #404]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002bb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d013      	beq.n	8002bec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7fe ff5c 	bl	8001a80 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bcc:	f7fe ff58 	bl	8001a80 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	@ 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e207      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	4b5b      	ldr	r3, [pc, #364]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0xc0>
 8002bea:	e014      	b.n	8002c16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7fe ff48 	bl	8001a80 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf4:	f7fe ff44 	bl	8001a80 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	@ 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e1f3      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c06:	4b51      	ldr	r3, [pc, #324]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0xe8>
 8002c12:	e000      	b.n	8002c16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d063      	beq.n	8002cea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c22:	4b4a      	ldr	r3, [pc, #296]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00b      	beq.n	8002c46 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c2e:	4b47      	ldr	r3, [pc, #284]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d11c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c3a:	4b44      	ldr	r3, [pc, #272]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d116      	bne.n	8002c74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c46:	4b41      	ldr	r3, [pc, #260]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_RCC_OscConfig+0x152>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e1c7      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4937      	ldr	r1, [pc, #220]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c72:	e03a      	b.n	8002cea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d020      	beq.n	8002cbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c7c:	4b34      	ldr	r3, [pc, #208]	@ (8002d50 <HAL_RCC_OscConfig+0x244>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c82:	f7fe fefd 	bl	8001a80 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c8a:	f7fe fef9 	bl	8001a80 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e1a8      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca8:	4b28      	ldr	r3, [pc, #160]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4925      	ldr	r1, [pc, #148]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]
 8002cbc:	e015      	b.n	8002cea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cbe:	4b24      	ldr	r3, [pc, #144]	@ (8002d50 <HAL_RCC_OscConfig+0x244>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe fedc 	bl	8001a80 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ccc:	f7fe fed8 	bl	8001a80 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e187      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cde:	4b1b      	ldr	r3, [pc, #108]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d036      	beq.n	8002d64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d016      	beq.n	8002d2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cfe:	4b15      	ldr	r3, [pc, #84]	@ (8002d54 <HAL_RCC_OscConfig+0x248>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d04:	f7fe febc 	bl	8001a80 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0c:	f7fe feb8 	bl	8001a80 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e167      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x200>
 8002d2a:	e01b      	b.n	8002d64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d2c:	4b09      	ldr	r3, [pc, #36]	@ (8002d54 <HAL_RCC_OscConfig+0x248>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d32:	f7fe fea5 	bl	8001a80 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d38:	e00e      	b.n	8002d58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d3a:	f7fe fea1 	bl	8001a80 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d907      	bls.n	8002d58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e150      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	42470000 	.word	0x42470000
 8002d54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d58:	4b88      	ldr	r3, [pc, #544]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002d5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1ea      	bne.n	8002d3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 8097 	beq.w	8002ea0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d72:	2300      	movs	r3, #0
 8002d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d76:	4b81      	ldr	r3, [pc, #516]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10f      	bne.n	8002da2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	4b7d      	ldr	r3, [pc, #500]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	4a7c      	ldr	r2, [pc, #496]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d92:	4b7a      	ldr	r3, [pc, #488]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da2:	4b77      	ldr	r3, [pc, #476]	@ (8002f80 <HAL_RCC_OscConfig+0x474>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d118      	bne.n	8002de0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dae:	4b74      	ldr	r3, [pc, #464]	@ (8002f80 <HAL_RCC_OscConfig+0x474>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a73      	ldr	r2, [pc, #460]	@ (8002f80 <HAL_RCC_OscConfig+0x474>)
 8002db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dba:	f7fe fe61 	bl	8001a80 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc2:	f7fe fe5d 	bl	8001a80 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e10c      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd4:	4b6a      	ldr	r3, [pc, #424]	@ (8002f80 <HAL_RCC_OscConfig+0x474>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d106      	bne.n	8002df6 <HAL_RCC_OscConfig+0x2ea>
 8002de8:	4b64      	ldr	r3, [pc, #400]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dec:	4a63      	ldr	r2, [pc, #396]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002df4:	e01c      	b.n	8002e30 <HAL_RCC_OscConfig+0x324>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b05      	cmp	r3, #5
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x30c>
 8002dfe:	4b5f      	ldr	r3, [pc, #380]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e02:	4a5e      	ldr	r2, [pc, #376]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e04:	f043 0304 	orr.w	r3, r3, #4
 8002e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e0a:	4b5c      	ldr	r3, [pc, #368]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0e:	4a5b      	ldr	r2, [pc, #364]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e16:	e00b      	b.n	8002e30 <HAL_RCC_OscConfig+0x324>
 8002e18:	4b58      	ldr	r3, [pc, #352]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1c:	4a57      	ldr	r2, [pc, #348]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e1e:	f023 0301 	bic.w	r3, r3, #1
 8002e22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e24:	4b55      	ldr	r3, [pc, #340]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e28:	4a54      	ldr	r2, [pc, #336]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e2a:	f023 0304 	bic.w	r3, r3, #4
 8002e2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d015      	beq.n	8002e64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e38:	f7fe fe22 	bl	8001a80 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3e:	e00a      	b.n	8002e56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e40:	f7fe fe1e 	bl	8001a80 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e0cb      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e56:	4b49      	ldr	r3, [pc, #292]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0ee      	beq.n	8002e40 <HAL_RCC_OscConfig+0x334>
 8002e62:	e014      	b.n	8002e8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e64:	f7fe fe0c 	bl	8001a80 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6a:	e00a      	b.n	8002e82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6c:	f7fe fe08 	bl	8001a80 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e0b5      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e82:	4b3e      	ldr	r3, [pc, #248]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1ee      	bne.n	8002e6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e94:	4b39      	ldr	r3, [pc, #228]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e98:	4a38      	ldr	r2, [pc, #224]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80a1 	beq.w	8002fec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eaa:	4b34      	ldr	r3, [pc, #208]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d05c      	beq.n	8002f70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d141      	bne.n	8002f42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebe:	4b31      	ldr	r3, [pc, #196]	@ (8002f84 <HAL_RCC_OscConfig+0x478>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe fddc 	bl	8001a80 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7fe fdd8 	bl	8001a80 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e087      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ede:	4b27      	ldr	r3, [pc, #156]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69da      	ldr	r2, [r3, #28]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	019b      	lsls	r3, r3, #6
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	085b      	lsrs	r3, r3, #1
 8002f02:	3b01      	subs	r3, #1
 8002f04:	041b      	lsls	r3, r3, #16
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0c:	061b      	lsls	r3, r3, #24
 8002f0e:	491b      	ldr	r1, [pc, #108]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f14:	4b1b      	ldr	r3, [pc, #108]	@ (8002f84 <HAL_RCC_OscConfig+0x478>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1a:	f7fe fdb1 	bl	8001a80 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f22:	f7fe fdad 	bl	8001a80 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e05c      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f34:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCC_OscConfig+0x416>
 8002f40:	e054      	b.n	8002fec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f42:	4b10      	ldr	r3, [pc, #64]	@ (8002f84 <HAL_RCC_OscConfig+0x478>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fe fd9a 	bl	8001a80 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fe fd96 	bl	8001a80 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e045      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f62:	4b06      	ldr	r3, [pc, #24]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x444>
 8002f6e:	e03d      	b.n	8002fec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d107      	bne.n	8002f88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e038      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40007000 	.word	0x40007000
 8002f84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f88:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff8 <HAL_RCC_OscConfig+0x4ec>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d028      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d121      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d11a      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fb8:	4013      	ands	r3, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d111      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fce:	085b      	lsrs	r3, r3, #1
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d107      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40023800 	.word	0x40023800

08002ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0cc      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003010:	4b68      	ldr	r3, [pc, #416]	@ (80031b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d90c      	bls.n	8003038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301e:	4b65      	ldr	r3, [pc, #404]	@ (80031b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003026:	4b63      	ldr	r3, [pc, #396]	@ (80031b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d001      	beq.n	8003038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0b8      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d020      	beq.n	8003086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003050:	4b59      	ldr	r3, [pc, #356]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4a58      	ldr	r2, [pc, #352]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800305a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003068:	4b53      	ldr	r3, [pc, #332]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4a52      	ldr	r2, [pc, #328]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003074:	4b50      	ldr	r3, [pc, #320]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	494d      	ldr	r1, [pc, #308]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	4313      	orrs	r3, r2
 8003084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d044      	beq.n	800311c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d107      	bne.n	80030aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309a:	4b47      	ldr	r3, [pc, #284]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d119      	bne.n	80030da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e07f      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d003      	beq.n	80030ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d107      	bne.n	80030ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ba:	4b3f      	ldr	r3, [pc, #252]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e06f      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ca:	4b3b      	ldr	r3, [pc, #236]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e067      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030da:	4b37      	ldr	r3, [pc, #220]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f023 0203 	bic.w	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4934      	ldr	r1, [pc, #208]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030ec:	f7fe fcc8 	bl	8001a80 <HAL_GetTick>
 80030f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f2:	e00a      	b.n	800310a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f4:	f7fe fcc4 	bl	8001a80 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003102:	4293      	cmp	r3, r2
 8003104:	d901      	bls.n	800310a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e04f      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310a:	4b2b      	ldr	r3, [pc, #172]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 020c 	and.w	r2, r3, #12
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	429a      	cmp	r2, r3
 800311a:	d1eb      	bne.n	80030f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800311c:	4b25      	ldr	r3, [pc, #148]	@ (80031b4 <HAL_RCC_ClockConfig+0x1b8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d20c      	bcs.n	8003144 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312a:	4b22      	ldr	r3, [pc, #136]	@ (80031b4 <HAL_RCC_ClockConfig+0x1b8>)
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003132:	4b20      	ldr	r3, [pc, #128]	@ (80031b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d001      	beq.n	8003144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e032      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003150:	4b19      	ldr	r3, [pc, #100]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4916      	ldr	r1, [pc, #88]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	4313      	orrs	r3, r2
 8003160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d009      	beq.n	8003182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800316e:	4b12      	ldr	r3, [pc, #72]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	490e      	ldr	r1, [pc, #56]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	4313      	orrs	r3, r2
 8003180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003182:	f000 f821 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8003186:	4602      	mov	r2, r0
 8003188:	4b0b      	ldr	r3, [pc, #44]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	490a      	ldr	r1, [pc, #40]	@ (80031bc <HAL_RCC_ClockConfig+0x1c0>)
 8003194:	5ccb      	ldrb	r3, [r1, r3]
 8003196:	fa22 f303 	lsr.w	r3, r2, r3
 800319a:	4a09      	ldr	r2, [pc, #36]	@ (80031c0 <HAL_RCC_ClockConfig+0x1c4>)
 800319c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800319e:	4b09      	ldr	r3, [pc, #36]	@ (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe fc28 	bl	80019f8 <HAL_InitTick>

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40023c00 	.word	0x40023c00
 80031b8:	40023800 	.word	0x40023800
 80031bc:	08004494 	.word	0x08004494
 80031c0:	200000b0 	.word	0x200000b0
 80031c4:	200000b4 	.word	0x200000b4

080031c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031cc:	b090      	sub	sp, #64	@ 0x40
 80031ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031e0:	4b59      	ldr	r3, [pc, #356]	@ (8003348 <HAL_RCC_GetSysClockFreq+0x180>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d00d      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0x40>
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	f200 80a1 	bhi.w	8003334 <HAL_RCC_GetSysClockFreq+0x16c>
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <HAL_RCC_GetSysClockFreq+0x34>
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d003      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0x3a>
 80031fa:	e09b      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031fc:	4b53      	ldr	r3, [pc, #332]	@ (800334c <HAL_RCC_GetSysClockFreq+0x184>)
 80031fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003200:	e09b      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003202:	4b53      	ldr	r3, [pc, #332]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x188>)
 8003204:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003206:	e098      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003208:	4b4f      	ldr	r3, [pc, #316]	@ (8003348 <HAL_RCC_GetSysClockFreq+0x180>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003210:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003212:	4b4d      	ldr	r3, [pc, #308]	@ (8003348 <HAL_RCC_GetSysClockFreq+0x180>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d028      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800321e:	4b4a      	ldr	r3, [pc, #296]	@ (8003348 <HAL_RCC_GetSysClockFreq+0x180>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	099b      	lsrs	r3, r3, #6
 8003224:	2200      	movs	r2, #0
 8003226:	623b      	str	r3, [r7, #32]
 8003228:	627a      	str	r2, [r7, #36]	@ 0x24
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003230:	2100      	movs	r1, #0
 8003232:	4b47      	ldr	r3, [pc, #284]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x188>)
 8003234:	fb03 f201 	mul.w	r2, r3, r1
 8003238:	2300      	movs	r3, #0
 800323a:	fb00 f303 	mul.w	r3, r0, r3
 800323e:	4413      	add	r3, r2
 8003240:	4a43      	ldr	r2, [pc, #268]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x188>)
 8003242:	fba0 1202 	umull	r1, r2, r0, r2
 8003246:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003248:	460a      	mov	r2, r1
 800324a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800324c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800324e:	4413      	add	r3, r2
 8003250:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003254:	2200      	movs	r2, #0
 8003256:	61bb      	str	r3, [r7, #24]
 8003258:	61fa      	str	r2, [r7, #28]
 800325a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800325e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003262:	f7fc ffb9 	bl	80001d8 <__aeabi_uldivmod>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4613      	mov	r3, r2
 800326c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800326e:	e053      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003270:	4b35      	ldr	r3, [pc, #212]	@ (8003348 <HAL_RCC_GetSysClockFreq+0x180>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	099b      	lsrs	r3, r3, #6
 8003276:	2200      	movs	r2, #0
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	617a      	str	r2, [r7, #20]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003282:	f04f 0b00 	mov.w	fp, #0
 8003286:	4652      	mov	r2, sl
 8003288:	465b      	mov	r3, fp
 800328a:	f04f 0000 	mov.w	r0, #0
 800328e:	f04f 0100 	mov.w	r1, #0
 8003292:	0159      	lsls	r1, r3, #5
 8003294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003298:	0150      	lsls	r0, r2, #5
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	ebb2 080a 	subs.w	r8, r2, sl
 80032a2:	eb63 090b 	sbc.w	r9, r3, fp
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80032b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80032b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80032ba:	ebb2 0408 	subs.w	r4, r2, r8
 80032be:	eb63 0509 	sbc.w	r5, r3, r9
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	00eb      	lsls	r3, r5, #3
 80032cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032d0:	00e2      	lsls	r2, r4, #3
 80032d2:	4614      	mov	r4, r2
 80032d4:	461d      	mov	r5, r3
 80032d6:	eb14 030a 	adds.w	r3, r4, sl
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	eb45 030b 	adc.w	r3, r5, fp
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032ee:	4629      	mov	r1, r5
 80032f0:	028b      	lsls	r3, r1, #10
 80032f2:	4621      	mov	r1, r4
 80032f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032f8:	4621      	mov	r1, r4
 80032fa:	028a      	lsls	r2, r1, #10
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003302:	2200      	movs	r2, #0
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	60fa      	str	r2, [r7, #12]
 8003308:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800330c:	f7fc ff64 	bl	80001d8 <__aeabi_uldivmod>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4613      	mov	r3, r2
 8003316:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003318:	4b0b      	ldr	r3, [pc, #44]	@ (8003348 <HAL_RCC_GetSysClockFreq+0x180>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	3301      	adds	r3, #1
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003328:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800332a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003332:	e002      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003334:	4b05      	ldr	r3, [pc, #20]	@ (800334c <HAL_RCC_GetSysClockFreq+0x184>)
 8003336:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800333a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800333c:	4618      	mov	r0, r3
 800333e:	3740      	adds	r7, #64	@ 0x40
 8003340:	46bd      	mov	sp, r7
 8003342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800
 800334c:	00f42400 	.word	0x00f42400
 8003350:	017d7840 	.word	0x017d7840

08003354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003358:	4b03      	ldr	r3, [pc, #12]	@ (8003368 <HAL_RCC_GetHCLKFreq+0x14>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	200000b0 	.word	0x200000b0

0800336c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003370:	f7ff fff0 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 8003374:	4602      	mov	r2, r0
 8003376:	4b05      	ldr	r3, [pc, #20]	@ (800338c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	0a9b      	lsrs	r3, r3, #10
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	4903      	ldr	r1, [pc, #12]	@ (8003390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003382:	5ccb      	ldrb	r3, [r1, r3]
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40023800 	.word	0x40023800
 8003390:	080044a4 	.word	0x080044a4

08003394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e041      	b.n	800342a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fe f94e 	bl	800165c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3304      	adds	r3, #4
 80033d0:	4619      	mov	r1, r3
 80033d2:	4610      	mov	r0, r2
 80033d4:	f000 fc94 	bl	8003d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b01      	cmp	r3, #1
 8003446:	d001      	beq.n	800344c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e03c      	b.n	80034c6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1e      	ldr	r2, [pc, #120]	@ (80034d4 <HAL_TIM_Base_Start+0xa0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d018      	beq.n	8003490 <HAL_TIM_Base_Start+0x5c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003466:	d013      	beq.n	8003490 <HAL_TIM_Base_Start+0x5c>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1a      	ldr	r2, [pc, #104]	@ (80034d8 <HAL_TIM_Base_Start+0xa4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00e      	beq.n	8003490 <HAL_TIM_Base_Start+0x5c>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a19      	ldr	r2, [pc, #100]	@ (80034dc <HAL_TIM_Base_Start+0xa8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d009      	beq.n	8003490 <HAL_TIM_Base_Start+0x5c>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a17      	ldr	r2, [pc, #92]	@ (80034e0 <HAL_TIM_Base_Start+0xac>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d004      	beq.n	8003490 <HAL_TIM_Base_Start+0x5c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a16      	ldr	r2, [pc, #88]	@ (80034e4 <HAL_TIM_Base_Start+0xb0>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d111      	bne.n	80034b4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d010      	beq.n	80034c4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0201 	orr.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b2:	e007      	b.n	80034c4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40010000 	.word	0x40010000
 80034d8:	40000400 	.word	0x40000400
 80034dc:	40000800 	.word	0x40000800
 80034e0:	40000c00 	.word	0x40000c00
 80034e4:	40014000 	.word	0x40014000

080034e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e041      	b.n	800357e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fe f86c 	bl	80015ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3304      	adds	r3, #4
 8003524:	4619      	mov	r1, r3
 8003526:	4610      	mov	r0, r2
 8003528:	f000 fbea 	bl	8003d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d109      	bne.n	80035b0 <HAL_TIM_PWM_Start_IT+0x28>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	e022      	b.n	80035f6 <HAL_TIM_PWM_Start_IT+0x6e>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d109      	bne.n	80035ca <HAL_TIM_PWM_Start_IT+0x42>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b01      	cmp	r3, #1
 80035c0:	bf14      	ite	ne
 80035c2:	2301      	movne	r3, #1
 80035c4:	2300      	moveq	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	e015      	b.n	80035f6 <HAL_TIM_PWM_Start_IT+0x6e>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d109      	bne.n	80035e4 <HAL_TIM_PWM_Start_IT+0x5c>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	bf14      	ite	ne
 80035dc:	2301      	movne	r3, #1
 80035de:	2300      	moveq	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e008      	b.n	80035f6 <HAL_TIM_PWM_Start_IT+0x6e>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	bf14      	ite	ne
 80035f0:	2301      	movne	r3, #1
 80035f2:	2300      	moveq	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e0b3      	b.n	8003766 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d104      	bne.n	800360e <HAL_TIM_PWM_Start_IT+0x86>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800360c:	e013      	b.n	8003636 <HAL_TIM_PWM_Start_IT+0xae>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b04      	cmp	r3, #4
 8003612:	d104      	bne.n	800361e <HAL_TIM_PWM_Start_IT+0x96>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800361c:	e00b      	b.n	8003636 <HAL_TIM_PWM_Start_IT+0xae>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b08      	cmp	r3, #8
 8003622:	d104      	bne.n	800362e <HAL_TIM_PWM_Start_IT+0xa6>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800362c:	e003      	b.n	8003636 <HAL_TIM_PWM_Start_IT+0xae>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b0c      	cmp	r3, #12
 800363a:	d841      	bhi.n	80036c0 <HAL_TIM_PWM_Start_IT+0x138>
 800363c:	a201      	add	r2, pc, #4	@ (adr r2, 8003644 <HAL_TIM_PWM_Start_IT+0xbc>)
 800363e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003642:	bf00      	nop
 8003644:	08003679 	.word	0x08003679
 8003648:	080036c1 	.word	0x080036c1
 800364c:	080036c1 	.word	0x080036c1
 8003650:	080036c1 	.word	0x080036c1
 8003654:	0800368b 	.word	0x0800368b
 8003658:	080036c1 	.word	0x080036c1
 800365c:	080036c1 	.word	0x080036c1
 8003660:	080036c1 	.word	0x080036c1
 8003664:	0800369d 	.word	0x0800369d
 8003668:	080036c1 	.word	0x080036c1
 800366c:	080036c1 	.word	0x080036c1
 8003670:	080036c1 	.word	0x080036c1
 8003674:	080036af 	.word	0x080036af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0202 	orr.w	r2, r2, #2
 8003686:	60da      	str	r2, [r3, #12]
      break;
 8003688:	e01d      	b.n	80036c6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0204 	orr.w	r2, r2, #4
 8003698:	60da      	str	r2, [r3, #12]
      break;
 800369a:	e014      	b.n	80036c6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0208 	orr.w	r2, r2, #8
 80036aa:	60da      	str	r2, [r3, #12]
      break;
 80036ac:	e00b      	b.n	80036c6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0210 	orr.w	r2, r2, #16
 80036bc:	60da      	str	r2, [r3, #12]
      break;
 80036be:	e002      	b.n	80036c6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	73fb      	strb	r3, [r7, #15]
      break;
 80036c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d14b      	bne.n	8003764 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2201      	movs	r2, #1
 80036d2:	6839      	ldr	r1, [r7, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fdbf 	bl	8004258 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a24      	ldr	r2, [pc, #144]	@ (8003770 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d107      	bne.n	80036f4 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036f2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003770 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d018      	beq.n	8003730 <HAL_TIM_PWM_Start_IT+0x1a8>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003706:	d013      	beq.n	8003730 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a19      	ldr	r2, [pc, #100]	@ (8003774 <HAL_TIM_PWM_Start_IT+0x1ec>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00e      	beq.n	8003730 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a18      	ldr	r2, [pc, #96]	@ (8003778 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d009      	beq.n	8003730 <HAL_TIM_PWM_Start_IT+0x1a8>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a16      	ldr	r2, [pc, #88]	@ (800377c <HAL_TIM_PWM_Start_IT+0x1f4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d004      	beq.n	8003730 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a15      	ldr	r2, [pc, #84]	@ (8003780 <HAL_TIM_PWM_Start_IT+0x1f8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d111      	bne.n	8003754 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b06      	cmp	r3, #6
 8003740:	d010      	beq.n	8003764 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0201 	orr.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003752:	e007      	b.n	8003764 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003764:	7bfb      	ldrb	r3, [r7, #15]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000
 8003774:	40000400 	.word	0x40000400
 8003778:	40000800 	.word	0x40000800
 800377c:	40000c00 	.word	0x40000c00
 8003780:	40014000 	.word	0x40014000

08003784 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e097      	b.n	80038c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d106      	bne.n	80037b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7fd ff75 	bl	800169c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2202      	movs	r2, #2
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037c8:	f023 0307 	bic.w	r3, r3, #7
 80037cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3304      	adds	r3, #4
 80037d6:	4619      	mov	r1, r3
 80037d8:	4610      	mov	r0, r2
 80037da:	f000 fa91 	bl	8003d00 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003806:	f023 0303 	bic.w	r3, r3, #3
 800380a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	4313      	orrs	r3, r2
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003824:	f023 030c 	bic.w	r3, r3, #12
 8003828:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003830:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003834:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	4313      	orrs	r3, r2
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	011a      	lsls	r2, r3, #4
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	031b      	lsls	r3, r3, #12
 8003854:	4313      	orrs	r3, r2
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003862:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800386a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	4313      	orrs	r3, r2
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80038f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d110      	bne.n	8003922 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d102      	bne.n	800390c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003906:	7b7b      	ldrb	r3, [r7, #13]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d001      	beq.n	8003910 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e069      	b.n	80039e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003920:	e031      	b.n	8003986 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b04      	cmp	r3, #4
 8003926:	d110      	bne.n	800394a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003928:	7bbb      	ldrb	r3, [r7, #14]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d102      	bne.n	8003934 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800392e:	7b3b      	ldrb	r3, [r7, #12]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d001      	beq.n	8003938 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e055      	b.n	80039e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003948:	e01d      	b.n	8003986 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d108      	bne.n	8003962 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003950:	7bbb      	ldrb	r3, [r7, #14]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d105      	bne.n	8003962 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003956:	7b7b      	ldrb	r3, [r7, #13]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d102      	bne.n	8003962 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800395c:	7b3b      	ldrb	r3, [r7, #12]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d001      	beq.n	8003966 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e03e      	b.n	80039e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2202      	movs	r2, #2
 800396a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2202      	movs	r2, #2
 8003972:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2202      	movs	r2, #2
 800397a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2202      	movs	r2, #2
 8003982:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_TIM_Encoder_Start+0xc4>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2b04      	cmp	r3, #4
 8003990:	d008      	beq.n	80039a4 <HAL_TIM_Encoder_Start+0xd4>
 8003992:	e00f      	b.n	80039b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2201      	movs	r2, #1
 800399a:	2100      	movs	r1, #0
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fc5b 	bl	8004258 <TIM_CCxChannelCmd>
      break;
 80039a2:	e016      	b.n	80039d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2201      	movs	r2, #1
 80039aa:	2104      	movs	r1, #4
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 fc53 	bl	8004258 <TIM_CCxChannelCmd>
      break;
 80039b2:	e00e      	b.n	80039d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2201      	movs	r2, #1
 80039ba:	2100      	movs	r1, #0
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 fc4b 	bl	8004258 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2201      	movs	r2, #1
 80039c8:	2104      	movs	r1, #4
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fc44 	bl	8004258 <TIM_CCxChannelCmd>
      break;
 80039d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0201 	orr.w	r2, r2, #1
 80039e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e0ae      	b.n	8003b68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b0c      	cmp	r3, #12
 8003a16:	f200 809f 	bhi.w	8003b58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a55 	.word	0x08003a55
 8003a24:	08003b59 	.word	0x08003b59
 8003a28:	08003b59 	.word	0x08003b59
 8003a2c:	08003b59 	.word	0x08003b59
 8003a30:	08003a95 	.word	0x08003a95
 8003a34:	08003b59 	.word	0x08003b59
 8003a38:	08003b59 	.word	0x08003b59
 8003a3c:	08003b59 	.word	0x08003b59
 8003a40:	08003ad7 	.word	0x08003ad7
 8003a44:	08003b59 	.word	0x08003b59
 8003a48:	08003b59 	.word	0x08003b59
 8003a4c:	08003b59 	.word	0x08003b59
 8003a50:	08003b17 	.word	0x08003b17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 f9d6 	bl	8003e0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0208 	orr.w	r2, r2, #8
 8003a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0204 	bic.w	r2, r2, #4
 8003a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6999      	ldr	r1, [r3, #24]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	619a      	str	r2, [r3, #24]
      break;
 8003a92:	e064      	b.n	8003b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fa1c 	bl	8003ed8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6999      	ldr	r1, [r3, #24]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	021a      	lsls	r2, r3, #8
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	619a      	str	r2, [r3, #24]
      break;
 8003ad4:	e043      	b.n	8003b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fa67 	bl	8003fb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0208 	orr.w	r2, r2, #8
 8003af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0204 	bic.w	r2, r2, #4
 8003b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69d9      	ldr	r1, [r3, #28]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	61da      	str	r2, [r3, #28]
      break;
 8003b14:	e023      	b.n	8003b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fab1 	bl	8004084 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69da      	ldr	r2, [r3, #28]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69d9      	ldr	r1, [r3, #28]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	021a      	lsls	r2, r3, #8
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	61da      	str	r2, [r3, #28]
      break;
 8003b56:	e002      	b.n	8003b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <HAL_TIM_ConfigClockSource+0x1c>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e0b4      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x186>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bc4:	d03e      	beq.n	8003c44 <HAL_TIM_ConfigClockSource+0xd4>
 8003bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bca:	f200 8087 	bhi.w	8003cdc <HAL_TIM_ConfigClockSource+0x16c>
 8003bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bd2:	f000 8086 	beq.w	8003ce2 <HAL_TIM_ConfigClockSource+0x172>
 8003bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bda:	d87f      	bhi.n	8003cdc <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b70      	cmp	r3, #112	@ 0x70
 8003bde:	d01a      	beq.n	8003c16 <HAL_TIM_ConfigClockSource+0xa6>
 8003be0:	2b70      	cmp	r3, #112	@ 0x70
 8003be2:	d87b      	bhi.n	8003cdc <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b60      	cmp	r3, #96	@ 0x60
 8003be6:	d050      	beq.n	8003c8a <HAL_TIM_ConfigClockSource+0x11a>
 8003be8:	2b60      	cmp	r3, #96	@ 0x60
 8003bea:	d877      	bhi.n	8003cdc <HAL_TIM_ConfigClockSource+0x16c>
 8003bec:	2b50      	cmp	r3, #80	@ 0x50
 8003bee:	d03c      	beq.n	8003c6a <HAL_TIM_ConfigClockSource+0xfa>
 8003bf0:	2b50      	cmp	r3, #80	@ 0x50
 8003bf2:	d873      	bhi.n	8003cdc <HAL_TIM_ConfigClockSource+0x16c>
 8003bf4:	2b40      	cmp	r3, #64	@ 0x40
 8003bf6:	d058      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x13a>
 8003bf8:	2b40      	cmp	r3, #64	@ 0x40
 8003bfa:	d86f      	bhi.n	8003cdc <HAL_TIM_ConfigClockSource+0x16c>
 8003bfc:	2b30      	cmp	r3, #48	@ 0x30
 8003bfe:	d064      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0x15a>
 8003c00:	2b30      	cmp	r3, #48	@ 0x30
 8003c02:	d86b      	bhi.n	8003cdc <HAL_TIM_ConfigClockSource+0x16c>
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d060      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0x15a>
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d867      	bhi.n	8003cdc <HAL_TIM_ConfigClockSource+0x16c>
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d05c      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0x15a>
 8003c10:	2b10      	cmp	r3, #16
 8003c12:	d05a      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0x15a>
 8003c14:	e062      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c26:	f000 faf7 	bl	8004218 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	609a      	str	r2, [r3, #8]
      break;
 8003c42:	e04f      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c54:	f000 fae0 	bl	8004218 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c66:	609a      	str	r2, [r3, #8]
      break;
 8003c68:	e03c      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c76:	461a      	mov	r2, r3
 8003c78:	f000 fa54 	bl	8004124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2150      	movs	r1, #80	@ 0x50
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 faad 	bl	80041e2 <TIM_ITRx_SetConfig>
      break;
 8003c88:	e02c      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c96:	461a      	mov	r2, r3
 8003c98:	f000 fa73 	bl	8004182 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2160      	movs	r1, #96	@ 0x60
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fa9d 	bl	80041e2 <TIM_ITRx_SetConfig>
      break;
 8003ca8:	e01c      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f000 fa34 	bl	8004124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2140      	movs	r1, #64	@ 0x40
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fa8d 	bl	80041e2 <TIM_ITRx_SetConfig>
      break;
 8003cc8:	e00c      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	f000 fa84 	bl	80041e2 <TIM_ITRx_SetConfig>
      break;
 8003cda:	e003      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce0:	e000      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ce2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a37      	ldr	r2, [pc, #220]	@ (8003df0 <TIM_Base_SetConfig+0xf0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00f      	beq.n	8003d38 <TIM_Base_SetConfig+0x38>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d1e:	d00b      	beq.n	8003d38 <TIM_Base_SetConfig+0x38>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a34      	ldr	r2, [pc, #208]	@ (8003df4 <TIM_Base_SetConfig+0xf4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d007      	beq.n	8003d38 <TIM_Base_SetConfig+0x38>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a33      	ldr	r2, [pc, #204]	@ (8003df8 <TIM_Base_SetConfig+0xf8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d003      	beq.n	8003d38 <TIM_Base_SetConfig+0x38>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a32      	ldr	r2, [pc, #200]	@ (8003dfc <TIM_Base_SetConfig+0xfc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d108      	bne.n	8003d4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a28      	ldr	r2, [pc, #160]	@ (8003df0 <TIM_Base_SetConfig+0xf0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d01b      	beq.n	8003d8a <TIM_Base_SetConfig+0x8a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d58:	d017      	beq.n	8003d8a <TIM_Base_SetConfig+0x8a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a25      	ldr	r2, [pc, #148]	@ (8003df4 <TIM_Base_SetConfig+0xf4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <TIM_Base_SetConfig+0x8a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a24      	ldr	r2, [pc, #144]	@ (8003df8 <TIM_Base_SetConfig+0xf8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00f      	beq.n	8003d8a <TIM_Base_SetConfig+0x8a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a23      	ldr	r2, [pc, #140]	@ (8003dfc <TIM_Base_SetConfig+0xfc>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00b      	beq.n	8003d8a <TIM_Base_SetConfig+0x8a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a22      	ldr	r2, [pc, #136]	@ (8003e00 <TIM_Base_SetConfig+0x100>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d007      	beq.n	8003d8a <TIM_Base_SetConfig+0x8a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a21      	ldr	r2, [pc, #132]	@ (8003e04 <TIM_Base_SetConfig+0x104>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d003      	beq.n	8003d8a <TIM_Base_SetConfig+0x8a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a20      	ldr	r2, [pc, #128]	@ (8003e08 <TIM_Base_SetConfig+0x108>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d108      	bne.n	8003d9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8003df0 <TIM_Base_SetConfig+0xf0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d103      	bne.n	8003dca <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f043 0204 	orr.w	r2, r3, #4
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	601a      	str	r2, [r3, #0]
}
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40010000 	.word	0x40010000
 8003df4:	40000400 	.word	0x40000400
 8003df8:	40000800 	.word	0x40000800
 8003dfc:	40000c00 	.word	0x40000c00
 8003e00:	40014000 	.word	0x40014000
 8003e04:	40014400 	.word	0x40014400
 8003e08:	40014800 	.word	0x40014800

08003e0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	f023 0201 	bic.w	r2, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0303 	bic.w	r3, r3, #3
 8003e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f023 0302 	bic.w	r3, r3, #2
 8003e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed4 <TIM_OC1_SetConfig+0xc8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d10c      	bne.n	8003e82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f023 0308 	bic.w	r3, r3, #8
 8003e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f023 0304 	bic.w	r3, r3, #4
 8003e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a13      	ldr	r2, [pc, #76]	@ (8003ed4 <TIM_OC1_SetConfig+0xc8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d111      	bne.n	8003eae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	621a      	str	r2, [r3, #32]
}
 8003ec8:	bf00      	nop
 8003eca:	371c      	adds	r7, #28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	40010000 	.word	0x40010000

08003ed8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	f023 0210 	bic.w	r2, r3, #16
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	021b      	lsls	r3, r3, #8
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f023 0320 	bic.w	r3, r3, #32
 8003f22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a1e      	ldr	r2, [pc, #120]	@ (8003fac <TIM_OC2_SetConfig+0xd4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d10d      	bne.n	8003f54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a15      	ldr	r2, [pc, #84]	@ (8003fac <TIM_OC2_SetConfig+0xd4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d113      	bne.n	8003f84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	621a      	str	r2, [r3, #32]
}
 8003f9e:	bf00      	nop
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40010000 	.word	0x40010000

08003fb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0303 	bic.w	r3, r3, #3
 8003fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a1d      	ldr	r2, [pc, #116]	@ (8004080 <TIM_OC3_SetConfig+0xd0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d10d      	bne.n	800402a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a14      	ldr	r2, [pc, #80]	@ (8004080 <TIM_OC3_SetConfig+0xd0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d113      	bne.n	800405a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	621a      	str	r2, [r3, #32]
}
 8004074:	bf00      	nop
 8004076:	371c      	adds	r7, #28
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	40010000 	.word	0x40010000

08004084 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	021b      	lsls	r3, r3, #8
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	031b      	lsls	r3, r3, #12
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a10      	ldr	r2, [pc, #64]	@ (8004120 <TIM_OC4_SetConfig+0x9c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d109      	bne.n	80040f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	019b      	lsls	r3, r3, #6
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	621a      	str	r2, [r3, #32]
}
 8004112:	bf00      	nop
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40010000 	.word	0x40010000

08004124 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	f023 0201 	bic.w	r2, r3, #1
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800414e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f023 030a 	bic.w	r3, r3, #10
 8004160:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	621a      	str	r2, [r3, #32]
}
 8004176:	bf00      	nop
 8004178:	371c      	adds	r7, #28
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004182:	b480      	push	{r7}
 8004184:	b087      	sub	sp, #28
 8004186:	af00      	add	r7, sp, #0
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	f023 0210 	bic.w	r2, r3, #16
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	031b      	lsls	r3, r3, #12
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	621a      	str	r2, [r3, #32]
}
 80041d6:	bf00      	nop
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b085      	sub	sp, #20
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	f043 0307 	orr.w	r3, r3, #7
 8004204:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	609a      	str	r2, [r3, #8]
}
 800420c:	bf00      	nop
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004232:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	021a      	lsls	r2, r3, #8
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	431a      	orrs	r2, r3
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4313      	orrs	r3, r2
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	4313      	orrs	r3, r2
 8004244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	609a      	str	r2, [r3, #8]
}
 800424c:	bf00      	nop
 800424e:	371c      	adds	r7, #28
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f003 031f 	and.w	r3, r3, #31
 800426a:	2201      	movs	r2, #1
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a1a      	ldr	r2, [r3, #32]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	43db      	mvns	r3, r3
 800427a:	401a      	ands	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1a      	ldr	r2, [r3, #32]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	fa01 f303 	lsl.w	r3, r1, r3
 8004290:	431a      	orrs	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	621a      	str	r2, [r3, #32]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e050      	b.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1c      	ldr	r2, [pc, #112]	@ (800436c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d018      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004308:	d013      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a18      	ldr	r2, [pc, #96]	@ (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00e      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a16      	ldr	r2, [pc, #88]	@ (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d009      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a15      	ldr	r2, [pc, #84]	@ (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d004      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a13      	ldr	r2, [pc, #76]	@ (800437c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d10c      	bne.n	800434c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	4313      	orrs	r3, r2
 8004342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	40010000 	.word	0x40010000
 8004370:	40000400 	.word	0x40000400
 8004374:	40000800 	.word	0x40000800
 8004378:	40000c00 	.word	0x40000c00
 800437c:	40014000 	.word	0x40014000

08004380 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004398:	2302      	movs	r3, #2
 800439a:	e03d      	b.n	8004418 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <memset>:
 8004424:	4402      	add	r2, r0
 8004426:	4603      	mov	r3, r0
 8004428:	4293      	cmp	r3, r2
 800442a:	d100      	bne.n	800442e <memset+0xa>
 800442c:	4770      	bx	lr
 800442e:	f803 1b01 	strb.w	r1, [r3], #1
 8004432:	e7f9      	b.n	8004428 <memset+0x4>

08004434 <__libc_init_array>:
 8004434:	b570      	push	{r4, r5, r6, lr}
 8004436:	4d0d      	ldr	r5, [pc, #52]	@ (800446c <__libc_init_array+0x38>)
 8004438:	4c0d      	ldr	r4, [pc, #52]	@ (8004470 <__libc_init_array+0x3c>)
 800443a:	1b64      	subs	r4, r4, r5
 800443c:	10a4      	asrs	r4, r4, #2
 800443e:	2600      	movs	r6, #0
 8004440:	42a6      	cmp	r6, r4
 8004442:	d109      	bne.n	8004458 <__libc_init_array+0x24>
 8004444:	4d0b      	ldr	r5, [pc, #44]	@ (8004474 <__libc_init_array+0x40>)
 8004446:	4c0c      	ldr	r4, [pc, #48]	@ (8004478 <__libc_init_array+0x44>)
 8004448:	f000 f818 	bl	800447c <_init>
 800444c:	1b64      	subs	r4, r4, r5
 800444e:	10a4      	asrs	r4, r4, #2
 8004450:	2600      	movs	r6, #0
 8004452:	42a6      	cmp	r6, r4
 8004454:	d105      	bne.n	8004462 <__libc_init_array+0x2e>
 8004456:	bd70      	pop	{r4, r5, r6, pc}
 8004458:	f855 3b04 	ldr.w	r3, [r5], #4
 800445c:	4798      	blx	r3
 800445e:	3601      	adds	r6, #1
 8004460:	e7ee      	b.n	8004440 <__libc_init_array+0xc>
 8004462:	f855 3b04 	ldr.w	r3, [r5], #4
 8004466:	4798      	blx	r3
 8004468:	3601      	adds	r6, #1
 800446a:	e7f2      	b.n	8004452 <__libc_init_array+0x1e>
 800446c:	080044b4 	.word	0x080044b4
 8004470:	080044b4 	.word	0x080044b4
 8004474:	080044b4 	.word	0x080044b4
 8004478:	080044b8 	.word	0x080044b8

0800447c <_init>:
 800447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447e:	bf00      	nop
 8004480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004482:	bc08      	pop	{r3}
 8004484:	469e      	mov	lr, r3
 8004486:	4770      	bx	lr

08004488 <_fini>:
 8004488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448a:	bf00      	nop
 800448c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800448e:	bc08      	pop	{r3}
 8004490:	469e      	mov	lr, r3
 8004492:	4770      	bx	lr
