
CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006178  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006318  08006318  00007318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006404  08006404  0000825c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006404  08006404  00007404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800640c  0800640c  0000825c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800640c  0800640c  0000740c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006410  08006410  00007410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000025c  20000000  08006414  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  2000025c  08006670  0000825c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  08006670  00008634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000825c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a3b  00000000  00000000  0000828c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a9f  00000000  00000000  00019cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  0001c768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c7b  00000000  00000000  0001d788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019354  00000000  00000000  0001e403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014fce  00000000  00000000  00037757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ac64  00000000  00000000  0004c725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7389  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047c8  00000000  00000000  000e73cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000ebb94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000025c 	.word	0x2000025c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006300 	.word	0x08006300

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000260 	.word	0x20000260
 80001dc:	08006300 	.word	0x08006300

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <adc_task_run>:

static uint16_t dma_buffer[4];

// A function to run the appropriate state of the task
void adc_task_run(ADCTask *adc_task)
{    // Check for a valid state
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    if (adc_task->state >= 0 && adc_task->state < adc_task->num_states)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db0f      	blt.n	80005dc <adc_task_run+0x30>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	da09      	bge.n	80005dc <adc_task_run+0x30>

    	// game_task is a pointer right now
    	// -> dereferences pointer and accesses class member in one step
    	// the same as (*ptr).member

    	adc_task->state_list[adc_task->state](adc_task);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	3306      	adds	r3, #6
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	4413      	add	r3, r2
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	4798      	blx	r3
    {

        while(1){}
    }

}
 80005da:	e000      	b.n	80005de <adc_task_run+0x32>
        while(1){}
 80005dc:	e7fe      	b.n	80005dc <adc_task_run+0x30>
}
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <adc_task_state_0_init>:

void adc_task_state_0_init(ADCTask *adc_task){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

	adc_task->state = 1;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2201      	movs	r2, #1
 80005f0:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(adc_task->hadc,
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	2204      	movs	r2, #4
 80005f8:	4903      	ldr	r1, [pc, #12]	@ (8000608 <adc_task_state_0_init+0x24>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 f848 	bl	8002690 <HAL_ADC_Start_DMA>
	                      (uint32_t*)dma_buffer,
	                      4);
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000278 	.word	0x20000278

0800060c <adc_task_state_1_read>:

void adc_task_state_1_read(ADCTask *adc_task){
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
//	}
//
//
//
//	HAL_ADC_Stop(adc_task->hadc);
	adc_task->red_photor_ptr->adc_val   = dma_buffer[0];
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <adc_task_state_1_read+0x3c>)
 8000616:	881a      	ldrh	r2, [r3, #0]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	60da      	str	r2, [r3, #12]
	adc_task->blue_photor_ptr->adc_val  = dma_buffer[1];
 800061e:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <adc_task_state_1_read+0x3c>)
 8000620:	885a      	ldrh	r2, [r3, #2]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	60da      	str	r2, [r3, #12]
	adc_task->blue_contr_ptr->adc_val   = dma_buffer[2];
 8000628:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <adc_task_state_1_read+0x3c>)
 800062a:	889a      	ldrh	r2, [r3, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	639a      	str	r2, [r3, #56]	@ 0x38
	adc_task->red_contr_ptr->adc_val    = dma_buffer[3];
 8000632:	4b05      	ldr	r3, [pc, #20]	@ (8000648 <adc_task_state_1_read+0x3c>)
 8000634:	88da      	ldrh	r2, [r3, #6]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	639a      	str	r2, [r3, #56]	@ 0x38


}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	20000278 	.word	0x20000278

0800064c <read_adc_channels_scan_mode>:
}

void read_adc_channels_scan_mode(ADC_HandleTypeDef *hadc,
                                  int32_t *adc_val_6,
                                  int32_t *adc_val_7)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
    HAL_ADC_Start(hadc);
 8000658:	68f8      	ldr	r0, [r7, #12]
 800065a:	f001 fea7 	bl	80023ac <HAL_ADC_Start>
//    // Discard ADC5
//    if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
//        (void)HAL_ADC_GetValue(hadc);

    // Read ADC6
    if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
 800065e:	210a      	movs	r1, #10
 8000660:	68f8      	ldr	r0, [r7, #12]
 8000662:	f001 ff8a 	bl	800257a <HAL_ADC_PollForConversion>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d106      	bne.n	800067a <read_adc_channels_scan_mode+0x2e>
        *adc_val_6 = HAL_ADC_GetValue(hadc);
 800066c:	68f8      	ldr	r0, [r7, #12]
 800066e:	f002 f903 	bl	8002878 <HAL_ADC_GetValue>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	601a      	str	r2, [r3, #0]

    // Read ADC7
    if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
 800067a:	210a      	movs	r1, #10
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f001 ff7c 	bl	800257a <HAL_ADC_PollForConversion>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d106      	bne.n	8000696 <read_adc_channels_scan_mode+0x4a>
        *adc_val_7 = HAL_ADC_GetValue(hadc);
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f002 f8f5 	bl	8002878 <HAL_ADC_GetValue>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	601a      	str	r2, [r3, #0]

    HAL_ADC_Stop(hadc);
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f001 ff3c 	bl	8002514 <HAL_ADC_Stop>
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <controller_task_state_0_init>:


// init stuff and zero pot
void controller_task_state_0_init(ControllerTask *controller_task)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	controller_task->prev_error = 0;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f04f 0200 	mov.w	r2, #0
 80006b2:	64da      	str	r2, [r3, #76]	@ 0x4c
    HAL_TIM_Encoder_Start(controller_task->htim_encoder, TIM_CHANNEL_ALL);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006b8:	213c      	movs	r1, #60	@ 0x3c
 80006ba:	4618      	mov	r0, r3
 80006bc:	f004 fd38 	bl	8005130 <HAL_TIM_Encoder_Start>
    enable(controller_task->motor);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 f8af 	bl	8001828 <enable>

    int32_t adc_val_6 = 0, adc_val_7 = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
    HAL_Delay(1);
 80006d2:	2001      	movs	r0, #1
 80006d4:	f001 fe02 	bl	80022dc <HAL_Delay>
    read_adc_channels_scan_mode(controller_task->hadc, &adc_val_6, &adc_val_7);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006dc:	f107 0208 	add.w	r2, r7, #8
 80006e0:	f107 010c 	add.w	r1, r7, #12
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ffb1 	bl	800064c <read_adc_channels_scan_mode>

    controller_task->pot_zero = (controller_task->color == 0) ? adc_val_7 : adc_val_6;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d101      	bne.n	80006f6 <controller_task_state_0_init+0x52>
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	e000      	b.n	80006f8 <controller_task_state_0_init+0x54>
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	6153      	str	r3, [r2, #20]

    controller_task->state = 1;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2201      	movs	r2, #1
 8000700:	605a      	str	r2, [r3, #4]
}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <controller_task_state_1_calc_vel>:
// run state for velocity controller based on pot input
void controller_task_state_1_calc_vel(ControllerTask *controller_task)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b092      	sub	sp, #72	@ 0x48
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	int32_t high_thres = controller_task->pot_zero + controller_task->ccw_deadzone;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	695a      	ldr	r2, [r3, #20]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800071c:	4413      	add	r3, r2
 800071e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int32_t low_thres = controller_task->pot_zero - controller_task->cw_deadzone;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	695a      	ldr	r2, [r3, #20]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	63bb      	str	r3, [r7, #56]	@ 0x38

    // read adc
    int32_t adc_val_6 = 0, adc_val_7 = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
    HAL_Delay(1);
 8000734:	2001      	movs	r0, #1
 8000736:	f001 fdd1 	bl	80022dc <HAL_Delay>
    read_adc_channels_scan_mode(controller_task->hadc, &adc_val_6, &adc_val_7);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800073e:	f107 0208 	add.w	r2, r7, #8
 8000742:	f107 010c 	add.w	r1, r7, #12
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff80 	bl	800064c <read_adc_channels_scan_mode>

    int32_t adc_val = (controller_task->color == 0) ? adc_val_7 : adc_val_6;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d101      	bne.n	8000758 <controller_task_state_1_calc_vel+0x4c>
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	e000      	b.n	800075a <controller_task_state_1_calc_vel+0x4e>
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	637b      	str	r3, [r7, #52]	@ 0x34

    // calc vel des
    const float MAX_ADC = 4095.0f;
 800075c:	4b6e      	ldr	r3, [pc, #440]	@ (8000918 <controller_task_state_1_calc_vel+0x20c>)
 800075e:	633b      	str	r3, [r7, #48]	@ 0x30
    const float MAX_VELOCITY = 8.0f;
 8000760:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8000764:	62fb      	str	r3, [r7, #44]	@ 0x2c

    float desired_velocity = 0.0f;
 8000766:	f04f 0300 	mov.w	r3, #0
 800076a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (adc_val > high_thres){
 800076c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800076e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000770:	429a      	cmp	r2, r3
 8000772:	dd18      	ble.n	80007a6 <controller_task_state_1_calc_vel+0x9a>
    	adc_val += high_thres;
 8000774:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000778:	4413      	add	r3, r2
 800077a:	637b      	str	r3, [r7, #52]	@ 0x34
        adc_val -= controller_task->pot_zero;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	637b      	str	r3, [r7, #52]	@ 0x34
        desired_velocity = ((float)adc_val / MAX_ADC) * MAX_VELOCITY;
 8000786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000788:	ee07 3a90 	vmov	s15, r3
 800078c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000790:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000798:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800079c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007a0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 80007a4:	e01f      	b.n	80007e6 <controller_task_state_1_calc_vel+0xda>
    }
    else if (adc_val < low_thres){
 80007a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007aa:	429a      	cmp	r2, r3
 80007ac:	da18      	bge.n	80007e0 <controller_task_state_1_calc_vel+0xd4>
        	adc_val -= low_thres;
 80007ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	637b      	str	r3, [r7, #52]	@ 0x34
            adc_val -= controller_task->pot_zero;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	637b      	str	r3, [r7, #52]	@ 0x34
            desired_velocity = ((float)adc_val / MAX_ADC) * MAX_VELOCITY;
 80007c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007c2:	ee07 3a90 	vmov	s15, r3
 80007c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80007ca:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80007ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007d2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80007d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007da:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 80007de:	e002      	b.n	80007e6 <controller_task_state_1_calc_vel+0xda>
    }
    else {
        desired_velocity = 0.0f;
 80007e0:	f04f 0300 	mov.w	r3, #0
 80007e4:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    // read encoder
    int32_t current_ticks = __HAL_TIM_GET_COUNTER(controller_task->htim_encoder);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    int32_t delta_ticks = current_ticks - controller_task->prev_ticks;
 80007f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007f6:	1ad3      	subs	r3, r2, r3
 80007f8:	627b      	str	r3, [r7, #36]	@ 0x24
    controller_task->prev_ticks = current_ticks;
 80007fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	625a      	str	r2, [r3, #36]	@ 0x24

    controller_task->current_time = __HAL_TIM_GET_COUNTER(controller_task->htim_dt);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	621a      	str	r2, [r3, #32]
    uint32_t dt_ticks = (controller_task->current_time >= controller_task->prev_time) ? // calcs time diff in ticks
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6a1a      	ldr	r2, [r3, #32]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	69db      	ldr	r3, [r3, #28]
    		(controller_task->current_time - controller_task->prev_time) :
 8000814:	429a      	cmp	r2, r3
 8000816:	d305      	bcc.n	8000824 <controller_task_state_1_calc_vel+0x118>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6a1a      	ldr	r2, [r3, #32]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	69db      	ldr	r3, [r3, #28]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	e005      	b.n	8000830 <controller_task_state_1_calc_vel+0x124>
			(0xFFFFFFFF - controller_task->prev_time + controller_task->current_time); // overflow
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6a1a      	ldr	r2, [r3, #32]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	69db      	ldr	r3, [r3, #28]
 800082c:	1ad3      	subs	r3, r2, r3
    		(controller_task->current_time - controller_task->prev_time) :
 800082e:	3b01      	subs	r3, #1
    uint32_t dt_ticks = (controller_task->current_time >= controller_task->prev_time) ? // calcs time diff in ticks
 8000830:	623b      	str	r3, [r7, #32]
    if (dt_ticks == 0) return;
 8000832:	6a3b      	ldr	r3, [r7, #32]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d06a      	beq.n	800090e <controller_task_state_1_calc_vel+0x202>
    float delta_time = dt_ticks / 875.0f; // ms -- could set up so its just microseconds, if this was 1000 instead of 875
 8000838:	6a3b      	ldr	r3, [r7, #32]
 800083a:	ee07 3a90 	vmov	s15, r3
 800083e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000842:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800091c <controller_task_state_1_calc_vel+0x210>
 8000846:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800084a:	edc7 7a07 	vstr	s15, [r7, #28]

    // calc actual vel, error, derivative part
    float current_velocity = (float)delta_ticks / delta_time;
 800084e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000850:	ee07 3a90 	vmov	s15, r3
 8000854:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000858:	ed97 7a07 	vldr	s14, [r7, #28]
 800085c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000860:	edc7 7a06 	vstr	s15, [r7, #24]
    float error = desired_velocity - current_velocity;
 8000864:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000868:	edd7 7a06 	vldr	s15, [r7, #24]
 800086c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000870:	edc7 7a05 	vstr	s15, [r7, #20]
    float derivative = (error - controller_task->prev_error) / delta_time;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800087a:	ed97 7a05 	vldr	s14, [r7, #20]
 800087e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000882:	ed97 7a07 	vldr	s14, [r7, #28]
 8000886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800088a:	edc7 7a04 	vstr	s15, [r7, #16]
    controller_task->prev_error = error;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	64da      	str	r2, [r3, #76]	@ 0x4c

    // calc control signal and do saturation stuff
    controller_task->control_signal = controller_task->k_p * error + controller_task->k_d * derivative;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800089a:	edd7 7a05 	vldr	s15, [r7, #20]
 800089e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80008a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80008ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	edc3 7a06 	vstr	s15, [r3, #24]
    float control_signal = controller_task->control_signal;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	643b      	str	r3, [r7, #64]	@ 0x40
    if (control_signal > 100.0f) control_signal = 100.0f;
 80008c0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80008c4:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000920 <controller_task_state_1_calc_vel+0x214>
 80008c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d0:	dd02      	ble.n	80008d8 <controller_task_state_1_calc_vel+0x1cc>
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <controller_task_state_1_calc_vel+0x218>)
 80008d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80008d6:	e00a      	b.n	80008ee <controller_task_state_1_calc_vel+0x1e2>
    else if (control_signal < -100.0f) control_signal = -100.0f;
 80008d8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80008dc:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000928 <controller_task_state_1_calc_vel+0x21c>
 80008e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008e8:	d501      	bpl.n	80008ee <controller_task_state_1_calc_vel+0x1e2>
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <controller_task_state_1_calc_vel+0x220>)
 80008ec:	643b      	str	r3, [r7, #64]	@ 0x40

    // set duty on the motor
    set_duty(controller_task->motor, (int32_t)control_signal);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008f2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80008f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008fa:	ee17 1a90 	vmov	r1, s15
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 feda 	bl	80016b8 <set_duty>

    // remember the time that was used this time
    controller_task->prev_time = controller_task->current_time;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6a1a      	ldr	r2, [r3, #32]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	61da      	str	r2, [r3, #28]
 800090c:	e000      	b.n	8000910 <controller_task_state_1_calc_vel+0x204>
    if (dt_ticks == 0) return;
 800090e:	bf00      	nop
}
 8000910:	3748      	adds	r7, #72	@ 0x48
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	457ff000 	.word	0x457ff000
 800091c:	445ac000 	.word	0x445ac000
 8000920:	42c80000 	.word	0x42c80000
 8000924:	42c80000 	.word	0x42c80000
 8000928:	c2c80000 	.word	0xc2c80000
 800092c:	c2c80000 	.word	0xc2c80000

08000930 <game_task_run>:

#include <stdio.h>

// A function to run the appropriate state of the task
void game_task_run(GameTask *game_task)
{    // Check for a valid state
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
    if (game_task->state >= 0 && game_task->state < game_task->num_states)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	db0f      	blt.n	8000960 <game_task_run+0x30>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	429a      	cmp	r2, r3
 800094a:	da09      	bge.n	8000960 <game_task_run+0x30>

    	// game_task is a pointer right now
    	// -> dereferences pointer and accesses class member in one step
    	// the same as (*ptr).member

        game_task->state_list[game_task->state](game_task);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	330c      	adds	r3, #12
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	4413      	add	r3, r2
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	4798      	blx	r3
    {

        while(1){}
    }

}
 800095e:	e000      	b.n	8000962 <game_task_run+0x32>
        while(1){}
 8000960:	e7fe      	b.n	8000960 <game_task_run+0x30>
}
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <game_task_state_0_init>:


// A function to initialize the task
void game_task_state_0_init(GameTask *game_task)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    //add init stuff, display
	lcd_init();
 8000970:	f000 f986 	bl	8000c80 <lcd_init>
	HAL_Delay(100);
 8000974:	2064      	movs	r0, #100	@ 0x64
 8000976:	f001 fcb1 	bl	80022dc <HAL_Delay>
	lcd_clear();
 800097a:	f000 f9b8 	bl	8000cee <lcd_clear>
	game_task->state = 1;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]

}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <game_task_state_1_home>:
// A function to implement state 1 of the task
// keeps for user start sequence to happen then starts the game
// Prints message and sets sound flag when game starts
void game_task_state_1_home(GameTask *game_task)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	lcd_clear();
 8000994:	f000 f9ab 	bl	8000cee <lcd_clear>
	lcd_set_cursor(1, 0);
 8000998:	2100      	movs	r1, #0
 800099a:	2001      	movs	r0, #1
 800099c:	f000 f9b2 	bl	8000d04 <lcd_set_cursor>
	lcd_print("  Zap'em Blast'em   ");
 80009a0:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <game_task_state_1_home+0x48>)
 80009a2:	f000 f9d1 	bl	8000d48 <lcd_print>
	lcd_set_cursor(2, 0);
 80009a6:	2100      	movs	r1, #0
 80009a8:	2002      	movs	r0, #2
 80009aa:	f000 f9ab 	bl	8000d04 <lcd_set_cursor>
	lcd_print("       Robots       ");
 80009ae:	480a      	ldr	r0, [pc, #40]	@ (80009d8 <game_task_state_1_home+0x4c>)
 80009b0:	f000 f9ca 	bl	8000d48 <lcd_print>
    //play_flg enabled from button task within shoot task?? or make button task
	if (game_task->play_flag == 1){
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d106      	bne.n	80009ca <game_task_state_1_home+0x3e>
    	game_task->state = 2;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2202      	movs	r2, #2
 80009c0:	601a      	str	r2, [r3, #0]
    	game_task->sound_task_ptr->start_snd = 1; // sets start sound flag for sound task to play it
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009c6:	2201      	movs	r2, #1
 80009c8:	611a      	str	r2, [r3, #16]
    }

}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	08006318 	.word	0x08006318
 80009d8:	08006330 	.word	0x08006330

080009dc <game_task_state_2_play>:
// A function to implement state 2 which is for when the game is being played
// This keeps track of score, prints score messages
void game_task_state_2_play(GameTask *game_task)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	char r_score[5];
	char b_score[5];

	if (game_task->red_photoresistor_task_ptr->hit_flag){
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d008      	beq.n	8000a00 <game_task_state_2_play+0x24>
		game_task->score_red++;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	68db      	ldr	r3, [r3, #12]
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	60da      	str	r2, [r3, #12]
		game_task->red_photoresistor_task_ptr->hit_flag = 0;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
		//might need to add delay so that won't get extra hits for extended period of hitting
	}
	if (game_task->blue_photoresistor_task_ptr->hit_flag){
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d008      	beq.n	8000a1c <game_task_state_2_play+0x40>
		game_task->score_blue++;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	691b      	ldr	r3, [r3, #16]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	611a      	str	r2, [r3, #16]
		game_task->blue_photoresistor_task_ptr->hit_flag = 0;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
		//might need to add delay so that won't get extra hits for extended period of hitting
	}

	// add thing that prints score of each on the LCD
	//maybe only do once then adjust the score through a direct print index
	if (game_task->num == 0){
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6a1b      	ldr	r3, [r3, #32]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d122      	bne.n	8000a6a <game_task_state_2_play+0x8e>
		lcd_clear();
 8000a24:	f000 f963 	bl	8000cee <lcd_clear>
		lcd_set_cursor(0, 0);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f000 f96a 	bl	8000d04 <lcd_set_cursor>
		lcd_print("  Zap'em Blast'em   ");
 8000a30:	483a      	ldr	r0, [pc, #232]	@ (8000b1c <game_task_state_2_play+0x140>)
 8000a32:	f000 f989 	bl	8000d48 <lcd_print>
		lcd_set_cursor(1, 0);
 8000a36:	2100      	movs	r1, #0
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f000 f963 	bl	8000d04 <lcd_set_cursor>
		lcd_print("     First to 5     ");
 8000a3e:	4838      	ldr	r0, [pc, #224]	@ (8000b20 <game_task_state_2_play+0x144>)
 8000a40:	f000 f982 	bl	8000d48 <lcd_print>
		lcd_set_cursor(2, 0);
 8000a44:	2100      	movs	r1, #0
 8000a46:	2002      	movs	r0, #2
 8000a48:	f000 f95c 	bl	8000d04 <lcd_set_cursor>
		lcd_print("Red:  0  Zaps       ");
 8000a4c:	4835      	ldr	r0, [pc, #212]	@ (8000b24 <game_task_state_2_play+0x148>)
 8000a4e:	f000 f97b 	bl	8000d48 <lcd_print>
		lcd_set_cursor(3, 0);
 8000a52:	2100      	movs	r1, #0
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f955 	bl	8000d04 <lcd_set_cursor>
		lcd_print("Blue: 0  Blasts     ");
 8000a5a:	4833      	ldr	r0, [pc, #204]	@ (8000b28 <game_task_state_2_play+0x14c>)
 8000a5c:	f000 f974 	bl	8000d48 <lcd_print>
		//         01234567890123456789
		game_task->num++;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6a1b      	ldr	r3, [r3, #32]
 8000a64:	1c5a      	adds	r2, r3, #1
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	621a      	str	r2, [r3, #32]
	}

	// check to see if score changed for the lcd
	if (game_task->score_red != game_task->score_red_prev){
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	68da      	ldr	r2, [r3, #12]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d014      	beq.n	8000aa0 <game_task_state_2_play+0xc4>
		sprintf(r_score,"%ld",game_task->score_red);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	68da      	ldr	r2, [r3, #12]
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	492b      	ldr	r1, [pc, #172]	@ (8000b2c <game_task_state_2_play+0x150>)
 8000a80:	4618      	mov	r0, r3
 8000a82:	f004 ff9d 	bl	80059c0 <siprintf>
		lcd_set_cursor(2, 6);
 8000a86:	2106      	movs	r1, #6
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f000 f93b 	bl	8000d04 <lcd_set_cursor>
		lcd_print(r_score);
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f958 	bl	8000d48 <lcd_print>
		game_task->score_red_prev = game_task->score_red;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	68da      	ldr	r2, [r3, #12]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	615a      	str	r2, [r3, #20]
	}
	if (game_task->score_blue != game_task->score_blue_prev){
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	691a      	ldr	r2, [r3, #16]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d014      	beq.n	8000ad6 <game_task_state_2_play+0xfa>
		sprintf(b_score,"%ld",game_task->score_blue);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	691a      	ldr	r2, [r3, #16]
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	491d      	ldr	r1, [pc, #116]	@ (8000b2c <game_task_state_2_play+0x150>)
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f004 ff82 	bl	80059c0 <siprintf>
		lcd_set_cursor(3, 6);
 8000abc:	2106      	movs	r1, #6
 8000abe:	2003      	movs	r0, #3
 8000ac0:	f000 f920 	bl	8000d04 <lcd_set_cursor>
		lcd_print(b_score);
 8000ac4:	f107 0308 	add.w	r3, r7, #8
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 f93d 	bl	8000d48 <lcd_print>
		game_task->score_blue_prev = game_task->score_blue;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	691a      	ldr	r2, [r3, #16]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	619a      	str	r2, [r3, #24]
	}


	// check if someone won
	if (game_task->score_red >= game_task->score_thresh || game_task->score_blue >= game_task->score_thresh){
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	68da      	ldr	r2, [r3, #12]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	da05      	bge.n	8000aee <game_task_state_2_play+0x112>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	691a      	ldr	r2, [r3, #16]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	db12      	blt.n	8000b14 <game_task_state_2_play+0x138>
//		// print win message and set end sound
		lcd_clear();
 8000aee:	f000 f8fe 	bl	8000cee <lcd_clear>
		lcd_set_cursor(1, 0);
 8000af2:	2100      	movs	r1, #0
 8000af4:	2001      	movs	r0, #1
 8000af6:	f000 f905 	bl	8000d04 <lcd_set_cursor>
		lcd_print("  Zap'em Blast'em   ");
 8000afa:	4808      	ldr	r0, [pc, #32]	@ (8000b1c <game_task_state_2_play+0x140>)
 8000afc:	f000 f924 	bl	8000d48 <lcd_print>
		lcd_set_cursor(2, 0);
 8000b00:	2100      	movs	r1, #0
 8000b02:	2002      	movs	r0, #2
 8000b04:	f000 f8fe 	bl	8000d04 <lcd_set_cursor>
		lcd_print("     GAME OVER!     ");
 8000b08:	4809      	ldr	r0, [pc, #36]	@ (8000b30 <game_task_state_2_play+0x154>)
 8000b0a:	f000 f91d 	bl	8000d48 <lcd_print>
		game_task->state = 3;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2203      	movs	r2, #3
 8000b12:	601a      	str	r2, [r3, #0]
	}

}
 8000b14:	bf00      	nop
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	08006318 	.word	0x08006318
 8000b20:	08006348 	.word	0x08006348
 8000b24:	08006360 	.word	0x08006360
 8000b28:	08006378 	.word	0x08006378
 8000b2c:	08006390 	.word	0x08006390
 8000b30:	08006394 	.word	0x08006394

08000b34 <game_task_state_3_end>:
// A function to implement state 3
// Ends the game when the score threshold has been met
// Prints messages and sets sound flags
void game_task_state_3_end(GameTask *game_task)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	// lowkey might not be needed
	// does need to reset everything but could do in above
//	game_task->play_flag == 0;
	game_task->state = 1;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
	game_task->score_blue = 0;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
	game_task->score_red = 0;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
	HAL_Delay(5000);
 8000b4e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000b52:	f001 fbc3 	bl	80022dc <HAL_Delay>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <lcd_send_nibble>:
#define LCD_RS        0x01

static void lcd_send_nibble(uint8_t nibble, uint8_t rs);
static void lcd_send_byte(uint8_t byte, uint8_t rs);

static void lcd_send_nibble(uint8_t nibble, uint8_t rs) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af02      	add	r7, sp, #8
 8000b66:	4603      	mov	r3, r0
 8000b68:	460a      	mov	r2, r1
 8000b6a:	71fb      	strb	r3, [r7, #7]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	71bb      	strb	r3, [r7, #6]
    uint8_t data = (nibble & 0xF0);
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f023 030f 	bic.w	r3, r3, #15
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	73fb      	strb	r3, [r7, #15]
    if (rs) data |= LCD_RS;
 8000b7a:	79bb      	ldrb	r3, [r7, #6]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d004      	beq.n	8000b8a <lcd_send_nibble+0x2a>
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	73fb      	strb	r3, [r7, #15]
    data |= LCD_BACKLIGHT;
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	f043 0308 	orr.w	r3, r3, #8
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	73fb      	strb	r3, [r7, #15]

    // Pulse enable
    uint8_t data_e = data | LCD_ENABLE;
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDR, &data_e, 1, HAL_MAX_DELAY);
 8000b9e:	f107 020e 	add.w	r2, r7, #14
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	2301      	movs	r3, #1
 8000baa:	214e      	movs	r1, #78	@ 0x4e
 8000bac:	480b      	ldr	r0, [pc, #44]	@ (8000bdc <lcd_send_nibble+0x7c>)
 8000bae:	f003 f8d3 	bl	8003d58 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f001 fb92 	bl	80022dc <HAL_Delay>
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDR, &data, 1, HAL_MAX_DELAY);
 8000bb8:	f107 020f 	add.w	r2, r7, #15
 8000bbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	214e      	movs	r1, #78	@ 0x4e
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <lcd_send_nibble+0x7c>)
 8000bc8:	f003 f8c6 	bl	8003d58 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f001 fb85 	bl	80022dc <HAL_Delay>
}
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000328 	.word	0x20000328

08000be0 <lcd_send_byte>:

static void lcd_send_byte(uint8_t byte, uint8_t rs) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	460a      	mov	r2, r1
 8000bea:	71fb      	strb	r3, [r7, #7]
 8000bec:	4613      	mov	r3, r2
 8000bee:	71bb      	strb	r3, [r7, #6]
    lcd_send_nibble(byte & 0xF0, rs);
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f023 030f 	bic.w	r3, r3, #15
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	79ba      	ldrb	r2, [r7, #6]
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ffaf 	bl	8000b60 <lcd_send_nibble>
    lcd_send_nibble((byte << 4) & 0xF0, rs);
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	011b      	lsls	r3, r3, #4
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	79ba      	ldrb	r2, [r7, #6]
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ffa7 	bl	8000b60 <lcd_send_nibble>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <lcd_send_command>:

void lcd_send_command(uint8_t cmd) {
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	71fb      	strb	r3, [r7, #7]
    lcd_send_byte(cmd, 0);
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ffd9 	bl	8000be0 <lcd_send_byte>
    HAL_Delay(2);
 8000c2e:	2002      	movs	r0, #2
 8000c30:	f001 fb54 	bl	80022dc <HAL_Delay>
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
    lcd_send_byte(data, 1);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2101      	movs	r1, #1
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ffc8 	bl	8000be0 <lcd_send_byte>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <lcd_force_backlight_on>:

void lcd_force_backlight_on(void) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af02      	add	r7, sp, #8
    uint8_t data = 0x00 | LCD_BACKLIGHT;
 8000c5e:	2308      	movs	r3, #8
 8000c60:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDR, &data, 1, HAL_MAX_DELAY);
 8000c62:	1dfa      	adds	r2, r7, #7
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	214e      	movs	r1, #78	@ 0x4e
 8000c6e:	4803      	ldr	r0, [pc, #12]	@ (8000c7c <lcd_force_backlight_on+0x24>)
 8000c70:	f003 f872 	bl	8003d58 <HAL_I2C_Master_Transmit>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000328 	.word	0x20000328

08000c80 <lcd_init>:

void lcd_init(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
    HAL_Delay(50); // Wait for power to stabilize
 8000c84:	2032      	movs	r0, #50	@ 0x32
 8000c86:	f001 fb29 	bl	80022dc <HAL_Delay>

    // Set to 4-bit mode
    lcd_send_nibble(0x30, 0); HAL_Delay(5);
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2030      	movs	r0, #48	@ 0x30
 8000c8e:	f7ff ff67 	bl	8000b60 <lcd_send_nibble>
 8000c92:	2005      	movs	r0, #5
 8000c94:	f001 fb22 	bl	80022dc <HAL_Delay>
    lcd_send_nibble(0x30, 0); HAL_Delay(1);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2030      	movs	r0, #48	@ 0x30
 8000c9c:	f7ff ff60 	bl	8000b60 <lcd_send_nibble>
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f001 fb1b 	bl	80022dc <HAL_Delay>
    lcd_send_nibble(0x30, 0); HAL_Delay(1);
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2030      	movs	r0, #48	@ 0x30
 8000caa:	f7ff ff59 	bl	8000b60 <lcd_send_nibble>
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f001 fb14 	bl	80022dc <HAL_Delay>
    lcd_send_nibble(0x20, 0); HAL_Delay(1); // 4-bit mode
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2020      	movs	r0, #32
 8000cb8:	f7ff ff52 	bl	8000b60 <lcd_send_nibble>
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f001 fb0d 	bl	80022dc <HAL_Delay>

    lcd_send_command(0x28); // Function set: 4-bit, 2-line, 5x8 dots
 8000cc2:	2028      	movs	r0, #40	@ 0x28
 8000cc4:	f7ff ffa9 	bl	8000c1a <lcd_send_command>
    lcd_send_command(0x08); // Display off
 8000cc8:	2008      	movs	r0, #8
 8000cca:	f7ff ffa6 	bl	8000c1a <lcd_send_command>
    lcd_send_command(0x01); // Clear display
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f7ff ffa3 	bl	8000c1a <lcd_send_command>
    HAL_Delay(2);
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f001 fb01 	bl	80022dc <HAL_Delay>
    lcd_send_command(0x06); // Entry mode set
 8000cda:	2006      	movs	r0, #6
 8000cdc:	f7ff ff9d 	bl	8000c1a <lcd_send_command>
    lcd_send_command(0x0C); // Display on, cursor off
 8000ce0:	200c      	movs	r0, #12
 8000ce2:	f7ff ff9a 	bl	8000c1a <lcd_send_command>
    lcd_force_backlight_on();
 8000ce6:	f7ff ffb7 	bl	8000c58 <lcd_force_backlight_on>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}

08000cee <lcd_clear>:

void lcd_clear(void) {
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0
    lcd_send_command(0x01);
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f7ff ff91 	bl	8000c1a <lcd_send_command>
    HAL_Delay(2);
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	f001 faef 	bl	80022dc <HAL_Delay>
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t col) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	460a      	mov	r2, r1
 8000d0e:	71fb      	strb	r3, [r7, #7]
 8000d10:	4613      	mov	r3, r2
 8000d12:	71bb      	strb	r3, [r7, #6]
    static const uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
    if (row > 3) row = 3;
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	d901      	bls.n	8000d1e <lcd_set_cursor+0x1a>
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	71fb      	strb	r3, [r7, #7]
    lcd_send_command(0x80 | (col + row_offsets[row]));
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4a08      	ldr	r2, [pc, #32]	@ (8000d44 <lcd_set_cursor+0x40>)
 8000d22:	5cd2      	ldrb	r2, [r2, r3]
 8000d24:	79bb      	ldrb	r3, [r7, #6]
 8000d26:	4413      	add	r3, r2
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	b25b      	sxtb	r3, r3
 8000d2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff70 	bl	8000c1a <lcd_send_command>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	080063ac 	.word	0x080063ac

08000d48 <lcd_print>:

void lcd_print(char *str) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000d50:	e006      	b.n	8000d60 <lcd_print+0x18>
        lcd_send_data((uint8_t)*str++);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	1c5a      	adds	r2, r3, #1
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff6e 	bl	8000c3c <lcd_send_data>
    while (*str) {
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1f4      	bne.n	8000d52 <lcd_print+0xa>
    }
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d78:	f001 fa3e 	bl	80021f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7c:	f000 f874 	bl	8000e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d80:	f000 fbb0 	bl	80014e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d84:	f000 fb8e 	bl	80014a4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d88:	f000 f952 	bl	8001030 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000d8c:	f000 f97e 	bl	800108c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000d90:	f000 fa7c 	bl	800128c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d94:	f000 face 	bl	8001334 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000d98:	f000 fb30 	bl	80013fc <MX_TIM5_Init>
  MX_TIM2_Init();
 8000d9c:	f000 fa1e 	bl	80011dc <MX_TIM2_Init>
  MX_ADC1_Init();
 8000da0:	f000 f8ca 	bl	8000f38 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000da4:	2100      	movs	r1, #0
 8000da6:	4824      	ldr	r0, [pc, #144]	@ (8000e38 <main+0xc4>)
 8000da8:	f004 f81e 	bl	8004de8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8000dac:	2104      	movs	r1, #4
 8000dae:	4822      	ldr	r0, [pc, #136]	@ (8000e38 <main+0xc4>)
 8000db0:	f004 f81a 	bl	8004de8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);
 8000db4:	2108      	movs	r1, #8
 8000db6:	4820      	ldr	r0, [pc, #128]	@ (8000e38 <main+0xc4>)
 8000db8:	f004 f816 	bl	8004de8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8000dbc:	210c      	movs	r1, #12
 8000dbe:	481e      	ldr	r0, [pc, #120]	@ (8000e38 <main+0xc4>)
 8000dc0:	f004 f812 	bl	8004de8 <HAL_TIM_PWM_Start_IT>

  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	481d      	ldr	r0, [pc, #116]	@ (8000e3c <main+0xc8>)
 8000dc8:	f004 f80e 	bl	8004de8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8000dcc:	2104      	movs	r1, #4
 8000dce:	481b      	ldr	r0, [pc, #108]	@ (8000e3c <main+0xc8>)
 8000dd0:	f004 f80a 	bl	8004de8 <HAL_TIM_PWM_Start_IT>

  HAL_TIM_Base_Start(&htim1);
 8000dd4:	4818      	ldr	r0, [pc, #96]	@ (8000e38 <main+0xc4>)
 8000dd6:	f003 ff5d 	bl	8004c94 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8000dda:	4819      	ldr	r0, [pc, #100]	@ (8000e40 <main+0xcc>)
 8000ddc:	f003 ff5a 	bl	8004c94 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8000de0:	4816      	ldr	r0, [pc, #88]	@ (8000e3c <main+0xc8>)
 8000de2:	f003 ff57 	bl	8004c94 <HAL_TIM_Base_Start>

  enable(&mred);
 8000de6:	4817      	ldr	r0, [pc, #92]	@ (8000e44 <main+0xd0>)
 8000de8:	f000 fd1e 	bl	8001828 <enable>
  enable(&mblue);
 8000dec:	4816      	ldr	r0, [pc, #88]	@ (8000e48 <main+0xd4>)
 8000dee:	f000 fd1b 	bl	8001828 <enable>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	2104      	movs	r1, #4
 8000df6:	4815      	ldr	r0, [pc, #84]	@ (8000e4c <main+0xd8>)
 8000df8:	f002 fe38 	bl	8003a6c <HAL_GPIO_WritePin>

  HAL_Delay(2000); // 2 second delay to let stuff get set up
 8000dfc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e00:	f001 fa6c 	bl	80022dc <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  adc_task_run(&adc_task);
 8000e04:	4812      	ldr	r0, [pc, #72]	@ (8000e50 <main+0xdc>)
 8000e06:	f7ff fbd1 	bl	80005ac <adc_task_run>

	  game_task_run(&game_task);
 8000e0a:	4812      	ldr	r0, [pc, #72]	@ (8000e54 <main+0xe0>)
 8000e0c:	f7ff fd90 	bl	8000930 <game_task_run>
//	  sound_task_run(&sound_task);
//	  controller_task_run(&blue_controller_task);
//	  controller_task_run(&red_controller_task);
	  if (game_task.play_flag){ //shooting and scoring disabled when game hasn't started
 8000e10:	4b10      	ldr	r3, [pc, #64]	@ (8000e54 <main+0xe0>)
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00b      	beq.n	8000e30 <main+0xbc>
		  shoot_task_run(&red_shoot_task);
 8000e18:	480f      	ldr	r0, [pc, #60]	@ (8000e58 <main+0xe4>)
 8000e1a:	f000 fda8 	bl	800196e <shoot_task_run>
		  shoot_task_run(&blue_shoot_task);
 8000e1e:	480f      	ldr	r0, [pc, #60]	@ (8000e5c <main+0xe8>)
 8000e20:	f000 fda5 	bl	800196e <shoot_task_run>
		  photoresistor_task_run(&red_photoresistor_task);
 8000e24:	480e      	ldr	r0, [pc, #56]	@ (8000e60 <main+0xec>)
 8000e26:	f000 fd57 	bl	80018d8 <photoresistor_task_run>
		  photoresistor_task_run(&blue_photoresistor_task);
 8000e2a:	480e      	ldr	r0, [pc, #56]	@ (8000e64 <main+0xf0>)
 8000e2c:	f000 fd54 	bl	80018d8 <photoresistor_task_run>
	  //__HAL_TIM_SET_COMPARE(red_shoot_task.servo_tim, red_shoot_task.channel, a);
	  //__HAL_TIM_SET_COMPARE(blue_shoot_task.servo_tim, blue_shoot_task.channel, b);
	  //controller_task_run(&blue_controller_task);
	  //controller_task_run(&red_controller_task);
	  //add delay
	  HAL_Delay(1);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f001 fa53 	bl	80022dc <HAL_Delay>
	  adc_task_run(&adc_task);
 8000e36:	e7e5      	b.n	8000e04 <main+0x90>
 8000e38:	2000037c 	.word	0x2000037c
 8000e3c:	20000454 	.word	0x20000454
 8000e40:	200003c4 	.word	0x200003c4
 8000e44:	20000000 	.word	0x20000000
 8000e48:	2000000c 	.word	0x2000000c
 8000e4c:	40020400 	.word	0x40020400
 8000e50:	200001dc 	.word	0x200001dc
 8000e54:	20000088 	.word	0x20000088
 8000e58:	200000cc 	.word	0x200000cc
 8000e5c:	200000fc 	.word	0x200000fc
 8000e60:	20000048 	.word	0x20000048
 8000e64:	20000068 	.word	0x20000068

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b094      	sub	sp, #80	@ 0x50
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 0320 	add.w	r3, r7, #32
 8000e72:	2230      	movs	r2, #48	@ 0x30
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f004 fdc4 	bl	8005a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	4b27      	ldr	r3, [pc, #156]	@ (8000f30 <SystemClock_Config+0xc8>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e94:	4a26      	ldr	r2, [pc, #152]	@ (8000f30 <SystemClock_Config+0xc8>)
 8000e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e9c:	4b24      	ldr	r3, [pc, #144]	@ (8000f30 <SystemClock_Config+0xc8>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	4b21      	ldr	r3, [pc, #132]	@ (8000f34 <SystemClock_Config+0xcc>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a20      	ldr	r2, [pc, #128]	@ (8000f34 <SystemClock_Config+0xcc>)
 8000eb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f34 <SystemClock_Config+0xcc>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ed8:	2319      	movs	r3, #25
 8000eda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000edc:	23c0      	movs	r3, #192	@ 0xc0
 8000ede:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee8:	f107 0320 	add.w	r3, r7, #32
 8000eec:	4618      	mov	r0, r3
 8000eee:	f003 fa8d 	bl	800440c <HAL_RCC_OscConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ef8:	f000 fbd8 	bl	80016ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efc:	230f      	movs	r3, #15
 8000efe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f00:	2302      	movs	r3, #2
 8000f02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	2103      	movs	r1, #3
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f003 fcef 	bl	80048fc <HAL_RCC_ClockConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f24:	f000 fbc2 	bl	80016ac <Error_Handler>
  }
}
 8000f28:	bf00      	nop
 8000f2a:	3750      	adds	r7, #80	@ 0x50
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40007000 	.word	0x40007000

08000f38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f3e:	463b      	mov	r3, r7
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f4a:	4b36      	ldr	r3, [pc, #216]	@ (8001024 <MX_ADC1_Init+0xec>)
 8000f4c:	4a36      	ldr	r2, [pc, #216]	@ (8001028 <MX_ADC1_Init+0xf0>)
 8000f4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f50:	4b34      	ldr	r3, [pc, #208]	@ (8001024 <MX_ADC1_Init+0xec>)
 8000f52:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f58:	4b32      	ldr	r3, [pc, #200]	@ (8001024 <MX_ADC1_Init+0xec>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f5e:	4b31      	ldr	r3, [pc, #196]	@ (8001024 <MX_ADC1_Init+0xec>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f64:	4b2f      	ldr	r3, [pc, #188]	@ (8001024 <MX_ADC1_Init+0xec>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001024 <MX_ADC1_Init+0xec>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f72:	4b2c      	ldr	r3, [pc, #176]	@ (8001024 <MX_ADC1_Init+0xec>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f78:	4b2a      	ldr	r3, [pc, #168]	@ (8001024 <MX_ADC1_Init+0xec>)
 8000f7a:	4a2c      	ldr	r2, [pc, #176]	@ (800102c <MX_ADC1_Init+0xf4>)
 8000f7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f7e:	4b29      	ldr	r3, [pc, #164]	@ (8001024 <MX_ADC1_Init+0xec>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000f84:	4b27      	ldr	r3, [pc, #156]	@ (8001024 <MX_ADC1_Init+0xec>)
 8000f86:	2204      	movs	r2, #4
 8000f88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f8a:	4b26      	ldr	r3, [pc, #152]	@ (8001024 <MX_ADC1_Init+0xec>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f92:	4b24      	ldr	r3, [pc, #144]	@ (8001024 <MX_ADC1_Init+0xec>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f98:	4822      	ldr	r0, [pc, #136]	@ (8001024 <MX_ADC1_Init+0xec>)
 8000f9a:	f001 f9c3 	bl	8002324 <HAL_ADC_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fa4:	f000 fb82 	bl	80016ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	481a      	ldr	r0, [pc, #104]	@ (8001024 <MX_ADC1_Init+0xec>)
 8000fba:	f001 fc89 	bl	80028d0 <HAL_ADC_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fc4:	f000 fb72 	bl	80016ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fc8:	2305      	movs	r3, #5
 8000fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4813      	ldr	r0, [pc, #76]	@ (8001024 <MX_ADC1_Init+0xec>)
 8000fd6:	f001 fc7b 	bl	80028d0 <HAL_ADC_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fe0:	f000 fb64 	bl	80016ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fe4:	2306      	movs	r3, #6
 8000fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480c      	ldr	r0, [pc, #48]	@ (8001024 <MX_ADC1_Init+0xec>)
 8000ff2:	f001 fc6d 	bl	80028d0 <HAL_ADC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000ffc:	f000 fb56 	bl	80016ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001000:	2307      	movs	r3, #7
 8001002:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001004:	2304      	movs	r3, #4
 8001006:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	@ (8001024 <MX_ADC1_Init+0xec>)
 800100e:	f001 fc5f 	bl	80028d0 <HAL_ADC_ConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001018:	f000 fb48 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000280 	.word	0x20000280
 8001028:	40012000 	.word	0x40012000
 800102c:	0f000001 	.word	0x0f000001

08001030 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <MX_I2C1_Init+0x50>)
 8001036:	4a13      	ldr	r2, [pc, #76]	@ (8001084 <MX_I2C1_Init+0x54>)
 8001038:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800103a:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <MX_I2C1_Init+0x50>)
 800103c:	4a12      	ldr	r2, [pc, #72]	@ (8001088 <MX_I2C1_Init+0x58>)
 800103e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001040:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <MX_I2C1_Init+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <MX_I2C1_Init+0x50>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800104c:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <MX_I2C1_Init+0x50>)
 800104e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001052:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001054:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <MX_I2C1_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <MX_I2C1_Init+0x50>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001060:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <MX_I2C1_Init+0x50>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <MX_I2C1_Init+0x50>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800106c:	4804      	ldr	r0, [pc, #16]	@ (8001080 <MX_I2C1_Init+0x50>)
 800106e:	f002 fd2f 	bl	8003ad0 <HAL_I2C_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001078:	f000 fb18 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000328 	.word	0x20000328
 8001084:	40005400 	.word	0x40005400
 8001088:	000186a0 	.word	0x000186a0

0800108c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b092      	sub	sp, #72	@ 0x48
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001092:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
 80010ac:	615a      	str	r2, [r3, #20]
 80010ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2220      	movs	r2, #32
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f004 fca4 	bl	8005a04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010bc:	4b45      	ldr	r3, [pc, #276]	@ (80011d4 <MX_TIM1_Init+0x148>)
 80010be:	4a46      	ldr	r2, [pc, #280]	@ (80011d8 <MX_TIM1_Init+0x14c>)
 80010c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010c2:	4b44      	ldr	r3, [pc, #272]	@ (80011d4 <MX_TIM1_Init+0x148>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c8:	4b42      	ldr	r3, [pc, #264]	@ (80011d4 <MX_TIM1_Init+0x148>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4799;
 80010ce:	4b41      	ldr	r3, [pc, #260]	@ (80011d4 <MX_TIM1_Init+0x148>)
 80010d0:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 80010d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d6:	4b3f      	ldr	r3, [pc, #252]	@ (80011d4 <MX_TIM1_Init+0x148>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010dc:	4b3d      	ldr	r3, [pc, #244]	@ (80011d4 <MX_TIM1_Init+0x148>)
 80010de:	2200      	movs	r2, #0
 80010e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e2:	4b3c      	ldr	r3, [pc, #240]	@ (80011d4 <MX_TIM1_Init+0x148>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010e8:	483a      	ldr	r0, [pc, #232]	@ (80011d4 <MX_TIM1_Init+0x148>)
 80010ea:	f003 fe2d 	bl	8004d48 <HAL_TIM_PWM_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80010f4:	f000 fada 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f8:	2300      	movs	r3, #0
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001100:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001104:	4619      	mov	r1, r3
 8001106:	4833      	ldr	r0, [pc, #204]	@ (80011d4 <MX_TIM1_Init+0x148>)
 8001108:	f004 fb9a 	bl	8005840 <HAL_TIMEx_MasterConfigSynchronization>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001112:	f000 facb 	bl	80016ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001116:	2370      	movs	r3, #112	@ 0x70
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001122:	2300      	movs	r3, #0
 8001124:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800112e:	2300      	movs	r3, #0
 8001130:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001136:	2200      	movs	r2, #0
 8001138:	4619      	mov	r1, r3
 800113a:	4826      	ldr	r0, [pc, #152]	@ (80011d4 <MX_TIM1_Init+0x148>)
 800113c:	f004 f886 	bl	800524c <HAL_TIM_PWM_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001146:	f000 fab1 	bl	80016ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800114a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800114e:	2204      	movs	r2, #4
 8001150:	4619      	mov	r1, r3
 8001152:	4820      	ldr	r0, [pc, #128]	@ (80011d4 <MX_TIM1_Init+0x148>)
 8001154:	f004 f87a 	bl	800524c <HAL_TIM_PWM_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800115e:	f000 faa5 	bl	80016ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001166:	2208      	movs	r2, #8
 8001168:	4619      	mov	r1, r3
 800116a:	481a      	ldr	r0, [pc, #104]	@ (80011d4 <MX_TIM1_Init+0x148>)
 800116c:	f004 f86e 	bl	800524c <HAL_TIM_PWM_ConfigChannel>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001176:	f000 fa99 	bl	80016ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800117a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800117e:	220c      	movs	r2, #12
 8001180:	4619      	mov	r1, r3
 8001182:	4814      	ldr	r0, [pc, #80]	@ (80011d4 <MX_TIM1_Init+0x148>)
 8001184:	f004 f862 	bl	800524c <HAL_TIM_PWM_ConfigChannel>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800118e:	f000 fa8d 	bl	80016ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4619      	mov	r1, r3
 80011b4:	4807      	ldr	r0, [pc, #28]	@ (80011d4 <MX_TIM1_Init+0x148>)
 80011b6:	f004 fbb1 	bl	800591c <HAL_TIMEx_ConfigBreakDeadTime>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80011c0:	f000 fa74 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011c4:	4803      	ldr	r0, [pc, #12]	@ (80011d4 <MX_TIM1_Init+0x148>)
 80011c6:	f000 fed7 	bl	8001f78 <HAL_TIM_MspPostInit>

}
 80011ca:	bf00      	nop
 80011cc:	3748      	adds	r7, #72	@ 0x48
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000037c 	.word	0x2000037c
 80011d8:	40010000 	.word	0x40010000

080011dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	@ 0x28
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e2:	f107 0320 	add.w	r3, r7, #32
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]
 80011fa:	615a      	str	r2, [r3, #20]
 80011fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011fe:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <MX_TIM2_Init+0xac>)
 8001200:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001204:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001206:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <MX_TIM2_Init+0xac>)
 8001208:	2200      	movs	r2, #0
 800120a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <MX_TIM2_Init+0xac>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001212:	4b1d      	ldr	r3, [pc, #116]	@ (8001288 <MX_TIM2_Init+0xac>)
 8001214:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001218:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <MX_TIM2_Init+0xac>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001220:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <MX_TIM2_Init+0xac>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001226:	4818      	ldr	r0, [pc, #96]	@ (8001288 <MX_TIM2_Init+0xac>)
 8001228:	f003 fd8e 	bl	8004d48 <HAL_TIM_PWM_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001232:	f000 fa3b 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	4619      	mov	r1, r3
 8001244:	4810      	ldr	r0, [pc, #64]	@ (8001288 <MX_TIM2_Init+0xac>)
 8001246:	f004 fafb 	bl	8005840 <HAL_TIMEx_MasterConfigSynchronization>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001250:	f000 fa2c 	bl	80016ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001254:	2360      	movs	r3, #96	@ 0x60
 8001256:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2200      	movs	r2, #0
 8001268:	4619      	mov	r1, r3
 800126a:	4807      	ldr	r0, [pc, #28]	@ (8001288 <MX_TIM2_Init+0xac>)
 800126c:	f003 ffee 	bl	800524c <HAL_TIM_PWM_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001276:	f000 fa19 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800127a:	4803      	ldr	r0, [pc, #12]	@ (8001288 <MX_TIM2_Init+0xac>)
 800127c:	f000 fe7c 	bl	8001f78 <HAL_TIM_MspPostInit>

}
 8001280:	bf00      	nop
 8001282:	3728      	adds	r7, #40	@ 0x28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200003c4 	.word	0x200003c4

0800128c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	@ 0x30
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	2224      	movs	r2, #36	@ 0x24
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f004 fbb2 	bl	8005a04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012a8:	4b20      	ldr	r3, [pc, #128]	@ (800132c <MX_TIM3_Init+0xa0>)
 80012aa:	4a21      	ldr	r2, [pc, #132]	@ (8001330 <MX_TIM3_Init+0xa4>)
 80012ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012ae:	4b1f      	ldr	r3, [pc, #124]	@ (800132c <MX_TIM3_Init+0xa0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b4:	4b1d      	ldr	r3, [pc, #116]	@ (800132c <MX_TIM3_Init+0xa0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012ba:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <MX_TIM3_Init+0xa0>)
 80012bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c2:	4b1a      	ldr	r3, [pc, #104]	@ (800132c <MX_TIM3_Init+0xa0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c8:	4b18      	ldr	r3, [pc, #96]	@ (800132c <MX_TIM3_Init+0xa0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012ce:	2301      	movs	r3, #1
 80012d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012d6:	2301      	movs	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012e6:	2301      	movs	r3, #1
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	4619      	mov	r1, r3
 80012f8:	480c      	ldr	r0, [pc, #48]	@ (800132c <MX_TIM3_Init+0xa0>)
 80012fa:	f003 fe73 	bl	8004fe4 <HAL_TIM_Encoder_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001304:	f000 f9d2 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	@ (800132c <MX_TIM3_Init+0xa0>)
 8001316:	f004 fa93 	bl	8005840 <HAL_TIMEx_MasterConfigSynchronization>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001320:	f000 f9c4 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	3730      	adds	r7, #48	@ 0x30
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	2000040c 	.word	0x2000040c
 8001330:	40000400 	.word	0x40000400

08001334 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	@ 0x28
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133a:	f107 0320 	add.w	r3, r7, #32
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	615a      	str	r2, [r3, #20]
 8001354:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001356:	4b27      	ldr	r3, [pc, #156]	@ (80013f4 <MX_TIM4_Init+0xc0>)
 8001358:	4a27      	ldr	r2, [pc, #156]	@ (80013f8 <MX_TIM4_Init+0xc4>)
 800135a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800135c:	4b25      	ldr	r3, [pc, #148]	@ (80013f4 <MX_TIM4_Init+0xc0>)
 800135e:	2253      	movs	r2, #83	@ 0x53
 8001360:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001362:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <MX_TIM4_Init+0xc0>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8001368:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <MX_TIM4_Init+0xc0>)
 800136a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800136e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001370:	4b20      	ldr	r3, [pc, #128]	@ (80013f4 <MX_TIM4_Init+0xc0>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001376:	4b1f      	ldr	r3, [pc, #124]	@ (80013f4 <MX_TIM4_Init+0xc0>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800137c:	481d      	ldr	r0, [pc, #116]	@ (80013f4 <MX_TIM4_Init+0xc0>)
 800137e:	f003 fce3 	bl	8004d48 <HAL_TIM_PWM_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001388:	f000 f990 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001394:	f107 0320 	add.w	r3, r7, #32
 8001398:	4619      	mov	r1, r3
 800139a:	4816      	ldr	r0, [pc, #88]	@ (80013f4 <MX_TIM4_Init+0xc0>)
 800139c:	f004 fa50 	bl	8005840 <HAL_TIMEx_MasterConfigSynchronization>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80013a6:	f000 f981 	bl	80016ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013aa:	2360      	movs	r3, #96	@ 0x60
 80013ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	4619      	mov	r1, r3
 80013c0:	480c      	ldr	r0, [pc, #48]	@ (80013f4 <MX_TIM4_Init+0xc0>)
 80013c2:	f003 ff43 	bl	800524c <HAL_TIM_PWM_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80013cc:	f000 f96e 	bl	80016ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2204      	movs	r2, #4
 80013d4:	4619      	mov	r1, r3
 80013d6:	4807      	ldr	r0, [pc, #28]	@ (80013f4 <MX_TIM4_Init+0xc0>)
 80013d8:	f003 ff38 	bl	800524c <HAL_TIM_PWM_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80013e2:	f000 f963 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013e6:	4803      	ldr	r0, [pc, #12]	@ (80013f4 <MX_TIM4_Init+0xc0>)
 80013e8:	f000 fdc6 	bl	8001f78 <HAL_TIM_MspPostInit>

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	@ 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000454 	.word	0x20000454
 80013f8:	40000800 	.word	0x40000800

080013fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	@ 0x30
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	2224      	movs	r2, #36	@ 0x24
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f004 fafa 	bl	8005a04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001418:	4b20      	ldr	r3, [pc, #128]	@ (800149c <MX_TIM5_Init+0xa0>)
 800141a:	4a21      	ldr	r2, [pc, #132]	@ (80014a0 <MX_TIM5_Init+0xa4>)
 800141c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800141e:	4b1f      	ldr	r3, [pc, #124]	@ (800149c <MX_TIM5_Init+0xa0>)
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001424:	4b1d      	ldr	r3, [pc, #116]	@ (800149c <MX_TIM5_Init+0xa0>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800142a:	4b1c      	ldr	r3, [pc, #112]	@ (800149c <MX_TIM5_Init+0xa0>)
 800142c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001430:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001432:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <MX_TIM5_Init+0xa0>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001438:	4b18      	ldr	r3, [pc, #96]	@ (800149c <MX_TIM5_Init+0xa0>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800143e:	2301      	movs	r3, #1
 8001440:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001446:	2301      	movs	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001456:	2301      	movs	r3, #1
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	4619      	mov	r1, r3
 8001468:	480c      	ldr	r0, [pc, #48]	@ (800149c <MX_TIM5_Init+0xa0>)
 800146a:	f003 fdbb 	bl	8004fe4 <HAL_TIM_Encoder_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001474:	f000 f91a 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_TIM5_Init+0xa0>)
 8001486:	f004 f9db 	bl	8005840 <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001490:	f000 f90c 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	3730      	adds	r7, #48	@ 0x30
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	2000049c 	.word	0x2000049c
 80014a0:	40000c00 	.word	0x40000c00

080014a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_DMA_Init+0x3c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a0b      	ldr	r2, [pc, #44]	@ (80014e0 <MX_DMA_Init+0x3c>)
 80014b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_DMA_Init+0x3c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2038      	movs	r0, #56	@ 0x38
 80014cc:	f001 fd8b 	bl	8002fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014d0:	2038      	movs	r0, #56	@ 0x38
 80014d2:	f001 fda4 	bl	800301e <HAL_NVIC_EnableIRQ>

}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800

080014e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	@ 0x28
 80014e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001630 <MX_GPIO_Init+0x14c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a4b      	ldr	r2, [pc, #300]	@ (8001630 <MX_GPIO_Init+0x14c>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b49      	ldr	r3, [pc, #292]	@ (8001630 <MX_GPIO_Init+0x14c>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b45      	ldr	r3, [pc, #276]	@ (8001630 <MX_GPIO_Init+0x14c>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	4a44      	ldr	r2, [pc, #272]	@ (8001630 <MX_GPIO_Init+0x14c>)
 8001520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001524:	6313      	str	r3, [r2, #48]	@ 0x30
 8001526:	4b42      	ldr	r3, [pc, #264]	@ (8001630 <MX_GPIO_Init+0x14c>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	4b3e      	ldr	r3, [pc, #248]	@ (8001630 <MX_GPIO_Init+0x14c>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a3d      	ldr	r2, [pc, #244]	@ (8001630 <MX_GPIO_Init+0x14c>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b3b      	ldr	r3, [pc, #236]	@ (8001630 <MX_GPIO_Init+0x14c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	4b37      	ldr	r3, [pc, #220]	@ (8001630 <MX_GPIO_Init+0x14c>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a36      	ldr	r2, [pc, #216]	@ (8001630 <MX_GPIO_Init+0x14c>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4b34      	ldr	r3, [pc, #208]	@ (8001630 <MX_GPIO_Init+0x14c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001570:	4830      	ldr	r0, [pc, #192]	@ (8001634 <MX_GPIO_Init+0x150>)
 8001572:	f002 fa7b 	bl	8003a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	f24c 0104 	movw	r1, #49156	@ 0xc004
 800157c:	482e      	ldr	r0, [pc, #184]	@ (8001638 <MX_GPIO_Init+0x154>)
 800157e:	f002 fa75 	bl	8003a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001582:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001588:	2301      	movs	r3, #1
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4619      	mov	r1, r3
 800159a:	4826      	ldr	r0, [pc, #152]	@ (8001634 <MX_GPIO_Init+0x150>)
 800159c:	f002 f8ca 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015a0:	230c      	movs	r3, #12
 80015a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b0:	2307      	movs	r3, #7
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	4820      	ldr	r0, [pc, #128]	@ (800163c <MX_GPIO_Init+0x158>)
 80015bc:	f002 f8ba 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015c0:	2304      	movs	r3, #4
 80015c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	4619      	mov	r1, r3
 80015d6:	4818      	ldr	r0, [pc, #96]	@ (8001638 <MX_GPIO_Init+0x154>)
 80015d8:	f002 f8ac 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80015dc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80015e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015e2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80015e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015e8:	2302      	movs	r3, #2
 80015ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	4811      	ldr	r0, [pc, #68]	@ (8001638 <MX_GPIO_Init+0x154>)
 80015f4:	f002 f89e 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80015f8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80015fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015fe:	2311      	movs	r3, #17
 8001600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4809      	ldr	r0, [pc, #36]	@ (8001638 <MX_GPIO_Init+0x154>)
 8001612:	f002 f88f 	bl	8003734 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2102      	movs	r1, #2
 800161a:	2028      	movs	r0, #40	@ 0x28
 800161c:	f001 fce3 	bl	8002fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001620:	2028      	movs	r0, #40	@ 0x28
 8001622:	f001 fcfc 	bl	800301e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001626:	bf00      	nop
 8001628:	3728      	adds	r7, #40	@ 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800
 8001634:	40020800 	.word	0x40020800
 8001638:	40020400 	.word	0x40020400
 800163c:	40020000 	.word	0x40020000

08001640 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_12)
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001650:	d10e      	bne.n	8001670 <HAL_GPIO_EXTI_Callback+0x30>
    {
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8001652:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001656:	4812      	ldr	r0, [pc, #72]	@ (80016a0 <HAL_GPIO_EXTI_Callback+0x60>)
 8001658:	f002 f9f0 	bl	8003a3c <HAL_GPIO_ReadPin>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d103      	bne.n	800166a <HAL_GPIO_EXTI_Callback+0x2a>
        {
            // turn on laser
        	blue_shoot_task.button = 1;
 8001662:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <HAL_GPIO_EXTI_Callback+0x64>)
 8001664:	2201      	movs	r2, #1
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	e002      	b.n	8001670 <HAL_GPIO_EXTI_Callback+0x30>
        }
        else
        {
            // turn off laser
        	blue_shoot_task.button = 0;
 800166a:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <HAL_GPIO_EXTI_Callback+0x64>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
        }
    }
    if (GPIO_Pin == GPIO_PIN_13)
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001676:	d10e      	bne.n	8001696 <HAL_GPIO_EXTI_Callback+0x56>
	{
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET)
 8001678:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800167c:	4808      	ldr	r0, [pc, #32]	@ (80016a0 <HAL_GPIO_EXTI_Callback+0x60>)
 800167e:	f002 f9dd 	bl	8003a3c <HAL_GPIO_ReadPin>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d103      	bne.n	8001690 <HAL_GPIO_EXTI_Callback+0x50>
		{
			// turn on laser
			red_shoot_task.button = 1;
 8001688:	4b07      	ldr	r3, [pc, #28]	@ (80016a8 <HAL_GPIO_EXTI_Callback+0x68>)
 800168a:	2201      	movs	r2, #1
 800168c:	609a      	str	r2, [r3, #8]
//    	red_photoresistor_task.hit_flag = 1;
//    }
//    if (GPIO_Pin == GPIO_PIN_5){
//    	blue_photoresistor_task.hit_flag = 1;
//	}
}
 800168e:	e002      	b.n	8001696 <HAL_GPIO_EXTI_Callback+0x56>
			red_shoot_task.button = 0;
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <HAL_GPIO_EXTI_Callback+0x68>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40020400 	.word	0x40020400
 80016a4:	200000fc 	.word	0x200000fc
 80016a8:	200000cc 	.word	0x200000cc

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <Error_Handler+0x8>

080016b8 <set_duty>:
#include "motor_driver.h"

#define PWM_MAX 4800

void set_duty(motor_t* p_mot, int32_t duty)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
    duty = duty*PWM_MAX/100;
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	603b      	str	r3, [r7, #0]
	if(duty>=0)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db46      	blt.n	8001762 <set_duty+0xaa>
	{
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, duty);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d105      	bne.n	80016e8 <set_duty+0x30>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80016e6:	e018      	b.n	800171a <set_duty+0x62>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d105      	bne.n	80016fc <set_duty+0x44>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	6393      	str	r3, [r2, #56]	@ 0x38
 80016fa:	e00e      	b.n	800171a <set_duty+0x62>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b08      	cmp	r3, #8
 8001702:	d105      	bne.n	8001710 <set_duty+0x58>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800170e:	e004      	b.n	800171a <set_duty+0x62>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, 0);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d105      	bne.n	800172e <set_duty+0x76>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2200      	movs	r2, #0
 800172a:	635a      	str	r2, [r3, #52]	@ 0x34
	{
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, 0);
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
	}

}
 800172c:	e076      	b.n	800181c <set_duty+0x164>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, 0);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b04      	cmp	r3, #4
 8001734:	d105      	bne.n	8001742 <set_duty+0x8a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	2300      	movs	r3, #0
 800173e:	6393      	str	r3, [r2, #56]	@ 0x38
 8001740:	e06c      	b.n	800181c <set_duty+0x164>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b08      	cmp	r3, #8
 8001748:	d105      	bne.n	8001756 <set_duty+0x9e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	2300      	movs	r3, #0
 8001752:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001754:	e062      	b.n	800181c <set_duty+0x164>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2300      	movs	r3, #0
 800175e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001760:	e05c      	b.n	800181c <set_duty+0x164>
	else if(duty<0)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	da59      	bge.n	800181c <set_duty+0x164>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, 0);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d105      	bne.n	800177c <set_duty+0xc4>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2200      	movs	r2, #0
 8001778:	635a      	str	r2, [r3, #52]	@ 0x34
 800177a:	e018      	b.n	80017ae <set_duty+0xf6>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b04      	cmp	r3, #4
 8001782:	d105      	bne.n	8001790 <set_duty+0xd8>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	2300      	movs	r3, #0
 800178c:	6393      	str	r3, [r2, #56]	@ 0x38
 800178e:	e00e      	b.n	80017ae <set_duty+0xf6>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b08      	cmp	r3, #8
 8001796:	d105      	bne.n	80017a4 <set_duty+0xec>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	2300      	movs	r3, #0
 80017a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80017a2:	e004      	b.n	80017ae <set_duty+0xf6>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	2300      	movs	r3, #0
 80017ac:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d109      	bne.n	80017ca <set_duty+0x112>
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80017bc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80017c8:	e028      	b.n	800181c <set_duty+0x164>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d10a      	bne.n	80017e8 <set_duty+0x130>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80017d8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	460b      	mov	r3, r1
 80017e4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80017e6:	e019      	b.n	800181c <set_duty+0x164>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d10a      	bne.n	8001806 <set_duty+0x14e>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80017f6:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	460b      	mov	r3, r1
 8001802:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001804:	e00a      	b.n	800181c <set_duty+0x164>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800180c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	460b      	mov	r3, r1
 8001818:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800181a:	e7ff      	b.n	800181c <set_duty+0x164>
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <enable>:
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, 0);

}

void enable(motor_t* p_mot)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, PWM_MAX);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d106      	bne.n	8001846 <enable+0x1e>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001842:	635a      	str	r2, [r3, #52]	@ 0x34
 8001844:	e01b      	b.n	800187e <enable+0x56>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b04      	cmp	r3, #4
 800184c:	d106      	bne.n	800185c <enable+0x34>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001858:	6393      	str	r3, [r2, #56]	@ 0x38
 800185a:	e010      	b.n	800187e <enable+0x56>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b08      	cmp	r3, #8
 8001862:	d106      	bne.n	8001872 <enable+0x4a>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 800186e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001870:	e005      	b.n	800187e <enable+0x56>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 800187c:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d106      	bne.n	8001894 <enable+0x6c>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001890:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001892:	e01b      	b.n	80018cc <enable+0xa4>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b04      	cmp	r3, #4
 800189a:	d106      	bne.n	80018aa <enable+0x82>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 80018a6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80018a8:	e010      	b.n	80018cc <enable+0xa4>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d106      	bne.n	80018c0 <enable+0x98>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 80018bc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80018be:	e005      	b.n	80018cc <enable+0xa4>
	__HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 80018ca:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <photoresistor_task_run>:

// game plan is to create two tasks, one for red and one for blue

// A function to run the appropriate state of the task
void photoresistor_task_run(PhotoresistorTask *photoresistor_task)
{    // Check for a valid state
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
    if (photoresistor_task->state >= 0 && photoresistor_task->state < photoresistor_task->num_states)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	db0f      	blt.n	8001908 <photoresistor_task_run+0x30>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	da09      	bge.n	8001908 <photoresistor_task_run+0x30>
    {
        // Index the list of state functions and then call the appropriate
        // method while passing in (this) task_1 object

    	photoresistor_task->state_list[photoresistor_task->state](photoresistor_task);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	3304      	adds	r3, #4
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	4798      	blx	r3
    else
    {
        while(1){}
    }

}
 8001906:	e000      	b.n	800190a <photoresistor_task_run+0x32>
        while(1){}
 8001908:	e7fe      	b.n	8001908 <photoresistor_task_run+0x30>
}
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <photoresistor_task_state_0_init>:


// A function to initialize the task
// init button, laser and photoresistor
void photoresistor_task_state_0_init(PhotoresistorTask *photoresistor_task)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	photoresistor_task->state = 1;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	601a      	str	r2, [r3, #0]
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <photoresistor_task_state_1_look>:
// A function to implement state 1 of the task
// wait for button to be pressed which should be on an interrupt that changes a flag
void photoresistor_task_state_1_look(PhotoresistorTask *photoresistor_task)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
//	if (photoresistor_task->adc_val > photoresistor_task->thresh){
//		photoresistor_task->hit_flag = 1;
//	}

	if (photoresistor_task->hit_flag == 1){ //interrupt will change the hit flag
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d102      	bne.n	8001940 <photoresistor_task_state_1_look+0x16>
		photoresistor_task->state = 2;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2202      	movs	r2, #2
 800193e:	601a      	str	r2, [r3, #0]

	}
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <photoresistor_task_state_2_hit>:
// A function to implement state 2 which is for when the game is being played
// This keeps track of score, prints score messages
void photoresistor_task_state_2_hit(PhotoresistorTask *photoresistor_task)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	if (photoresistor_task->hit_flag == 0){ // game_task will change when they have recorded the score
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <photoresistor_task_state_2_hit+0x16>
		photoresistor_task->state = 1;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	601a      	str	r2, [r3, #0]
	}
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <shoot_task_run>:

// game plan is to create two tasks, one for red and one for blue

// A function to run the appropriate state of the task
void shoot_task_run(ShootTask *shoot_task)
{    // Check for a valid state
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
    if (shoot_task->state >= 0 && shoot_task->state < shoot_task->num_states)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	db0e      	blt.n	800199c <shoot_task_run+0x2e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	429a      	cmp	r2, r3
 8001988:	da08      	bge.n	800199c <shoot_task_run+0x2e>
    {
        // Index the list of state functions and then call the appropriate
        // method while passing in (this) task_1 object

        shoot_task->state_list[shoot_task->state](shoot_task);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3208      	adds	r2, #8
 8001992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	4798      	blx	r3
    else
    {
        while(1){}
    }

}
 800199a:	e000      	b.n	800199e <shoot_task_run+0x30>
        while(1){}
 800199c:	e7fe      	b.n	800199c <shoot_task_run+0x2e>
}
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <shoot_task_state_0_init>:
// servo -- 300 at shiel

// A function to initialize the task
// init button, laser and photoresistor
void shoot_task_state_0_init(ShootTask *shoot_task)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	shoot_task->state = 1;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, shoot_task->laser_gpio, GPIO_PIN_SET);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	2201      	movs	r2, #1
 80019ba:	4619      	mov	r1, r3
 80019bc:	4818      	ldr	r0, [pc, #96]	@ (8001a20 <shoot_task_state_0_init+0x7c>)
 80019be:	f002 f855 	bl	8003a6c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <shoot_task_state_0_init+0x34>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699a      	ldr	r2, [r3, #24]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80019d6:	e01e      	b.n	8001a16 <shoot_task_state_0_init+0x72>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d107      	bne.n	80019f0 <shoot_task_state_0_init+0x4c>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6999      	ldr	r1, [r3, #24]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	460b      	mov	r3, r1
 80019ec:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80019ee:	e012      	b.n	8001a16 <shoot_task_state_0_init+0x72>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d107      	bne.n	8001a08 <shoot_task_state_0_init+0x64>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6999      	ldr	r1, [r3, #24]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	460b      	mov	r3, r1
 8001a04:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001a06:	e006      	b.n	8001a16 <shoot_task_state_0_init+0x72>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6999      	ldr	r1, [r3, #24]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	460b      	mov	r3, r1
 8001a14:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40020400 	.word	0x40020400

08001a24 <shoot_task_state_1_wait>:
// A function to implement state 1 of the task
// wait for button to be pressed which should be on an interrupt that changes a flag
void shoot_task_state_1_wait(ShootTask *shoot_task)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, shoot_task->laser_gpio, GPIO_PIN_SET);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	2201      	movs	r2, #1
 8001a34:	4619      	mov	r1, r3
 8001a36:	481c      	ldr	r0, [pc, #112]	@ (8001aa8 <shoot_task_state_1_wait+0x84>)
 8001a38:	f002 f818 	bl	8003a6c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d106      	bne.n	8001a52 <shoot_task_state_1_wait+0x2e>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699a      	ldr	r2, [r3, #24]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a50:	e01e      	b.n	8001a90 <shoot_task_state_1_wait+0x6c>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d107      	bne.n	8001a6a <shoot_task_state_1_wait+0x46>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6999      	ldr	r1, [r3, #24]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	460b      	mov	r3, r1
 8001a66:	6393      	str	r3, [r2, #56]	@ 0x38
 8001a68:	e012      	b.n	8001a90 <shoot_task_state_1_wait+0x6c>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d107      	bne.n	8001a82 <shoot_task_state_1_wait+0x5e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6999      	ldr	r1, [r3, #24]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001a80:	e006      	b.n	8001a90 <shoot_task_state_1_wait+0x6c>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6999      	ldr	r1, [r3, #24]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	6413      	str	r3, [r2, #64]	@ 0x40
	if (shoot_task->button == 1){
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d102      	bne.n	8001a9e <shoot_task_state_1_wait+0x7a>
		shoot_task->state = 2;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	601a      	str	r2, [r3, #0]
	}
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40020400 	.word	0x40020400

08001aac <shoot_task_state_2_unshield>:
// A function to implement state 2 which is for when the game is being played
// This keeps track of score, prints score messages
void shoot_task_state_2_unshield(ShootTask *shoot_task)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->shield_val);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d106      	bne.n	8001aca <shoot_task_state_2_unshield+0x1e>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ac8:	e01e      	b.n	8001b08 <shoot_task_state_2_unshield+0x5c>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d107      	bne.n	8001ae2 <shoot_task_state_2_unshield+0x36>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6959      	ldr	r1, [r3, #20]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	460b      	mov	r3, r1
 8001ade:	6393      	str	r3, [r2, #56]	@ 0x38
 8001ae0:	e012      	b.n	8001b08 <shoot_task_state_2_unshield+0x5c>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d107      	bne.n	8001afa <shoot_task_state_2_unshield+0x4e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6959      	ldr	r1, [r3, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	460b      	mov	r3, r1
 8001af6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001af8:	e006      	b.n	8001b08 <shoot_task_state_2_unshield+0x5c>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6959      	ldr	r1, [r3, #20]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	460b      	mov	r3, r1
 8001b06:	6413      	str	r3, [r2, #64]	@ 0x40
	if (1){ // add delay using some ticks and tune it
		shoot_task->state = 3;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	601a      	str	r2, [r3, #0]
	}
	if(shoot_task->button == 0){
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d102      	bne.n	8001b1c <shoot_task_state_2_unshield+0x70>
		shoot_task->state = 1;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
	}
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <shoot_task_state_3_shoot>:
// A function to implement state 3

void shoot_task_state_3_shoot(ShootTask *shoot_task)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, shoot_task->laser_gpio, GPIO_PIN_RESET);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	2200      	movs	r2, #0
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4807      	ldr	r0, [pc, #28]	@ (8001b58 <shoot_task_state_3_shoot+0x30>)
 8001b3c:	f001 ff96 	bl	8003a6c <HAL_GPIO_WritePin>
	if(shoot_task->button == 0){
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <shoot_task_state_3_shoot+0x26>
		shoot_task->state = 1;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
	}

}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40020400 	.word	0x40020400

08001b5c <sound_task_state_0_init>:
}


// A function to initialize the task
void sound_task_state_0_init(SoundTask *sound_task)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
    //add init stuff

}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <sound_task_state_1_wait>:

void sound_task_state_1_wait(SoundTask *sound_task)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	if (sound_task->laser_snd == 1){
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d103      	bne.n	8001b88 <sound_task_state_1_wait+0x18>
		sound_task->state = 2;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	601a      	str	r2, [r3, #0]
	}
	else if(sound_task->start_snd == 1){
		sound_task->state = 5;
	}

}
 8001b86:	e016      	b.n	8001bb6 <sound_task_state_1_wait+0x46>
	else if(sound_task->hit_snd == 1){
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d103      	bne.n	8001b98 <sound_task_state_1_wait+0x28>
		sound_task->state = 3;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2203      	movs	r2, #3
 8001b94:	601a      	str	r2, [r3, #0]
}
 8001b96:	e00e      	b.n	8001bb6 <sound_task_state_1_wait+0x46>
	else if(sound_task->win_snd == 1){
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d103      	bne.n	8001ba8 <sound_task_state_1_wait+0x38>
		sound_task->state = 4;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	601a      	str	r2, [r3, #0]
}
 8001ba6:	e006      	b.n	8001bb6 <sound_task_state_1_wait+0x46>
	else if(sound_task->start_snd == 1){
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d102      	bne.n	8001bb6 <sound_task_state_1_wait+0x46>
		sound_task->state = 5;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2205      	movs	r2, #5
 8001bb4:	601a      	str	r2, [r3, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <sound_task_state_2_laser>:
void sound_task_state_2_laser(SoundTask *sound_task)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
    // add sound with associated time (nonblocking, like HAL_Get_Ticks or something like that)
	// if sound done then
	// laser_snd_flg = 0;
	// sound_task.state = 1;

}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <sound_task_state_3_hit>:
void sound_task_state_3_hit(SoundTask *sound_task)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]


}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <sound_task_state_4_win>:
void sound_task_state_4_win(SoundTask *sound_task)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]


}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <sound_task_state_5_start>:

void sound_task_state_5_start(SoundTask *sound_task)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]


}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	4b10      	ldr	r3, [pc, #64]	@ (8001c60 <HAL_MspInit+0x4c>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c22:	4a0f      	ldr	r2, [pc, #60]	@ (8001c60 <HAL_MspInit+0x4c>)
 8001c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <HAL_MspInit+0x4c>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <HAL_MspInit+0x4c>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	4a08      	ldr	r2, [pc, #32]	@ (8001c60 <HAL_MspInit+0x4c>)
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c46:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_MspInit+0x4c>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800

08001c64 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	@ 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a2f      	ldr	r2, [pc, #188]	@ (8001d40 <HAL_ADC_MspInit+0xdc>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d158      	bne.n	8001d38 <HAL_ADC_MspInit+0xd4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d44 <HAL_ADC_MspInit+0xe0>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d44 <HAL_ADC_MspInit+0xe0>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c96:	4b2b      	ldr	r3, [pc, #172]	@ (8001d44 <HAL_ADC_MspInit+0xe0>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b27      	ldr	r3, [pc, #156]	@ (8001d44 <HAL_ADC_MspInit+0xe0>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	4a26      	ldr	r2, [pc, #152]	@ (8001d44 <HAL_ADC_MspInit+0xe0>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb2:	4b24      	ldr	r3, [pc, #144]	@ (8001d44 <HAL_ADC_MspInit+0xe0>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cbe:	23f0      	movs	r3, #240	@ 0xf0
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	481d      	ldr	r0, [pc, #116]	@ (8001d48 <HAL_ADC_MspInit+0xe4>)
 8001cd2:	f001 fd2f 	bl	8003734 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d50 <HAL_ADC_MspInit+0xec>)
 8001cda:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cee:	4b17      	ldr	r3, [pc, #92]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001cf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cf4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001cf8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cfc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cfe:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d06:	4b11      	ldr	r3, [pc, #68]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001d08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d0c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001d10:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d14:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d16:	4b0d      	ldr	r3, [pc, #52]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d1c:	480b      	ldr	r0, [pc, #44]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001d1e:	f001 f999 	bl	8003054 <HAL_DMA_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001d28:	f7ff fcc0 	bl	80016ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a07      	ldr	r2, [pc, #28]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001d30:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d32:	4a06      	ldr	r2, [pc, #24]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d38:	bf00      	nop
 8001d3a:	3728      	adds	r7, #40	@ 0x28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40012000 	.word	0x40012000
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	200002c8 	.word	0x200002c8
 8001d50:	40026410 	.word	0x40026410

08001d54 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	@ 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a19      	ldr	r2, [pc, #100]	@ (8001dd8 <HAL_I2C_MspInit+0x84>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d12c      	bne.n	8001dd0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b18      	ldr	r3, [pc, #96]	@ (8001ddc <HAL_I2C_MspInit+0x88>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	4a17      	ldr	r2, [pc, #92]	@ (8001ddc <HAL_I2C_MspInit+0x88>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <HAL_I2C_MspInit+0x88>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d98:	2312      	movs	r3, #18
 8001d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001da4:	2304      	movs	r3, #4
 8001da6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	4619      	mov	r1, r3
 8001dae:	480c      	ldr	r0, [pc, #48]	@ (8001de0 <HAL_I2C_MspInit+0x8c>)
 8001db0:	f001 fcc0 	bl	8003734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	4b08      	ldr	r3, [pc, #32]	@ (8001ddc <HAL_I2C_MspInit+0x88>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	4a07      	ldr	r2, [pc, #28]	@ (8001ddc <HAL_I2C_MspInit+0x88>)
 8001dbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <HAL_I2C_MspInit+0x88>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001dd0:	bf00      	nop
 8001dd2:	3728      	adds	r7, #40	@ 0x28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40005400 	.word	0x40005400
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020400 	.word	0x40020400

08001de4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e70 <HAL_TIM_PWM_MspInit+0x8c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d10e      	bne.n	8001e14 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001e74 <HAL_TIM_PWM_MspInit+0x90>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8001e74 <HAL_TIM_PWM_MspInit+0x90>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e06:	4b1b      	ldr	r3, [pc, #108]	@ (8001e74 <HAL_TIM_PWM_MspInit+0x90>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e12:	e026      	b.n	8001e62 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e1c:	d10e      	bne.n	8001e3c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	4b14      	ldr	r3, [pc, #80]	@ (8001e74 <HAL_TIM_PWM_MspInit+0x90>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	4a13      	ldr	r2, [pc, #76]	@ (8001e74 <HAL_TIM_PWM_MspInit+0x90>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2e:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <HAL_TIM_PWM_MspInit+0x90>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
}
 8001e3a:	e012      	b.n	8001e62 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0d      	ldr	r2, [pc, #52]	@ (8001e78 <HAL_TIM_PWM_MspInit+0x94>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d10d      	bne.n	8001e62 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e74 <HAL_TIM_PWM_MspInit+0x90>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	4a09      	ldr	r2, [pc, #36]	@ (8001e74 <HAL_TIM_PWM_MspInit+0x90>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e56:	4b07      	ldr	r3, [pc, #28]	@ (8001e74 <HAL_TIM_PWM_MspInit+0x90>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
}
 8001e62:	bf00      	nop
 8001e64:	371c      	adds	r7, #28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40010000 	.word	0x40010000
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40000800 	.word	0x40000800

08001e7c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08c      	sub	sp, #48	@ 0x30
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a32      	ldr	r2, [pc, #200]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d12c      	bne.n	8001ef8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
 8001ea2:	4b31      	ldr	r3, [pc, #196]	@ (8001f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	4a30      	ldr	r2, [pc, #192]	@ (8001f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eae:	4b2e      	ldr	r3, [pc, #184]	@ (8001f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	61bb      	str	r3, [r7, #24]
 8001eb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8001f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	4a29      	ldr	r2, [pc, #164]	@ (8001f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eca:	4b27      	ldr	r3, [pc, #156]	@ (8001f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ed6:	2330      	movs	r3, #48	@ 0x30
 8001ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	4619      	mov	r1, r3
 8001ef0:	481e      	ldr	r0, [pc, #120]	@ (8001f6c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001ef2:	f001 fc1f 	bl	8003734 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001ef6:	e030      	b.n	8001f5a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1c      	ldr	r2, [pc, #112]	@ (8001f70 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d12b      	bne.n	8001f5a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4b18      	ldr	r3, [pc, #96]	@ (8001f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	4a17      	ldr	r2, [pc, #92]	@ (8001f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f0c:	f043 0308 	orr.w	r3, r3, #8
 8001f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f12:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	4a10      	ldr	r2, [pc, #64]	@ (8001f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f46:	2300      	movs	r3, #0
 8001f48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 031c 	add.w	r3, r7, #28
 8001f52:	4619      	mov	r1, r3
 8001f54:	4807      	ldr	r0, [pc, #28]	@ (8001f74 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001f56:	f001 fbed 	bl	8003734 <HAL_GPIO_Init>
}
 8001f5a:	bf00      	nop
 8001f5c:	3730      	adds	r7, #48	@ 0x30
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40000400 	.word	0x40000400
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	40000c00 	.word	0x40000c00
 8001f74:	40020000 	.word	0x40020000

08001f78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	@ 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a37      	ldr	r2, [pc, #220]	@ (8002074 <HAL_TIM_MspPostInit+0xfc>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d11f      	bne.n	8001fda <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	4b36      	ldr	r3, [pc, #216]	@ (8002078 <HAL_TIM_MspPostInit+0x100>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	4a35      	ldr	r2, [pc, #212]	@ (8002078 <HAL_TIM_MspPostInit+0x100>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001faa:	4b33      	ldr	r3, [pc, #204]	@ (8002078 <HAL_TIM_MspPostInit+0x100>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001fb6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	482a      	ldr	r0, [pc, #168]	@ (800207c <HAL_TIM_MspPostInit+0x104>)
 8001fd4:	f001 fbae 	bl	8003734 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001fd8:	e047      	b.n	800206a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fe2:	d11f      	bne.n	8002024 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	4b23      	ldr	r3, [pc, #140]	@ (8002078 <HAL_TIM_MspPostInit+0x100>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fec:	4a22      	ldr	r2, [pc, #136]	@ (8002078 <HAL_TIM_MspPostInit+0x100>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff4:	4b20      	ldr	r3, [pc, #128]	@ (8002078 <HAL_TIM_MspPostInit+0x100>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002000:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200e:	2300      	movs	r3, #0
 8002010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002012:	2301      	movs	r3, #1
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4619      	mov	r1, r3
 800201c:	4817      	ldr	r0, [pc, #92]	@ (800207c <HAL_TIM_MspPostInit+0x104>)
 800201e:	f001 fb89 	bl	8003734 <HAL_GPIO_Init>
}
 8002022:	e022      	b.n	800206a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a15      	ldr	r2, [pc, #84]	@ (8002080 <HAL_TIM_MspPostInit+0x108>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d11d      	bne.n	800206a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <HAL_TIM_MspPostInit+0x100>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	4a10      	ldr	r2, [pc, #64]	@ (8002078 <HAL_TIM_MspPostInit+0x100>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	6313      	str	r3, [r2, #48]	@ 0x30
 800203e:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <HAL_TIM_MspPostInit+0x100>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800204a:	23c0      	movs	r3, #192	@ 0xc0
 800204c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2300      	movs	r3, #0
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800205a:	2302      	movs	r3, #2
 800205c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	4807      	ldr	r0, [pc, #28]	@ (8002084 <HAL_TIM_MspPostInit+0x10c>)
 8002066:	f001 fb65 	bl	8003734 <HAL_GPIO_Init>
}
 800206a:	bf00      	nop
 800206c:	3728      	adds	r7, #40	@ 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40010000 	.word	0x40010000
 8002078:	40023800 	.word	0x40023800
 800207c:	40020000 	.word	0x40020000
 8002080:	40000800 	.word	0x40000800
 8002084:	40020400 	.word	0x40020400

08002088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <NMI_Handler+0x4>

08002090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <HardFault_Handler+0x4>

08002098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <MemManage_Handler+0x4>

080020a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <BusFault_Handler+0x4>

080020a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <UsageFault_Handler+0x4>

080020b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020de:	f000 f8dd 	bl	800229c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80020ea:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80020ee:	f001 fcd7 	bl	8003aa0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80020f2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020f6:	f001 fcd3 	bl	8003aa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002104:	4802      	ldr	r0, [pc, #8]	@ (8002110 <DMA2_Stream0_IRQHandler+0x10>)
 8002106:	f001 f8ab 	bl	8003260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200002c8 	.word	0x200002c8

08002114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800211c:	4a14      	ldr	r2, [pc, #80]	@ (8002170 <_sbrk+0x5c>)
 800211e:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <_sbrk+0x60>)
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002128:	4b13      	ldr	r3, [pc, #76]	@ (8002178 <_sbrk+0x64>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d102      	bne.n	8002136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002130:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <_sbrk+0x64>)
 8002132:	4a12      	ldr	r2, [pc, #72]	@ (800217c <_sbrk+0x68>)
 8002134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002136:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <_sbrk+0x64>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	429a      	cmp	r2, r3
 8002142:	d207      	bcs.n	8002154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002144:	f003 fc66 	bl	8005a14 <__errno>
 8002148:	4603      	mov	r3, r0
 800214a:	220c      	movs	r2, #12
 800214c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800214e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002152:	e009      	b.n	8002168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002154:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <_sbrk+0x64>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800215a:	4b07      	ldr	r3, [pc, #28]	@ (8002178 <_sbrk+0x64>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	4a05      	ldr	r2, [pc, #20]	@ (8002178 <_sbrk+0x64>)
 8002164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002166:	68fb      	ldr	r3, [r7, #12]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20020000 	.word	0x20020000
 8002174:	00000400 	.word	0x00000400
 8002178:	200004e4 	.word	0x200004e4
 800217c:	20000638 	.word	0x20000638

08002180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002184:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <SystemInit+0x20>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218a:	4a05      	ldr	r2, [pc, #20]	@ (80021a0 <SystemInit+0x20>)
 800218c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002190:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021a8:	f7ff ffea 	bl	8002180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021ac:	480c      	ldr	r0, [pc, #48]	@ (80021e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ae:	490d      	ldr	r1, [pc, #52]	@ (80021e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021b0:	4a0d      	ldr	r2, [pc, #52]	@ (80021e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b4:	e002      	b.n	80021bc <LoopCopyDataInit>

080021b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ba:	3304      	adds	r3, #4

080021bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c0:	d3f9      	bcc.n	80021b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021c2:	4a0a      	ldr	r2, [pc, #40]	@ (80021ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021c4:	4c0a      	ldr	r4, [pc, #40]	@ (80021f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c8:	e001      	b.n	80021ce <LoopFillZerobss>

080021ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021cc:	3204      	adds	r2, #4

080021ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d0:	d3fb      	bcc.n	80021ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021d2:	f003 fc25 	bl	8005a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021d6:	f7fe fdcd 	bl	8000d74 <main>
  bx  lr    
 80021da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e4:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 80021e8:	08006414 	.word	0x08006414
  ldr r2, =_sbss
 80021ec:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 80021f0:	20000634 	.word	0x20000634

080021f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021f4:	e7fe      	b.n	80021f4 <ADC_IRQHandler>
	...

080021f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <HAL_Init+0x40>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0d      	ldr	r2, [pc, #52]	@ (8002238 <HAL_Init+0x40>)
 8002202:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002206:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002208:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <HAL_Init+0x40>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <HAL_Init+0x40>)
 800220e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002212:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002214:	4b08      	ldr	r3, [pc, #32]	@ (8002238 <HAL_Init+0x40>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a07      	ldr	r2, [pc, #28]	@ (8002238 <HAL_Init+0x40>)
 800221a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800221e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002220:	2003      	movs	r0, #3
 8002222:	f000 fed5 	bl	8002fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002226:	200f      	movs	r0, #15
 8002228:	f000 f808 	bl	800223c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800222c:	f7ff fcf2 	bl	8001c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40023c00 	.word	0x40023c00

0800223c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002244:	4b12      	ldr	r3, [pc, #72]	@ (8002290 <HAL_InitTick+0x54>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b12      	ldr	r3, [pc, #72]	@ (8002294 <HAL_InitTick+0x58>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002252:	fbb3 f3f1 	udiv	r3, r3, r1
 8002256:	fbb2 f3f3 	udiv	r3, r2, r3
 800225a:	4618      	mov	r0, r3
 800225c:	f000 feed 	bl	800303a <HAL_SYSTICK_Config>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e00e      	b.n	8002288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b0f      	cmp	r3, #15
 800226e:	d80a      	bhi.n	8002286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002270:	2200      	movs	r2, #0
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002278:	f000 feb5 	bl	8002fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800227c:	4a06      	ldr	r2, [pc, #24]	@ (8002298 <HAL_InitTick+0x5c>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	e000      	b.n	8002288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000200 	.word	0x20000200
 8002294:	20000208 	.word	0x20000208
 8002298:	20000204 	.word	0x20000204

0800229c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a0:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_IncTick+0x20>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <HAL_IncTick+0x24>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4413      	add	r3, r2
 80022ac:	4a04      	ldr	r2, [pc, #16]	@ (80022c0 <HAL_IncTick+0x24>)
 80022ae:	6013      	str	r3, [r2, #0]
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000208 	.word	0x20000208
 80022c0:	200004e8 	.word	0x200004e8

080022c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return uwTick;
 80022c8:	4b03      	ldr	r3, [pc, #12]	@ (80022d8 <HAL_GetTick+0x14>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	200004e8 	.word	0x200004e8

080022dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e4:	f7ff ffee 	bl	80022c4 <HAL_GetTick>
 80022e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022f4:	d005      	beq.n	8002302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002320 <HAL_Delay+0x44>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002302:	bf00      	nop
 8002304:	f7ff ffde 	bl	80022c4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	429a      	cmp	r2, r3
 8002312:	d8f7      	bhi.n	8002304 <HAL_Delay+0x28>
  {
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000208 	.word	0x20000208

08002324 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e033      	b.n	80023a2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d109      	bne.n	8002356 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff fc8e 	bl	8001c64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	d118      	bne.n	8002394 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800236a:	f023 0302 	bic.w	r3, r3, #2
 800236e:	f043 0202 	orr.w	r2, r3, #2
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fbdc 	bl	8002b34 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	f023 0303 	bic.w	r3, r3, #3
 800238a:	f043 0201 	orr.w	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	641a      	str	r2, [r3, #64]	@ 0x40
 8002392:	e001      	b.n	8002398 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_Start+0x1a>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e097      	b.n	80024f6 <HAL_ADC_Start+0x14a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d018      	beq.n	800240e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023ec:	4b45      	ldr	r3, [pc, #276]	@ (8002504 <HAL_ADC_Start+0x158>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a45      	ldr	r2, [pc, #276]	@ (8002508 <HAL_ADC_Start+0x15c>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	0c9a      	lsrs	r2, r3, #18
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002400:	e002      	b.n	8002408 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	3b01      	subs	r3, #1
 8002406:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f9      	bne.n	8002402 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b01      	cmp	r3, #1
 800241a:	d15f      	bne.n	80024dc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800243a:	2b00      	cmp	r3, #0
 800243c:	d007      	beq.n	800244e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002446:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800245a:	d106      	bne.n	800246a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002460:	f023 0206 	bic.w	r2, r3, #6
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	645a      	str	r2, [r3, #68]	@ 0x44
 8002468:	e002      	b.n	8002470 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002478:	4b24      	ldr	r3, [pc, #144]	@ (800250c <HAL_ADC_Start+0x160>)
 800247a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002484:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10f      	bne.n	80024b2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d129      	bne.n	80024f4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	e020      	b.n	80024f4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a16      	ldr	r2, [pc, #88]	@ (8002510 <HAL_ADC_Start+0x164>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d11b      	bne.n	80024f4 <HAL_ADC_Start+0x148>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d114      	bne.n	80024f4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	e00b      	b.n	80024f4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e0:	f043 0210 	orr.w	r2, r3, #16
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ec:	f043 0201 	orr.w	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000200 	.word	0x20000200
 8002508:	431bde83 	.word	0x431bde83
 800250c:	40012300 	.word	0x40012300
 8002510:	40012000 	.word	0x40012000

08002514 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_ADC_Stop+0x16>
 8002526:	2302      	movs	r3, #2
 8002528:	e021      	b.n	800256e <HAL_ADC_Stop+0x5a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0201 	bic.w	r2, r2, #1
 8002540:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d109      	bne.n	8002564 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002554:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002558:	f023 0301 	bic.w	r3, r3, #1
 800255c:	f043 0201 	orr.w	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002596:	d113      	bne.n	80025c0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025a6:	d10b      	bne.n	80025c0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ac:	f043 0220 	orr.w	r2, r3, #32
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e063      	b.n	8002688 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80025c0:	f7ff fe80 	bl	80022c4 <HAL_GetTick>
 80025c4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025c6:	e021      	b.n	800260c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025ce:	d01d      	beq.n	800260c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d007      	beq.n	80025e6 <HAL_ADC_PollForConversion+0x6c>
 80025d6:	f7ff fe75 	bl	80022c4 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d212      	bcs.n	800260c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d00b      	beq.n	800260c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	f043 0204 	orr.w	r2, r3, #4
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e03d      	b.n	8002688 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b02      	cmp	r3, #2
 8002618:	d1d6      	bne.n	80025c8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f06f 0212 	mvn.w	r2, #18
 8002622:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d123      	bne.n	8002686 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002642:	2b00      	cmp	r3, #0
 8002644:	d11f      	bne.n	8002686 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002650:	2b00      	cmp	r3, #0
 8002652:	d006      	beq.n	8002662 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800265e:	2b00      	cmp	r3, #0
 8002660:	d111      	bne.n	8002686 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d105      	bne.n	8002686 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f043 0201 	orr.w	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_Start_DMA+0x22>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e0d0      	b.n	8002854 <HAL_ADC_Start_DMA+0x1c4>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d018      	beq.n	80026fa <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026d8:	4b60      	ldr	r3, [pc, #384]	@ (800285c <HAL_ADC_Start_DMA+0x1cc>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a60      	ldr	r2, [pc, #384]	@ (8002860 <HAL_ADC_Start_DMA+0x1d0>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	0c9a      	lsrs	r2, r3, #18
 80026e4:	4613      	mov	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4413      	add	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80026ec:	e002      	b.n	80026f4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f9      	bne.n	80026ee <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002708:	d107      	bne.n	800271a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002718:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b01      	cmp	r3, #1
 8002726:	f040 8088 	bne.w	800283a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002732:	f023 0301 	bic.w	r3, r3, #1
 8002736:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002748:	2b00      	cmp	r3, #0
 800274a:	d007      	beq.n	800275c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002750:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002754:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002768:	d106      	bne.n	8002778 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276e:	f023 0206 	bic.w	r2, r3, #6
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	645a      	str	r2, [r3, #68]	@ 0x44
 8002776:	e002      	b.n	800277e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002786:	4b37      	ldr	r3, [pc, #220]	@ (8002864 <HAL_ADC_Start_DMA+0x1d4>)
 8002788:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800278e:	4a36      	ldr	r2, [pc, #216]	@ (8002868 <HAL_ADC_Start_DMA+0x1d8>)
 8002790:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002796:	4a35      	ldr	r2, [pc, #212]	@ (800286c <HAL_ADC_Start_DMA+0x1dc>)
 8002798:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800279e:	4a34      	ldr	r2, [pc, #208]	@ (8002870 <HAL_ADC_Start_DMA+0x1e0>)
 80027a0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80027aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80027ba:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027ca:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	334c      	adds	r3, #76	@ 0x4c
 80027d6:	4619      	mov	r1, r3
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f000 fce8 	bl	80031b0 <HAL_DMA_Start_IT>
 80027e0:	4603      	mov	r3, r0
 80027e2:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10f      	bne.n	8002810 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d129      	bne.n	8002852 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	e020      	b.n	8002852 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a17      	ldr	r2, [pc, #92]	@ (8002874 <HAL_ADC_Start_DMA+0x1e4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d11b      	bne.n	8002852 <HAL_ADC_Start_DMA+0x1c2>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d114      	bne.n	8002852 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	e00b      	b.n	8002852 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	f043 0210 	orr.w	r2, r3, #16
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284a:	f043 0201 	orr.w	r2, r3, #1
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002852:	7ffb      	ldrb	r3, [r7, #31]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3720      	adds	r7, #32
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20000200 	.word	0x20000200
 8002860:	431bde83 	.word	0x431bde83
 8002864:	40012300 	.word	0x40012300
 8002868:	08002d2d 	.word	0x08002d2d
 800286c:	08002de7 	.word	0x08002de7
 8002870:	08002e03 	.word	0x08002e03
 8002874:	40012000 	.word	0x40012000

08002878 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x1c>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e113      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x244>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b09      	cmp	r3, #9
 80028fa:	d925      	bls.n	8002948 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68d9      	ldr	r1, [r3, #12]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	4613      	mov	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	4413      	add	r3, r2
 8002910:	3b1e      	subs	r3, #30
 8002912:	2207      	movs	r2, #7
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43da      	mvns	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	400a      	ands	r2, r1
 8002920:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68d9      	ldr	r1, [r3, #12]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	4618      	mov	r0, r3
 8002934:	4603      	mov	r3, r0
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4403      	add	r3, r0
 800293a:	3b1e      	subs	r3, #30
 800293c:	409a      	lsls	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	e022      	b.n	800298e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6919      	ldr	r1, [r3, #16]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	2207      	movs	r2, #7
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43da      	mvns	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	400a      	ands	r2, r1
 800296a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6919      	ldr	r1, [r3, #16]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	b29b      	uxth	r3, r3
 800297c:	4618      	mov	r0, r3
 800297e:	4603      	mov	r3, r0
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4403      	add	r3, r0
 8002984:	409a      	lsls	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b06      	cmp	r3, #6
 8002994:	d824      	bhi.n	80029e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	3b05      	subs	r3, #5
 80029a8:	221f      	movs	r2, #31
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43da      	mvns	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	400a      	ands	r2, r1
 80029b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	4618      	mov	r0, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	3b05      	subs	r3, #5
 80029d2:	fa00 f203 	lsl.w	r2, r0, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80029de:	e04c      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b0c      	cmp	r3, #12
 80029e6:	d824      	bhi.n	8002a32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	3b23      	subs	r3, #35	@ 0x23
 80029fa:	221f      	movs	r2, #31
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43da      	mvns	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	400a      	ands	r2, r1
 8002a08:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	4618      	mov	r0, r3
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	3b23      	subs	r3, #35	@ 0x23
 8002a24:	fa00 f203 	lsl.w	r2, r0, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a30:	e023      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	3b41      	subs	r3, #65	@ 0x41
 8002a44:	221f      	movs	r2, #31
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	400a      	ands	r2, r1
 8002a52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	4618      	mov	r0, r3
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3b41      	subs	r3, #65	@ 0x41
 8002a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a7a:	4b29      	ldr	r3, [pc, #164]	@ (8002b20 <HAL_ADC_ConfigChannel+0x250>)
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a28      	ldr	r2, [pc, #160]	@ (8002b24 <HAL_ADC_ConfigChannel+0x254>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d10f      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x1d8>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b12      	cmp	r3, #18
 8002a8e:	d10b      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1d      	ldr	r2, [pc, #116]	@ (8002b24 <HAL_ADC_ConfigChannel+0x254>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d12b      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x23a>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b28 <HAL_ADC_ConfigChannel+0x258>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d003      	beq.n	8002ac4 <HAL_ADC_ConfigChannel+0x1f4>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b11      	cmp	r3, #17
 8002ac2:	d122      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a11      	ldr	r2, [pc, #68]	@ (8002b28 <HAL_ADC_ConfigChannel+0x258>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d111      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ae6:	4b11      	ldr	r3, [pc, #68]	@ (8002b2c <HAL_ADC_ConfigChannel+0x25c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a11      	ldr	r2, [pc, #68]	@ (8002b30 <HAL_ADC_ConfigChannel+0x260>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	0c9a      	lsrs	r2, r3, #18
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002afc:	e002      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f9      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40012300 	.word	0x40012300
 8002b24:	40012000 	.word	0x40012000
 8002b28:	10000012 	.word	0x10000012
 8002b2c:	20000200 	.word	0x20000200
 8002b30:	431bde83 	.word	0x431bde83

08002b34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b3c:	4b79      	ldr	r3, [pc, #484]	@ (8002d24 <ADC_Init+0x1f0>)
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	021a      	lsls	r2, r3, #8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002b8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6899      	ldr	r1, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc6:	4a58      	ldr	r2, [pc, #352]	@ (8002d28 <ADC_Init+0x1f4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d022      	beq.n	8002c12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002bda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6899      	ldr	r1, [r3, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002bfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6899      	ldr	r1, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	e00f      	b.n	8002c32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c30:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0202 	bic.w	r2, r2, #2
 8002c40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6899      	ldr	r1, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	7e1b      	ldrb	r3, [r3, #24]
 8002c4c:	005a      	lsls	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01b      	beq.n	8002c98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c6e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002c7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6859      	ldr	r1, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	035a      	lsls	r2, r3, #13
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	e007      	b.n	8002ca8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ca6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	051a      	lsls	r2, r3, #20
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002cdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6899      	ldr	r1, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002cea:	025a      	lsls	r2, r3, #9
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6899      	ldr	r1, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	029a      	lsls	r2, r3, #10
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	609a      	str	r2, [r3, #8]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	40012300 	.word	0x40012300
 8002d28:	0f000001 	.word	0x0f000001

08002d2c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d38:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d13c      	bne.n	8002dc0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d12b      	bne.n	8002db8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d127      	bne.n	8002db8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d006      	beq.n	8002d84 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d119      	bne.n	8002db8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0220 	bic.w	r2, r2, #32
 8002d92:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d105      	bne.n	8002db8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db0:	f043 0201 	orr.w	r2, r3, #1
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f7ff fd6a 	bl	8002892 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dbe:	e00e      	b.n	8002dde <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7ff fd74 	bl	80028ba <HAL_ADC_ErrorCallback>
}
 8002dd2:	e004      	b.n	8002dde <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	4798      	blx	r3
}
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f7ff fd56 	bl	80028a6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b084      	sub	sp, #16
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2240      	movs	r2, #64	@ 0x40
 8002e14:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1a:	f043 0204 	orr.w	r2, r3, #4
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f7ff fd49 	bl	80028ba <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e28:	bf00      	nop
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e40:	4b0c      	ldr	r3, [pc, #48]	@ (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e62:	4a04      	ldr	r2, [pc, #16]	@ (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	60d3      	str	r3, [r2, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e7c:	4b04      	ldr	r3, [pc, #16]	@ (8002e90 <__NVIC_GetPriorityGrouping+0x18>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	f003 0307 	and.w	r3, r3, #7
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	db0b      	blt.n	8002ebe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	f003 021f 	and.w	r2, r3, #31
 8002eac:	4907      	ldr	r1, [pc, #28]	@ (8002ecc <__NVIC_EnableIRQ+0x38>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000e100 	.word	0xe000e100

08002ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	6039      	str	r1, [r7, #0]
 8002eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	db0a      	blt.n	8002efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	490c      	ldr	r1, [pc, #48]	@ (8002f1c <__NVIC_SetPriority+0x4c>)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	0112      	lsls	r2, r2, #4
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef8:	e00a      	b.n	8002f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	4908      	ldr	r1, [pc, #32]	@ (8002f20 <__NVIC_SetPriority+0x50>)
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	3b04      	subs	r3, #4
 8002f08:	0112      	lsls	r2, r2, #4
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	761a      	strb	r2, [r3, #24]
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000e100 	.word	0xe000e100
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b089      	sub	sp, #36	@ 0x24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f1c3 0307 	rsb	r3, r3, #7
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	bf28      	it	cs
 8002f42:	2304      	movcs	r3, #4
 8002f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	2b06      	cmp	r3, #6
 8002f4c:	d902      	bls.n	8002f54 <NVIC_EncodePriority+0x30>
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3b03      	subs	r3, #3
 8002f52:	e000      	b.n	8002f56 <NVIC_EncodePriority+0x32>
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43da      	mvns	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	401a      	ands	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	43d9      	mvns	r1, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f7c:	4313      	orrs	r3, r2
         );
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3724      	adds	r7, #36	@ 0x24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f9c:	d301      	bcc.n	8002fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e00f      	b.n	8002fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8002fcc <SysTick_Config+0x40>)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002faa:	210f      	movs	r1, #15
 8002fac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fb0:	f7ff ff8e 	bl	8002ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fb4:	4b05      	ldr	r3, [pc, #20]	@ (8002fcc <SysTick_Config+0x40>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fba:	4b04      	ldr	r3, [pc, #16]	@ (8002fcc <SysTick_Config+0x40>)
 8002fbc:	2207      	movs	r2, #7
 8002fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	e000e010 	.word	0xe000e010

08002fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff ff29 	bl	8002e30 <__NVIC_SetPriorityGrouping>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b086      	sub	sp, #24
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	4603      	mov	r3, r0
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff8:	f7ff ff3e 	bl	8002e78 <__NVIC_GetPriorityGrouping>
 8002ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	68b9      	ldr	r1, [r7, #8]
 8003002:	6978      	ldr	r0, [r7, #20]
 8003004:	f7ff ff8e 	bl	8002f24 <NVIC_EncodePriority>
 8003008:	4602      	mov	r2, r0
 800300a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff ff5d 	bl	8002ed0 <__NVIC_SetPriority>
}
 8003016:	bf00      	nop
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	4603      	mov	r3, r0
 8003026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff31 	bl	8002e94 <__NVIC_EnableIRQ>
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff ffa2 	bl	8002f8c <SysTick_Config>
 8003048:	4603      	mov	r3, r0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003060:	f7ff f930 	bl	80022c4 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e099      	b.n	80031a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0201 	bic.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003090:	e00f      	b.n	80030b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003092:	f7ff f917 	bl	80022c4 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b05      	cmp	r3, #5
 800309e:	d908      	bls.n	80030b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2203      	movs	r2, #3
 80030aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e078      	b.n	80031a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e8      	bne.n	8003092 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4b38      	ldr	r3, [pc, #224]	@ (80031ac <HAL_DMA_Init+0x158>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	2b04      	cmp	r3, #4
 800310a:	d107      	bne.n	800311c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003114:	4313      	orrs	r3, r2
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f023 0307 	bic.w	r3, r3, #7
 8003132:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	4313      	orrs	r3, r2
 800313c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003142:	2b04      	cmp	r3, #4
 8003144:	d117      	bne.n	8003176 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	4313      	orrs	r3, r2
 800314e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00e      	beq.n	8003176 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fa6f 	bl	800363c <DMA_CheckFifoParam>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2240      	movs	r2, #64	@ 0x40
 8003168:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003172:	2301      	movs	r3, #1
 8003174:	e016      	b.n	80031a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fa26 	bl	80035d0 <DMA_CalcBaseAndBitshift>
 8003184:	4603      	mov	r3, r0
 8003186:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318c:	223f      	movs	r2, #63	@ 0x3f
 800318e:	409a      	lsls	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	f010803f 	.word	0xf010803f

080031b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_DMA_Start_IT+0x26>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e040      	b.n	8003258 <HAL_DMA_Start_IT+0xa8>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d12f      	bne.n	800324a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2202      	movs	r2, #2
 80031ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f9b8 	bl	8003574 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003208:	223f      	movs	r2, #63	@ 0x3f
 800320a:	409a      	lsls	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0216 	orr.w	r2, r2, #22
 800321e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003224:	2b00      	cmp	r3, #0
 8003226:	d007      	beq.n	8003238 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0208 	orr.w	r2, r2, #8
 8003236:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	e005      	b.n	8003256 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003252:	2302      	movs	r3, #2
 8003254:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003256:	7dfb      	ldrb	r3, [r7, #23]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800326c:	4b8e      	ldr	r3, [pc, #568]	@ (80034a8 <HAL_DMA_IRQHandler+0x248>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a8e      	ldr	r2, [pc, #568]	@ (80034ac <HAL_DMA_IRQHandler+0x24c>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	0a9b      	lsrs	r3, r3, #10
 8003278:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328a:	2208      	movs	r2, #8
 800328c:	409a      	lsls	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d01a      	beq.n	80032cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d013      	beq.n	80032cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0204 	bic.w	r2, r2, #4
 80032b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b8:	2208      	movs	r2, #8
 80032ba:	409a      	lsls	r2, r3
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c4:	f043 0201 	orr.w	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d0:	2201      	movs	r2, #1
 80032d2:	409a      	lsls	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d012      	beq.n	8003302 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00b      	beq.n	8003302 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ee:	2201      	movs	r2, #1
 80032f0:	409a      	lsls	r2, r3
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fa:	f043 0202 	orr.w	r2, r3, #2
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003306:	2204      	movs	r2, #4
 8003308:	409a      	lsls	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4013      	ands	r3, r2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d012      	beq.n	8003338 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00b      	beq.n	8003338 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003324:	2204      	movs	r2, #4
 8003326:	409a      	lsls	r2, r3
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003330:	f043 0204 	orr.w	r2, r3, #4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333c:	2210      	movs	r2, #16
 800333e:	409a      	lsls	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d043      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d03c      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335a:	2210      	movs	r2, #16
 800335c:	409a      	lsls	r2, r3
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d018      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d108      	bne.n	8003390 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d024      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	4798      	blx	r3
 800338e:	e01f      	b.n	80033d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01b      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	4798      	blx	r3
 80033a0:	e016      	b.n	80033d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d107      	bne.n	80033c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0208 	bic.w	r2, r2, #8
 80033be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d4:	2220      	movs	r2, #32
 80033d6:	409a      	lsls	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 808f 	beq.w	8003500 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8087 	beq.w	8003500 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f6:	2220      	movs	r2, #32
 80033f8:	409a      	lsls	r2, r3
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b05      	cmp	r3, #5
 8003408:	d136      	bne.n	8003478 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0216 	bic.w	r2, r2, #22
 8003418:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003428:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d103      	bne.n	800343a <HAL_DMA_IRQHandler+0x1da>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0208 	bic.w	r2, r2, #8
 8003448:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344e:	223f      	movs	r2, #63	@ 0x3f
 8003450:	409a      	lsls	r2, r3
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800346a:	2b00      	cmp	r3, #0
 800346c:	d07e      	beq.n	800356c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	4798      	blx	r3
        }
        return;
 8003476:	e079      	b.n	800356c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01d      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10d      	bne.n	80034b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003498:	2b00      	cmp	r3, #0
 800349a:	d031      	beq.n	8003500 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4798      	blx	r3
 80034a4:	e02c      	b.n	8003500 <HAL_DMA_IRQHandler+0x2a0>
 80034a6:	bf00      	nop
 80034a8:	20000200 	.word	0x20000200
 80034ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d023      	beq.n	8003500 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	4798      	blx	r3
 80034c0:	e01e      	b.n	8003500 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10f      	bne.n	80034f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0210 	bic.w	r2, r2, #16
 80034de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003504:	2b00      	cmp	r3, #0
 8003506:	d032      	beq.n	800356e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d022      	beq.n	800355a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2205      	movs	r2, #5
 8003518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	3301      	adds	r3, #1
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	429a      	cmp	r2, r3
 8003536:	d307      	bcc.n	8003548 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f2      	bne.n	800352c <HAL_DMA_IRQHandler+0x2cc>
 8003546:	e000      	b.n	800354a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003548:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	4798      	blx	r3
 800356a:	e000      	b.n	800356e <HAL_DMA_IRQHandler+0x30e>
        return;
 800356c:	bf00      	nop
    }
  }
}
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003590:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b40      	cmp	r3, #64	@ 0x40
 80035a0:	d108      	bne.n	80035b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035b2:	e007      	b.n	80035c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	60da      	str	r2, [r3, #12]
}
 80035c4:	bf00      	nop
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	3b10      	subs	r3, #16
 80035e0:	4a14      	ldr	r2, [pc, #80]	@ (8003634 <DMA_CalcBaseAndBitshift+0x64>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	091b      	lsrs	r3, r3, #4
 80035e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035ea:	4a13      	ldr	r2, [pc, #76]	@ (8003638 <DMA_CalcBaseAndBitshift+0x68>)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d909      	bls.n	8003612 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003606:	f023 0303 	bic.w	r3, r3, #3
 800360a:	1d1a      	adds	r2, r3, #4
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003610:	e007      	b.n	8003622 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800361a:	f023 0303 	bic.w	r3, r3, #3
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	aaaaaaab 	.word	0xaaaaaaab
 8003638:	080063c8 	.word	0x080063c8

0800363c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d11f      	bne.n	8003696 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b03      	cmp	r3, #3
 800365a:	d856      	bhi.n	800370a <DMA_CheckFifoParam+0xce>
 800365c:	a201      	add	r2, pc, #4	@ (adr r2, 8003664 <DMA_CheckFifoParam+0x28>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	08003675 	.word	0x08003675
 8003668:	08003687 	.word	0x08003687
 800366c:	08003675 	.word	0x08003675
 8003670:	0800370b 	.word	0x0800370b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003678:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d046      	beq.n	800370e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003684:	e043      	b.n	800370e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800368e:	d140      	bne.n	8003712 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003694:	e03d      	b.n	8003712 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800369e:	d121      	bne.n	80036e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d837      	bhi.n	8003716 <DMA_CheckFifoParam+0xda>
 80036a6:	a201      	add	r2, pc, #4	@ (adr r2, 80036ac <DMA_CheckFifoParam+0x70>)
 80036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ac:	080036bd 	.word	0x080036bd
 80036b0:	080036c3 	.word	0x080036c3
 80036b4:	080036bd 	.word	0x080036bd
 80036b8:	080036d5 	.word	0x080036d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
      break;
 80036c0:	e030      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d025      	beq.n	800371a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d2:	e022      	b.n	800371a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036dc:	d11f      	bne.n	800371e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036e2:	e01c      	b.n	800371e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d903      	bls.n	80036f2 <DMA_CheckFifoParam+0xb6>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d003      	beq.n	80036f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036f0:	e018      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
      break;
 80036f6:	e015      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00e      	beq.n	8003722 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
      break;
 8003708:	e00b      	b.n	8003722 <DMA_CheckFifoParam+0xe6>
      break;
 800370a:	bf00      	nop
 800370c:	e00a      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 800370e:	bf00      	nop
 8003710:	e008      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 8003712:	bf00      	nop
 8003714:	e006      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 8003716:	bf00      	nop
 8003718:	e004      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 800371a:	bf00      	nop
 800371c:	e002      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;   
 800371e:	bf00      	nop
 8003720:	e000      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 8003722:	bf00      	nop
    }
  } 
  
  return status; 
 8003724:	7bfb      	ldrb	r3, [r7, #15]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop

08003734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003734:	b480      	push	{r7}
 8003736:	b089      	sub	sp, #36	@ 0x24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
 800374e:	e159      	b.n	8003a04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003750:	2201      	movs	r2, #1
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4013      	ands	r3, r2
 8003762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	429a      	cmp	r2, r3
 800376a:	f040 8148 	bne.w	80039fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b01      	cmp	r3, #1
 8003778:	d005      	beq.n	8003786 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003782:	2b02      	cmp	r3, #2
 8003784:	d130      	bne.n	80037e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	2203      	movs	r2, #3
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037bc:	2201      	movs	r2, #1
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 0201 	and.w	r2, r3, #1
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d017      	beq.n	8003824 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	2203      	movs	r2, #3
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d123      	bne.n	8003878 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	08da      	lsrs	r2, r3, #3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3208      	adds	r2, #8
 8003838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800383c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	220f      	movs	r2, #15
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	08da      	lsrs	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3208      	adds	r2, #8
 8003872:	69b9      	ldr	r1, [r7, #24]
 8003874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	2203      	movs	r2, #3
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4013      	ands	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0203 	and.w	r2, r3, #3
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80a2 	beq.w	80039fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	4b57      	ldr	r3, [pc, #348]	@ (8003a1c <HAL_GPIO_Init+0x2e8>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c2:	4a56      	ldr	r2, [pc, #344]	@ (8003a1c <HAL_GPIO_Init+0x2e8>)
 80038c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ca:	4b54      	ldr	r3, [pc, #336]	@ (8003a1c <HAL_GPIO_Init+0x2e8>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038d6:	4a52      	ldr	r2, [pc, #328]	@ (8003a20 <HAL_GPIO_Init+0x2ec>)
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	3302      	adds	r3, #2
 80038de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	220f      	movs	r2, #15
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4013      	ands	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a49      	ldr	r2, [pc, #292]	@ (8003a24 <HAL_GPIO_Init+0x2f0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d019      	beq.n	8003936 <HAL_GPIO_Init+0x202>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a48      	ldr	r2, [pc, #288]	@ (8003a28 <HAL_GPIO_Init+0x2f4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <HAL_GPIO_Init+0x1fe>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a47      	ldr	r2, [pc, #284]	@ (8003a2c <HAL_GPIO_Init+0x2f8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00d      	beq.n	800392e <HAL_GPIO_Init+0x1fa>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a46      	ldr	r2, [pc, #280]	@ (8003a30 <HAL_GPIO_Init+0x2fc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d007      	beq.n	800392a <HAL_GPIO_Init+0x1f6>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a45      	ldr	r2, [pc, #276]	@ (8003a34 <HAL_GPIO_Init+0x300>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d101      	bne.n	8003926 <HAL_GPIO_Init+0x1f2>
 8003922:	2304      	movs	r3, #4
 8003924:	e008      	b.n	8003938 <HAL_GPIO_Init+0x204>
 8003926:	2307      	movs	r3, #7
 8003928:	e006      	b.n	8003938 <HAL_GPIO_Init+0x204>
 800392a:	2303      	movs	r3, #3
 800392c:	e004      	b.n	8003938 <HAL_GPIO_Init+0x204>
 800392e:	2302      	movs	r3, #2
 8003930:	e002      	b.n	8003938 <HAL_GPIO_Init+0x204>
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <HAL_GPIO_Init+0x204>
 8003936:	2300      	movs	r3, #0
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	f002 0203 	and.w	r2, r2, #3
 800393e:	0092      	lsls	r2, r2, #2
 8003940:	4093      	lsls	r3, r2
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003948:	4935      	ldr	r1, [pc, #212]	@ (8003a20 <HAL_GPIO_Init+0x2ec>)
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	089b      	lsrs	r3, r3, #2
 800394e:	3302      	adds	r3, #2
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003956:	4b38      	ldr	r3, [pc, #224]	@ (8003a38 <HAL_GPIO_Init+0x304>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800397a:	4a2f      	ldr	r2, [pc, #188]	@ (8003a38 <HAL_GPIO_Init+0x304>)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003980:	4b2d      	ldr	r3, [pc, #180]	@ (8003a38 <HAL_GPIO_Init+0x304>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039a4:	4a24      	ldr	r2, [pc, #144]	@ (8003a38 <HAL_GPIO_Init+0x304>)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039aa:	4b23      	ldr	r3, [pc, #140]	@ (8003a38 <HAL_GPIO_Init+0x304>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003a38 <HAL_GPIO_Init+0x304>)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039d4:	4b18      	ldr	r3, [pc, #96]	@ (8003a38 <HAL_GPIO_Init+0x304>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	43db      	mvns	r3, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003a38 <HAL_GPIO_Init+0x304>)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3301      	adds	r3, #1
 8003a02:	61fb      	str	r3, [r7, #28]
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	2b0f      	cmp	r3, #15
 8003a08:	f67f aea2 	bls.w	8003750 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	3724      	adds	r7, #36	@ 0x24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40013800 	.word	0x40013800
 8003a24:	40020000 	.word	0x40020000
 8003a28:	40020400 	.word	0x40020400
 8003a2c:	40020800 	.word	0x40020800
 8003a30:	40020c00 	.word	0x40020c00
 8003a34:	40021000 	.word	0x40021000
 8003a38:	40013c00 	.word	0x40013c00

08003a3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	887b      	ldrh	r3, [r7, #2]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
 8003a58:	e001      	b.n	8003a5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	807b      	strh	r3, [r7, #2]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a7c:	787b      	ldrb	r3, [r7, #1]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a82:	887a      	ldrh	r2, [r7, #2]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a88:	e003      	b.n	8003a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a8a:	887b      	ldrh	r3, [r7, #2]
 8003a8c:	041a      	lsls	r2, r3, #16
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	619a      	str	r2, [r3, #24]
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
	...

08003aa0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003aaa:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d006      	beq.n	8003ac4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ab6:	4a05      	ldr	r2, [pc, #20]	@ (8003acc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fd fdbe 	bl	8001640 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40013c00 	.word	0x40013c00

08003ad0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e12b      	b.n	8003d3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fe f92c 	bl	8001d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2224      	movs	r2, #36	@ 0x24
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0201 	bic.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b34:	f001 f89a 	bl	8004c6c <HAL_RCC_GetPCLK1Freq>
 8003b38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4a81      	ldr	r2, [pc, #516]	@ (8003d44 <HAL_I2C_Init+0x274>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d807      	bhi.n	8003b54 <HAL_I2C_Init+0x84>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4a80      	ldr	r2, [pc, #512]	@ (8003d48 <HAL_I2C_Init+0x278>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	bf94      	ite	ls
 8003b4c:	2301      	movls	r3, #1
 8003b4e:	2300      	movhi	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	e006      	b.n	8003b62 <HAL_I2C_Init+0x92>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4a7d      	ldr	r2, [pc, #500]	@ (8003d4c <HAL_I2C_Init+0x27c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	bf94      	ite	ls
 8003b5c:	2301      	movls	r3, #1
 8003b5e:	2300      	movhi	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e0e7      	b.n	8003d3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4a78      	ldr	r2, [pc, #480]	@ (8003d50 <HAL_I2C_Init+0x280>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	0c9b      	lsrs	r3, r3, #18
 8003b74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	4a6a      	ldr	r2, [pc, #424]	@ (8003d44 <HAL_I2C_Init+0x274>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d802      	bhi.n	8003ba4 <HAL_I2C_Init+0xd4>
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	e009      	b.n	8003bb8 <HAL_I2C_Init+0xe8>
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003baa:	fb02 f303 	mul.w	r3, r2, r3
 8003bae:	4a69      	ldr	r2, [pc, #420]	@ (8003d54 <HAL_I2C_Init+0x284>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	099b      	lsrs	r3, r3, #6
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	495c      	ldr	r1, [pc, #368]	@ (8003d44 <HAL_I2C_Init+0x274>)
 8003bd4:	428b      	cmp	r3, r1
 8003bd6:	d819      	bhi.n	8003c0c <HAL_I2C_Init+0x13c>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1e59      	subs	r1, r3, #1
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003be6:	1c59      	adds	r1, r3, #1
 8003be8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003bec:	400b      	ands	r3, r1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_I2C_Init+0x138>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1e59      	subs	r1, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c00:	3301      	adds	r3, #1
 8003c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c06:	e051      	b.n	8003cac <HAL_I2C_Init+0x1dc>
 8003c08:	2304      	movs	r3, #4
 8003c0a:	e04f      	b.n	8003cac <HAL_I2C_Init+0x1dc>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d111      	bne.n	8003c38 <HAL_I2C_Init+0x168>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	1e58      	subs	r0, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6859      	ldr	r1, [r3, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	440b      	add	r3, r1
 8003c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c26:	3301      	adds	r3, #1
 8003c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bf0c      	ite	eq
 8003c30:	2301      	moveq	r3, #1
 8003c32:	2300      	movne	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	e012      	b.n	8003c5e <HAL_I2C_Init+0x18e>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	1e58      	subs	r0, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6859      	ldr	r1, [r3, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	0099      	lsls	r1, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bf0c      	ite	eq
 8003c58:	2301      	moveq	r3, #1
 8003c5a:	2300      	movne	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_I2C_Init+0x196>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e022      	b.n	8003cac <HAL_I2C_Init+0x1dc>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10e      	bne.n	8003c8c <HAL_I2C_Init+0x1bc>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	1e58      	subs	r0, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6859      	ldr	r1, [r3, #4]
 8003c76:	460b      	mov	r3, r1
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	440b      	add	r3, r1
 8003c7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c80:	3301      	adds	r3, #1
 8003c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c8a:	e00f      	b.n	8003cac <HAL_I2C_Init+0x1dc>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1e58      	subs	r0, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6859      	ldr	r1, [r3, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	0099      	lsls	r1, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	6809      	ldr	r1, [r1, #0]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69da      	ldr	r2, [r3, #28]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003cda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6911      	ldr	r1, [r2, #16]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	68d2      	ldr	r2, [r2, #12]
 8003ce6:	4311      	orrs	r1, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	430b      	orrs	r3, r1
 8003cee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	695a      	ldr	r2, [r3, #20]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	000186a0 	.word	0x000186a0
 8003d48:	001e847f 	.word	0x001e847f
 8003d4c:	003d08ff 	.word	0x003d08ff
 8003d50:	431bde83 	.word	0x431bde83
 8003d54:	10624dd3 	.word	0x10624dd3

08003d58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	461a      	mov	r2, r3
 8003d64:	460b      	mov	r3, r1
 8003d66:	817b      	strh	r3, [r7, #10]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d6c:	f7fe faaa 	bl	80022c4 <HAL_GetTick>
 8003d70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	f040 80e0 	bne.w	8003f40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	2319      	movs	r3, #25
 8003d86:	2201      	movs	r2, #1
 8003d88:	4970      	ldr	r1, [pc, #448]	@ (8003f4c <HAL_I2C_Master_Transmit+0x1f4>)
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f964 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d96:	2302      	movs	r3, #2
 8003d98:	e0d3      	b.n	8003f42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_I2C_Master_Transmit+0x50>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e0cc      	b.n	8003f42 <HAL_I2C_Master_Transmit+0x1ea>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d007      	beq.n	8003dce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0201 	orr.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ddc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2221      	movs	r2, #33	@ 0x21
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2210      	movs	r2, #16
 8003dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	893a      	ldrh	r2, [r7, #8]
 8003dfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4a50      	ldr	r2, [pc, #320]	@ (8003f50 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e10:	8979      	ldrh	r1, [r7, #10]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	6a3a      	ldr	r2, [r7, #32]
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f89c 	bl	8003f54 <I2C_MasterRequestWrite>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e08d      	b.n	8003f42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e3c:	e066      	b.n	8003f0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	6a39      	ldr	r1, [r7, #32]
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 fa22 	bl	800428c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00d      	beq.n	8003e6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d107      	bne.n	8003e66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e06b      	b.n	8003f42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6e:	781a      	ldrb	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d11b      	bne.n	8003ee0 <HAL_I2C_Master_Transmit+0x188>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d017      	beq.n	8003ee0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	781a      	ldrb	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	6a39      	ldr	r1, [r7, #32]
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 fa19 	bl	800431c <I2C_WaitOnBTFFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00d      	beq.n	8003f0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d107      	bne.n	8003f08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e01a      	b.n	8003f42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d194      	bne.n	8003e3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e000      	b.n	8003f42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f40:	2302      	movs	r3, #2
  }
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	00100002 	.word	0x00100002
 8003f50:	ffff0000 	.word	0xffff0000

08003f54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	607a      	str	r2, [r7, #4]
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	460b      	mov	r3, r1
 8003f62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d006      	beq.n	8003f7e <I2C_MasterRequestWrite+0x2a>
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d003      	beq.n	8003f7e <I2C_MasterRequestWrite+0x2a>
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f7c:	d108      	bne.n	8003f90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e00b      	b.n	8003fa8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f94:	2b12      	cmp	r3, #18
 8003f96:	d107      	bne.n	8003fa8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fa6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f84f 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00d      	beq.n	8003fdc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fce:	d103      	bne.n	8003fd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fd6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e035      	b.n	8004048 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fe4:	d108      	bne.n	8003ff8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fe6:	897b      	ldrh	r3, [r7, #10]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ff4:	611a      	str	r2, [r3, #16]
 8003ff6:	e01b      	b.n	8004030 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ff8:	897b      	ldrh	r3, [r7, #10]
 8003ffa:	11db      	asrs	r3, r3, #7
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f003 0306 	and.w	r3, r3, #6
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f063 030f 	orn	r3, r3, #15
 8004008:	b2da      	uxtb	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	490e      	ldr	r1, [pc, #56]	@ (8004050 <I2C_MasterRequestWrite+0xfc>)
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f898 	bl	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e010      	b.n	8004048 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004026:	897b      	ldrh	r3, [r7, #10]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4907      	ldr	r1, [pc, #28]	@ (8004054 <I2C_MasterRequestWrite+0x100>)
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f888 	bl	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	00010008 	.word	0x00010008
 8004054:	00010002 	.word	0x00010002

08004058 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	4613      	mov	r3, r2
 8004066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004068:	e048      	b.n	80040fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004070:	d044      	beq.n	80040fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004072:	f7fe f927 	bl	80022c4 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d302      	bcc.n	8004088 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d139      	bne.n	80040fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	0c1b      	lsrs	r3, r3, #16
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b01      	cmp	r3, #1
 8004090:	d10d      	bne.n	80040ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	43da      	mvns	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	4013      	ands	r3, r2
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	461a      	mov	r2, r3
 80040ac:	e00c      	b.n	80040c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	43da      	mvns	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4013      	ands	r3, r2
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	bf0c      	ite	eq
 80040c0:	2301      	moveq	r3, #1
 80040c2:	2300      	movne	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d116      	bne.n	80040fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e8:	f043 0220 	orr.w	r2, r3, #32
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e023      	b.n	8004144 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	0c1b      	lsrs	r3, r3, #16
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b01      	cmp	r3, #1
 8004104:	d10d      	bne.n	8004122 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	43da      	mvns	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	4013      	ands	r3, r2
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf0c      	ite	eq
 8004118:	2301      	moveq	r3, #1
 800411a:	2300      	movne	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	e00c      	b.n	800413c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	43da      	mvns	r2, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	4013      	ands	r3, r2
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	bf0c      	ite	eq
 8004134:	2301      	moveq	r3, #1
 8004136:	2300      	movne	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	461a      	mov	r2, r3
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	429a      	cmp	r2, r3
 8004140:	d093      	beq.n	800406a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800415a:	e071      	b.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800416a:	d123      	bne.n	80041b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800417a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004184:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a0:	f043 0204 	orr.w	r2, r3, #4
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e067      	b.n	8004284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041ba:	d041      	beq.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041bc:	f7fe f882 	bl	80022c4 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d302      	bcc.n	80041d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d136      	bne.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	0c1b      	lsrs	r3, r3, #16
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d10c      	bne.n	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	43da      	mvns	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4013      	ands	r3, r2
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bf14      	ite	ne
 80041ee:	2301      	movne	r3, #1
 80041f0:	2300      	moveq	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	e00b      	b.n	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	43da      	mvns	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	4013      	ands	r3, r2
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d016      	beq.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422c:	f043 0220 	orr.w	r2, r3, #32
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e021      	b.n	8004284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	0c1b      	lsrs	r3, r3, #16
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b01      	cmp	r3, #1
 8004248:	d10c      	bne.n	8004264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	43da      	mvns	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	4013      	ands	r3, r2
 8004256:	b29b      	uxth	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	bf14      	ite	ne
 800425c:	2301      	movne	r3, #1
 800425e:	2300      	moveq	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	e00b      	b.n	800427c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	43da      	mvns	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4013      	ands	r3, r2
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	bf14      	ite	ne
 8004276:	2301      	movne	r3, #1
 8004278:	2300      	moveq	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	f47f af6d 	bne.w	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004298:	e034      	b.n	8004304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f886 	bl	80043ac <I2C_IsAcknowledgeFailed>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e034      	b.n	8004314 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042b0:	d028      	beq.n	8004304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b2:	f7fe f807 	bl	80022c4 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d302      	bcc.n	80042c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d11d      	bne.n	8004304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d2:	2b80      	cmp	r3, #128	@ 0x80
 80042d4:	d016      	beq.n	8004304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f0:	f043 0220 	orr.w	r2, r3, #32
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e007      	b.n	8004314 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800430e:	2b80      	cmp	r3, #128	@ 0x80
 8004310:	d1c3      	bne.n	800429a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004328:	e034      	b.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f83e 	bl	80043ac <I2C_IsAcknowledgeFailed>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e034      	b.n	80043a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004340:	d028      	beq.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004342:	f7fd ffbf 	bl	80022c4 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	429a      	cmp	r2, r3
 8004350:	d302      	bcc.n	8004358 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d11d      	bne.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b04      	cmp	r3, #4
 8004364:	d016      	beq.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004380:	f043 0220 	orr.w	r2, r3, #32
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e007      	b.n	80043a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d1c3      	bne.n	800432a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c2:	d11b      	bne.n	80043fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e8:	f043 0204 	orr.w	r2, r3, #4
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e267      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d075      	beq.n	8004516 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800442a:	4b88      	ldr	r3, [pc, #544]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b04      	cmp	r3, #4
 8004434:	d00c      	beq.n	8004450 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004436:	4b85      	ldr	r3, [pc, #532]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800443e:	2b08      	cmp	r3, #8
 8004440:	d112      	bne.n	8004468 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004442:	4b82      	ldr	r3, [pc, #520]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800444a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800444e:	d10b      	bne.n	8004468 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004450:	4b7e      	ldr	r3, [pc, #504]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d05b      	beq.n	8004514 <HAL_RCC_OscConfig+0x108>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d157      	bne.n	8004514 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e242      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004470:	d106      	bne.n	8004480 <HAL_RCC_OscConfig+0x74>
 8004472:	4b76      	ldr	r3, [pc, #472]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a75      	ldr	r2, [pc, #468]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	e01d      	b.n	80044bc <HAL_RCC_OscConfig+0xb0>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004488:	d10c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x98>
 800448a:	4b70      	ldr	r3, [pc, #448]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a6f      	ldr	r2, [pc, #444]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	4b6d      	ldr	r3, [pc, #436]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a6c      	ldr	r2, [pc, #432]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 800449c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	e00b      	b.n	80044bc <HAL_RCC_OscConfig+0xb0>
 80044a4:	4b69      	ldr	r3, [pc, #420]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a68      	ldr	r2, [pc, #416]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 80044aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	4b66      	ldr	r3, [pc, #408]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a65      	ldr	r2, [pc, #404]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 80044b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d013      	beq.n	80044ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c4:	f7fd fefe 	bl	80022c4 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044cc:	f7fd fefa 	bl	80022c4 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	@ 0x64
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e207      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044de:	4b5b      	ldr	r3, [pc, #364]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCC_OscConfig+0xc0>
 80044ea:	e014      	b.n	8004516 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ec:	f7fd feea 	bl	80022c4 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f4:	f7fd fee6 	bl	80022c4 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	@ 0x64
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e1f3      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004506:	4b51      	ldr	r3, [pc, #324]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0xe8>
 8004512:	e000      	b.n	8004516 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d063      	beq.n	80045ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004522:	4b4a      	ldr	r3, [pc, #296]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00b      	beq.n	8004546 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800452e:	4b47      	ldr	r3, [pc, #284]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004536:	2b08      	cmp	r3, #8
 8004538:	d11c      	bne.n	8004574 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800453a:	4b44      	ldr	r3, [pc, #272]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d116      	bne.n	8004574 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004546:	4b41      	ldr	r3, [pc, #260]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d005      	beq.n	800455e <HAL_RCC_OscConfig+0x152>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d001      	beq.n	800455e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e1c7      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455e:	4b3b      	ldr	r3, [pc, #236]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	4937      	ldr	r1, [pc, #220]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 800456e:	4313      	orrs	r3, r2
 8004570:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004572:	e03a      	b.n	80045ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d020      	beq.n	80045be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800457c:	4b34      	ldr	r3, [pc, #208]	@ (8004650 <HAL_RCC_OscConfig+0x244>)
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004582:	f7fd fe9f 	bl	80022c4 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800458a:	f7fd fe9b 	bl	80022c4 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e1a8      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800459c:	4b2b      	ldr	r3, [pc, #172]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a8:	4b28      	ldr	r3, [pc, #160]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	4925      	ldr	r1, [pc, #148]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	600b      	str	r3, [r1, #0]
 80045bc:	e015      	b.n	80045ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045be:	4b24      	ldr	r3, [pc, #144]	@ (8004650 <HAL_RCC_OscConfig+0x244>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fd fe7e 	bl	80022c4 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045cc:	f7fd fe7a 	bl	80022c4 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e187      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045de:	4b1b      	ldr	r3, [pc, #108]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d036      	beq.n	8004664 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d016      	beq.n	800462c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045fe:	4b15      	ldr	r3, [pc, #84]	@ (8004654 <HAL_RCC_OscConfig+0x248>)
 8004600:	2201      	movs	r2, #1
 8004602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004604:	f7fd fe5e 	bl	80022c4 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800460c:	f7fd fe5a 	bl	80022c4 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e167      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800461e:	4b0b      	ldr	r3, [pc, #44]	@ (800464c <HAL_RCC_OscConfig+0x240>)
 8004620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0f0      	beq.n	800460c <HAL_RCC_OscConfig+0x200>
 800462a:	e01b      	b.n	8004664 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800462c:	4b09      	ldr	r3, [pc, #36]	@ (8004654 <HAL_RCC_OscConfig+0x248>)
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004632:	f7fd fe47 	bl	80022c4 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004638:	e00e      	b.n	8004658 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800463a:	f7fd fe43 	bl	80022c4 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d907      	bls.n	8004658 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e150      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
 800464c:	40023800 	.word	0x40023800
 8004650:	42470000 	.word	0x42470000
 8004654:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004658:	4b88      	ldr	r3, [pc, #544]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 800465a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1ea      	bne.n	800463a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 8097 	beq.w	80047a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004672:	2300      	movs	r3, #0
 8004674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004676:	4b81      	ldr	r3, [pc, #516]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10f      	bne.n	80046a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004682:	2300      	movs	r3, #0
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	4b7d      	ldr	r3, [pc, #500]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468a:	4a7c      	ldr	r2, [pc, #496]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 800468c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004690:	6413      	str	r3, [r2, #64]	@ 0x40
 8004692:	4b7a      	ldr	r3, [pc, #488]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800469a:	60bb      	str	r3, [r7, #8]
 800469c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800469e:	2301      	movs	r3, #1
 80046a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a2:	4b77      	ldr	r3, [pc, #476]	@ (8004880 <HAL_RCC_OscConfig+0x474>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d118      	bne.n	80046e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ae:	4b74      	ldr	r3, [pc, #464]	@ (8004880 <HAL_RCC_OscConfig+0x474>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a73      	ldr	r2, [pc, #460]	@ (8004880 <HAL_RCC_OscConfig+0x474>)
 80046b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ba:	f7fd fe03 	bl	80022c4 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c2:	f7fd fdff 	bl	80022c4 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e10c      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004880 <HAL_RCC_OscConfig+0x474>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d106      	bne.n	80046f6 <HAL_RCC_OscConfig+0x2ea>
 80046e8:	4b64      	ldr	r3, [pc, #400]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ec:	4a63      	ldr	r2, [pc, #396]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80046f4:	e01c      	b.n	8004730 <HAL_RCC_OscConfig+0x324>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b05      	cmp	r3, #5
 80046fc:	d10c      	bne.n	8004718 <HAL_RCC_OscConfig+0x30c>
 80046fe:	4b5f      	ldr	r3, [pc, #380]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004702:	4a5e      	ldr	r2, [pc, #376]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004704:	f043 0304 	orr.w	r3, r3, #4
 8004708:	6713      	str	r3, [r2, #112]	@ 0x70
 800470a:	4b5c      	ldr	r3, [pc, #368]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470e:	4a5b      	ldr	r2, [pc, #364]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004710:	f043 0301 	orr.w	r3, r3, #1
 8004714:	6713      	str	r3, [r2, #112]	@ 0x70
 8004716:	e00b      	b.n	8004730 <HAL_RCC_OscConfig+0x324>
 8004718:	4b58      	ldr	r3, [pc, #352]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 800471a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471c:	4a57      	ldr	r2, [pc, #348]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 800471e:	f023 0301 	bic.w	r3, r3, #1
 8004722:	6713      	str	r3, [r2, #112]	@ 0x70
 8004724:	4b55      	ldr	r3, [pc, #340]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004728:	4a54      	ldr	r2, [pc, #336]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 800472a:	f023 0304 	bic.w	r3, r3, #4
 800472e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d015      	beq.n	8004764 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004738:	f7fd fdc4 	bl	80022c4 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473e:	e00a      	b.n	8004756 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004740:	f7fd fdc0 	bl	80022c4 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e0cb      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004756:	4b49      	ldr	r3, [pc, #292]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0ee      	beq.n	8004740 <HAL_RCC_OscConfig+0x334>
 8004762:	e014      	b.n	800478e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004764:	f7fd fdae 	bl	80022c4 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476a:	e00a      	b.n	8004782 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476c:	f7fd fdaa 	bl	80022c4 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e0b5      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004782:	4b3e      	ldr	r3, [pc, #248]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1ee      	bne.n	800476c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800478e:	7dfb      	ldrb	r3, [r7, #23]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d105      	bne.n	80047a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004794:	4b39      	ldr	r3, [pc, #228]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004798:	4a38      	ldr	r2, [pc, #224]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 800479a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800479e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 80a1 	beq.w	80048ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047aa:	4b34      	ldr	r3, [pc, #208]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 030c 	and.w	r3, r3, #12
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d05c      	beq.n	8004870 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d141      	bne.n	8004842 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047be:	4b31      	ldr	r3, [pc, #196]	@ (8004884 <HAL_RCC_OscConfig+0x478>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c4:	f7fd fd7e 	bl	80022c4 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047cc:	f7fd fd7a 	bl	80022c4 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e087      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047de:	4b27      	ldr	r3, [pc, #156]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f0      	bne.n	80047cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69da      	ldr	r2, [r3, #28]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f8:	019b      	lsls	r3, r3, #6
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004800:	085b      	lsrs	r3, r3, #1
 8004802:	3b01      	subs	r3, #1
 8004804:	041b      	lsls	r3, r3, #16
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480c:	061b      	lsls	r3, r3, #24
 800480e:	491b      	ldr	r1, [pc, #108]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004810:	4313      	orrs	r3, r2
 8004812:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004814:	4b1b      	ldr	r3, [pc, #108]	@ (8004884 <HAL_RCC_OscConfig+0x478>)
 8004816:	2201      	movs	r2, #1
 8004818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481a:	f7fd fd53 	bl	80022c4 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004822:	f7fd fd4f 	bl	80022c4 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e05c      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004834:	4b11      	ldr	r3, [pc, #68]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f0      	beq.n	8004822 <HAL_RCC_OscConfig+0x416>
 8004840:	e054      	b.n	80048ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004842:	4b10      	ldr	r3, [pc, #64]	@ (8004884 <HAL_RCC_OscConfig+0x478>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004848:	f7fd fd3c 	bl	80022c4 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004850:	f7fd fd38 	bl	80022c4 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e045      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004862:	4b06      	ldr	r3, [pc, #24]	@ (800487c <HAL_RCC_OscConfig+0x470>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x444>
 800486e:	e03d      	b.n	80048ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d107      	bne.n	8004888 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e038      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
 800487c:	40023800 	.word	0x40023800
 8004880:	40007000 	.word	0x40007000
 8004884:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004888:	4b1b      	ldr	r3, [pc, #108]	@ (80048f8 <HAL_RCC_OscConfig+0x4ec>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d028      	beq.n	80048e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d121      	bne.n	80048e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d11a      	bne.n	80048e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80048b8:	4013      	ands	r3, r2
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d111      	bne.n	80048e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ce:	085b      	lsrs	r3, r3, #1
 80048d0:	3b01      	subs	r3, #1
 80048d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d107      	bne.n	80048e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40023800 	.word	0x40023800

080048fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e0cc      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004910:	4b68      	ldr	r3, [pc, #416]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d90c      	bls.n	8004938 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491e:	4b65      	ldr	r3, [pc, #404]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004926:	4b63      	ldr	r3, [pc, #396]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d001      	beq.n	8004938 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0b8      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d020      	beq.n	8004986 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004950:	4b59      	ldr	r3, [pc, #356]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	4a58      	ldr	r2, [pc, #352]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800495a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004968:	4b53      	ldr	r3, [pc, #332]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	4a52      	ldr	r2, [pc, #328]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004972:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004974:	4b50      	ldr	r3, [pc, #320]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	494d      	ldr	r1, [pc, #308]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	4313      	orrs	r3, r2
 8004984:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d044      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d107      	bne.n	80049aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499a:	4b47      	ldr	r3, [pc, #284]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d119      	bne.n	80049da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e07f      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d003      	beq.n	80049ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	d107      	bne.n	80049ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ba:	4b3f      	ldr	r3, [pc, #252]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d109      	bne.n	80049da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e06f      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ca:	4b3b      	ldr	r3, [pc, #236]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e067      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049da:	4b37      	ldr	r3, [pc, #220]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f023 0203 	bic.w	r2, r3, #3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	4934      	ldr	r1, [pc, #208]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049ec:	f7fd fc6a 	bl	80022c4 <HAL_GetTick>
 80049f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f2:	e00a      	b.n	8004a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f4:	f7fd fc66 	bl	80022c4 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e04f      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 020c 	and.w	r2, r3, #12
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d1eb      	bne.n	80049f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a1c:	4b25      	ldr	r3, [pc, #148]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d20c      	bcs.n	8004a44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2a:	4b22      	ldr	r3, [pc, #136]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a32:	4b20      	ldr	r3, [pc, #128]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e032      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d008      	beq.n	8004a62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a50:	4b19      	ldr	r3, [pc, #100]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	4916      	ldr	r1, [pc, #88]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d009      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a6e:	4b12      	ldr	r3, [pc, #72]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	490e      	ldr	r1, [pc, #56]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a82:	f000 f821 	bl	8004ac8 <HAL_RCC_GetSysClockFreq>
 8004a86:	4602      	mov	r2, r0
 8004a88:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	091b      	lsrs	r3, r3, #4
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	490a      	ldr	r1, [pc, #40]	@ (8004abc <HAL_RCC_ClockConfig+0x1c0>)
 8004a94:	5ccb      	ldrb	r3, [r1, r3]
 8004a96:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9a:	4a09      	ldr	r2, [pc, #36]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a9e:	4b09      	ldr	r3, [pc, #36]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fd fbca 	bl	800223c <HAL_InitTick>

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40023c00 	.word	0x40023c00
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	080063b0 	.word	0x080063b0
 8004ac0:	20000200 	.word	0x20000200
 8004ac4:	20000204 	.word	0x20000204

08004ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004acc:	b090      	sub	sp, #64	@ 0x40
 8004ace:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ae0:	4b59      	ldr	r3, [pc, #356]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 030c 	and.w	r3, r3, #12
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d00d      	beq.n	8004b08 <HAL_RCC_GetSysClockFreq+0x40>
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	f200 80a1 	bhi.w	8004c34 <HAL_RCC_GetSysClockFreq+0x16c>
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <HAL_RCC_GetSysClockFreq+0x34>
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d003      	beq.n	8004b02 <HAL_RCC_GetSysClockFreq+0x3a>
 8004afa:	e09b      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004afc:	4b53      	ldr	r3, [pc, #332]	@ (8004c4c <HAL_RCC_GetSysClockFreq+0x184>)
 8004afe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b00:	e09b      	b.n	8004c3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b02:	4b53      	ldr	r3, [pc, #332]	@ (8004c50 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b06:	e098      	b.n	8004c3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b08:	4b4f      	ldr	r3, [pc, #316]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b10:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b12:	4b4d      	ldr	r3, [pc, #308]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d028      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	099b      	lsrs	r3, r3, #6
 8004b24:	2200      	movs	r2, #0
 8004b26:	623b      	str	r3, [r7, #32]
 8004b28:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b30:	2100      	movs	r1, #0
 8004b32:	4b47      	ldr	r3, [pc, #284]	@ (8004c50 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b34:	fb03 f201 	mul.w	r2, r3, r1
 8004b38:	2300      	movs	r3, #0
 8004b3a:	fb00 f303 	mul.w	r3, r0, r3
 8004b3e:	4413      	add	r3, r2
 8004b40:	4a43      	ldr	r2, [pc, #268]	@ (8004c50 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b42:	fba0 1202 	umull	r1, r2, r0, r2
 8004b46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b48:	460a      	mov	r2, r1
 8004b4a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b4e:	4413      	add	r3, r2
 8004b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b54:	2200      	movs	r2, #0
 8004b56:	61bb      	str	r3, [r7, #24]
 8004b58:	61fa      	str	r2, [r7, #28]
 8004b5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004b62:	f7fb fb8d 	bl	8000280 <__aeabi_uldivmod>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b6e:	e053      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b70:	4b35      	ldr	r3, [pc, #212]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	099b      	lsrs	r3, r3, #6
 8004b76:	2200      	movs	r2, #0
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	617a      	str	r2, [r7, #20]
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b82:	f04f 0b00 	mov.w	fp, #0
 8004b86:	4652      	mov	r2, sl
 8004b88:	465b      	mov	r3, fp
 8004b8a:	f04f 0000 	mov.w	r0, #0
 8004b8e:	f04f 0100 	mov.w	r1, #0
 8004b92:	0159      	lsls	r1, r3, #5
 8004b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b98:	0150      	lsls	r0, r2, #5
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	ebb2 080a 	subs.w	r8, r2, sl
 8004ba2:	eb63 090b 	sbc.w	r9, r3, fp
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	f04f 0300 	mov.w	r3, #0
 8004bae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004bb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004bb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004bba:	ebb2 0408 	subs.w	r4, r2, r8
 8004bbe:	eb63 0509 	sbc.w	r5, r3, r9
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	00eb      	lsls	r3, r5, #3
 8004bcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bd0:	00e2      	lsls	r2, r4, #3
 8004bd2:	4614      	mov	r4, r2
 8004bd4:	461d      	mov	r5, r3
 8004bd6:	eb14 030a 	adds.w	r3, r4, sl
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	eb45 030b 	adc.w	r3, r5, fp
 8004be0:	607b      	str	r3, [r7, #4]
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	f04f 0300 	mov.w	r3, #0
 8004bea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bee:	4629      	mov	r1, r5
 8004bf0:	028b      	lsls	r3, r1, #10
 8004bf2:	4621      	mov	r1, r4
 8004bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	028a      	lsls	r2, r1, #10
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c02:	2200      	movs	r2, #0
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	60fa      	str	r2, [r7, #12]
 8004c08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c0c:	f7fb fb38 	bl	8000280 <__aeabi_uldivmod>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4613      	mov	r3, r2
 8004c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c18:	4b0b      	ldr	r3, [pc, #44]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	0c1b      	lsrs	r3, r3, #16
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	3301      	adds	r3, #1
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004c28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c32:	e002      	b.n	8004c3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c34:	4b05      	ldr	r3, [pc, #20]	@ (8004c4c <HAL_RCC_GetSysClockFreq+0x184>)
 8004c36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3740      	adds	r7, #64	@ 0x40
 8004c40:	46bd      	mov	sp, r7
 8004c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c46:	bf00      	nop
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	00f42400 	.word	0x00f42400
 8004c50:	017d7840 	.word	0x017d7840

08004c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c58:	4b03      	ldr	r3, [pc, #12]	@ (8004c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	20000200 	.word	0x20000200

08004c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c70:	f7ff fff0 	bl	8004c54 <HAL_RCC_GetHCLKFreq>
 8004c74:	4602      	mov	r2, r0
 8004c76:	4b05      	ldr	r3, [pc, #20]	@ (8004c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	0a9b      	lsrs	r3, r3, #10
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	4903      	ldr	r1, [pc, #12]	@ (8004c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c82:	5ccb      	ldrb	r3, [r1, r3]
 8004c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	080063c0 	.word	0x080063c0

08004c94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d001      	beq.n	8004cac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e03c      	b.n	8004d26 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1e      	ldr	r2, [pc, #120]	@ (8004d34 <HAL_TIM_Base_Start+0xa0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d018      	beq.n	8004cf0 <HAL_TIM_Base_Start+0x5c>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cc6:	d013      	beq.n	8004cf0 <HAL_TIM_Base_Start+0x5c>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a1a      	ldr	r2, [pc, #104]	@ (8004d38 <HAL_TIM_Base_Start+0xa4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00e      	beq.n	8004cf0 <HAL_TIM_Base_Start+0x5c>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a19      	ldr	r2, [pc, #100]	@ (8004d3c <HAL_TIM_Base_Start+0xa8>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d009      	beq.n	8004cf0 <HAL_TIM_Base_Start+0x5c>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a17      	ldr	r2, [pc, #92]	@ (8004d40 <HAL_TIM_Base_Start+0xac>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d004      	beq.n	8004cf0 <HAL_TIM_Base_Start+0x5c>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a16      	ldr	r2, [pc, #88]	@ (8004d44 <HAL_TIM_Base_Start+0xb0>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d111      	bne.n	8004d14 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b06      	cmp	r3, #6
 8004d00:	d010      	beq.n	8004d24 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f042 0201 	orr.w	r2, r2, #1
 8004d10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d12:	e007      	b.n	8004d24 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40000800 	.word	0x40000800
 8004d40:	40000c00 	.word	0x40000c00
 8004d44:	40014000 	.word	0x40014000

08004d48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e041      	b.n	8004dde <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d106      	bne.n	8004d74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7fd f838 	bl	8001de4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3304      	adds	r3, #4
 8004d84:	4619      	mov	r1, r3
 8004d86:	4610      	mov	r0, r2
 8004d88:	f000 fb22 	bl	80053d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
	...

08004de8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d109      	bne.n	8004e10 <HAL_TIM_PWM_Start_IT+0x28>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	bf14      	ite	ne
 8004e08:	2301      	movne	r3, #1
 8004e0a:	2300      	moveq	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	e022      	b.n	8004e56 <HAL_TIM_PWM_Start_IT+0x6e>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d109      	bne.n	8004e2a <HAL_TIM_PWM_Start_IT+0x42>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	bf14      	ite	ne
 8004e22:	2301      	movne	r3, #1
 8004e24:	2300      	moveq	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	e015      	b.n	8004e56 <HAL_TIM_PWM_Start_IT+0x6e>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d109      	bne.n	8004e44 <HAL_TIM_PWM_Start_IT+0x5c>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	bf14      	ite	ne
 8004e3c:	2301      	movne	r3, #1
 8004e3e:	2300      	moveq	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	e008      	b.n	8004e56 <HAL_TIM_PWM_Start_IT+0x6e>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	bf14      	ite	ne
 8004e50:	2301      	movne	r3, #1
 8004e52:	2300      	moveq	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e0b3      	b.n	8004fc6 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d104      	bne.n	8004e6e <HAL_TIM_PWM_Start_IT+0x86>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e6c:	e013      	b.n	8004e96 <HAL_TIM_PWM_Start_IT+0xae>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d104      	bne.n	8004e7e <HAL_TIM_PWM_Start_IT+0x96>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e7c:	e00b      	b.n	8004e96 <HAL_TIM_PWM_Start_IT+0xae>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d104      	bne.n	8004e8e <HAL_TIM_PWM_Start_IT+0xa6>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e8c:	e003      	b.n	8004e96 <HAL_TIM_PWM_Start_IT+0xae>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2202      	movs	r2, #2
 8004e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b0c      	cmp	r3, #12
 8004e9a:	d841      	bhi.n	8004f20 <HAL_TIM_PWM_Start_IT+0x138>
 8004e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea4 <HAL_TIM_PWM_Start_IT+0xbc>)
 8004e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea2:	bf00      	nop
 8004ea4:	08004ed9 	.word	0x08004ed9
 8004ea8:	08004f21 	.word	0x08004f21
 8004eac:	08004f21 	.word	0x08004f21
 8004eb0:	08004f21 	.word	0x08004f21
 8004eb4:	08004eeb 	.word	0x08004eeb
 8004eb8:	08004f21 	.word	0x08004f21
 8004ebc:	08004f21 	.word	0x08004f21
 8004ec0:	08004f21 	.word	0x08004f21
 8004ec4:	08004efd 	.word	0x08004efd
 8004ec8:	08004f21 	.word	0x08004f21
 8004ecc:	08004f21 	.word	0x08004f21
 8004ed0:	08004f21 	.word	0x08004f21
 8004ed4:	08004f0f 	.word	0x08004f0f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0202 	orr.w	r2, r2, #2
 8004ee6:	60da      	str	r2, [r3, #12]
      break;
 8004ee8:	e01d      	b.n	8004f26 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f042 0204 	orr.w	r2, r2, #4
 8004ef8:	60da      	str	r2, [r3, #12]
      break;
 8004efa:	e014      	b.n	8004f26 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0208 	orr.w	r2, r2, #8
 8004f0a:	60da      	str	r2, [r3, #12]
      break;
 8004f0c:	e00b      	b.n	8004f26 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f042 0210 	orr.w	r2, r2, #16
 8004f1c:	60da      	str	r2, [r3, #12]
      break;
 8004f1e:	e002      	b.n	8004f26 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	73fb      	strb	r3, [r7, #15]
      break;
 8004f24:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d14b      	bne.n	8004fc4 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2201      	movs	r2, #1
 8004f32:	6839      	ldr	r1, [r7, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 fc5d 	bl	80057f4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a24      	ldr	r2, [pc, #144]	@ (8004fd0 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d107      	bne.n	8004f54 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f52:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd0 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d018      	beq.n	8004f90 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f66:	d013      	beq.n	8004f90 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a19      	ldr	r2, [pc, #100]	@ (8004fd4 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00e      	beq.n	8004f90 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a18      	ldr	r2, [pc, #96]	@ (8004fd8 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d009      	beq.n	8004f90 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a16      	ldr	r2, [pc, #88]	@ (8004fdc <HAL_TIM_PWM_Start_IT+0x1f4>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a15      	ldr	r2, [pc, #84]	@ (8004fe0 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d111      	bne.n	8004fb4 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b06      	cmp	r3, #6
 8004fa0:	d010      	beq.n	8004fc4 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f042 0201 	orr.w	r2, r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb2:	e007      	b.n	8004fc4 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0201 	orr.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40010000 	.word	0x40010000
 8004fd4:	40000400 	.word	0x40000400
 8004fd8:	40000800 	.word	0x40000800
 8004fdc:	40000c00 	.word	0x40000c00
 8004fe0:	40014000 	.word	0x40014000

08004fe4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e097      	b.n	8005128 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d106      	bne.n	8005012 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7fc ff35 	bl	8001e7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2202      	movs	r2, #2
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6812      	ldr	r2, [r2, #0]
 8005024:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005028:	f023 0307 	bic.w	r3, r3, #7
 800502c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3304      	adds	r3, #4
 8005036:	4619      	mov	r1, r3
 8005038:	4610      	mov	r0, r2
 800503a:	f000 f9c9 	bl	80053d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	4313      	orrs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005066:	f023 0303 	bic.w	r3, r3, #3
 800506a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	021b      	lsls	r3, r3, #8
 8005076:	4313      	orrs	r3, r2
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005084:	f023 030c 	bic.w	r3, r3, #12
 8005088:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005090:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005094:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	021b      	lsls	r3, r3, #8
 80050a0:	4313      	orrs	r3, r2
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	011a      	lsls	r2, r3, #4
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	031b      	lsls	r3, r3, #12
 80050b4:	4313      	orrs	r3, r2
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80050c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80050ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	4313      	orrs	r3, r2
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005140:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005148:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005150:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005158:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d110      	bne.n	8005182 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d102      	bne.n	800516c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005166:	7b7b      	ldrb	r3, [r7, #13]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d001      	beq.n	8005170 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e069      	b.n	8005244 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005180:	e031      	b.n	80051e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b04      	cmp	r3, #4
 8005186:	d110      	bne.n	80051aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005188:	7bbb      	ldrb	r3, [r7, #14]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d102      	bne.n	8005194 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800518e:	7b3b      	ldrb	r3, [r7, #12]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d001      	beq.n	8005198 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e055      	b.n	8005244 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051a8:	e01d      	b.n	80051e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d108      	bne.n	80051c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80051b0:	7bbb      	ldrb	r3, [r7, #14]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d105      	bne.n	80051c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051b6:	7b7b      	ldrb	r3, [r7, #13]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d102      	bne.n	80051c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80051bc:	7b3b      	ldrb	r3, [r7, #12]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d001      	beq.n	80051c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e03e      	b.n	8005244 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2202      	movs	r2, #2
 80051ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2202      	movs	r2, #2
 80051d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2202      	movs	r2, #2
 80051da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2202      	movs	r2, #2
 80051e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <HAL_TIM_Encoder_Start+0xc4>
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d008      	beq.n	8005204 <HAL_TIM_Encoder_Start+0xd4>
 80051f2:	e00f      	b.n	8005214 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2201      	movs	r2, #1
 80051fa:	2100      	movs	r1, #0
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 faf9 	bl	80057f4 <TIM_CCxChannelCmd>
      break;
 8005202:	e016      	b.n	8005232 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2201      	movs	r2, #1
 800520a:	2104      	movs	r1, #4
 800520c:	4618      	mov	r0, r3
 800520e:	f000 faf1 	bl	80057f4 <TIM_CCxChannelCmd>
      break;
 8005212:	e00e      	b.n	8005232 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2201      	movs	r2, #1
 800521a:	2100      	movs	r1, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fae9 	bl	80057f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2201      	movs	r2, #1
 8005228:	2104      	movs	r1, #4
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fae2 	bl	80057f4 <TIM_CCxChannelCmd>
      break;
 8005230:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0201 	orr.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005258:	2300      	movs	r3, #0
 800525a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005266:	2302      	movs	r3, #2
 8005268:	e0ae      	b.n	80053c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b0c      	cmp	r3, #12
 8005276:	f200 809f 	bhi.w	80053b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800527a:	a201      	add	r2, pc, #4	@ (adr r2, 8005280 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	080052b5 	.word	0x080052b5
 8005284:	080053b9 	.word	0x080053b9
 8005288:	080053b9 	.word	0x080053b9
 800528c:	080053b9 	.word	0x080053b9
 8005290:	080052f5 	.word	0x080052f5
 8005294:	080053b9 	.word	0x080053b9
 8005298:	080053b9 	.word	0x080053b9
 800529c:	080053b9 	.word	0x080053b9
 80052a0:	08005337 	.word	0x08005337
 80052a4:	080053b9 	.word	0x080053b9
 80052a8:	080053b9 	.word	0x080053b9
 80052ac:	080053b9 	.word	0x080053b9
 80052b0:	08005377 	.word	0x08005377
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 f90e 	bl	80054dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699a      	ldr	r2, [r3, #24]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0208 	orr.w	r2, r2, #8
 80052ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699a      	ldr	r2, [r3, #24]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0204 	bic.w	r2, r2, #4
 80052de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6999      	ldr	r1, [r3, #24]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	619a      	str	r2, [r3, #24]
      break;
 80052f2:	e064      	b.n	80053be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f954 	bl	80055a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800530e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699a      	ldr	r2, [r3, #24]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800531e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6999      	ldr	r1, [r3, #24]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	021a      	lsls	r2, r3, #8
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	619a      	str	r2, [r3, #24]
      break;
 8005334:	e043      	b.n	80053be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	4618      	mov	r0, r3
 800533e:	f000 f99f 	bl	8005680 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69da      	ldr	r2, [r3, #28]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f042 0208 	orr.w	r2, r2, #8
 8005350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69da      	ldr	r2, [r3, #28]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 0204 	bic.w	r2, r2, #4
 8005360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69d9      	ldr	r1, [r3, #28]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	61da      	str	r2, [r3, #28]
      break;
 8005374:	e023      	b.n	80053be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	4618      	mov	r0, r3
 800537e:	f000 f9e9 	bl	8005754 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69da      	ldr	r2, [r3, #28]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	69da      	ldr	r2, [r3, #28]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69d9      	ldr	r1, [r3, #28]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	021a      	lsls	r2, r3, #8
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	61da      	str	r2, [r3, #28]
      break;
 80053b6:	e002      	b.n	80053be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	75fb      	strb	r3, [r7, #23]
      break;
 80053bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a37      	ldr	r2, [pc, #220]	@ (80054c0 <TIM_Base_SetConfig+0xf0>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00f      	beq.n	8005408 <TIM_Base_SetConfig+0x38>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ee:	d00b      	beq.n	8005408 <TIM_Base_SetConfig+0x38>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a34      	ldr	r2, [pc, #208]	@ (80054c4 <TIM_Base_SetConfig+0xf4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d007      	beq.n	8005408 <TIM_Base_SetConfig+0x38>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a33      	ldr	r2, [pc, #204]	@ (80054c8 <TIM_Base_SetConfig+0xf8>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d003      	beq.n	8005408 <TIM_Base_SetConfig+0x38>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a32      	ldr	r2, [pc, #200]	@ (80054cc <TIM_Base_SetConfig+0xfc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d108      	bne.n	800541a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800540e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a28      	ldr	r2, [pc, #160]	@ (80054c0 <TIM_Base_SetConfig+0xf0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d01b      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005428:	d017      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a25      	ldr	r2, [pc, #148]	@ (80054c4 <TIM_Base_SetConfig+0xf4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d013      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a24      	ldr	r2, [pc, #144]	@ (80054c8 <TIM_Base_SetConfig+0xf8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d00f      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a23      	ldr	r2, [pc, #140]	@ (80054cc <TIM_Base_SetConfig+0xfc>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00b      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a22      	ldr	r2, [pc, #136]	@ (80054d0 <TIM_Base_SetConfig+0x100>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d007      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a21      	ldr	r2, [pc, #132]	@ (80054d4 <TIM_Base_SetConfig+0x104>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d003      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a20      	ldr	r2, [pc, #128]	@ (80054d8 <TIM_Base_SetConfig+0x108>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d108      	bne.n	800546c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4313      	orrs	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a0c      	ldr	r2, [pc, #48]	@ (80054c0 <TIM_Base_SetConfig+0xf0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d103      	bne.n	800549a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f043 0204 	orr.w	r2, r3, #4
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	601a      	str	r2, [r3, #0]
}
 80054b2:	bf00      	nop
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40010000 	.word	0x40010000
 80054c4:	40000400 	.word	0x40000400
 80054c8:	40000800 	.word	0x40000800
 80054cc:	40000c00 	.word	0x40000c00
 80054d0:	40014000 	.word	0x40014000
 80054d4:	40014400 	.word	0x40014400
 80054d8:	40014800 	.word	0x40014800

080054dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	f023 0201 	bic.w	r2, r3, #1
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800550a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0303 	bic.w	r3, r3, #3
 8005512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f023 0302 	bic.w	r3, r3, #2
 8005524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a1c      	ldr	r2, [pc, #112]	@ (80055a4 <TIM_OC1_SetConfig+0xc8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d10c      	bne.n	8005552 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f023 0308 	bic.w	r3, r3, #8
 800553e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f023 0304 	bic.w	r3, r3, #4
 8005550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a13      	ldr	r2, [pc, #76]	@ (80055a4 <TIM_OC1_SetConfig+0xc8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d111      	bne.n	800557e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	621a      	str	r2, [r3, #32]
}
 8005598:	bf00      	nop
 800559a:	371c      	adds	r7, #28
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	40010000 	.word	0x40010000

080055a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	f023 0210 	bic.w	r2, r3, #16
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f023 0320 	bic.w	r3, r3, #32
 80055f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a1e      	ldr	r2, [pc, #120]	@ (800567c <TIM_OC2_SetConfig+0xd4>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d10d      	bne.n	8005624 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800560e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005622:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a15      	ldr	r2, [pc, #84]	@ (800567c <TIM_OC2_SetConfig+0xd4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d113      	bne.n	8005654 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005632:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800563a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	621a      	str	r2, [r3, #32]
}
 800566e:	bf00      	nop
 8005670:	371c      	adds	r7, #28
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40010000 	.word	0x40010000

08005680 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 0303 	bic.w	r3, r3, #3
 80056b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	021b      	lsls	r3, r3, #8
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005750 <TIM_OC3_SetConfig+0xd0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d10d      	bne.n	80056fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	021b      	lsls	r3, r3, #8
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a14      	ldr	r2, [pc, #80]	@ (8005750 <TIM_OC3_SetConfig+0xd0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d113      	bne.n	800572a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	011b      	lsls	r3, r3, #4
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	4313      	orrs	r3, r2
 8005728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	621a      	str	r2, [r3, #32]
}
 8005744:	bf00      	nop
 8005746:	371c      	adds	r7, #28
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	40010000 	.word	0x40010000

08005754 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800578a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	021b      	lsls	r3, r3, #8
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800579e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	031b      	lsls	r3, r3, #12
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a10      	ldr	r2, [pc, #64]	@ (80057f0 <TIM_OC4_SetConfig+0x9c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d109      	bne.n	80057c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	019b      	lsls	r3, r3, #6
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	621a      	str	r2, [r3, #32]
}
 80057e2:	bf00      	nop
 80057e4:	371c      	adds	r7, #28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40010000 	.word	0x40010000

080057f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f003 031f 	and.w	r3, r3, #31
 8005806:	2201      	movs	r2, #1
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a1a      	ldr	r2, [r3, #32]
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	43db      	mvns	r3, r3
 8005816:	401a      	ands	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a1a      	ldr	r2, [r3, #32]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f003 031f 	and.w	r3, r3, #31
 8005826:	6879      	ldr	r1, [r7, #4]
 8005828:	fa01 f303 	lsl.w	r3, r1, r3
 800582c:	431a      	orrs	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	bf00      	nop
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
	...

08005840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005854:	2302      	movs	r3, #2
 8005856:	e050      	b.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800587e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a1c      	ldr	r2, [pc, #112]	@ (8005908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d018      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058a4:	d013      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a18      	ldr	r2, [pc, #96]	@ (800590c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d00e      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a16      	ldr	r2, [pc, #88]	@ (8005910 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d009      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a15      	ldr	r2, [pc, #84]	@ (8005914 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d004      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a13      	ldr	r2, [pc, #76]	@ (8005918 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d10c      	bne.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40010000 	.word	0x40010000
 800590c:	40000400 	.word	0x40000400
 8005910:	40000800 	.word	0x40000800
 8005914:	40000c00 	.word	0x40000c00
 8005918:	40014000 	.word	0x40014000

0800591c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005934:	2302      	movs	r3, #2
 8005936:	e03d      	b.n	80059b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4313      	orrs	r3, r2
 8005976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <siprintf>:
 80059c0:	b40e      	push	{r1, r2, r3}
 80059c2:	b510      	push	{r4, lr}
 80059c4:	b09d      	sub	sp, #116	@ 0x74
 80059c6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80059c8:	9002      	str	r0, [sp, #8]
 80059ca:	9006      	str	r0, [sp, #24]
 80059cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80059d0:	480a      	ldr	r0, [pc, #40]	@ (80059fc <siprintf+0x3c>)
 80059d2:	9107      	str	r1, [sp, #28]
 80059d4:	9104      	str	r1, [sp, #16]
 80059d6:	490a      	ldr	r1, [pc, #40]	@ (8005a00 <siprintf+0x40>)
 80059d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80059dc:	9105      	str	r1, [sp, #20]
 80059de:	2400      	movs	r4, #0
 80059e0:	a902      	add	r1, sp, #8
 80059e2:	6800      	ldr	r0, [r0, #0]
 80059e4:	9301      	str	r3, [sp, #4]
 80059e6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80059e8:	f000 f89c 	bl	8005b24 <_svfiprintf_r>
 80059ec:	9b02      	ldr	r3, [sp, #8]
 80059ee:	701c      	strb	r4, [r3, #0]
 80059f0:	b01d      	add	sp, #116	@ 0x74
 80059f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059f6:	b003      	add	sp, #12
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	2000020c 	.word	0x2000020c
 8005a00:	ffff0208 	.word	0xffff0208

08005a04 <memset>:
 8005a04:	4402      	add	r2, r0
 8005a06:	4603      	mov	r3, r0
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d100      	bne.n	8005a0e <memset+0xa>
 8005a0c:	4770      	bx	lr
 8005a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a12:	e7f9      	b.n	8005a08 <memset+0x4>

08005a14 <__errno>:
 8005a14:	4b01      	ldr	r3, [pc, #4]	@ (8005a1c <__errno+0x8>)
 8005a16:	6818      	ldr	r0, [r3, #0]
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	2000020c 	.word	0x2000020c

08005a20 <__libc_init_array>:
 8005a20:	b570      	push	{r4, r5, r6, lr}
 8005a22:	4d0d      	ldr	r5, [pc, #52]	@ (8005a58 <__libc_init_array+0x38>)
 8005a24:	4c0d      	ldr	r4, [pc, #52]	@ (8005a5c <__libc_init_array+0x3c>)
 8005a26:	1b64      	subs	r4, r4, r5
 8005a28:	10a4      	asrs	r4, r4, #2
 8005a2a:	2600      	movs	r6, #0
 8005a2c:	42a6      	cmp	r6, r4
 8005a2e:	d109      	bne.n	8005a44 <__libc_init_array+0x24>
 8005a30:	4d0b      	ldr	r5, [pc, #44]	@ (8005a60 <__libc_init_array+0x40>)
 8005a32:	4c0c      	ldr	r4, [pc, #48]	@ (8005a64 <__libc_init_array+0x44>)
 8005a34:	f000 fc64 	bl	8006300 <_init>
 8005a38:	1b64      	subs	r4, r4, r5
 8005a3a:	10a4      	asrs	r4, r4, #2
 8005a3c:	2600      	movs	r6, #0
 8005a3e:	42a6      	cmp	r6, r4
 8005a40:	d105      	bne.n	8005a4e <__libc_init_array+0x2e>
 8005a42:	bd70      	pop	{r4, r5, r6, pc}
 8005a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a48:	4798      	blx	r3
 8005a4a:	3601      	adds	r6, #1
 8005a4c:	e7ee      	b.n	8005a2c <__libc_init_array+0xc>
 8005a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a52:	4798      	blx	r3
 8005a54:	3601      	adds	r6, #1
 8005a56:	e7f2      	b.n	8005a3e <__libc_init_array+0x1e>
 8005a58:	0800640c 	.word	0x0800640c
 8005a5c:	0800640c 	.word	0x0800640c
 8005a60:	0800640c 	.word	0x0800640c
 8005a64:	08006410 	.word	0x08006410

08005a68 <__retarget_lock_acquire_recursive>:
 8005a68:	4770      	bx	lr

08005a6a <__retarget_lock_release_recursive>:
 8005a6a:	4770      	bx	lr

08005a6c <__ssputs_r>:
 8005a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a70:	688e      	ldr	r6, [r1, #8]
 8005a72:	461f      	mov	r7, r3
 8005a74:	42be      	cmp	r6, r7
 8005a76:	680b      	ldr	r3, [r1, #0]
 8005a78:	4682      	mov	sl, r0
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	4690      	mov	r8, r2
 8005a7e:	d82d      	bhi.n	8005adc <__ssputs_r+0x70>
 8005a80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a88:	d026      	beq.n	8005ad8 <__ssputs_r+0x6c>
 8005a8a:	6965      	ldr	r5, [r4, #20]
 8005a8c:	6909      	ldr	r1, [r1, #16]
 8005a8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a92:	eba3 0901 	sub.w	r9, r3, r1
 8005a96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a9a:	1c7b      	adds	r3, r7, #1
 8005a9c:	444b      	add	r3, r9
 8005a9e:	106d      	asrs	r5, r5, #1
 8005aa0:	429d      	cmp	r5, r3
 8005aa2:	bf38      	it	cc
 8005aa4:	461d      	movcc	r5, r3
 8005aa6:	0553      	lsls	r3, r2, #21
 8005aa8:	d527      	bpl.n	8005afa <__ssputs_r+0x8e>
 8005aaa:	4629      	mov	r1, r5
 8005aac:	f000 f958 	bl	8005d60 <_malloc_r>
 8005ab0:	4606      	mov	r6, r0
 8005ab2:	b360      	cbz	r0, 8005b0e <__ssputs_r+0xa2>
 8005ab4:	6921      	ldr	r1, [r4, #16]
 8005ab6:	464a      	mov	r2, r9
 8005ab8:	f000 fbc2 	bl	8006240 <memcpy>
 8005abc:	89a3      	ldrh	r3, [r4, #12]
 8005abe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ac6:	81a3      	strh	r3, [r4, #12]
 8005ac8:	6126      	str	r6, [r4, #16]
 8005aca:	6165      	str	r5, [r4, #20]
 8005acc:	444e      	add	r6, r9
 8005ace:	eba5 0509 	sub.w	r5, r5, r9
 8005ad2:	6026      	str	r6, [r4, #0]
 8005ad4:	60a5      	str	r5, [r4, #8]
 8005ad6:	463e      	mov	r6, r7
 8005ad8:	42be      	cmp	r6, r7
 8005ada:	d900      	bls.n	8005ade <__ssputs_r+0x72>
 8005adc:	463e      	mov	r6, r7
 8005ade:	6820      	ldr	r0, [r4, #0]
 8005ae0:	4632      	mov	r2, r6
 8005ae2:	4641      	mov	r1, r8
 8005ae4:	f000 fb82 	bl	80061ec <memmove>
 8005ae8:	68a3      	ldr	r3, [r4, #8]
 8005aea:	1b9b      	subs	r3, r3, r6
 8005aec:	60a3      	str	r3, [r4, #8]
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	4433      	add	r3, r6
 8005af2:	6023      	str	r3, [r4, #0]
 8005af4:	2000      	movs	r0, #0
 8005af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afa:	462a      	mov	r2, r5
 8005afc:	f000 fb48 	bl	8006190 <_realloc_r>
 8005b00:	4606      	mov	r6, r0
 8005b02:	2800      	cmp	r0, #0
 8005b04:	d1e0      	bne.n	8005ac8 <__ssputs_r+0x5c>
 8005b06:	6921      	ldr	r1, [r4, #16]
 8005b08:	4650      	mov	r0, sl
 8005b0a:	f000 fba7 	bl	800625c <_free_r>
 8005b0e:	230c      	movs	r3, #12
 8005b10:	f8ca 3000 	str.w	r3, [sl]
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b1a:	81a3      	strh	r3, [r4, #12]
 8005b1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b20:	e7e9      	b.n	8005af6 <__ssputs_r+0x8a>
	...

08005b24 <_svfiprintf_r>:
 8005b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b28:	4698      	mov	r8, r3
 8005b2a:	898b      	ldrh	r3, [r1, #12]
 8005b2c:	061b      	lsls	r3, r3, #24
 8005b2e:	b09d      	sub	sp, #116	@ 0x74
 8005b30:	4607      	mov	r7, r0
 8005b32:	460d      	mov	r5, r1
 8005b34:	4614      	mov	r4, r2
 8005b36:	d510      	bpl.n	8005b5a <_svfiprintf_r+0x36>
 8005b38:	690b      	ldr	r3, [r1, #16]
 8005b3a:	b973      	cbnz	r3, 8005b5a <_svfiprintf_r+0x36>
 8005b3c:	2140      	movs	r1, #64	@ 0x40
 8005b3e:	f000 f90f 	bl	8005d60 <_malloc_r>
 8005b42:	6028      	str	r0, [r5, #0]
 8005b44:	6128      	str	r0, [r5, #16]
 8005b46:	b930      	cbnz	r0, 8005b56 <_svfiprintf_r+0x32>
 8005b48:	230c      	movs	r3, #12
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b50:	b01d      	add	sp, #116	@ 0x74
 8005b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b56:	2340      	movs	r3, #64	@ 0x40
 8005b58:	616b      	str	r3, [r5, #20]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b5e:	2320      	movs	r3, #32
 8005b60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b64:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b68:	2330      	movs	r3, #48	@ 0x30
 8005b6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d08 <_svfiprintf_r+0x1e4>
 8005b6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b72:	f04f 0901 	mov.w	r9, #1
 8005b76:	4623      	mov	r3, r4
 8005b78:	469a      	mov	sl, r3
 8005b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b7e:	b10a      	cbz	r2, 8005b84 <_svfiprintf_r+0x60>
 8005b80:	2a25      	cmp	r2, #37	@ 0x25
 8005b82:	d1f9      	bne.n	8005b78 <_svfiprintf_r+0x54>
 8005b84:	ebba 0b04 	subs.w	fp, sl, r4
 8005b88:	d00b      	beq.n	8005ba2 <_svfiprintf_r+0x7e>
 8005b8a:	465b      	mov	r3, fp
 8005b8c:	4622      	mov	r2, r4
 8005b8e:	4629      	mov	r1, r5
 8005b90:	4638      	mov	r0, r7
 8005b92:	f7ff ff6b 	bl	8005a6c <__ssputs_r>
 8005b96:	3001      	adds	r0, #1
 8005b98:	f000 80a7 	beq.w	8005cea <_svfiprintf_r+0x1c6>
 8005b9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b9e:	445a      	add	r2, fp
 8005ba0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 809f 	beq.w	8005cea <_svfiprintf_r+0x1c6>
 8005bac:	2300      	movs	r3, #0
 8005bae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005bb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bb6:	f10a 0a01 	add.w	sl, sl, #1
 8005bba:	9304      	str	r3, [sp, #16]
 8005bbc:	9307      	str	r3, [sp, #28]
 8005bbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bc2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bc4:	4654      	mov	r4, sl
 8005bc6:	2205      	movs	r2, #5
 8005bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bcc:	484e      	ldr	r0, [pc, #312]	@ (8005d08 <_svfiprintf_r+0x1e4>)
 8005bce:	f7fa fb07 	bl	80001e0 <memchr>
 8005bd2:	9a04      	ldr	r2, [sp, #16]
 8005bd4:	b9d8      	cbnz	r0, 8005c0e <_svfiprintf_r+0xea>
 8005bd6:	06d0      	lsls	r0, r2, #27
 8005bd8:	bf44      	itt	mi
 8005bda:	2320      	movmi	r3, #32
 8005bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005be0:	0711      	lsls	r1, r2, #28
 8005be2:	bf44      	itt	mi
 8005be4:	232b      	movmi	r3, #43	@ 0x2b
 8005be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bea:	f89a 3000 	ldrb.w	r3, [sl]
 8005bee:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bf0:	d015      	beq.n	8005c1e <_svfiprintf_r+0xfa>
 8005bf2:	9a07      	ldr	r2, [sp, #28]
 8005bf4:	4654      	mov	r4, sl
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	f04f 0c0a 	mov.w	ip, #10
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c02:	3b30      	subs	r3, #48	@ 0x30
 8005c04:	2b09      	cmp	r3, #9
 8005c06:	d94b      	bls.n	8005ca0 <_svfiprintf_r+0x17c>
 8005c08:	b1b0      	cbz	r0, 8005c38 <_svfiprintf_r+0x114>
 8005c0a:	9207      	str	r2, [sp, #28]
 8005c0c:	e014      	b.n	8005c38 <_svfiprintf_r+0x114>
 8005c0e:	eba0 0308 	sub.w	r3, r0, r8
 8005c12:	fa09 f303 	lsl.w	r3, r9, r3
 8005c16:	4313      	orrs	r3, r2
 8005c18:	9304      	str	r3, [sp, #16]
 8005c1a:	46a2      	mov	sl, r4
 8005c1c:	e7d2      	b.n	8005bc4 <_svfiprintf_r+0xa0>
 8005c1e:	9b03      	ldr	r3, [sp, #12]
 8005c20:	1d19      	adds	r1, r3, #4
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	9103      	str	r1, [sp, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	bfbb      	ittet	lt
 8005c2a:	425b      	neglt	r3, r3
 8005c2c:	f042 0202 	orrlt.w	r2, r2, #2
 8005c30:	9307      	strge	r3, [sp, #28]
 8005c32:	9307      	strlt	r3, [sp, #28]
 8005c34:	bfb8      	it	lt
 8005c36:	9204      	strlt	r2, [sp, #16]
 8005c38:	7823      	ldrb	r3, [r4, #0]
 8005c3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c3c:	d10a      	bne.n	8005c54 <_svfiprintf_r+0x130>
 8005c3e:	7863      	ldrb	r3, [r4, #1]
 8005c40:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c42:	d132      	bne.n	8005caa <_svfiprintf_r+0x186>
 8005c44:	9b03      	ldr	r3, [sp, #12]
 8005c46:	1d1a      	adds	r2, r3, #4
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	9203      	str	r2, [sp, #12]
 8005c4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c50:	3402      	adds	r4, #2
 8005c52:	9305      	str	r3, [sp, #20]
 8005c54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d18 <_svfiprintf_r+0x1f4>
 8005c58:	7821      	ldrb	r1, [r4, #0]
 8005c5a:	2203      	movs	r2, #3
 8005c5c:	4650      	mov	r0, sl
 8005c5e:	f7fa fabf 	bl	80001e0 <memchr>
 8005c62:	b138      	cbz	r0, 8005c74 <_svfiprintf_r+0x150>
 8005c64:	9b04      	ldr	r3, [sp, #16]
 8005c66:	eba0 000a 	sub.w	r0, r0, sl
 8005c6a:	2240      	movs	r2, #64	@ 0x40
 8005c6c:	4082      	lsls	r2, r0
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	3401      	adds	r4, #1
 8005c72:	9304      	str	r3, [sp, #16]
 8005c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c78:	4824      	ldr	r0, [pc, #144]	@ (8005d0c <_svfiprintf_r+0x1e8>)
 8005c7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c7e:	2206      	movs	r2, #6
 8005c80:	f7fa faae 	bl	80001e0 <memchr>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d036      	beq.n	8005cf6 <_svfiprintf_r+0x1d2>
 8005c88:	4b21      	ldr	r3, [pc, #132]	@ (8005d10 <_svfiprintf_r+0x1ec>)
 8005c8a:	bb1b      	cbnz	r3, 8005cd4 <_svfiprintf_r+0x1b0>
 8005c8c:	9b03      	ldr	r3, [sp, #12]
 8005c8e:	3307      	adds	r3, #7
 8005c90:	f023 0307 	bic.w	r3, r3, #7
 8005c94:	3308      	adds	r3, #8
 8005c96:	9303      	str	r3, [sp, #12]
 8005c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c9a:	4433      	add	r3, r6
 8005c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c9e:	e76a      	b.n	8005b76 <_svfiprintf_r+0x52>
 8005ca0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ca4:	460c      	mov	r4, r1
 8005ca6:	2001      	movs	r0, #1
 8005ca8:	e7a8      	b.n	8005bfc <_svfiprintf_r+0xd8>
 8005caa:	2300      	movs	r3, #0
 8005cac:	3401      	adds	r4, #1
 8005cae:	9305      	str	r3, [sp, #20]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	f04f 0c0a 	mov.w	ip, #10
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cbc:	3a30      	subs	r2, #48	@ 0x30
 8005cbe:	2a09      	cmp	r2, #9
 8005cc0:	d903      	bls.n	8005cca <_svfiprintf_r+0x1a6>
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0c6      	beq.n	8005c54 <_svfiprintf_r+0x130>
 8005cc6:	9105      	str	r1, [sp, #20]
 8005cc8:	e7c4      	b.n	8005c54 <_svfiprintf_r+0x130>
 8005cca:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cce:	4604      	mov	r4, r0
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e7f0      	b.n	8005cb6 <_svfiprintf_r+0x192>
 8005cd4:	ab03      	add	r3, sp, #12
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	462a      	mov	r2, r5
 8005cda:	4b0e      	ldr	r3, [pc, #56]	@ (8005d14 <_svfiprintf_r+0x1f0>)
 8005cdc:	a904      	add	r1, sp, #16
 8005cde:	4638      	mov	r0, r7
 8005ce0:	f3af 8000 	nop.w
 8005ce4:	1c42      	adds	r2, r0, #1
 8005ce6:	4606      	mov	r6, r0
 8005ce8:	d1d6      	bne.n	8005c98 <_svfiprintf_r+0x174>
 8005cea:	89ab      	ldrh	r3, [r5, #12]
 8005cec:	065b      	lsls	r3, r3, #25
 8005cee:	f53f af2d 	bmi.w	8005b4c <_svfiprintf_r+0x28>
 8005cf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cf4:	e72c      	b.n	8005b50 <_svfiprintf_r+0x2c>
 8005cf6:	ab03      	add	r3, sp, #12
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	462a      	mov	r2, r5
 8005cfc:	4b05      	ldr	r3, [pc, #20]	@ (8005d14 <_svfiprintf_r+0x1f0>)
 8005cfe:	a904      	add	r1, sp, #16
 8005d00:	4638      	mov	r0, r7
 8005d02:	f000 f91b 	bl	8005f3c <_printf_i>
 8005d06:	e7ed      	b.n	8005ce4 <_svfiprintf_r+0x1c0>
 8005d08:	080063d0 	.word	0x080063d0
 8005d0c:	080063da 	.word	0x080063da
 8005d10:	00000000 	.word	0x00000000
 8005d14:	08005a6d 	.word	0x08005a6d
 8005d18:	080063d6 	.word	0x080063d6

08005d1c <sbrk_aligned>:
 8005d1c:	b570      	push	{r4, r5, r6, lr}
 8005d1e:	4e0f      	ldr	r6, [pc, #60]	@ (8005d5c <sbrk_aligned+0x40>)
 8005d20:	460c      	mov	r4, r1
 8005d22:	6831      	ldr	r1, [r6, #0]
 8005d24:	4605      	mov	r5, r0
 8005d26:	b911      	cbnz	r1, 8005d2e <sbrk_aligned+0x12>
 8005d28:	f000 fa7a 	bl	8006220 <_sbrk_r>
 8005d2c:	6030      	str	r0, [r6, #0]
 8005d2e:	4621      	mov	r1, r4
 8005d30:	4628      	mov	r0, r5
 8005d32:	f000 fa75 	bl	8006220 <_sbrk_r>
 8005d36:	1c43      	adds	r3, r0, #1
 8005d38:	d103      	bne.n	8005d42 <sbrk_aligned+0x26>
 8005d3a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005d3e:	4620      	mov	r0, r4
 8005d40:	bd70      	pop	{r4, r5, r6, pc}
 8005d42:	1cc4      	adds	r4, r0, #3
 8005d44:	f024 0403 	bic.w	r4, r4, #3
 8005d48:	42a0      	cmp	r0, r4
 8005d4a:	d0f8      	beq.n	8005d3e <sbrk_aligned+0x22>
 8005d4c:	1a21      	subs	r1, r4, r0
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f000 fa66 	bl	8006220 <_sbrk_r>
 8005d54:	3001      	adds	r0, #1
 8005d56:	d1f2      	bne.n	8005d3e <sbrk_aligned+0x22>
 8005d58:	e7ef      	b.n	8005d3a <sbrk_aligned+0x1e>
 8005d5a:	bf00      	nop
 8005d5c:	20000628 	.word	0x20000628

08005d60 <_malloc_r>:
 8005d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d64:	1ccd      	adds	r5, r1, #3
 8005d66:	f025 0503 	bic.w	r5, r5, #3
 8005d6a:	3508      	adds	r5, #8
 8005d6c:	2d0c      	cmp	r5, #12
 8005d6e:	bf38      	it	cc
 8005d70:	250c      	movcc	r5, #12
 8005d72:	2d00      	cmp	r5, #0
 8005d74:	4606      	mov	r6, r0
 8005d76:	db01      	blt.n	8005d7c <_malloc_r+0x1c>
 8005d78:	42a9      	cmp	r1, r5
 8005d7a:	d904      	bls.n	8005d86 <_malloc_r+0x26>
 8005d7c:	230c      	movs	r3, #12
 8005d7e:	6033      	str	r3, [r6, #0]
 8005d80:	2000      	movs	r0, #0
 8005d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e5c <_malloc_r+0xfc>
 8005d8a:	f000 f9f5 	bl	8006178 <__malloc_lock>
 8005d8e:	f8d8 3000 	ldr.w	r3, [r8]
 8005d92:	461c      	mov	r4, r3
 8005d94:	bb44      	cbnz	r4, 8005de8 <_malloc_r+0x88>
 8005d96:	4629      	mov	r1, r5
 8005d98:	4630      	mov	r0, r6
 8005d9a:	f7ff ffbf 	bl	8005d1c <sbrk_aligned>
 8005d9e:	1c43      	adds	r3, r0, #1
 8005da0:	4604      	mov	r4, r0
 8005da2:	d158      	bne.n	8005e56 <_malloc_r+0xf6>
 8005da4:	f8d8 4000 	ldr.w	r4, [r8]
 8005da8:	4627      	mov	r7, r4
 8005daa:	2f00      	cmp	r7, #0
 8005dac:	d143      	bne.n	8005e36 <_malloc_r+0xd6>
 8005dae:	2c00      	cmp	r4, #0
 8005db0:	d04b      	beq.n	8005e4a <_malloc_r+0xea>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	4639      	mov	r1, r7
 8005db6:	4630      	mov	r0, r6
 8005db8:	eb04 0903 	add.w	r9, r4, r3
 8005dbc:	f000 fa30 	bl	8006220 <_sbrk_r>
 8005dc0:	4581      	cmp	r9, r0
 8005dc2:	d142      	bne.n	8005e4a <_malloc_r+0xea>
 8005dc4:	6821      	ldr	r1, [r4, #0]
 8005dc6:	1a6d      	subs	r5, r5, r1
 8005dc8:	4629      	mov	r1, r5
 8005dca:	4630      	mov	r0, r6
 8005dcc:	f7ff ffa6 	bl	8005d1c <sbrk_aligned>
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d03a      	beq.n	8005e4a <_malloc_r+0xea>
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	442b      	add	r3, r5
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	f8d8 3000 	ldr.w	r3, [r8]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	bb62      	cbnz	r2, 8005e3c <_malloc_r+0xdc>
 8005de2:	f8c8 7000 	str.w	r7, [r8]
 8005de6:	e00f      	b.n	8005e08 <_malloc_r+0xa8>
 8005de8:	6822      	ldr	r2, [r4, #0]
 8005dea:	1b52      	subs	r2, r2, r5
 8005dec:	d420      	bmi.n	8005e30 <_malloc_r+0xd0>
 8005dee:	2a0b      	cmp	r2, #11
 8005df0:	d917      	bls.n	8005e22 <_malloc_r+0xc2>
 8005df2:	1961      	adds	r1, r4, r5
 8005df4:	42a3      	cmp	r3, r4
 8005df6:	6025      	str	r5, [r4, #0]
 8005df8:	bf18      	it	ne
 8005dfa:	6059      	strne	r1, [r3, #4]
 8005dfc:	6863      	ldr	r3, [r4, #4]
 8005dfe:	bf08      	it	eq
 8005e00:	f8c8 1000 	streq.w	r1, [r8]
 8005e04:	5162      	str	r2, [r4, r5]
 8005e06:	604b      	str	r3, [r1, #4]
 8005e08:	4630      	mov	r0, r6
 8005e0a:	f000 f9bb 	bl	8006184 <__malloc_unlock>
 8005e0e:	f104 000b 	add.w	r0, r4, #11
 8005e12:	1d23      	adds	r3, r4, #4
 8005e14:	f020 0007 	bic.w	r0, r0, #7
 8005e18:	1ac2      	subs	r2, r0, r3
 8005e1a:	bf1c      	itt	ne
 8005e1c:	1a1b      	subne	r3, r3, r0
 8005e1e:	50a3      	strne	r3, [r4, r2]
 8005e20:	e7af      	b.n	8005d82 <_malloc_r+0x22>
 8005e22:	6862      	ldr	r2, [r4, #4]
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	bf0c      	ite	eq
 8005e28:	f8c8 2000 	streq.w	r2, [r8]
 8005e2c:	605a      	strne	r2, [r3, #4]
 8005e2e:	e7eb      	b.n	8005e08 <_malloc_r+0xa8>
 8005e30:	4623      	mov	r3, r4
 8005e32:	6864      	ldr	r4, [r4, #4]
 8005e34:	e7ae      	b.n	8005d94 <_malloc_r+0x34>
 8005e36:	463c      	mov	r4, r7
 8005e38:	687f      	ldr	r7, [r7, #4]
 8005e3a:	e7b6      	b.n	8005daa <_malloc_r+0x4a>
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	42a3      	cmp	r3, r4
 8005e42:	d1fb      	bne.n	8005e3c <_malloc_r+0xdc>
 8005e44:	2300      	movs	r3, #0
 8005e46:	6053      	str	r3, [r2, #4]
 8005e48:	e7de      	b.n	8005e08 <_malloc_r+0xa8>
 8005e4a:	230c      	movs	r3, #12
 8005e4c:	6033      	str	r3, [r6, #0]
 8005e4e:	4630      	mov	r0, r6
 8005e50:	f000 f998 	bl	8006184 <__malloc_unlock>
 8005e54:	e794      	b.n	8005d80 <_malloc_r+0x20>
 8005e56:	6005      	str	r5, [r0, #0]
 8005e58:	e7d6      	b.n	8005e08 <_malloc_r+0xa8>
 8005e5a:	bf00      	nop
 8005e5c:	2000062c 	.word	0x2000062c

08005e60 <_printf_common>:
 8005e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e64:	4616      	mov	r6, r2
 8005e66:	4698      	mov	r8, r3
 8005e68:	688a      	ldr	r2, [r1, #8]
 8005e6a:	690b      	ldr	r3, [r1, #16]
 8005e6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e70:	4293      	cmp	r3, r2
 8005e72:	bfb8      	it	lt
 8005e74:	4613      	movlt	r3, r2
 8005e76:	6033      	str	r3, [r6, #0]
 8005e78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e7c:	4607      	mov	r7, r0
 8005e7e:	460c      	mov	r4, r1
 8005e80:	b10a      	cbz	r2, 8005e86 <_printf_common+0x26>
 8005e82:	3301      	adds	r3, #1
 8005e84:	6033      	str	r3, [r6, #0]
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	0699      	lsls	r1, r3, #26
 8005e8a:	bf42      	ittt	mi
 8005e8c:	6833      	ldrmi	r3, [r6, #0]
 8005e8e:	3302      	addmi	r3, #2
 8005e90:	6033      	strmi	r3, [r6, #0]
 8005e92:	6825      	ldr	r5, [r4, #0]
 8005e94:	f015 0506 	ands.w	r5, r5, #6
 8005e98:	d106      	bne.n	8005ea8 <_printf_common+0x48>
 8005e9a:	f104 0a19 	add.w	sl, r4, #25
 8005e9e:	68e3      	ldr	r3, [r4, #12]
 8005ea0:	6832      	ldr	r2, [r6, #0]
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	42ab      	cmp	r3, r5
 8005ea6:	dc26      	bgt.n	8005ef6 <_printf_common+0x96>
 8005ea8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005eac:	6822      	ldr	r2, [r4, #0]
 8005eae:	3b00      	subs	r3, #0
 8005eb0:	bf18      	it	ne
 8005eb2:	2301      	movne	r3, #1
 8005eb4:	0692      	lsls	r2, r2, #26
 8005eb6:	d42b      	bmi.n	8005f10 <_printf_common+0xb0>
 8005eb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ebc:	4641      	mov	r1, r8
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	47c8      	blx	r9
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d01e      	beq.n	8005f04 <_printf_common+0xa4>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	6922      	ldr	r2, [r4, #16]
 8005eca:	f003 0306 	and.w	r3, r3, #6
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	bf02      	ittt	eq
 8005ed2:	68e5      	ldreq	r5, [r4, #12]
 8005ed4:	6833      	ldreq	r3, [r6, #0]
 8005ed6:	1aed      	subeq	r5, r5, r3
 8005ed8:	68a3      	ldr	r3, [r4, #8]
 8005eda:	bf0c      	ite	eq
 8005edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ee0:	2500      	movne	r5, #0
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	bfc4      	itt	gt
 8005ee6:	1a9b      	subgt	r3, r3, r2
 8005ee8:	18ed      	addgt	r5, r5, r3
 8005eea:	2600      	movs	r6, #0
 8005eec:	341a      	adds	r4, #26
 8005eee:	42b5      	cmp	r5, r6
 8005ef0:	d11a      	bne.n	8005f28 <_printf_common+0xc8>
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	e008      	b.n	8005f08 <_printf_common+0xa8>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	4652      	mov	r2, sl
 8005efa:	4641      	mov	r1, r8
 8005efc:	4638      	mov	r0, r7
 8005efe:	47c8      	blx	r9
 8005f00:	3001      	adds	r0, #1
 8005f02:	d103      	bne.n	8005f0c <_printf_common+0xac>
 8005f04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0c:	3501      	adds	r5, #1
 8005f0e:	e7c6      	b.n	8005e9e <_printf_common+0x3e>
 8005f10:	18e1      	adds	r1, r4, r3
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	2030      	movs	r0, #48	@ 0x30
 8005f16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f1a:	4422      	add	r2, r4
 8005f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f24:	3302      	adds	r3, #2
 8005f26:	e7c7      	b.n	8005eb8 <_printf_common+0x58>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	4622      	mov	r2, r4
 8005f2c:	4641      	mov	r1, r8
 8005f2e:	4638      	mov	r0, r7
 8005f30:	47c8      	blx	r9
 8005f32:	3001      	adds	r0, #1
 8005f34:	d0e6      	beq.n	8005f04 <_printf_common+0xa4>
 8005f36:	3601      	adds	r6, #1
 8005f38:	e7d9      	b.n	8005eee <_printf_common+0x8e>
	...

08005f3c <_printf_i>:
 8005f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f40:	7e0f      	ldrb	r7, [r1, #24]
 8005f42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f44:	2f78      	cmp	r7, #120	@ 0x78
 8005f46:	4691      	mov	r9, r2
 8005f48:	4680      	mov	r8, r0
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	469a      	mov	sl, r3
 8005f4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f52:	d807      	bhi.n	8005f64 <_printf_i+0x28>
 8005f54:	2f62      	cmp	r7, #98	@ 0x62
 8005f56:	d80a      	bhi.n	8005f6e <_printf_i+0x32>
 8005f58:	2f00      	cmp	r7, #0
 8005f5a:	f000 80d1 	beq.w	8006100 <_printf_i+0x1c4>
 8005f5e:	2f58      	cmp	r7, #88	@ 0x58
 8005f60:	f000 80b8 	beq.w	80060d4 <_printf_i+0x198>
 8005f64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f6c:	e03a      	b.n	8005fe4 <_printf_i+0xa8>
 8005f6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f72:	2b15      	cmp	r3, #21
 8005f74:	d8f6      	bhi.n	8005f64 <_printf_i+0x28>
 8005f76:	a101      	add	r1, pc, #4	@ (adr r1, 8005f7c <_printf_i+0x40>)
 8005f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f7c:	08005fd5 	.word	0x08005fd5
 8005f80:	08005fe9 	.word	0x08005fe9
 8005f84:	08005f65 	.word	0x08005f65
 8005f88:	08005f65 	.word	0x08005f65
 8005f8c:	08005f65 	.word	0x08005f65
 8005f90:	08005f65 	.word	0x08005f65
 8005f94:	08005fe9 	.word	0x08005fe9
 8005f98:	08005f65 	.word	0x08005f65
 8005f9c:	08005f65 	.word	0x08005f65
 8005fa0:	08005f65 	.word	0x08005f65
 8005fa4:	08005f65 	.word	0x08005f65
 8005fa8:	080060e7 	.word	0x080060e7
 8005fac:	08006013 	.word	0x08006013
 8005fb0:	080060a1 	.word	0x080060a1
 8005fb4:	08005f65 	.word	0x08005f65
 8005fb8:	08005f65 	.word	0x08005f65
 8005fbc:	08006109 	.word	0x08006109
 8005fc0:	08005f65 	.word	0x08005f65
 8005fc4:	08006013 	.word	0x08006013
 8005fc8:	08005f65 	.word	0x08005f65
 8005fcc:	08005f65 	.word	0x08005f65
 8005fd0:	080060a9 	.word	0x080060a9
 8005fd4:	6833      	ldr	r3, [r6, #0]
 8005fd6:	1d1a      	adds	r2, r3, #4
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6032      	str	r2, [r6, #0]
 8005fdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fe0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e09c      	b.n	8006122 <_printf_i+0x1e6>
 8005fe8:	6833      	ldr	r3, [r6, #0]
 8005fea:	6820      	ldr	r0, [r4, #0]
 8005fec:	1d19      	adds	r1, r3, #4
 8005fee:	6031      	str	r1, [r6, #0]
 8005ff0:	0606      	lsls	r6, r0, #24
 8005ff2:	d501      	bpl.n	8005ff8 <_printf_i+0xbc>
 8005ff4:	681d      	ldr	r5, [r3, #0]
 8005ff6:	e003      	b.n	8006000 <_printf_i+0xc4>
 8005ff8:	0645      	lsls	r5, r0, #25
 8005ffa:	d5fb      	bpl.n	8005ff4 <_printf_i+0xb8>
 8005ffc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006000:	2d00      	cmp	r5, #0
 8006002:	da03      	bge.n	800600c <_printf_i+0xd0>
 8006004:	232d      	movs	r3, #45	@ 0x2d
 8006006:	426d      	negs	r5, r5
 8006008:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800600c:	4858      	ldr	r0, [pc, #352]	@ (8006170 <_printf_i+0x234>)
 800600e:	230a      	movs	r3, #10
 8006010:	e011      	b.n	8006036 <_printf_i+0xfa>
 8006012:	6821      	ldr	r1, [r4, #0]
 8006014:	6833      	ldr	r3, [r6, #0]
 8006016:	0608      	lsls	r0, r1, #24
 8006018:	f853 5b04 	ldr.w	r5, [r3], #4
 800601c:	d402      	bmi.n	8006024 <_printf_i+0xe8>
 800601e:	0649      	lsls	r1, r1, #25
 8006020:	bf48      	it	mi
 8006022:	b2ad      	uxthmi	r5, r5
 8006024:	2f6f      	cmp	r7, #111	@ 0x6f
 8006026:	4852      	ldr	r0, [pc, #328]	@ (8006170 <_printf_i+0x234>)
 8006028:	6033      	str	r3, [r6, #0]
 800602a:	bf14      	ite	ne
 800602c:	230a      	movne	r3, #10
 800602e:	2308      	moveq	r3, #8
 8006030:	2100      	movs	r1, #0
 8006032:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006036:	6866      	ldr	r6, [r4, #4]
 8006038:	60a6      	str	r6, [r4, #8]
 800603a:	2e00      	cmp	r6, #0
 800603c:	db05      	blt.n	800604a <_printf_i+0x10e>
 800603e:	6821      	ldr	r1, [r4, #0]
 8006040:	432e      	orrs	r6, r5
 8006042:	f021 0104 	bic.w	r1, r1, #4
 8006046:	6021      	str	r1, [r4, #0]
 8006048:	d04b      	beq.n	80060e2 <_printf_i+0x1a6>
 800604a:	4616      	mov	r6, r2
 800604c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006050:	fb03 5711 	mls	r7, r3, r1, r5
 8006054:	5dc7      	ldrb	r7, [r0, r7]
 8006056:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800605a:	462f      	mov	r7, r5
 800605c:	42bb      	cmp	r3, r7
 800605e:	460d      	mov	r5, r1
 8006060:	d9f4      	bls.n	800604c <_printf_i+0x110>
 8006062:	2b08      	cmp	r3, #8
 8006064:	d10b      	bne.n	800607e <_printf_i+0x142>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	07df      	lsls	r7, r3, #31
 800606a:	d508      	bpl.n	800607e <_printf_i+0x142>
 800606c:	6923      	ldr	r3, [r4, #16]
 800606e:	6861      	ldr	r1, [r4, #4]
 8006070:	4299      	cmp	r1, r3
 8006072:	bfde      	ittt	le
 8006074:	2330      	movle	r3, #48	@ 0x30
 8006076:	f806 3c01 	strble.w	r3, [r6, #-1]
 800607a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800607e:	1b92      	subs	r2, r2, r6
 8006080:	6122      	str	r2, [r4, #16]
 8006082:	f8cd a000 	str.w	sl, [sp]
 8006086:	464b      	mov	r3, r9
 8006088:	aa03      	add	r2, sp, #12
 800608a:	4621      	mov	r1, r4
 800608c:	4640      	mov	r0, r8
 800608e:	f7ff fee7 	bl	8005e60 <_printf_common>
 8006092:	3001      	adds	r0, #1
 8006094:	d14a      	bne.n	800612c <_printf_i+0x1f0>
 8006096:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800609a:	b004      	add	sp, #16
 800609c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	f043 0320 	orr.w	r3, r3, #32
 80060a6:	6023      	str	r3, [r4, #0]
 80060a8:	4832      	ldr	r0, [pc, #200]	@ (8006174 <_printf_i+0x238>)
 80060aa:	2778      	movs	r7, #120	@ 0x78
 80060ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	6831      	ldr	r1, [r6, #0]
 80060b4:	061f      	lsls	r7, r3, #24
 80060b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80060ba:	d402      	bmi.n	80060c2 <_printf_i+0x186>
 80060bc:	065f      	lsls	r7, r3, #25
 80060be:	bf48      	it	mi
 80060c0:	b2ad      	uxthmi	r5, r5
 80060c2:	6031      	str	r1, [r6, #0]
 80060c4:	07d9      	lsls	r1, r3, #31
 80060c6:	bf44      	itt	mi
 80060c8:	f043 0320 	orrmi.w	r3, r3, #32
 80060cc:	6023      	strmi	r3, [r4, #0]
 80060ce:	b11d      	cbz	r5, 80060d8 <_printf_i+0x19c>
 80060d0:	2310      	movs	r3, #16
 80060d2:	e7ad      	b.n	8006030 <_printf_i+0xf4>
 80060d4:	4826      	ldr	r0, [pc, #152]	@ (8006170 <_printf_i+0x234>)
 80060d6:	e7e9      	b.n	80060ac <_printf_i+0x170>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	f023 0320 	bic.w	r3, r3, #32
 80060de:	6023      	str	r3, [r4, #0]
 80060e0:	e7f6      	b.n	80060d0 <_printf_i+0x194>
 80060e2:	4616      	mov	r6, r2
 80060e4:	e7bd      	b.n	8006062 <_printf_i+0x126>
 80060e6:	6833      	ldr	r3, [r6, #0]
 80060e8:	6825      	ldr	r5, [r4, #0]
 80060ea:	6961      	ldr	r1, [r4, #20]
 80060ec:	1d18      	adds	r0, r3, #4
 80060ee:	6030      	str	r0, [r6, #0]
 80060f0:	062e      	lsls	r6, r5, #24
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	d501      	bpl.n	80060fa <_printf_i+0x1be>
 80060f6:	6019      	str	r1, [r3, #0]
 80060f8:	e002      	b.n	8006100 <_printf_i+0x1c4>
 80060fa:	0668      	lsls	r0, r5, #25
 80060fc:	d5fb      	bpl.n	80060f6 <_printf_i+0x1ba>
 80060fe:	8019      	strh	r1, [r3, #0]
 8006100:	2300      	movs	r3, #0
 8006102:	6123      	str	r3, [r4, #16]
 8006104:	4616      	mov	r6, r2
 8006106:	e7bc      	b.n	8006082 <_printf_i+0x146>
 8006108:	6833      	ldr	r3, [r6, #0]
 800610a:	1d1a      	adds	r2, r3, #4
 800610c:	6032      	str	r2, [r6, #0]
 800610e:	681e      	ldr	r6, [r3, #0]
 8006110:	6862      	ldr	r2, [r4, #4]
 8006112:	2100      	movs	r1, #0
 8006114:	4630      	mov	r0, r6
 8006116:	f7fa f863 	bl	80001e0 <memchr>
 800611a:	b108      	cbz	r0, 8006120 <_printf_i+0x1e4>
 800611c:	1b80      	subs	r0, r0, r6
 800611e:	6060      	str	r0, [r4, #4]
 8006120:	6863      	ldr	r3, [r4, #4]
 8006122:	6123      	str	r3, [r4, #16]
 8006124:	2300      	movs	r3, #0
 8006126:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800612a:	e7aa      	b.n	8006082 <_printf_i+0x146>
 800612c:	6923      	ldr	r3, [r4, #16]
 800612e:	4632      	mov	r2, r6
 8006130:	4649      	mov	r1, r9
 8006132:	4640      	mov	r0, r8
 8006134:	47d0      	blx	sl
 8006136:	3001      	adds	r0, #1
 8006138:	d0ad      	beq.n	8006096 <_printf_i+0x15a>
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	079b      	lsls	r3, r3, #30
 800613e:	d413      	bmi.n	8006168 <_printf_i+0x22c>
 8006140:	68e0      	ldr	r0, [r4, #12]
 8006142:	9b03      	ldr	r3, [sp, #12]
 8006144:	4298      	cmp	r0, r3
 8006146:	bfb8      	it	lt
 8006148:	4618      	movlt	r0, r3
 800614a:	e7a6      	b.n	800609a <_printf_i+0x15e>
 800614c:	2301      	movs	r3, #1
 800614e:	4632      	mov	r2, r6
 8006150:	4649      	mov	r1, r9
 8006152:	4640      	mov	r0, r8
 8006154:	47d0      	blx	sl
 8006156:	3001      	adds	r0, #1
 8006158:	d09d      	beq.n	8006096 <_printf_i+0x15a>
 800615a:	3501      	adds	r5, #1
 800615c:	68e3      	ldr	r3, [r4, #12]
 800615e:	9903      	ldr	r1, [sp, #12]
 8006160:	1a5b      	subs	r3, r3, r1
 8006162:	42ab      	cmp	r3, r5
 8006164:	dcf2      	bgt.n	800614c <_printf_i+0x210>
 8006166:	e7eb      	b.n	8006140 <_printf_i+0x204>
 8006168:	2500      	movs	r5, #0
 800616a:	f104 0619 	add.w	r6, r4, #25
 800616e:	e7f5      	b.n	800615c <_printf_i+0x220>
 8006170:	080063e1 	.word	0x080063e1
 8006174:	080063f2 	.word	0x080063f2

08006178 <__malloc_lock>:
 8006178:	4801      	ldr	r0, [pc, #4]	@ (8006180 <__malloc_lock+0x8>)
 800617a:	f7ff bc75 	b.w	8005a68 <__retarget_lock_acquire_recursive>
 800617e:	bf00      	nop
 8006180:	20000624 	.word	0x20000624

08006184 <__malloc_unlock>:
 8006184:	4801      	ldr	r0, [pc, #4]	@ (800618c <__malloc_unlock+0x8>)
 8006186:	f7ff bc70 	b.w	8005a6a <__retarget_lock_release_recursive>
 800618a:	bf00      	nop
 800618c:	20000624 	.word	0x20000624

08006190 <_realloc_r>:
 8006190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006194:	4607      	mov	r7, r0
 8006196:	4614      	mov	r4, r2
 8006198:	460d      	mov	r5, r1
 800619a:	b921      	cbnz	r1, 80061a6 <_realloc_r+0x16>
 800619c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061a0:	4611      	mov	r1, r2
 80061a2:	f7ff bddd 	b.w	8005d60 <_malloc_r>
 80061a6:	b92a      	cbnz	r2, 80061b4 <_realloc_r+0x24>
 80061a8:	f000 f858 	bl	800625c <_free_r>
 80061ac:	4625      	mov	r5, r4
 80061ae:	4628      	mov	r0, r5
 80061b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061b4:	f000 f89c 	bl	80062f0 <_malloc_usable_size_r>
 80061b8:	4284      	cmp	r4, r0
 80061ba:	4606      	mov	r6, r0
 80061bc:	d802      	bhi.n	80061c4 <_realloc_r+0x34>
 80061be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80061c2:	d8f4      	bhi.n	80061ae <_realloc_r+0x1e>
 80061c4:	4621      	mov	r1, r4
 80061c6:	4638      	mov	r0, r7
 80061c8:	f7ff fdca 	bl	8005d60 <_malloc_r>
 80061cc:	4680      	mov	r8, r0
 80061ce:	b908      	cbnz	r0, 80061d4 <_realloc_r+0x44>
 80061d0:	4645      	mov	r5, r8
 80061d2:	e7ec      	b.n	80061ae <_realloc_r+0x1e>
 80061d4:	42b4      	cmp	r4, r6
 80061d6:	4622      	mov	r2, r4
 80061d8:	4629      	mov	r1, r5
 80061da:	bf28      	it	cs
 80061dc:	4632      	movcs	r2, r6
 80061de:	f000 f82f 	bl	8006240 <memcpy>
 80061e2:	4629      	mov	r1, r5
 80061e4:	4638      	mov	r0, r7
 80061e6:	f000 f839 	bl	800625c <_free_r>
 80061ea:	e7f1      	b.n	80061d0 <_realloc_r+0x40>

080061ec <memmove>:
 80061ec:	4288      	cmp	r0, r1
 80061ee:	b510      	push	{r4, lr}
 80061f0:	eb01 0402 	add.w	r4, r1, r2
 80061f4:	d902      	bls.n	80061fc <memmove+0x10>
 80061f6:	4284      	cmp	r4, r0
 80061f8:	4623      	mov	r3, r4
 80061fa:	d807      	bhi.n	800620c <memmove+0x20>
 80061fc:	1e43      	subs	r3, r0, #1
 80061fe:	42a1      	cmp	r1, r4
 8006200:	d008      	beq.n	8006214 <memmove+0x28>
 8006202:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006206:	f803 2f01 	strb.w	r2, [r3, #1]!
 800620a:	e7f8      	b.n	80061fe <memmove+0x12>
 800620c:	4402      	add	r2, r0
 800620e:	4601      	mov	r1, r0
 8006210:	428a      	cmp	r2, r1
 8006212:	d100      	bne.n	8006216 <memmove+0x2a>
 8006214:	bd10      	pop	{r4, pc}
 8006216:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800621a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800621e:	e7f7      	b.n	8006210 <memmove+0x24>

08006220 <_sbrk_r>:
 8006220:	b538      	push	{r3, r4, r5, lr}
 8006222:	4d06      	ldr	r5, [pc, #24]	@ (800623c <_sbrk_r+0x1c>)
 8006224:	2300      	movs	r3, #0
 8006226:	4604      	mov	r4, r0
 8006228:	4608      	mov	r0, r1
 800622a:	602b      	str	r3, [r5, #0]
 800622c:	f7fb ff72 	bl	8002114 <_sbrk>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	d102      	bne.n	800623a <_sbrk_r+0x1a>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	b103      	cbz	r3, 800623a <_sbrk_r+0x1a>
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	bd38      	pop	{r3, r4, r5, pc}
 800623c:	20000630 	.word	0x20000630

08006240 <memcpy>:
 8006240:	440a      	add	r2, r1
 8006242:	4291      	cmp	r1, r2
 8006244:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006248:	d100      	bne.n	800624c <memcpy+0xc>
 800624a:	4770      	bx	lr
 800624c:	b510      	push	{r4, lr}
 800624e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006252:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006256:	4291      	cmp	r1, r2
 8006258:	d1f9      	bne.n	800624e <memcpy+0xe>
 800625a:	bd10      	pop	{r4, pc}

0800625c <_free_r>:
 800625c:	b538      	push	{r3, r4, r5, lr}
 800625e:	4605      	mov	r5, r0
 8006260:	2900      	cmp	r1, #0
 8006262:	d041      	beq.n	80062e8 <_free_r+0x8c>
 8006264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006268:	1f0c      	subs	r4, r1, #4
 800626a:	2b00      	cmp	r3, #0
 800626c:	bfb8      	it	lt
 800626e:	18e4      	addlt	r4, r4, r3
 8006270:	f7ff ff82 	bl	8006178 <__malloc_lock>
 8006274:	4a1d      	ldr	r2, [pc, #116]	@ (80062ec <_free_r+0x90>)
 8006276:	6813      	ldr	r3, [r2, #0]
 8006278:	b933      	cbnz	r3, 8006288 <_free_r+0x2c>
 800627a:	6063      	str	r3, [r4, #4]
 800627c:	6014      	str	r4, [r2, #0]
 800627e:	4628      	mov	r0, r5
 8006280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006284:	f7ff bf7e 	b.w	8006184 <__malloc_unlock>
 8006288:	42a3      	cmp	r3, r4
 800628a:	d908      	bls.n	800629e <_free_r+0x42>
 800628c:	6820      	ldr	r0, [r4, #0]
 800628e:	1821      	adds	r1, r4, r0
 8006290:	428b      	cmp	r3, r1
 8006292:	bf01      	itttt	eq
 8006294:	6819      	ldreq	r1, [r3, #0]
 8006296:	685b      	ldreq	r3, [r3, #4]
 8006298:	1809      	addeq	r1, r1, r0
 800629a:	6021      	streq	r1, [r4, #0]
 800629c:	e7ed      	b.n	800627a <_free_r+0x1e>
 800629e:	461a      	mov	r2, r3
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	b10b      	cbz	r3, 80062a8 <_free_r+0x4c>
 80062a4:	42a3      	cmp	r3, r4
 80062a6:	d9fa      	bls.n	800629e <_free_r+0x42>
 80062a8:	6811      	ldr	r1, [r2, #0]
 80062aa:	1850      	adds	r0, r2, r1
 80062ac:	42a0      	cmp	r0, r4
 80062ae:	d10b      	bne.n	80062c8 <_free_r+0x6c>
 80062b0:	6820      	ldr	r0, [r4, #0]
 80062b2:	4401      	add	r1, r0
 80062b4:	1850      	adds	r0, r2, r1
 80062b6:	4283      	cmp	r3, r0
 80062b8:	6011      	str	r1, [r2, #0]
 80062ba:	d1e0      	bne.n	800627e <_free_r+0x22>
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	6053      	str	r3, [r2, #4]
 80062c2:	4408      	add	r0, r1
 80062c4:	6010      	str	r0, [r2, #0]
 80062c6:	e7da      	b.n	800627e <_free_r+0x22>
 80062c8:	d902      	bls.n	80062d0 <_free_r+0x74>
 80062ca:	230c      	movs	r3, #12
 80062cc:	602b      	str	r3, [r5, #0]
 80062ce:	e7d6      	b.n	800627e <_free_r+0x22>
 80062d0:	6820      	ldr	r0, [r4, #0]
 80062d2:	1821      	adds	r1, r4, r0
 80062d4:	428b      	cmp	r3, r1
 80062d6:	bf04      	itt	eq
 80062d8:	6819      	ldreq	r1, [r3, #0]
 80062da:	685b      	ldreq	r3, [r3, #4]
 80062dc:	6063      	str	r3, [r4, #4]
 80062de:	bf04      	itt	eq
 80062e0:	1809      	addeq	r1, r1, r0
 80062e2:	6021      	streq	r1, [r4, #0]
 80062e4:	6054      	str	r4, [r2, #4]
 80062e6:	e7ca      	b.n	800627e <_free_r+0x22>
 80062e8:	bd38      	pop	{r3, r4, r5, pc}
 80062ea:	bf00      	nop
 80062ec:	2000062c 	.word	0x2000062c

080062f0 <_malloc_usable_size_r>:
 80062f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062f4:	1f18      	subs	r0, r3, #4
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	bfbc      	itt	lt
 80062fa:	580b      	ldrlt	r3, [r1, r0]
 80062fc:	18c0      	addlt	r0, r0, r3
 80062fe:	4770      	bx	lr

08006300 <_init>:
 8006300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006302:	bf00      	nop
 8006304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006306:	bc08      	pop	{r3}
 8006308:	469e      	mov	lr, r3
 800630a:	4770      	bx	lr

0800630c <_fini>:
 800630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630e:	bf00      	nop
 8006310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006312:	bc08      	pop	{r3}
 8006314:	469e      	mov	lr, r3
 8006316:	4770      	bx	lr
