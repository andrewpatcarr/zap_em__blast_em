
CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004ca44  08007568  08007568  00008568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08053fac  08053fac  000552c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08053fac  08053fac  00054fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08053fb4  08053fb4  000552c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08053fb4  08053fb4  00054fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08053fb8  08053fb8  00054fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c0  20000000  08053fbc  00055000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  200002c0  0805427c  000552c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  0805427c  0005570c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000552c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bb6  00000000  00000000  000552f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030d1  00000000  00000000  00068ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  0006bf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ccd  00000000  00000000  0006d060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b85  00000000  00000000  0006dd2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017247  00000000  00000000  000878b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aff6  00000000  00000000  0009eaf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139aef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004938  00000000  00000000  00139b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0013e46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c0 	.word	0x200002c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007550 	.word	0x08007550

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c4 	.word	0x200002c4
 80001dc:	08007550 	.word	0x08007550

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <adc_task_run>:
 *
 * @param adc_task Pointer to the ADCTask structure containing state and
 * hardware info.
 */
void adc_task_run(ADCTask *adc_task)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    // Check for a valid state
    if (adc_task->state >= 0 && adc_task->state < adc_task->num_states)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db0f      	blt.n	80005dc <adc_task_run+0x30>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	da09      	bge.n	80005dc <adc_task_run+0x30>
    {
        // Call the appropriate state function
        adc_task->state_list[adc_task->state](adc_task);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	3306      	adds	r3, #6
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	4413      	add	r3, r2
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	4798      	blx	r3
    }
    else
    {
        while(1) {}
    }
}
 80005da:	e000      	b.n	80005de <adc_task_run+0x32>
        while(1) {}
 80005dc:	e7fe      	b.n	80005dc <adc_task_run+0x30>
}
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <adc_task_state_0_init>:
 * dma_buffer.
 *
 * @param adc_task Pointer to the ADCTask structure.
 */
void adc_task_state_0_init(ADCTask *adc_task)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
    adc_task->state = 1;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2201      	movs	r2, #1
 80005f0:	601a      	str	r2, [r3, #0]
    HAL_ADC_Start_DMA(adc_task->hadc,
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	2204      	movs	r2, #4
 80005f8:	4903      	ldr	r1, [pc, #12]	@ (8000608 <adc_task_state_0_init+0x24>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fd20 	bl	8003040 <HAL_ADC_Start_DMA>
                      (uint32_t*)dma_buffer,
                      4);
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200002dc 	.word	0x200002dc

0800060c <adc_task_state_1_read>:
 * `adc_val`.
 *
 * @param adc_task Pointer to the ADCTask structure.
 */
void adc_task_state_1_read(ADCTask *adc_task)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    adc_task->blue_photor_ptr->adc_val   = dma_buffer[0];
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <adc_task_state_1_read+0x3c>)
 8000616:	881a      	ldrh	r2, [r3, #0]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	60da      	str	r2, [r3, #12]
    adc_task->red_photor_ptr->adc_val    = dma_buffer[1];
 800061e:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <adc_task_state_1_read+0x3c>)
 8000620:	885a      	ldrh	r2, [r3, #2]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	691b      	ldr	r3, [r3, #16]
 8000626:	60da      	str	r2, [r3, #12]
    adc_task->blue_contr_ptr->adc_val    = dma_buffer[2];
 8000628:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <adc_task_state_1_read+0x3c>)
 800062a:	889a      	ldrh	r2, [r3, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	631a      	str	r2, [r3, #48]	@ 0x30
    adc_task->red_contr_ptr->adc_val     = dma_buffer[3];
 8000632:	4b05      	ldr	r3, [pc, #20]	@ (8000648 <adc_task_state_1_read+0x3c>)
 8000634:	88da      	ldrh	r2, [r3, #6]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	200002dc 	.word	0x200002dc

0800064c <controller_task_run>:
 * function from the task's function list.
 *
 * @param controller_task Pointer to the ControllerTask structure.
 */
void controller_task_run(ControllerTask *controller_task)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    if (controller_task->state >= 0 &&
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	2b00      	cmp	r3, #0
 800065a:	db0e      	blt.n	800067a <controller_task_run+0x2e>
        controller_task->state < controller_task->num_states)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	685a      	ldr	r2, [r3, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	689b      	ldr	r3, [r3, #8]
    if (controller_task->state >= 0 &&
 8000664:	429a      	cmp	r2, r3
 8000666:	da08      	bge.n	800067a <controller_task_run+0x2e>
    {
        controller_task->state_list[controller_task->state](controller_task);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	685a      	ldr	r2, [r3, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3214      	adds	r2, #20
 8000670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	4798      	blx	r3
    }
    else
    {
        while (1) {}
    }
}
 8000678:	e000      	b.n	800067c <controller_task_run+0x30>
        while (1) {}
 800067a:	e7fe      	b.n	800067a <controller_task_run+0x2e>
}
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <controller_task_state_0_init>:
 * the task to the next state.
 *
 * @param controller_task Pointer to the ControllerTask structure.
 */
void controller_task_state_0_init(ControllerTask *controller_task)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
    controller_task->prev_error = 0;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f04f 0200 	mov.w	r2, #0
 8000690:	64da      	str	r2, [r3, #76]	@ 0x4c
    enable(controller_task->motor);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fc55 	bl	8001f46 <enable>

    // record ADC zero (center/home)
    controller_task->pot_zero = controller_task->adc_val;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a0:	461a      	mov	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	615a      	str	r2, [r3, #20]

    controller_task->state = 1;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2201      	movs	r2, #1
 80006aa:	605a      	str	r2, [r3, #4]
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <controller_task_state_1_pos>:
 * method. Timing is measured using a hardware timer.
 *
 * @param controller_task Pointer to the ControllerTask structure.
 */
void controller_task_state_1_pos(ControllerTask *controller_task)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
    int32_t des_pos = controller_task->dir *
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4619      	mov	r1, r3
                      (controller_task->adc_val -
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                       controller_task->pot_zero);
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	6952      	ldr	r2, [r2, #20]
                      (controller_task->adc_val -
 80006ca:	1a9b      	subs	r3, r3, r2
    int32_t des_pos = controller_task->dir *
 80006cc:	fb01 f303 	mul.w	r3, r1, r3
 80006d0:	61bb      	str	r3, [r7, #24]

    int32_t error = des_pos - controller_task->encoder->ticks;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	69ba      	ldr	r2, [r7, #24]
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	61fb      	str	r3, [r7, #28]
    if (error > 100) error = 99;
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	2b64      	cmp	r3, #100	@ 0x64
 80006e2:	dd01      	ble.n	80006e8 <controller_task_state_1_pos+0x34>
 80006e4:	2363      	movs	r3, #99	@ 0x63
 80006e6:	61fb      	str	r3, [r7, #28]
    if (error < -100) error = -99;
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80006ee:	da02      	bge.n	80006f6 <controller_task_state_1_pos+0x42>
 80006f0:	f06f 0362 	mvn.w	r3, #98	@ 0x62
 80006f4:	61fb      	str	r3, [r7, #28]

    read_encoder(controller_task->encoder); // updates encoder ticks
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 f872 	bl	80007e4 <read_encoder>

    controller_task->current_time =
        __HAL_TIM_GET_COUNTER(controller_task->htim_dt);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
    controller_task->current_time =
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	621a      	str	r2, [r3, #32]

    uint32_t dt_ticks =
        (controller_task->current_time >= controller_task->prev_time) ?
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6a1a      	ldr	r2, [r3, #32]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	69db      	ldr	r3, [r3, #28]
        (controller_task->current_time - controller_task->prev_time) :
 8000714:	429a      	cmp	r2, r3
 8000716:	d305      	bcc.n	8000724 <controller_task_state_1_pos+0x70>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6a1a      	ldr	r2, [r3, #32]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	69db      	ldr	r3, [r3, #28]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	e005      	b.n	8000730 <controller_task_state_1_pos+0x7c>
        (0xFFFFFFFF - controller_task->prev_time +
         controller_task->current_time);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6a1a      	ldr	r2, [r3, #32]
        (0xFFFFFFFF - controller_task->prev_time +
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	1ad3      	subs	r3, r2, r3
        (controller_task->current_time - controller_task->prev_time) :
 800072e:	3b01      	subs	r3, #1
    uint32_t dt_ticks =
 8000730:	617b      	str	r3, [r7, #20]

    if (dt_ticks == 0) return;
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d039      	beq.n	80007ac <controller_task_state_1_pos+0xf8>

    int32_t delta_time = dt_ticks / 1000.0f;
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	ee07 3a90 	vmov	s15, r3
 800073e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000742:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80007b4 <controller_task_state_1_pos+0x100>
 8000746:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800074a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800074e:	ee17 3a90 	vmov	r3, s15
 8000752:	613b      	str	r3, [r7, #16]
    controller_task->integral_error += error * delta_time;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	6939      	ldr	r1, [r7, #16]
 800075c:	fb01 f303 	mul.w	r3, r1, r3
 8000760:	441a      	add	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	635a      	str	r2, [r3, #52]	@ 0x34

    int32_t control = controller_task->k_p * error +
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	ee07 3a90 	vmov	s15, r3
 8000772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000776:	ee27 7a27 	vmul.f32	s14, s14, s15
                      controller_task->k_i *
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
                      controller_task->integral_error;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                      controller_task->k_i *
 8000784:	ee07 3a90 	vmov	s15, r3
 8000788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800078c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    int32_t control = controller_task->k_p * error +
 8000790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000798:	ee17 3a90 	vmov	r3, s15
 800079c:	60fb      	str	r3, [r7, #12]

    set_duty(controller_task->motor, control);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007a2:	68f9      	ldr	r1, [r7, #12]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 fb19 	bl	8001ddc <set_duty>
 80007aa:	e000      	b.n	80007ae <controller_task_state_1_pos+0xfa>
    if (dt_ticks == 0) return;
 80007ac:	bf00      	nop
}
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	447a0000 	.word	0x447a0000

080007b8 <setup_encoder>:
 * @param  p_enc  Pointer to an encoder_t instance.
 *
 * Captures the current hardware timer counter as the zero reference,
 * and clears both the cumulative tick count and the last-read snapshot.
 */
void setup_encoder(encoder_t *p_enc){
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
    p_enc->zero       = __HAL_TIM_GET_COUNTER(p_enc->htim);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	601a      	str	r2, [r3, #0]
    p_enc->ticks      = 0;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
    p_enc->last_ticks = 0;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <read_encoder>:
//
//    p_enc->last_ticks = current_ticks;
//    p_enc->ticks     += delta;
//}
void read_encoder(encoder_t *p_enc)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
    /* Compute signed tick count relative to zero */
    int32_t current_ticks = (int32_t)(__HAL_TIM_GET_COUNTER(p_enc->htim))
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007f4:	461a      	mov	r2, r3
                            - (int32_t)(p_enc->zero);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
    int32_t current_ticks = (int32_t)(__HAL_TIM_GET_COUNTER(p_enc->htim))
 80007fa:	1ad3      	subs	r3, r2, r3
 80007fc:	60bb      	str	r3, [r7, #8]
    int32_t delta = current_ticks - p_enc->last_ticks;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	68db      	ldr	r3, [r3, #12]
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	60fb      	str	r3, [r7, #12]

    /* Handle wrap-around if delta jumps more than half-range */
    if (delta > (p_enc->ar + 1) / 2) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	3301      	adds	r3, #1
 800080e:	0fda      	lsrs	r2, r3, #31
 8000810:	4413      	add	r3, r2
 8000812:	105b      	asrs	r3, r3, #1
 8000814:	461a      	mov	r2, r3
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	4293      	cmp	r3, r2
 800081a:	dd06      	ble.n	800082a <read_encoder+0x46>
        delta -= (p_enc->ar + 1);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	3301      	adds	r3, #1
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	e00f      	b.n	800084a <read_encoder+0x66>
    }
    else if (delta < -(p_enc->ar + 1) / 2) {
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	43db      	mvns	r3, r3
 8000830:	0fda      	lsrs	r2, r3, #31
 8000832:	4413      	add	r3, r2
 8000834:	105b      	asrs	r3, r3, #1
 8000836:	461a      	mov	r2, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4293      	cmp	r3, r2
 800083c:	da05      	bge.n	800084a <read_encoder+0x66>
        delta += (p_enc->ar + 1);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	3301      	adds	r3, #1
 8000844:	68fa      	ldr	r2, [r7, #12]
 8000846:	4413      	add	r3, r2
 8000848:	60fb      	str	r3, [r7, #12]
    }

    /* Update state */
    p_enc->last_ticks = current_ticks;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	60da      	str	r2, [r3, #12]
    p_enc->ticks     += delta;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	689a      	ldr	r2, [r3, #8]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	441a      	add	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	609a      	str	r2, [r3, #8]
}
 800085c:	bf00      	nop
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <wait_for_stall>:
 * @brief  Waits until the encoder motion stalls (no significant ticks change).
 *
 * @param  p_enc  Pointer to encoder_t instance
 */
void wait_for_stall(encoder_t *p_enc)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
    int32_t prev_ticks = p_enc->ticks;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	617b      	str	r3, [r7, #20]
    int stable_count = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
    while (stable_count < STALL_COUNT) {
 800087a:	e01a      	b.n	80008b2 <wait_for_stall+0x4a>
        // Update encoder ticks
        read_encoder(p_enc);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff ffb1 	bl	80007e4 <read_encoder>
        int32_t delta = p_enc->ticks - prev_ticks;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	60fb      	str	r3, [r7, #12]
        if (abs(delta) < STALL_THRESHOLD) {
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f113 0f04 	cmn.w	r3, #4
 8000892:	db06      	blt.n	80008a2 <wait_for_stall+0x3a>
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2b04      	cmp	r3, #4
 8000898:	dc03      	bgt.n	80008a2 <wait_for_stall+0x3a>
            stable_count++;
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	3301      	adds	r3, #1
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	e001      	b.n	80008a6 <wait_for_stall+0x3e>
        } else {
            stable_count = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
        }
        prev_ticks = p_enc->ticks;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	617b      	str	r3, [r7, #20]
        HAL_Delay(STALL_DELAY_MS);
 80008ac:	200a      	movs	r0, #10
 80008ae:	f002 fb5f 	bl	8002f70 <HAL_Delay>
    while (stable_count < STALL_COUNT) {
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	2b13      	cmp	r3, #19
 80008b6:	dde1      	ble.n	800087c <wait_for_stall+0x14>
    }
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <game_task_run>:
 *
 * @param game_task Pointer to the GameTask instance.
 */

void game_task_run(GameTask *game_task)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
    if (game_task->state >= 0 &&
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	db0f      	blt.n	80008f2 <game_task_run+0x30>
        game_task->state < game_task->num_states)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	685b      	ldr	r3, [r3, #4]
    if (game_task->state >= 0 &&
 80008da:	429a      	cmp	r2, r3
 80008dc:	da09      	bge.n	80008f2 <game_task_run+0x30>
    {
        game_task->state_list[game_task->state](game_task);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	3314      	adds	r3, #20
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	4798      	blx	r3
    }
    else
    {
        while (1) {}
    }
}
 80008f0:	e000      	b.n	80008f4 <game_task_run+0x32>
        while (1) {}
 80008f2:	e7fe      	b.n	80008f2 <game_task_run+0x30>
}
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <game_task_state_0_init>:
 *
 * @param game_task Pointer to the GameTask instance.
 */

void game_task_state_0_init(GameTask *game_task)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
    lcd_init();
 8000902:	f000 fab5 	bl	8000e70 <lcd_init>
    lcd_clear();
 8000906:	f000 faea 	bl	8000ede <lcd_clear>
    game_task->state = 1;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2201      	movs	r2, #1
 800090e:	601a      	str	r2, [r3, #0]
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <game_task_state_1_home>:
 * to the next state and triggers the start sound.
 *
 * @param game_task Pointer to the GameTask instance.
 */
void game_task_state_1_home(GameTask *game_task)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	set_duty(game_task->mred,0);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f001 fa58 	bl	8001ddc <set_duty>
	set_duty(game_task->mblue,0);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f001 fa52 	bl	8001ddc <set_duty>
	lcd_set_cursor(0, 0);
 8000938:	2100      	movs	r1, #0
 800093a:	2000      	movs	r0, #0
 800093c:	f000 fada 	bl	8000ef4 <lcd_set_cursor>
	lcd_print("  Zap'em Blast'em   ");
 8000940:	480f      	ldr	r0, [pc, #60]	@ (8000980 <game_task_state_1_home+0x68>)
 8000942:	f000 faf9 	bl	8000f38 <lcd_print>
	lcd_set_cursor(1, 0);
 8000946:	2100      	movs	r1, #0
 8000948:	2001      	movs	r0, #1
 800094a:	f000 fad3 	bl	8000ef4 <lcd_set_cursor>
	lcd_print("       Robots       ");
 800094e:	480d      	ldr	r0, [pc, #52]	@ (8000984 <game_task_state_1_home+0x6c>)
 8000950:	f000 faf2 	bl	8000f38 <lcd_print>
	lcd_set_cursor(3, 0);
 8000954:	2100      	movs	r1, #0
 8000956:	2003      	movs	r0, #3
 8000958:	f000 facc 	bl	8000ef4 <lcd_set_cursor>
	lcd_print("HOLD 'SHOOT' TO PLAY");
 800095c:	480a      	ldr	r0, [pc, #40]	@ (8000988 <game_task_state_1_home+0x70>)
 800095e:	f000 faeb 	bl	8000f38 <lcd_print>
	if (game_task->play_flag == 1){
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d106      	bne.n	8000978 <game_task_state_1_home+0x60>
    	game_task->state = 2;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2202      	movs	r2, #2
 800096e:	601a      	str	r2, [r3, #0]
    	game_task->sound_task_ptr->start_snd = 1;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000974:	2201      	movs	r2, #1
 8000976:	611a      	str	r2, [r3, #16]
    }

}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	08007568 	.word	0x08007568
 8000984:	08007580 	.word	0x08007580
 8000988:	08007598 	.word	0x08007598

0800098c <game_task_state_2_play>:
 * score, and transitions to end state when a score threshold is reached.
 *
 * @param game_task Pointer to the GameTask instance.
 */
void game_task_state_2_play(GameTask *game_task)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	char r_score[5];
	char b_score[5];


	// score counting and delaying
	if (game_task->red_photoresistor_task_ptr->hit_flag && game_task->red_delay_flag == 0){
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d026      	beq.n	80009ec <game_task_state_2_play+0x60>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d122      	bne.n	80009ec <game_task_state_2_play+0x60>
		game_task->score_blue++;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	691b      	ldr	r3, [r3, #16]
 80009aa:	1c5a      	adds	r2, r3, #1
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	611a      	str	r2, [r3, #16]
		game_task->red_photoresistor_task_ptr->hit_flag = 0;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
		game_task->red_delay_flag = 1;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2201      	movs	r2, #1
 80009bc:	62da      	str	r2, [r3, #44]	@ 0x2c
		game_task->red_delay_start = ms_counter;
 80009be:	4b78      	ldr	r3, [pc, #480]	@ (8000ba0 <game_task_state_2_play+0x214>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	625a      	str	r2, [r3, #36]	@ 0x24
		game_task->sound_task_ptr->hit_snd = 1;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009ca:	2201      	movs	r2, #1
 80009cc:	60da      	str	r2, [r3, #12]
		game_task->sound_task_ptr->state = 1;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009d2:	2201      	movs	r2, #1
 80009d4:	601a      	str	r2, [r3, #0]
		if(playing){
 80009d6:	4b73      	ldr	r3, [pc, #460]	@ (8000ba4 <game_task_state_2_play+0x218>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d006      	beq.n	80009ec <game_task_state_2_play+0x60>
			playing = 0;
 80009de:	4b71      	ldr	r3, [pc, #452]	@ (8000ba4 <game_task_state_2_play+0x218>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
			game_task->sound_task_ptr->state = 6;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009e8:	2206      	movs	r2, #6
 80009ea:	601a      	str	r2, [r3, #0]
		}
	}
	if (game_task->blue_photoresistor_task_ptr->hit_flag && game_task->blue_delay_flag == 0){
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d026      	beq.n	8000a44 <game_task_state_2_play+0xb8>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d122      	bne.n	8000a44 <game_task_state_2_play+0xb8>
		game_task->score_red++;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	60da      	str	r2, [r3, #12]
		game_task->blue_photoresistor_task_ptr->hit_flag = 0;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
		game_task->blue_delay_flag = 1;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2201      	movs	r2, #1
 8000a14:	631a      	str	r2, [r3, #48]	@ 0x30
		game_task->blue_delay_start = ms_counter;
 8000a16:	4b62      	ldr	r3, [pc, #392]	@ (8000ba0 <game_task_state_2_play+0x214>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	629a      	str	r2, [r3, #40]	@ 0x28
		game_task->sound_task_ptr->hit_snd = 1;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a22:	2201      	movs	r2, #1
 8000a24:	60da      	str	r2, [r3, #12]
		game_task->sound_task_ptr->state = 1;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	601a      	str	r2, [r3, #0]
		if(playing){
 8000a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8000ba4 <game_task_state_2_play+0x218>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d006      	beq.n	8000a44 <game_task_state_2_play+0xb8>
			playing = 0;
 8000a36:	4b5b      	ldr	r3, [pc, #364]	@ (8000ba4 <game_task_state_2_play+0x218>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
			game_task->sound_task_ptr->state = 6;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a40:	2206      	movs	r2, #6
 8000a42:	601a      	str	r2, [r3, #0]
		}
	}

	if ((ms_counter - game_task->red_delay_start) > game_task->delay && game_task->red_delay_flag)
 8000a44:	4b56      	ldr	r3, [pc, #344]	@ (8000ba0 <game_task_state_2_play+0x214>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a4c:	1ad2      	subs	r2, r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d90a      	bls.n	8000a6c <game_task_state_2_play+0xe0>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d006      	beq.n	8000a6c <game_task_state_2_play+0xe0>
	{

		game_task->red_delay_flag = 0;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	62da      	str	r2, [r3, #44]	@ 0x2c
		game_task->red_photoresistor_task_ptr->hit_flag = 0;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
	}
	if ((ms_counter - game_task->blue_delay_start) > game_task->delay && game_task->blue_delay_flag)
 8000a6c:	4b4c      	ldr	r3, [pc, #304]	@ (8000ba0 <game_task_state_2_play+0x214>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a74:	1ad2      	subs	r2, r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d90a      	bls.n	8000a94 <game_task_state_2_play+0x108>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d006      	beq.n	8000a94 <game_task_state_2_play+0x108>
	{
		game_task->blue_delay_flag = 0;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	631a      	str	r2, [r3, #48]	@ 0x30
		game_task->blue_photoresistor_task_ptr->hit_flag = 0;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
	}

	// add thing that prints score of each on the LCD
	//maybe only do once then adjust the score through a direct print index
	if (game_task->num == 0){
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6a1b      	ldr	r3, [r3, #32]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d122      	bne.n	8000ae2 <game_task_state_2_play+0x156>
		lcd_clear();
 8000a9c:	f000 fa1f 	bl	8000ede <lcd_clear>
		lcd_set_cursor(0, 0);
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 fa26 	bl	8000ef4 <lcd_set_cursor>
		lcd_print("  Zap'em Blast'em   ");
 8000aa8:	483f      	ldr	r0, [pc, #252]	@ (8000ba8 <game_task_state_2_play+0x21c>)
 8000aaa:	f000 fa45 	bl	8000f38 <lcd_print>
		lcd_set_cursor(1, 0);
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f000 fa1f 	bl	8000ef4 <lcd_set_cursor>
		lcd_print("     First to 5     ");
 8000ab6:	483d      	ldr	r0, [pc, #244]	@ (8000bac <game_task_state_2_play+0x220>)
 8000ab8:	f000 fa3e 	bl	8000f38 <lcd_print>
		lcd_set_cursor(2, 0);
 8000abc:	2100      	movs	r1, #0
 8000abe:	2002      	movs	r0, #2
 8000ac0:	f000 fa18 	bl	8000ef4 <lcd_set_cursor>
		lcd_print("Red:  0  Zaps       ");
 8000ac4:	483a      	ldr	r0, [pc, #232]	@ (8000bb0 <game_task_state_2_play+0x224>)
 8000ac6:	f000 fa37 	bl	8000f38 <lcd_print>
		lcd_set_cursor(3, 0);
 8000aca:	2100      	movs	r1, #0
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 fa11 	bl	8000ef4 <lcd_set_cursor>
		lcd_print("Blue: 0  Blasts     ");
 8000ad2:	4838      	ldr	r0, [pc, #224]	@ (8000bb4 <game_task_state_2_play+0x228>)
 8000ad4:	f000 fa30 	bl	8000f38 <lcd_print>
		//         01234567890123456789
		game_task->num++;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6a1b      	ldr	r3, [r3, #32]
 8000adc:	1c5a      	adds	r2, r3, #1
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	621a      	str	r2, [r3, #32]
	}

	// check to see if score changed for the lcd
	if (game_task->score_red != game_task->score_red_prev && game_task->score_red < game_task->score_thresh){
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68da      	ldr	r2, [r3, #12]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d01a      	beq.n	8000b24 <game_task_state_2_play+0x198>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	68da      	ldr	r2, [r3, #12]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	da14      	bge.n	8000b24 <game_task_state_2_play+0x198>
		sprintf(r_score,"%ld",game_task->score_red);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	68da      	ldr	r2, [r3, #12]
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	492d      	ldr	r1, [pc, #180]	@ (8000bb8 <game_task_state_2_play+0x22c>)
 8000b04:	4618      	mov	r0, r3
 8000b06:	f006 f883 	bl	8006c10 <siprintf>
		lcd_set_cursor(2, 6);
 8000b0a:	2106      	movs	r1, #6
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f000 f9f1 	bl	8000ef4 <lcd_set_cursor>
		lcd_print(r_score);
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 fa0e 	bl	8000f38 <lcd_print>
		game_task->score_red_prev = game_task->score_red;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	615a      	str	r2, [r3, #20]
	}
	if (game_task->score_blue != game_task->score_blue_prev && game_task->score_blue < game_task->score_thresh){
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	691a      	ldr	r2, [r3, #16]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d01a      	beq.n	8000b66 <game_task_state_2_play+0x1da>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	691a      	ldr	r2, [r3, #16]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	69db      	ldr	r3, [r3, #28]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	da14      	bge.n	8000b66 <game_task_state_2_play+0x1da>
		sprintf(b_score,"%ld",game_task->score_blue);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	691a      	ldr	r2, [r3, #16]
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	491c      	ldr	r1, [pc, #112]	@ (8000bb8 <game_task_state_2_play+0x22c>)
 8000b46:	4618      	mov	r0, r3
 8000b48:	f006 f862 	bl	8006c10 <siprintf>
		lcd_set_cursor(3, 6);
 8000b4c:	2106      	movs	r1, #6
 8000b4e:	2003      	movs	r0, #3
 8000b50:	f000 f9d0 	bl	8000ef4 <lcd_set_cursor>
		lcd_print(b_score);
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 f9ed 	bl	8000f38 <lcd_print>
		game_task->score_blue_prev = game_task->score_blue;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	691a      	ldr	r2, [r3, #16]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	619a      	str	r2, [r3, #24]
	}

	if (game_task->score_red >= game_task->score_thresh || game_task->score_blue >= game_task->score_thresh)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	68da      	ldr	r2, [r3, #12]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	da05      	bge.n	8000b7e <game_task_state_2_play+0x1f2>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	691a      	ldr	r2, [r3, #16]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	db0c      	blt.n	8000b98 <game_task_state_2_play+0x20c>
	{
		game_task->state = 3;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2203      	movs	r2, #3
 8000b82:	601a      	str	r2, [r3, #0]
		game_task->red_delay_flag = 0;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	62da      	str	r2, [r3, #44]	@ 0x2c
		game_task->blue_delay_flag = 0;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	631a      	str	r2, [r3, #48]	@ 0x30
		game_task->sound_task_ptr->win_snd = 1;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b94:	2201      	movs	r2, #1
 8000b96:	615a      	str	r2, [r3, #20]

	}
}
 8000b98:	bf00      	nop
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200005b8 	.word	0x200005b8
 8000ba4:	200005b0 	.word	0x200005b0
 8000ba8:	08007568 	.word	0x08007568
 8000bac:	080075b0 	.word	0x080075b0
 8000bb0:	080075c8 	.word	0x080075c8
 8000bb4:	080075e0 	.word	0x080075e0
 8000bb8:	080075f8 	.word	0x080075f8

08000bbc <game_task_state_3_end>:
 * first. After a delay, resets the game state and variables.
 *
 * @param game_task Pointer to the GameTask instance.
 */
void game_task_state_3_end(GameTask *game_task)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b09e      	sub	sp, #120	@ 0x78
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	char r_wins[50];
	char b_wins[50];

	if (game_task->score_blue >= game_task->score_thresh)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	691a      	ldr	r2, [r3, #16]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	db50      	blt.n	8000c72 <game_task_state_3_end+0xb6>
	{
		if(game_task->blue_delay_flag == 0)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d12d      	bne.n	8000c34 <game_task_state_3_end+0x78>
		{

			sprintf(b_wins,"       %ld to %ld       ",game_task->score_blue, game_task->score_red);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	691a      	ldr	r2, [r3, #16]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	f107 0008 	add.w	r0, r7, #8
 8000be4:	4954      	ldr	r1, [pc, #336]	@ (8000d38 <game_task_state_3_end+0x17c>)
 8000be6:	f006 f813 	bl	8006c10 <siprintf>
			lcd_set_cursor(0, 0);
 8000bea:	2100      	movs	r1, #0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f000 f981 	bl	8000ef4 <lcd_set_cursor>
			lcd_print("     GAME OVER!     ");
 8000bf2:	4852      	ldr	r0, [pc, #328]	@ (8000d3c <game_task_state_3_end+0x180>)
 8000bf4:	f000 f9a0 	bl	8000f38 <lcd_print>
			lcd_set_cursor(1, 0);
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f000 f97a 	bl	8000ef4 <lcd_set_cursor>
			lcd_print("                    ");
 8000c00:	484f      	ldr	r0, [pc, #316]	@ (8000d40 <game_task_state_3_end+0x184>)
 8000c02:	f000 f999 	bl	8000f38 <lcd_print>
			lcd_set_cursor(2, 0);
 8000c06:	2100      	movs	r1, #0
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f000 f973 	bl	8000ef4 <lcd_set_cursor>
			lcd_print("     Blue Wins!!    ");
 8000c0e:	484d      	ldr	r0, [pc, #308]	@ (8000d44 <game_task_state_3_end+0x188>)
 8000c10:	f000 f992 	bl	8000f38 <lcd_print>
			lcd_set_cursor(3, 0);
 8000c14:	2100      	movs	r1, #0
 8000c16:	2003      	movs	r0, #3
 8000c18:	f000 f96c 	bl	8000ef4 <lcd_set_cursor>
			lcd_print(b_wins);
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 f989 	bl	8000f38 <lcd_print>

			game_task->blue_delay_flag = 1;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	631a      	str	r2, [r3, #48]	@ 0x30
			game_task->blue_delay_start = ms_counter;
 8000c2c:	4b46      	ldr	r3, [pc, #280]	@ (8000d48 <game_task_state_3_end+0x18c>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	629a      	str	r2, [r3, #40]	@ 0x28
		}
		uint32_t now = ms_counter;
 8000c34:	4b44      	ldr	r3, [pc, #272]	@ (8000d48 <game_task_state_3_end+0x18c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	677b      	str	r3, [r7, #116]	@ 0x74
		if ((uint32_t)(now - game_task->blue_delay_start) > game_task->end_delay)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c3e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c40:	1ad2      	subs	r2, r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d913      	bls.n	8000c72 <game_task_state_3_end+0xb6>
		{
		    game_task->play_flag = 0;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
		    game_task->state = 1;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2201      	movs	r2, #1
 8000c54:	601a      	str	r2, [r3, #0]
		    game_task->score_blue = 0;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
		    game_task->score_red = 0;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
		    game_task->num = 0;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
		    game_task->blue_delay_flag = 0;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	631a      	str	r2, [r3, #48]	@ 0x30
		    lcd_clear();
 8000c6e:	f000 f936 	bl	8000ede <lcd_clear>
		}
	}
	if (game_task->score_red >= game_task->score_thresh)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	68da      	ldr	r2, [r3, #12]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	db50      	blt.n	8000d20 <game_task_state_3_end+0x164>
		{
			if(game_task->red_delay_flag == 0)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d12d      	bne.n	8000ce2 <game_task_state_3_end+0x126>
			{
				sprintf(r_wins,"       %ld to %ld       ",game_task->score_red, game_task->score_blue);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	68da      	ldr	r2, [r3, #12]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	691b      	ldr	r3, [r3, #16]
 8000c8e:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8000c92:	4929      	ldr	r1, [pc, #164]	@ (8000d38 <game_task_state_3_end+0x17c>)
 8000c94:	f005 ffbc 	bl	8006c10 <siprintf>
				lcd_set_cursor(0, 0);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f000 f92a 	bl	8000ef4 <lcd_set_cursor>
				lcd_print("     GAME OVER!     ");
 8000ca0:	4826      	ldr	r0, [pc, #152]	@ (8000d3c <game_task_state_3_end+0x180>)
 8000ca2:	f000 f949 	bl	8000f38 <lcd_print>
				//         01234567890123456789
				lcd_set_cursor(1, 0);
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f000 f923 	bl	8000ef4 <lcd_set_cursor>
				lcd_print("                    ");
 8000cae:	4824      	ldr	r0, [pc, #144]	@ (8000d40 <game_task_state_3_end+0x184>)
 8000cb0:	f000 f942 	bl	8000f38 <lcd_print>
				lcd_set_cursor(2, 0);
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f000 f91c 	bl	8000ef4 <lcd_set_cursor>
				lcd_print("     Red Wins!!     ");
 8000cbc:	4823      	ldr	r0, [pc, #140]	@ (8000d4c <game_task_state_3_end+0x190>)
 8000cbe:	f000 f93b 	bl	8000f38 <lcd_print>
				lcd_set_cursor(3, 0);
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 f915 	bl	8000ef4 <lcd_set_cursor>
				lcd_print(r_wins);
 8000cca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f932 	bl	8000f38 <lcd_print>


				game_task->red_delay_flag = 1;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
				game_task->red_delay_start = ms_counter;
 8000cda:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <game_task_state_3_end+0x18c>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	625a      	str	r2, [r3, #36]	@ 0x24
			}
			uint32_t now = ms_counter;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <game_task_state_3_end+0x18c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	673b      	str	r3, [r7, #112]	@ 0x70
			if ((uint32_t)(now - game_task->red_delay_start) > game_task->end_delay)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cec:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000cee:	1ad2      	subs	r2, r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d913      	bls.n	8000d20 <game_task_state_3_end+0x164>
			{
			    game_task->play_flag = 0;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
			    game_task->state = 1;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2201      	movs	r2, #1
 8000d02:	601a      	str	r2, [r3, #0]
			    game_task->score_blue = 0;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
			    game_task->score_red = 0;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
			    game_task->num = 0;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
			    game_task->red_delay_flag = 0;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
			    lcd_clear();
 8000d1c:	f000 f8df 	bl	8000ede <lcd_clear>
			}
		}
	game_task->red_photoresistor_task_ptr->hit_flag = 0;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
	game_task->blue_photoresistor_task_ptr->hit_flag = 0;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]

}
 8000d30:	bf00      	nop
 8000d32:	3778      	adds	r7, #120	@ 0x78
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	080075fc 	.word	0x080075fc
 8000d3c:	08007618 	.word	0x08007618
 8000d40:	08007630 	.word	0x08007630
 8000d44:	08007648 	.word	0x08007648
 8000d48:	200005b8 	.word	0x200005b8
 8000d4c:	08007660 	.word	0x08007660

08000d50 <lcd_send_nibble>:
#define LCD_RS        0x01

static void lcd_send_nibble(uint8_t nibble, uint8_t rs);
static void lcd_send_byte(uint8_t byte, uint8_t rs);

static void lcd_send_nibble(uint8_t nibble, uint8_t rs) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af02      	add	r7, sp, #8
 8000d56:	4603      	mov	r3, r0
 8000d58:	460a      	mov	r2, r1
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	71bb      	strb	r3, [r7, #6]
    uint8_t data = (nibble & 0xF0);
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	f023 030f 	bic.w	r3, r3, #15
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	73fb      	strb	r3, [r7, #15]
    if (rs) data |= LCD_RS;
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d004      	beq.n	8000d7a <lcd_send_nibble+0x2a>
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	73fb      	strb	r3, [r7, #15]
    data |= LCD_BACKLIGHT;
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	f043 0308 	orr.w	r3, r3, #8
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	73fb      	strb	r3, [r7, #15]

    // Pulse enable
    uint8_t data_e = data | LCD_ENABLE;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	f043 0304 	orr.w	r3, r3, #4
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDR, &data_e, 1, HAL_MAX_DELAY);
 8000d8e:	f107 020e 	add.w	r2, r7, #14
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2301      	movs	r3, #1
 8000d9a:	214e      	movs	r1, #78	@ 0x4e
 8000d9c:	480b      	ldr	r0, [pc, #44]	@ (8000dcc <lcd_send_nibble+0x7c>)
 8000d9e:	f003 fca5 	bl	80046ec <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000da2:	2001      	movs	r0, #1
 8000da4:	f002 f8e4 	bl	8002f70 <HAL_Delay>
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDR, &data, 1, HAL_MAX_DELAY);
 8000da8:	f107 020f 	add.w	r2, r7, #15
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2301      	movs	r3, #1
 8000db4:	214e      	movs	r1, #78	@ 0x4e
 8000db6:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <lcd_send_nibble+0x7c>)
 8000db8:	f003 fc98 	bl	80046ec <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f002 f8d7 	bl	8002f70 <HAL_Delay>
}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000038c 	.word	0x2000038c

08000dd0 <lcd_send_byte>:

static void lcd_send_byte(uint8_t byte, uint8_t rs) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	460a      	mov	r2, r1
 8000dda:	71fb      	strb	r3, [r7, #7]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	71bb      	strb	r3, [r7, #6]
    lcd_send_nibble(byte & 0xF0, rs);
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f023 030f 	bic.w	r3, r3, #15
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	79ba      	ldrb	r2, [r7, #6]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ffaf 	bl	8000d50 <lcd_send_nibble>
    lcd_send_nibble((byte << 4) & 0xF0, rs);
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	011b      	lsls	r3, r3, #4
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	79ba      	ldrb	r2, [r7, #6]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ffa7 	bl	8000d50 <lcd_send_nibble>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <lcd_send_command>:

void lcd_send_command(uint8_t cmd) {
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	71fb      	strb	r3, [r7, #7]
    lcd_send_byte(cmd, 0);
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ffd9 	bl	8000dd0 <lcd_send_byte>
    HAL_Delay(2);
 8000e1e:	2002      	movs	r0, #2
 8000e20:	f002 f8a6 	bl	8002f70 <HAL_Delay>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
    lcd_send_byte(data, 1);
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	2101      	movs	r1, #1
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ffc8 	bl	8000dd0 <lcd_send_byte>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <lcd_force_backlight_on>:

void lcd_force_backlight_on(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af02      	add	r7, sp, #8
    uint8_t data = 0x00 | LCD_BACKLIGHT;
 8000e4e:	2308      	movs	r3, #8
 8000e50:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDR, &data, 1, HAL_MAX_DELAY);
 8000e52:	1dfa      	adds	r2, r7, #7
 8000e54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	214e      	movs	r1, #78	@ 0x4e
 8000e5e:	4803      	ldr	r0, [pc, #12]	@ (8000e6c <lcd_force_backlight_on+0x24>)
 8000e60:	f003 fc44 	bl	80046ec <HAL_I2C_Master_Transmit>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	2000038c 	.word	0x2000038c

08000e70 <lcd_init>:

void lcd_init(void) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
    HAL_Delay(50); // Wait for power to stabilize
 8000e74:	2032      	movs	r0, #50	@ 0x32
 8000e76:	f002 f87b 	bl	8002f70 <HAL_Delay>

    // Set to 4-bit mode
    lcd_send_nibble(0x30, 0); HAL_Delay(5);
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2030      	movs	r0, #48	@ 0x30
 8000e7e:	f7ff ff67 	bl	8000d50 <lcd_send_nibble>
 8000e82:	2005      	movs	r0, #5
 8000e84:	f002 f874 	bl	8002f70 <HAL_Delay>
    lcd_send_nibble(0x30, 0); HAL_Delay(1);
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2030      	movs	r0, #48	@ 0x30
 8000e8c:	f7ff ff60 	bl	8000d50 <lcd_send_nibble>
 8000e90:	2001      	movs	r0, #1
 8000e92:	f002 f86d 	bl	8002f70 <HAL_Delay>
    lcd_send_nibble(0x30, 0); HAL_Delay(1);
 8000e96:	2100      	movs	r1, #0
 8000e98:	2030      	movs	r0, #48	@ 0x30
 8000e9a:	f7ff ff59 	bl	8000d50 <lcd_send_nibble>
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f002 f866 	bl	8002f70 <HAL_Delay>
    lcd_send_nibble(0x20, 0); HAL_Delay(1); // 4-bit mode
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2020      	movs	r0, #32
 8000ea8:	f7ff ff52 	bl	8000d50 <lcd_send_nibble>
 8000eac:	2001      	movs	r0, #1
 8000eae:	f002 f85f 	bl	8002f70 <HAL_Delay>

    lcd_send_command(0x28); // Function set: 4-bit, 2-line, 5x8 dots
 8000eb2:	2028      	movs	r0, #40	@ 0x28
 8000eb4:	f7ff ffa9 	bl	8000e0a <lcd_send_command>
    lcd_send_command(0x08); // Display off
 8000eb8:	2008      	movs	r0, #8
 8000eba:	f7ff ffa6 	bl	8000e0a <lcd_send_command>
    lcd_send_command(0x01); // Clear display
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff ffa3 	bl	8000e0a <lcd_send_command>
    HAL_Delay(2);
 8000ec4:	2002      	movs	r0, #2
 8000ec6:	f002 f853 	bl	8002f70 <HAL_Delay>
    lcd_send_command(0x06); // Entry mode set
 8000eca:	2006      	movs	r0, #6
 8000ecc:	f7ff ff9d 	bl	8000e0a <lcd_send_command>
    lcd_send_command(0x0C); // Display on, cursor off
 8000ed0:	200c      	movs	r0, #12
 8000ed2:	f7ff ff9a 	bl	8000e0a <lcd_send_command>
    lcd_force_backlight_on();
 8000ed6:	f7ff ffb7 	bl	8000e48 <lcd_force_backlight_on>
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}

08000ede <lcd_clear>:

void lcd_clear(void) {
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
    lcd_send_command(0x01);
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f7ff ff91 	bl	8000e0a <lcd_send_command>
    HAL_Delay(2);
 8000ee8:	2002      	movs	r0, #2
 8000eea:	f002 f841 	bl	8002f70 <HAL_Delay>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t col) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	460a      	mov	r2, r1
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	4613      	mov	r3, r2
 8000f02:	71bb      	strb	r3, [r7, #6]
    static const uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
    if (row > 3) row = 3;
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d901      	bls.n	8000f0e <lcd_set_cursor+0x1a>
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	71fb      	strb	r3, [r7, #7]
    lcd_send_command(0x80 | (col + row_offsets[row]));
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	4a08      	ldr	r2, [pc, #32]	@ (8000f34 <lcd_set_cursor+0x40>)
 8000f12:	5cd2      	ldrb	r2, [r2, r3]
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	4413      	add	r3, r2
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	b25b      	sxtb	r3, r3
 8000f1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f20:	b25b      	sxtb	r3, r3
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff70 	bl	8000e0a <lcd_send_command>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	08048250 	.word	0x08048250

08000f38 <lcd_print>:

void lcd_print(char *str) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000f40:	e006      	b.n	8000f50 <lcd_print+0x18>
        lcd_send_data((uint8_t)*str++);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	1c5a      	adds	r2, r3, #1
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff6e 	bl	8000e2c <lcd_send_data>
    while (*str) {
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f4      	bne.n	8000f42 <lcd_print+0xa>
    }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6a:	f001 ff8f 	bl	8002e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6e:	f000 f915 	bl	800119c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f72:	f000 fca9 	bl	80018c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f76:	f000 fc87 	bl	8001888 <MX_DMA_Init>
  MX_I2C1_Init();
 8000f7a:	f000 f9f3 	bl	8001364 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000f7e:	f000 fa1f 	bl	80013c0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f82:	f000 fb3b 	bl	80015fc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f86:	f000 fb8d 	bl	80016a4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000f8a:	f000 fbef 	bl	800176c <MX_TIM5_Init>
  MX_TIM2_Init();
 8000f8e:	f000 fabf 	bl	8001510 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000f92:	f000 f96b 	bl	800126c <MX_ADC1_Init>
  MX_TIM9_Init();
 8000f96:	f000 fc3d 	bl	8001814 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4864      	ldr	r0, [pc, #400]	@ (8001130 <main+0x1cc>)
 8000f9e:	f004 fc9f 	bl	80058e0 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4863      	ldr	r0, [pc, #396]	@ (8001134 <main+0x1d0>)
 8000fa6:	f004 fdaf 	bl	8005b08 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8000faa:	2104      	movs	r1, #4
 8000fac:	4861      	ldr	r0, [pc, #388]	@ (8001134 <main+0x1d0>)
 8000fae:	f004 fdab 	bl	8005b08 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);
 8000fb2:	2108      	movs	r1, #8
 8000fb4:	485f      	ldr	r0, [pc, #380]	@ (8001134 <main+0x1d0>)
 8000fb6:	f004 fda7 	bl	8005b08 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8000fba:	210c      	movs	r1, #12
 8000fbc:	485d      	ldr	r0, [pc, #372]	@ (8001134 <main+0x1d0>)
 8000fbe:	f004 fda3 	bl	8005b08 <HAL_TIM_PWM_Start_IT>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	485c      	ldr	r0, [pc, #368]	@ (8001138 <main+0x1d4>)
 8000fc6:	f004 fc8b 	bl	80058e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000fca:	2104      	movs	r1, #4
 8000fcc:	485a      	ldr	r0, [pc, #360]	@ (8001138 <main+0x1d4>)
 8000fce:	f004 fc87 	bl	80058e0 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim1);
 8000fd2:	4858      	ldr	r0, [pc, #352]	@ (8001134 <main+0x1d0>)
 8000fd4:	f004 fb78 	bl	80056c8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000fd8:	4855      	ldr	r0, [pc, #340]	@ (8001130 <main+0x1cc>)
 8000fda:	f004 fbcf 	bl	800577c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 8000fde:	4856      	ldr	r0, [pc, #344]	@ (8001138 <main+0x1d4>)
 8000fe0:	f004 fb72 	bl	80056c8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim9);
 8000fe4:	4855      	ldr	r0, [pc, #340]	@ (800113c <main+0x1d8>)
 8000fe6:	f004 fbc9 	bl	800577c <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(red_encoder.htim, TIM_CHANNEL_ALL);
 8000fea:	4b55      	ldr	r3, [pc, #340]	@ (8001140 <main+0x1dc>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	213c      	movs	r1, #60	@ 0x3c
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f004 ff2d 	bl	8005e50 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(blue_encoder.htim, TIM_CHANNEL_ALL);
 8000ff6:	4b53      	ldr	r3, [pc, #332]	@ (8001144 <main+0x1e0>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	213c      	movs	r1, #60	@ 0x3c
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f004 ff27 	bl	8005e50 <HAL_TIM_Encoder_Start>

  enable(&mred);
 8001002:	4851      	ldr	r0, [pc, #324]	@ (8001148 <main+0x1e4>)
 8001004:	f000 ff9f 	bl	8001f46 <enable>
  enable(&mblue);
 8001008:	4850      	ldr	r0, [pc, #320]	@ (800114c <main+0x1e8>)
 800100a:	f000 ff9c 	bl	8001f46 <enable>
  //
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	2104      	movs	r1, #4
 8001012:	484f      	ldr	r0, [pc, #316]	@ (8001150 <main+0x1ec>)
 8001014:	f003 f9f4 	bl	8004400 <HAL_GPIO_WritePin>
  // sleep pins
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800101e:	484c      	ldr	r0, [pc, #304]	@ (8001150 <main+0x1ec>)
 8001020:	f003 f9ee 	bl	8004400 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800102a:	4849      	ldr	r0, [pc, #292]	@ (8001150 <main+0x1ec>)
 800102c:	f003 f9e8 	bl	8004400 <HAL_GPIO_WritePin>
  adc_task_run(&adc_task);
 8001030:	4848      	ldr	r0, [pc, #288]	@ (8001154 <main+0x1f0>)
 8001032:	f7ff fabb 	bl	80005ac <adc_task_run>
  HAL_Delay(2000); // 2 second delay to let stuff get set up
 8001036:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800103a:	f001 ff99 	bl	8002f70 <HAL_Delay>
  adc_task_run(&adc_task);
 800103e:	4845      	ldr	r0, [pc, #276]	@ (8001154 <main+0x1f0>)
 8001040:	f7ff fab4 	bl	80005ac <adc_task_run>
  lcd_clear();
 8001044:	f7ff ff4b 	bl	8000ede <lcd_clear>
  lcd_set_cursor(1, 0);
 8001048:	2100      	movs	r1, #0
 800104a:	2001      	movs	r0, #1
 800104c:	f7ff ff52 	bl	8000ef4 <lcd_set_cursor>
  lcd_print("  Zap'em Blast'em   ");
 8001050:	4841      	ldr	r0, [pc, #260]	@ (8001158 <main+0x1f4>)
 8001052:	f7ff ff71 	bl	8000f38 <lcd_print>
  lcd_set_cursor(2, 0);
 8001056:	2100      	movs	r1, #0
 8001058:	2002      	movs	r0, #2
 800105a:	f7ff ff4b 	bl	8000ef4 <lcd_set_cursor>
  lcd_print("       Robots       ");
 800105e:	483f      	ldr	r0, [pc, #252]	@ (800115c <main+0x1f8>)
 8001060:	f7ff ff6a 	bl	8000f38 <lcd_print>
  calibration();
 8001064:	f000 fd5a 	bl	8001b1c <calibration>
  HAL_Delay(1000);
 8001068:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800106c:	f001 ff80 	bl	8002f70 <HAL_Delay>
  setup_encoder(&red_encoder);
 8001070:	4833      	ldr	r0, [pc, #204]	@ (8001140 <main+0x1dc>)
 8001072:	f7ff fba1 	bl	80007b8 <setup_encoder>
  setup_encoder(&blue_encoder);
 8001076:	4833      	ldr	r0, [pc, #204]	@ (8001144 <main+0x1e0>)
 8001078:	f7ff fb9e 	bl	80007b8 <setup_encoder>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  adc_task_run(&adc_task);
 800107c:	4835      	ldr	r0, [pc, #212]	@ (8001154 <main+0x1f0>)
 800107e:	f7ff fa95 	bl	80005ac <adc_task_run>
	  game_task_run(&game_task);
 8001082:	4837      	ldr	r0, [pc, #220]	@ (8001160 <main+0x1fc>)
 8001084:	f7ff fc1d 	bl	80008c2 <game_task_run>
	  sound_task_run(&sound_task);
 8001088:	4836      	ldr	r0, [pc, #216]	@ (8001164 <main+0x200>)
 800108a:	f001 f921 	bl	80022d0 <sound_task_run>

	  // set play flag by each player holding button for 2 seconds
	  if (red_held && blue_held && game_task.play_flag == 0)
 800108e:	4b36      	ldr	r3, [pc, #216]	@ (8001168 <main+0x204>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d031      	beq.n	80010fa <main+0x196>
 8001096:	4b35      	ldr	r3, [pc, #212]	@ (800116c <main+0x208>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d02d      	beq.n	80010fa <main+0x196>
 800109e:	4b30      	ldr	r3, [pc, #192]	@ (8001160 <main+0x1fc>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d129      	bne.n	80010fa <main+0x196>
	  {
	      uint32_t now = ms_counter;
 80010a6:	4b32      	ldr	r3, [pc, #200]	@ (8001170 <main+0x20c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	607b      	str	r3, [r7, #4]
	      red_elapsed = now - red_start;
 80010ac:	4b31      	ldr	r3, [pc, #196]	@ (8001174 <main+0x210>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	4a30      	ldr	r2, [pc, #192]	@ (8001178 <main+0x214>)
 80010b6:	6013      	str	r3, [r2, #0]
	      blue_elapsed = now - blue_start;
 80010b8:	4b30      	ldr	r3, [pc, #192]	@ (800117c <main+0x218>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001180 <main+0x21c>)
 80010c2:	6013      	str	r3, [r2, #0]

	      if (red_elapsed > hold_time && blue_elapsed > hold_time)
 80010c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001178 <main+0x214>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d914      	bls.n	80010fa <main+0x196>
 80010d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001180 <main+0x21c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010d8:	4293      	cmp	r3, r2
 80010da:	d90e      	bls.n	80010fa <main+0x196>
	      {
	          game_task.play_flag = 1;
 80010dc:	4b20      	ldr	r3, [pc, #128]	@ (8001160 <main+0x1fc>)
 80010de:	2201      	movs	r2, #1
 80010e0:	609a      	str	r2, [r3, #8]
	          red_held = 0;
 80010e2:	4b21      	ldr	r3, [pc, #132]	@ (8001168 <main+0x204>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
	          blue_held = 0;
 80010e8:	4b20      	ldr	r3, [pc, #128]	@ (800116c <main+0x208>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
	          red_shoot_task.button = 0;
 80010ee:	4b25      	ldr	r3, [pc, #148]	@ (8001184 <main+0x220>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
	          blue_shoot_task.button = 0;
 80010f4:	4b24      	ldr	r3, [pc, #144]	@ (8001188 <main+0x224>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
	      }
	  }
	  if (game_task.play_flag){ //shooting and scoring disabled when game hasn't started
 80010fa:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <main+0x1fc>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d011      	beq.n	8001126 <main+0x1c2>

		  shoot_task_run(&red_shoot_task);
 8001102:	4820      	ldr	r0, [pc, #128]	@ (8001184 <main+0x220>)
 8001104:	f000 ffec 	bl	80020e0 <shoot_task_run>
		  shoot_task_run(&blue_shoot_task);
 8001108:	481f      	ldr	r0, [pc, #124]	@ (8001188 <main+0x224>)
 800110a:	f000 ffe9 	bl	80020e0 <shoot_task_run>
		  controller_task_run(&blue_controller_task);
 800110e:	481f      	ldr	r0, [pc, #124]	@ (800118c <main+0x228>)
 8001110:	f7ff fa9c 	bl	800064c <controller_task_run>
		  controller_task_run(&red_controller_task);
 8001114:	481e      	ldr	r0, [pc, #120]	@ (8001190 <main+0x22c>)
 8001116:	f7ff fa99 	bl	800064c <controller_task_run>
		  photoresistor_task_run(&red_photoresistor_task);
 800111a:	481e      	ldr	r0, [pc, #120]	@ (8001194 <main+0x230>)
 800111c:	f000 ff8e 	bl	800203c <photoresistor_task_run>
		  photoresistor_task_run(&blue_photoresistor_task);
 8001120:	481d      	ldr	r0, [pc, #116]	@ (8001198 <main+0x234>)
 8001122:	f000 ff8b 	bl	800203c <photoresistor_task_run>
	  }

	  HAL_Delay(1);
 8001126:	2001      	movs	r0, #1
 8001128:	f001 ff22 	bl	8002f70 <HAL_Delay>
	  adc_task_run(&adc_task);
 800112c:	e7a6      	b.n	800107c <main+0x118>
 800112e:	bf00      	nop
 8001130:	20000428 	.word	0x20000428
 8001134:	200003e0 	.word	0x200003e0
 8001138:	200004b8 	.word	0x200004b8
 800113c:	20000548 	.word	0x20000548
 8001140:	20000018 	.word	0x20000018
 8001144:	20000030 	.word	0x20000030
 8001148:	20000000 	.word	0x20000000
 800114c:	2000000c 	.word	0x2000000c
 8001150:	40020400 	.word	0x40020400
 8001154:	20000240 	.word	0x20000240
 8001158:	08007678 	.word	0x08007678
 800115c:	08007690 	.word	0x08007690
 8001160:	200000cc 	.word	0x200000cc
 8001164:	20000048 	.word	0x20000048
 8001168:	20000590 	.word	0x20000590
 800116c:	20000591 	.word	0x20000591
 8001170:	200005b8 	.word	0x200005b8
 8001174:	20000594 	.word	0x20000594
 8001178:	2000059c 	.word	0x2000059c
 800117c:	20000598 	.word	0x20000598
 8001180:	200005a0 	.word	0x200005a0
 8001184:	20000130 	.word	0x20000130
 8001188:	20000160 	.word	0x20000160
 800118c:	20000190 	.word	0x20000190
 8001190:	200001e8 	.word	0x200001e8
 8001194:	20000084 	.word	0x20000084
 8001198:	200000a8 	.word	0x200000a8

0800119c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b094      	sub	sp, #80	@ 0x50
 80011a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a2:	f107 0320 	add.w	r3, r7, #32
 80011a6:	2230      	movs	r2, #48	@ 0x30
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f005 fd52 	bl	8006c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	4b27      	ldr	r3, [pc, #156]	@ (8001264 <SystemClock_Config+0xc8>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c8:	4a26      	ldr	r2, [pc, #152]	@ (8001264 <SystemClock_Config+0xc8>)
 80011ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d0:	4b24      	ldr	r3, [pc, #144]	@ (8001264 <SystemClock_Config+0xc8>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	4b21      	ldr	r3, [pc, #132]	@ (8001268 <SystemClock_Config+0xcc>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a20      	ldr	r2, [pc, #128]	@ (8001268 <SystemClock_Config+0xcc>)
 80011e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001268 <SystemClock_Config+0xcc>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f8:	2301      	movs	r3, #1
 80011fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001202:	2302      	movs	r3, #2
 8001204:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001206:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800120a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800120c:	2319      	movs	r3, #25
 800120e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001210:	23c0      	movs	r3, #192	@ 0xc0
 8001212:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001214:	2302      	movs	r3, #2
 8001216:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001218:	2304      	movs	r3, #4
 800121a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121c:	f107 0320 	add.w	r3, r7, #32
 8001220:	4618      	mov	r0, r3
 8001222:	f003 fdbd 	bl	8004da0 <HAL_RCC_OscConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800122c:	f000 fdd0 	bl	8001dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001230:	230f      	movs	r3, #15
 8001232:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001234:	2302      	movs	r3, #2
 8001236:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800123c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001240:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2103      	movs	r1, #3
 800124c:	4618      	mov	r0, r3
 800124e:	f004 f81f 	bl	8005290 <HAL_RCC_ClockConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001258:	f000 fdba 	bl	8001dd0 <Error_Handler>
  }
}
 800125c:	bf00      	nop
 800125e:	3750      	adds	r7, #80	@ 0x50
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023800 	.word	0x40023800
 8001268:	40007000 	.word	0x40007000

0800126c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001272:	463b      	mov	r3, r7
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800127e:	4b36      	ldr	r3, [pc, #216]	@ (8001358 <MX_ADC1_Init+0xec>)
 8001280:	4a36      	ldr	r2, [pc, #216]	@ (800135c <MX_ADC1_Init+0xf0>)
 8001282:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001284:	4b34      	ldr	r3, [pc, #208]	@ (8001358 <MX_ADC1_Init+0xec>)
 8001286:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800128a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800128c:	4b32      	ldr	r3, [pc, #200]	@ (8001358 <MX_ADC1_Init+0xec>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001292:	4b31      	ldr	r3, [pc, #196]	@ (8001358 <MX_ADC1_Init+0xec>)
 8001294:	2201      	movs	r2, #1
 8001296:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001298:	4b2f      	ldr	r3, [pc, #188]	@ (8001358 <MX_ADC1_Init+0xec>)
 800129a:	2201      	movs	r2, #1
 800129c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800129e:	4b2e      	ldr	r3, [pc, #184]	@ (8001358 <MX_ADC1_Init+0xec>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001358 <MX_ADC1_Init+0xec>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001358 <MX_ADC1_Init+0xec>)
 80012ae:	4a2c      	ldr	r2, [pc, #176]	@ (8001360 <MX_ADC1_Init+0xf4>)
 80012b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b2:	4b29      	ldr	r3, [pc, #164]	@ (8001358 <MX_ADC1_Init+0xec>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80012b8:	4b27      	ldr	r3, [pc, #156]	@ (8001358 <MX_ADC1_Init+0xec>)
 80012ba:	2204      	movs	r2, #4
 80012bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012be:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <MX_ADC1_Init+0xec>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012c6:	4b24      	ldr	r3, [pc, #144]	@ (8001358 <MX_ADC1_Init+0xec>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012cc:	4822      	ldr	r0, [pc, #136]	@ (8001358 <MX_ADC1_Init+0xec>)
 80012ce:	f001 fe73 	bl	8002fb8 <HAL_ADC_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012d8:	f000 fd7a 	bl	8001dd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012dc:	2304      	movs	r3, #4
 80012de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012e0:	2301      	movs	r3, #1
 80012e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80012e4:	2303      	movs	r3, #3
 80012e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	481a      	ldr	r0, [pc, #104]	@ (8001358 <MX_ADC1_Init+0xec>)
 80012ee:	f001 ffb9 	bl	8003264 <HAL_ADC_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012f8:	f000 fd6a 	bl	8001dd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012fc:	2305      	movs	r3, #5
 80012fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001300:	2302      	movs	r3, #2
 8001302:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001304:	463b      	mov	r3, r7
 8001306:	4619      	mov	r1, r3
 8001308:	4813      	ldr	r0, [pc, #76]	@ (8001358 <MX_ADC1_Init+0xec>)
 800130a:	f001 ffab 	bl	8003264 <HAL_ADC_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001314:	f000 fd5c 	bl	8001dd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001318:	2306      	movs	r3, #6
 800131a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800131c:	2303      	movs	r3, #3
 800131e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	4619      	mov	r1, r3
 8001324:	480c      	ldr	r0, [pc, #48]	@ (8001358 <MX_ADC1_Init+0xec>)
 8001326:	f001 ff9d 	bl	8003264 <HAL_ADC_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001330:	f000 fd4e 	bl	8001dd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001334:	2307      	movs	r3, #7
 8001336:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001338:	2304      	movs	r3, #4
 800133a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133c:	463b      	mov	r3, r7
 800133e:	4619      	mov	r1, r3
 8001340:	4805      	ldr	r0, [pc, #20]	@ (8001358 <MX_ADC1_Init+0xec>)
 8001342:	f001 ff8f 	bl	8003264 <HAL_ADC_ConfigChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800134c:	f000 fd40 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200002e4 	.word	0x200002e4
 800135c:	40012000 	.word	0x40012000
 8001360:	0f000001 	.word	0x0f000001

08001364 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001368:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <MX_I2C1_Init+0x50>)
 800136a:	4a13      	ldr	r2, [pc, #76]	@ (80013b8 <MX_I2C1_Init+0x54>)
 800136c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800136e:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <MX_I2C1_Init+0x50>)
 8001370:	4a12      	ldr	r2, [pc, #72]	@ (80013bc <MX_I2C1_Init+0x58>)
 8001372:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001374:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <MX_I2C1_Init+0x50>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <MX_I2C1_Init+0x50>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <MX_I2C1_Init+0x50>)
 8001382:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001386:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001388:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <MX_I2C1_Init+0x50>)
 800138a:	2200      	movs	r2, #0
 800138c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800138e:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <MX_I2C1_Init+0x50>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001394:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <MX_I2C1_Init+0x50>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139a:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <MX_I2C1_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a0:	4804      	ldr	r0, [pc, #16]	@ (80013b4 <MX_I2C1_Init+0x50>)
 80013a2:	f003 f85f 	bl	8004464 <HAL_I2C_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013ac:	f000 fd10 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	2000038c 	.word	0x2000038c
 80013b8:	40005400 	.word	0x40005400
 80013bc:	000186a0 	.word	0x000186a0

080013c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b092      	sub	sp, #72	@ 0x48
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
 80013e0:	615a      	str	r2, [r3, #20]
 80013e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2220      	movs	r2, #32
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f005 fc32 	bl	8006c54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013f0:	4b45      	ldr	r3, [pc, #276]	@ (8001508 <MX_TIM1_Init+0x148>)
 80013f2:	4a46      	ldr	r2, [pc, #280]	@ (800150c <MX_TIM1_Init+0x14c>)
 80013f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013f6:	4b44      	ldr	r3, [pc, #272]	@ (8001508 <MX_TIM1_Init+0x148>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fc:	4b42      	ldr	r3, [pc, #264]	@ (8001508 <MX_TIM1_Init+0x148>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4799;
 8001402:	4b41      	ldr	r3, [pc, #260]	@ (8001508 <MX_TIM1_Init+0x148>)
 8001404:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8001408:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140a:	4b3f      	ldr	r3, [pc, #252]	@ (8001508 <MX_TIM1_Init+0x148>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001410:	4b3d      	ldr	r3, [pc, #244]	@ (8001508 <MX_TIM1_Init+0x148>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001416:	4b3c      	ldr	r3, [pc, #240]	@ (8001508 <MX_TIM1_Init+0x148>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800141c:	483a      	ldr	r0, [pc, #232]	@ (8001508 <MX_TIM1_Init+0x148>)
 800141e:	f004 fa0f 	bl	8005840 <HAL_TIM_PWM_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001428:	f000 fcd2 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142c:	2300      	movs	r3, #0
 800142e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001434:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001438:	4619      	mov	r1, r3
 800143a:	4833      	ldr	r0, [pc, #204]	@ (8001508 <MX_TIM1_Init+0x148>)
 800143c:	f005 fb14 	bl	8006a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001446:	f000 fcc3 	bl	8001dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800144a:	2370      	movs	r3, #112	@ 0x70
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001456:	2300      	movs	r3, #0
 8001458:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001466:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800146a:	2200      	movs	r2, #0
 800146c:	4619      	mov	r1, r3
 800146e:	4826      	ldr	r0, [pc, #152]	@ (8001508 <MX_TIM1_Init+0x148>)
 8001470:	f004 fe6c 	bl	800614c <HAL_TIM_PWM_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800147a:	f000 fca9 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800147e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001482:	2204      	movs	r2, #4
 8001484:	4619      	mov	r1, r3
 8001486:	4820      	ldr	r0, [pc, #128]	@ (8001508 <MX_TIM1_Init+0x148>)
 8001488:	f004 fe60 	bl	800614c <HAL_TIM_PWM_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001492:	f000 fc9d 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800149a:	2208      	movs	r2, #8
 800149c:	4619      	mov	r1, r3
 800149e:	481a      	ldr	r0, [pc, #104]	@ (8001508 <MX_TIM1_Init+0x148>)
 80014a0:	f004 fe54 	bl	800614c <HAL_TIM_PWM_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80014aa:	f000 fc91 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b2:	220c      	movs	r2, #12
 80014b4:	4619      	mov	r1, r3
 80014b6:	4814      	ldr	r0, [pc, #80]	@ (8001508 <MX_TIM1_Init+0x148>)
 80014b8:	f004 fe48 	bl	800614c <HAL_TIM_PWM_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80014c2:	f000 fc85 	bl	8001dd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	4619      	mov	r1, r3
 80014e8:	4807      	ldr	r0, [pc, #28]	@ (8001508 <MX_TIM1_Init+0x148>)
 80014ea:	f005 fb2b 	bl	8006b44 <HAL_TIMEx_ConfigBreakDeadTime>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80014f4:	f000 fc6c 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014f8:	4803      	ldr	r0, [pc, #12]	@ (8001508 <MX_TIM1_Init+0x148>)
 80014fa:	f001 fb09 	bl	8002b10 <HAL_TIM_MspPostInit>

}
 80014fe:	bf00      	nop
 8001500:	3748      	adds	r7, #72	@ 0x48
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200003e0 	.word	0x200003e0
 800150c:	40010000 	.word	0x40010000

08001510 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08e      	sub	sp, #56	@ 0x38
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001516:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001524:	f107 0320 	add.w	r3, r7, #32
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
 800153c:	615a      	str	r2, [r3, #20]
 800153e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001540:	4b2d      	ldr	r3, [pc, #180]	@ (80015f8 <MX_TIM2_Init+0xe8>)
 8001542:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001546:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001548:	4b2b      	ldr	r3, [pc, #172]	@ (80015f8 <MX_TIM2_Init+0xe8>)
 800154a:	2200      	movs	r2, #0
 800154c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154e:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <MX_TIM2_Init+0xe8>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1088;
 8001554:	4b28      	ldr	r3, [pc, #160]	@ (80015f8 <MX_TIM2_Init+0xe8>)
 8001556:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 800155a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155c:	4b26      	ldr	r3, [pc, #152]	@ (80015f8 <MX_TIM2_Init+0xe8>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001562:	4b25      	ldr	r3, [pc, #148]	@ (80015f8 <MX_TIM2_Init+0xe8>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001568:	4823      	ldr	r0, [pc, #140]	@ (80015f8 <MX_TIM2_Init+0xe8>)
 800156a:	f004 f85d 	bl	8005628 <HAL_TIM_Base_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001574:	f000 fc2c 	bl	8001dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001578:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800157c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800157e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001582:	4619      	mov	r1, r3
 8001584:	481c      	ldr	r0, [pc, #112]	@ (80015f8 <MX_TIM2_Init+0xe8>)
 8001586:	f004 fea3 	bl	80062d0 <HAL_TIM_ConfigClockSource>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001590:	f000 fc1e 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001594:	4818      	ldr	r0, [pc, #96]	@ (80015f8 <MX_TIM2_Init+0xe8>)
 8001596:	f004 f953 	bl	8005840 <HAL_TIM_PWM_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80015a0:	f000 fc16 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ac:	f107 0320 	add.w	r3, r7, #32
 80015b0:	4619      	mov	r1, r3
 80015b2:	4811      	ldr	r0, [pc, #68]	@ (80015f8 <MX_TIM2_Init+0xe8>)
 80015b4:	f005 fa58 	bl	8006a68 <HAL_TIMEx_MasterConfigSynchronization>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80015be:	f000 fc07 	bl	8001dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c2:	2360      	movs	r3, #96	@ 0x60
 80015c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4807      	ldr	r0, [pc, #28]	@ (80015f8 <MX_TIM2_Init+0xe8>)
 80015da:	f004 fdb7 	bl	800614c <HAL_TIM_PWM_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80015e4:	f000 fbf4 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015e8:	4803      	ldr	r0, [pc, #12]	@ (80015f8 <MX_TIM2_Init+0xe8>)
 80015ea:	f001 fa91 	bl	8002b10 <HAL_TIM_MspPostInit>

}
 80015ee:	bf00      	nop
 80015f0:	3738      	adds	r7, #56	@ 0x38
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000428 	.word	0x20000428

080015fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08c      	sub	sp, #48	@ 0x30
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	2224      	movs	r2, #36	@ 0x24
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f005 fb22 	bl	8006c54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001618:	4b20      	ldr	r3, [pc, #128]	@ (800169c <MX_TIM3_Init+0xa0>)
 800161a:	4a21      	ldr	r2, [pc, #132]	@ (80016a0 <MX_TIM3_Init+0xa4>)
 800161c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800161e:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <MX_TIM3_Init+0xa0>)
 8001620:	2200      	movs	r2, #0
 8001622:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001624:	4b1d      	ldr	r3, [pc, #116]	@ (800169c <MX_TIM3_Init+0xa0>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800162a:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <MX_TIM3_Init+0xa0>)
 800162c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001630:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001632:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <MX_TIM3_Init+0xa0>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001638:	4b18      	ldr	r3, [pc, #96]	@ (800169c <MX_TIM3_Init+0xa0>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800163e:	2301      	movs	r3, #1
 8001640:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001646:	2301      	movs	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001656:	2301      	movs	r3, #1
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800165a:	2300      	movs	r3, #0
 800165c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	4619      	mov	r1, r3
 8001668:	480c      	ldr	r0, [pc, #48]	@ (800169c <MX_TIM3_Init+0xa0>)
 800166a:	f004 fb4b 	bl	8005d04 <HAL_TIM_Encoder_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001674:	f000 fbac 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	@ (800169c <MX_TIM3_Init+0xa0>)
 8001686:	f005 f9ef 	bl	8006a68 <HAL_TIMEx_MasterConfigSynchronization>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001690:	f000 fb9e 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	3730      	adds	r7, #48	@ 0x30
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000470 	.word	0x20000470
 80016a0:	40000400 	.word	0x40000400

080016a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	@ 0x28
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016aa:	f107 0320 	add.w	r3, r7, #32
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]
 80016c2:	615a      	str	r2, [r3, #20]
 80016c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016c6:	4b27      	ldr	r3, [pc, #156]	@ (8001764 <MX_TIM4_Init+0xc0>)
 80016c8:	4a27      	ldr	r2, [pc, #156]	@ (8001768 <MX_TIM4_Init+0xc4>)
 80016ca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80016cc:	4b25      	ldr	r3, [pc, #148]	@ (8001764 <MX_TIM4_Init+0xc0>)
 80016ce:	2253      	movs	r2, #83	@ 0x53
 80016d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d2:	4b24      	ldr	r3, [pc, #144]	@ (8001764 <MX_TIM4_Init+0xc0>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80016d8:	4b22      	ldr	r3, [pc, #136]	@ (8001764 <MX_TIM4_Init+0xc0>)
 80016da:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80016de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e0:	4b20      	ldr	r3, [pc, #128]	@ (8001764 <MX_TIM4_Init+0xc0>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001764 <MX_TIM4_Init+0xc0>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016ec:	481d      	ldr	r0, [pc, #116]	@ (8001764 <MX_TIM4_Init+0xc0>)
 80016ee:	f004 f8a7 	bl	8005840 <HAL_TIM_PWM_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80016f8:	f000 fb6a 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fc:	2300      	movs	r3, #0
 80016fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001704:	f107 0320 	add.w	r3, r7, #32
 8001708:	4619      	mov	r1, r3
 800170a:	4816      	ldr	r0, [pc, #88]	@ (8001764 <MX_TIM4_Init+0xc0>)
 800170c:	f005 f9ac 	bl	8006a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001716:	f000 fb5b 	bl	8001dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800171a:	2360      	movs	r3, #96	@ 0x60
 800171c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2200      	movs	r2, #0
 800172e:	4619      	mov	r1, r3
 8001730:	480c      	ldr	r0, [pc, #48]	@ (8001764 <MX_TIM4_Init+0xc0>)
 8001732:	f004 fd0b 	bl	800614c <HAL_TIM_PWM_ConfigChannel>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800173c:	f000 fb48 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2204      	movs	r2, #4
 8001744:	4619      	mov	r1, r3
 8001746:	4807      	ldr	r0, [pc, #28]	@ (8001764 <MX_TIM4_Init+0xc0>)
 8001748:	f004 fd00 	bl	800614c <HAL_TIM_PWM_ConfigChannel>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001752:	f000 fb3d 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001756:	4803      	ldr	r0, [pc, #12]	@ (8001764 <MX_TIM4_Init+0xc0>)
 8001758:	f001 f9da 	bl	8002b10 <HAL_TIM_MspPostInit>

}
 800175c:	bf00      	nop
 800175e:	3728      	adds	r7, #40	@ 0x28
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200004b8 	.word	0x200004b8
 8001768:	40000800 	.word	0x40000800

0800176c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	@ 0x30
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	2224      	movs	r2, #36	@ 0x24
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f005 fa6a 	bl	8006c54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001788:	4b20      	ldr	r3, [pc, #128]	@ (800180c <MX_TIM5_Init+0xa0>)
 800178a:	4a21      	ldr	r2, [pc, #132]	@ (8001810 <MX_TIM5_Init+0xa4>)
 800178c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800178e:	4b1f      	ldr	r3, [pc, #124]	@ (800180c <MX_TIM5_Init+0xa0>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001794:	4b1d      	ldr	r3, [pc, #116]	@ (800180c <MX_TIM5_Init+0xa0>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800179a:	4b1c      	ldr	r3, [pc, #112]	@ (800180c <MX_TIM5_Init+0xa0>)
 800179c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017a0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	4b1a      	ldr	r3, [pc, #104]	@ (800180c <MX_TIM5_Init+0xa0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a8:	4b18      	ldr	r3, [pc, #96]	@ (800180c <MX_TIM5_Init+0xa0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017b6:	2301      	movs	r3, #1
 80017b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017c6:	2301      	movs	r3, #1
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	4619      	mov	r1, r3
 80017d8:	480c      	ldr	r0, [pc, #48]	@ (800180c <MX_TIM5_Init+0xa0>)
 80017da:	f004 fa93 	bl	8005d04 <HAL_TIM_Encoder_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80017e4:	f000 faf4 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	4619      	mov	r1, r3
 80017f4:	4805      	ldr	r0, [pc, #20]	@ (800180c <MX_TIM5_Init+0xa0>)
 80017f6:	f005 f937 	bl	8006a68 <HAL_TIMEx_MasterConfigSynchronization>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001800:	f000 fae6 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	3730      	adds	r7, #48	@ 0x30
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000500 	.word	0x20000500
 8001810:	40000c00 	.word	0x40000c00

08001814 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800181a:	463b      	mov	r3, r7
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001826:	4b16      	ldr	r3, [pc, #88]	@ (8001880 <MX_TIM9_Init+0x6c>)
 8001828:	4a16      	ldr	r2, [pc, #88]	@ (8001884 <MX_TIM9_Init+0x70>)
 800182a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 959;
 800182c:	4b14      	ldr	r3, [pc, #80]	@ (8001880 <MX_TIM9_Init+0x6c>)
 800182e:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8001832:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001834:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <MX_TIM9_Init+0x6c>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 800183a:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <MX_TIM9_Init+0x6c>)
 800183c:	2263      	movs	r2, #99	@ 0x63
 800183e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001840:	4b0f      	ldr	r3, [pc, #60]	@ (8001880 <MX_TIM9_Init+0x6c>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001846:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <MX_TIM9_Init+0x6c>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800184c:	480c      	ldr	r0, [pc, #48]	@ (8001880 <MX_TIM9_Init+0x6c>)
 800184e:	f003 feeb 	bl	8005628 <HAL_TIM_Base_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001858:	f000 faba 	bl	8001dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001860:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001862:	463b      	mov	r3, r7
 8001864:	4619      	mov	r1, r3
 8001866:	4806      	ldr	r0, [pc, #24]	@ (8001880 <MX_TIM9_Init+0x6c>)
 8001868:	f004 fd32 	bl	80062d0 <HAL_TIM_ConfigClockSource>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001872:	f000 faad 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000548 	.word	0x20000548
 8001884:	40014000 	.word	0x40014000

08001888 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <MX_DMA_Init+0x3c>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	4a0b      	ldr	r2, [pc, #44]	@ (80018c4 <MX_DMA_Init+0x3c>)
 8001898:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800189c:	6313      	str	r3, [r2, #48]	@ 0x30
 800189e:	4b09      	ldr	r3, [pc, #36]	@ (80018c4 <MX_DMA_Init+0x3c>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	2038      	movs	r0, #56	@ 0x38
 80018b0:	f002 f863 	bl	800397a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018b4:	2038      	movs	r0, #56	@ 0x38
 80018b6:	f002 f87c 	bl	80039b2 <HAL_NVIC_EnableIRQ>

}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800

080018c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	@ 0x28
 80018cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001a14 <MX_GPIO_Init+0x14c>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4a4b      	ldr	r2, [pc, #300]	@ (8001a14 <MX_GPIO_Init+0x14c>)
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4b49      	ldr	r3, [pc, #292]	@ (8001a14 <MX_GPIO_Init+0x14c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b45      	ldr	r3, [pc, #276]	@ (8001a14 <MX_GPIO_Init+0x14c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	4a44      	ldr	r2, [pc, #272]	@ (8001a14 <MX_GPIO_Init+0x14c>)
 8001904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001908:	6313      	str	r3, [r2, #48]	@ 0x30
 800190a:	4b42      	ldr	r3, [pc, #264]	@ (8001a14 <MX_GPIO_Init+0x14c>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a14 <MX_GPIO_Init+0x14c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a14 <MX_GPIO_Init+0x14c>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b3b      	ldr	r3, [pc, #236]	@ (8001a14 <MX_GPIO_Init+0x14c>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	4b37      	ldr	r3, [pc, #220]	@ (8001a14 <MX_GPIO_Init+0x14c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	4a36      	ldr	r2, [pc, #216]	@ (8001a14 <MX_GPIO_Init+0x14c>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	6313      	str	r3, [r2, #48]	@ 0x30
 8001942:	4b34      	ldr	r3, [pc, #208]	@ (8001a14 <MX_GPIO_Init+0x14c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001954:	4830      	ldr	r0, [pc, #192]	@ (8001a18 <MX_GPIO_Init+0x150>)
 8001956:	f002 fd53 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f24c 0104 	movw	r1, #49156	@ 0xc004
 8001960:	482e      	ldr	r0, [pc, #184]	@ (8001a1c <MX_GPIO_Init+0x154>)
 8001962:	f002 fd4d 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001966:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800196a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4619      	mov	r1, r3
 800197e:	4826      	ldr	r0, [pc, #152]	@ (8001a18 <MX_GPIO_Init+0x150>)
 8001980:	f002 fba2 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001984:	230c      	movs	r3, #12
 8001986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001994:	2307      	movs	r3, #7
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	4820      	ldr	r0, [pc, #128]	@ (8001a20 <MX_GPIO_Init+0x158>)
 80019a0:	f002 fb92 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019a4:	2304      	movs	r3, #4
 80019a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a8:	2301      	movs	r3, #1
 80019aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4619      	mov	r1, r3
 80019ba:	4818      	ldr	r0, [pc, #96]	@ (8001a1c <MX_GPIO_Init+0x154>)
 80019bc:	f002 fb84 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019c0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80019c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80019c6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80019ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019cc:	2302      	movs	r3, #2
 80019ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	4811      	ldr	r0, [pc, #68]	@ (8001a1c <MX_GPIO_Init+0x154>)
 80019d8:	f002 fb76 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80019dc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80019e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80019e2:	2311      	movs	r3, #17
 80019e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	4809      	ldr	r0, [pc, #36]	@ (8001a1c <MX_GPIO_Init+0x154>)
 80019f6:	f002 fb67 	bl	80040c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2102      	movs	r1, #2
 80019fe:	2028      	movs	r0, #40	@ 0x28
 8001a00:	f001 ffbb 	bl	800397a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a04:	2028      	movs	r0, #40	@ 0x28
 8001a06:	f001 ffd4 	bl	80039b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	@ 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40020800 	.word	0x40020800
 8001a1c:	40020400 	.word	0x40020400
 8001a20:	40020000 	.word	0x40020000

08001a24 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) // RED
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a34:	d129      	bne.n	8001a8a <HAL_GPIO_EXTI_Callback+0x66>
	    {
	        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET){// && game_task.red_delay_flag == 0) {
 8001a36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a3a:	482d      	ldr	r0, [pc, #180]	@ (8001af0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001a3c:	f002 fcc8 	bl	80043d0 <HAL_GPIO_ReadPin>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d11b      	bne.n	8001a7e <HAL_GPIO_EXTI_Callback+0x5a>
	            red_held = 1;
 8001a46:	4b2b      	ldr	r3, [pc, #172]	@ (8001af4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
	            red_start = ms_counter;
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001af8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a2a      	ldr	r2, [pc, #168]	@ (8001afc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001a52:	6013      	str	r3, [r2, #0]
	            red_shoot_task.button = 1;
 8001a54:	4b2a      	ldr	r3, [pc, #168]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	609a      	str	r2, [r3, #8]
	            if (game_task.play_flag == 1){
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b04 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d102      	bne.n	8001a68 <HAL_GPIO_EXTI_Callback+0x44>
	            	sound_task.laser_snd = 1;
 8001a62:	4b29      	ldr	r3, [pc, #164]	@ (8001b08 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	609a      	str	r2, [r3, #8]
	            }
	            if(playing){
 8001a68:	4b28      	ldr	r3, [pc, #160]	@ (8001b0c <HAL_GPIO_EXTI_Callback+0xe8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00c      	beq.n	8001a8a <HAL_GPIO_EXTI_Callback+0x66>
					playing = 0;
 8001a70:	4b26      	ldr	r3, [pc, #152]	@ (8001b0c <HAL_GPIO_EXTI_Callback+0xe8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
					sound_task.state = 6;
 8001a76:	4b24      	ldr	r3, [pc, #144]	@ (8001b08 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001a78:	2206      	movs	r2, #6
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	e005      	b.n	8001a8a <HAL_GPIO_EXTI_Callback+0x66>
				}

	        }
	        else {
	            red_held = 0;
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
	            red_shoot_task.button = 0;
 8001a84:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
	        }
	    }

	    if (GPIO_Pin == GPIO_PIN_12) // BLUE
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a90:	d129      	bne.n	8001ae6 <HAL_GPIO_EXTI_Callback+0xc2>
	    {
	        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){// && game_task.blue_delay_flag == 0) {
 8001a92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a96:	4816      	ldr	r0, [pc, #88]	@ (8001af0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001a98:	f002 fc9a 	bl	80043d0 <HAL_GPIO_ReadPin>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d11b      	bne.n	8001ada <HAL_GPIO_EXTI_Callback+0xb6>
	            blue_held = 1;
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <HAL_GPIO_EXTI_Callback+0xec>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
	            blue_start = ms_counter;
 8001aa8:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a19      	ldr	r2, [pc, #100]	@ (8001b14 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001aae:	6013      	str	r3, [r2, #0]
	            blue_shoot_task.button = 1;
 8001ab0:	4b19      	ldr	r3, [pc, #100]	@ (8001b18 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	609a      	str	r2, [r3, #8]
	            if (game_task.play_flag == 1){
 8001ab6:	4b13      	ldr	r3, [pc, #76]	@ (8001b04 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d113      	bne.n	8001ae6 <HAL_GPIO_EXTI_Callback+0xc2>
					sound_task.laser_snd = 1;
 8001abe:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	609a      	str	r2, [r3, #8]
				if(playing){
 8001ac4:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <HAL_GPIO_EXTI_Callback+0xe8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00c      	beq.n	8001ae6 <HAL_GPIO_EXTI_Callback+0xc2>
					playing = 0;
 8001acc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b0c <HAL_GPIO_EXTI_Callback+0xe8>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
					sound_task.state = 6;
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8001b08 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001ad4:	2206      	movs	r2, #6
 8001ad6:	601a      	str	r2, [r3, #0]
//    }
//    if (red_photoresistor_task.adc_val > red_photoresistor_task.zero + red_photoresistor_task.thresh)
//    {
//        red_photoresistor_task.hit_flag = 1;
//    }
}
 8001ad8:	e005      	b.n	8001ae6 <HAL_GPIO_EXTI_Callback+0xc2>
	            blue_held = 0;
 8001ada:	4b0d      	ldr	r3, [pc, #52]	@ (8001b10 <HAL_GPIO_EXTI_Callback+0xec>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
	            blue_shoot_task.button = 0;
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40020400 	.word	0x40020400
 8001af4:	20000590 	.word	0x20000590
 8001af8:	200005b8 	.word	0x200005b8
 8001afc:	20000594 	.word	0x20000594
 8001b00:	20000130 	.word	0x20000130
 8001b04:	200000cc 	.word	0x200000cc
 8001b08:	20000048 	.word	0x20000048
 8001b0c:	200005b0 	.word	0x200005b0
 8001b10:	20000591 	.word	0x20000591
 8001b14:	20000598 	.word	0x20000598
 8001b18:	20000160 	.word	0x20000160

08001b1c <calibration>:

void calibration(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08c      	sub	sp, #48	@ 0x30
 8001b20:	af00      	add	r7, sp, #0
    const float Kp = 1.0f;
 8001b22:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const int  HOMING_TOL = 5;      // ticks tolerance
 8001b28:	2305      	movs	r3, #5
 8001b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    const uint32_t TIMEOUT = 3000;  // ms
 8001b2c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t red_photo_sum = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
    uint32_t blue_photo_sum = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]

    // 1) Center shields & zero photoresistors
    __HAL_TIM_SET_COMPARE(red_shoot_task.servo_tim,   red_shoot_task.channel,   red_shoot_task.shield_val);
 8001b3a:	4b9c      	ldr	r3, [pc, #624]	@ (8001dac <calibration+0x290>)
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d106      	bne.n	8001b50 <calibration+0x34>
 8001b42:	4b9a      	ldr	r3, [pc, #616]	@ (8001dac <calibration+0x290>)
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	4b99      	ldr	r3, [pc, #612]	@ (8001dac <calibration+0x290>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b4e:	e01e      	b.n	8001b8e <calibration+0x72>
 8001b50:	4b96      	ldr	r3, [pc, #600]	@ (8001dac <calibration+0x290>)
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d107      	bne.n	8001b68 <calibration+0x4c>
 8001b58:	4b94      	ldr	r3, [pc, #592]	@ (8001dac <calibration+0x290>)
 8001b5a:	6959      	ldr	r1, [r3, #20]
 8001b5c:	4b93      	ldr	r3, [pc, #588]	@ (8001dac <calibration+0x290>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	460b      	mov	r3, r1
 8001b64:	6393      	str	r3, [r2, #56]	@ 0x38
 8001b66:	e012      	b.n	8001b8e <calibration+0x72>
 8001b68:	4b90      	ldr	r3, [pc, #576]	@ (8001dac <calibration+0x290>)
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d107      	bne.n	8001b80 <calibration+0x64>
 8001b70:	4b8e      	ldr	r3, [pc, #568]	@ (8001dac <calibration+0x290>)
 8001b72:	6959      	ldr	r1, [r3, #20]
 8001b74:	4b8d      	ldr	r3, [pc, #564]	@ (8001dac <calibration+0x290>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001b7e:	e006      	b.n	8001b8e <calibration+0x72>
 8001b80:	4b8a      	ldr	r3, [pc, #552]	@ (8001dac <calibration+0x290>)
 8001b82:	6959      	ldr	r1, [r3, #20]
 8001b84:	4b89      	ldr	r3, [pc, #548]	@ (8001dac <calibration+0x290>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(blue_shoot_task.servo_tim,  blue_shoot_task.channel,  blue_shoot_task.shield_val);
 8001b8e:	4b88      	ldr	r3, [pc, #544]	@ (8001db0 <calibration+0x294>)
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d106      	bne.n	8001ba4 <calibration+0x88>
 8001b96:	4b86      	ldr	r3, [pc, #536]	@ (8001db0 <calibration+0x294>)
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	4b85      	ldr	r3, [pc, #532]	@ (8001db0 <calibration+0x294>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ba2:	e01e      	b.n	8001be2 <calibration+0xc6>
 8001ba4:	4b82      	ldr	r3, [pc, #520]	@ (8001db0 <calibration+0x294>)
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d107      	bne.n	8001bbc <calibration+0xa0>
 8001bac:	4b80      	ldr	r3, [pc, #512]	@ (8001db0 <calibration+0x294>)
 8001bae:	6959      	ldr	r1, [r3, #20]
 8001bb0:	4b7f      	ldr	r3, [pc, #508]	@ (8001db0 <calibration+0x294>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	6393      	str	r3, [r2, #56]	@ 0x38
 8001bba:	e012      	b.n	8001be2 <calibration+0xc6>
 8001bbc:	4b7c      	ldr	r3, [pc, #496]	@ (8001db0 <calibration+0x294>)
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d107      	bne.n	8001bd4 <calibration+0xb8>
 8001bc4:	4b7a      	ldr	r3, [pc, #488]	@ (8001db0 <calibration+0x294>)
 8001bc6:	6959      	ldr	r1, [r3, #20]
 8001bc8:	4b79      	ldr	r3, [pc, #484]	@ (8001db0 <calibration+0x294>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001bd2:	e006      	b.n	8001be2 <calibration+0xc6>
 8001bd4:	4b76      	ldr	r3, [pc, #472]	@ (8001db0 <calibration+0x294>)
 8001bd6:	6959      	ldr	r1, [r3, #20]
 8001bd8:	4b75      	ldr	r3, [pc, #468]	@ (8001db0 <calibration+0x294>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	460b      	mov	r3, r1
 8001be0:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_Delay(1200);
 8001be2:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001be6:	f001 f9c3 	bl	8002f70 <HAL_Delay>
    red_photo_sum  += red_photoresistor_task.adc_val;
 8001bea:	4b72      	ldr	r3, [pc, #456]	@ (8001db4 <calibration+0x298>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	623b      	str	r3, [r7, #32]
    blue_photo_sum += blue_photoresistor_task.adc_val;
 8001bf6:	4b70      	ldr	r3, [pc, #448]	@ (8001db8 <calibration+0x29c>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	4413      	add	r3, r2
 8001c00:	61fb      	str	r3, [r7, #28]

    // --- Drive both to MIN end ---
    set_duty(&mred,  +30);
 8001c02:	211e      	movs	r1, #30
 8001c04:	486d      	ldr	r0, [pc, #436]	@ (8001dbc <calibration+0x2a0>)
 8001c06:	f000 f8e9 	bl	8001ddc <set_duty>
    set_duty(&mblue, -30);
 8001c0a:	f06f 011d 	mvn.w	r1, #29
 8001c0e:	486c      	ldr	r0, [pc, #432]	@ (8001dc0 <calibration+0x2a4>)
 8001c10:	f000 f8e4 	bl	8001ddc <set_duty>
    wait_for_stall(&red_encoder);
 8001c14:	486b      	ldr	r0, [pc, #428]	@ (8001dc4 <calibration+0x2a8>)
 8001c16:	f7fe fe27 	bl	8000868 <wait_for_stall>
    wait_for_stall(&blue_encoder);
 8001c1a:	486b      	ldr	r0, [pc, #428]	@ (8001dc8 <calibration+0x2ac>)
 8001c1c:	f7fe fe24 	bl	8000868 <wait_for_stall>
    int32_t red_min  = red_encoder.ticks;
 8001c20:	4b68      	ldr	r3, [pc, #416]	@ (8001dc4 <calibration+0x2a8>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	61bb      	str	r3, [r7, #24]
    int32_t blue_min = blue_encoder.ticks;
 8001c26:	4b68      	ldr	r3, [pc, #416]	@ (8001dc8 <calibration+0x2ac>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	617b      	str	r3, [r7, #20]
    set_duty(&mred,  0);
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4863      	ldr	r0, [pc, #396]	@ (8001dbc <calibration+0x2a0>)
 8001c30:	f000 f8d4 	bl	8001ddc <set_duty>
    set_duty(&mblue, 0);
 8001c34:	2100      	movs	r1, #0
 8001c36:	4862      	ldr	r0, [pc, #392]	@ (8001dc0 <calibration+0x2a4>)
 8001c38:	f000 f8d0 	bl	8001ddc <set_duty>
    red_photo_sum  += red_photoresistor_task.adc_val;
 8001c3c:	4b5d      	ldr	r3, [pc, #372]	@ (8001db4 <calibration+0x298>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	461a      	mov	r2, r3
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	4413      	add	r3, r2
 8001c46:	623b      	str	r3, [r7, #32]
	blue_photo_sum += blue_photoresistor_task.adc_val;
 8001c48:	4b5b      	ldr	r3, [pc, #364]	@ (8001db8 <calibration+0x29c>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	4413      	add	r3, r2
 8001c52:	61fb      	str	r3, [r7, #28]

    // --- Drive both to MAX end ---
    set_duty(&mred,  -30);
 8001c54:	f06f 011d 	mvn.w	r1, #29
 8001c58:	4858      	ldr	r0, [pc, #352]	@ (8001dbc <calibration+0x2a0>)
 8001c5a:	f000 f8bf 	bl	8001ddc <set_duty>
    set_duty(&mblue, +30);
 8001c5e:	211e      	movs	r1, #30
 8001c60:	4857      	ldr	r0, [pc, #348]	@ (8001dc0 <calibration+0x2a4>)
 8001c62:	f000 f8bb 	bl	8001ddc <set_duty>
    wait_for_stall(&red_encoder);
 8001c66:	4857      	ldr	r0, [pc, #348]	@ (8001dc4 <calibration+0x2a8>)
 8001c68:	f7fe fdfe 	bl	8000868 <wait_for_stall>
    wait_for_stall(&blue_encoder);
 8001c6c:	4856      	ldr	r0, [pc, #344]	@ (8001dc8 <calibration+0x2ac>)
 8001c6e:	f7fe fdfb 	bl	8000868 <wait_for_stall>
    int32_t red_max  = red_encoder.ticks;
 8001c72:	4b54      	ldr	r3, [pc, #336]	@ (8001dc4 <calibration+0x2a8>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	613b      	str	r3, [r7, #16]
    int32_t blue_max = blue_encoder.ticks;
 8001c78:	4b53      	ldr	r3, [pc, #332]	@ (8001dc8 <calibration+0x2ac>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	60fb      	str	r3, [r7, #12]
    set_duty(&mred,  0);
 8001c7e:	2100      	movs	r1, #0
 8001c80:	484e      	ldr	r0, [pc, #312]	@ (8001dbc <calibration+0x2a0>)
 8001c82:	f000 f8ab 	bl	8001ddc <set_duty>
    set_duty(&mblue, 0);
 8001c86:	2100      	movs	r1, #0
 8001c88:	484d      	ldr	r0, [pc, #308]	@ (8001dc0 <calibration+0x2a4>)
 8001c8a:	f000 f8a7 	bl	8001ddc <set_duty>
    red_photo_sum  += red_photoresistor_task.adc_val;
 8001c8e:	4b49      	ldr	r3, [pc, #292]	@ (8001db4 <calibration+0x298>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	461a      	mov	r2, r3
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	4413      	add	r3, r2
 8001c98:	623b      	str	r3, [r7, #32]
	blue_photo_sum += blue_photoresistor_task.adc_val;
 8001c9a:	4b47      	ldr	r3, [pc, #284]	@ (8001db8 <calibration+0x29c>)
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	61fb      	str	r3, [r7, #28]

    // --- Compute midpoints ---
    int32_t red_home  = (-red_min  - red_max)  / 2;
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	425a      	negs	r2, r3
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	0fda      	lsrs	r2, r3, #31
 8001cb0:	4413      	add	r3, r2
 8001cb2:	105b      	asrs	r3, r3, #1
 8001cb4:	60bb      	str	r3, [r7, #8]
    int32_t blue_home = (blue_min + blue_max) / 2;
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	0fda      	lsrs	r2, r3, #31
 8001cbe:	4413      	add	r3, r2
 8001cc0:	105b      	asrs	r3, r3, #1
 8001cc2:	607b      	str	r3, [r7, #4]

    // --- Compute photo resistor zeros ---
    red_photoresistor_task.zero  = red_photo_sum / 3;
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	4a41      	ldr	r2, [pc, #260]	@ (8001dcc <calibration+0x2b0>)
 8001cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ccc:	085b      	lsrs	r3, r3, #1
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b38      	ldr	r3, [pc, #224]	@ (8001db4 <calibration+0x298>)
 8001cd2:	615a      	str	r2, [r3, #20]
    blue_photoresistor_task.zero = blue_photo_sum / 3;
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	4a3d      	ldr	r2, [pc, #244]	@ (8001dcc <calibration+0x2b0>)
 8001cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4b35      	ldr	r3, [pc, #212]	@ (8001db8 <calibration+0x29c>)
 8001ce2:	615a      	str	r2, [r3, #20]

    // --- Drive both to their homes under P-control ---
    uint32_t t0 = HAL_GetTick();
 8001ce4:	f001 f938 	bl	8002f58 <HAL_GetTick>
 8001ce8:	6038      	str	r0, [r7, #0]
    do {
        read_encoder(&red_encoder);
 8001cea:	4836      	ldr	r0, [pc, #216]	@ (8001dc4 <calibration+0x2a8>)
 8001cec:	f7fe fd7a 	bl	80007e4 <read_encoder>
        read_encoder(&blue_encoder);
 8001cf0:	4835      	ldr	r0, [pc, #212]	@ (8001dc8 <calibration+0x2ac>)
 8001cf2:	f7fe fd77 	bl	80007e4 <read_encoder>

        go_to(&mred,  Kp, red_home,  -red_encoder.ticks);
 8001cf6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001cfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cfe:	4b31      	ldr	r3, [pc, #196]	@ (8001dc4 <calibration+0x2a8>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	425b      	negs	r3, r3
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	ee17 1a90 	vmov	r1, s15
 8001d0a:	482c      	ldr	r0, [pc, #176]	@ (8001dbc <calibration+0x2a0>)
 8001d0c:	f000 f973 	bl	8001ff6 <go_to>
        go_to(&mblue, Kp, blue_home, blue_encoder.ticks);
 8001d10:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d18:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc8 <calibration+0x2ac>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	ee17 1a90 	vmov	r1, s15
 8001d22:	4827      	ldr	r0, [pc, #156]	@ (8001dc0 <calibration+0x2a4>)
 8001d24:	f000 f967 	bl	8001ff6 <go_to>

        HAL_Delay(1);
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f001 f921 	bl	8002f70 <HAL_Delay>
    } while ((abs(-red_encoder.ticks  - red_home)  > HOMING_TOL ||
 8001d2e:	4b25      	ldr	r3, [pc, #148]	@ (8001dc4 <calibration+0x2a8>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	425a      	negs	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bfb8      	it	lt
 8001d3c:	425b      	neglt	r3, r3
              abs(blue_encoder.ticks - blue_home) > HOMING_TOL)
             && (HAL_GetTick() - t0) < TIMEOUT);
 8001d3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d40:	429a      	cmp	r2, r3
 8001d42:	db09      	blt.n	8001d58 <calibration+0x23c>
              abs(blue_encoder.ticks - blue_home) > HOMING_TOL)
 8001d44:	4b20      	ldr	r3, [pc, #128]	@ (8001dc8 <calibration+0x2ac>)
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bfb8      	it	lt
 8001d50:	425b      	neglt	r3, r3
    } while ((abs(-red_encoder.ticks  - red_home)  > HOMING_TOL ||
 8001d52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d54:	429a      	cmp	r2, r3
 8001d56:	da07      	bge.n	8001d68 <calibration+0x24c>
             && (HAL_GetTick() - t0) < TIMEOUT);
 8001d58:	f001 f8fe 	bl	8002f58 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d8c0      	bhi.n	8001cea <calibration+0x1ce>

    set_duty(&mred,  0);
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4814      	ldr	r0, [pc, #80]	@ (8001dbc <calibration+0x2a0>)
 8001d6c:	f000 f836 	bl	8001ddc <set_duty>
    set_duty(&mblue, 0);
 8001d70:	2100      	movs	r1, #0
 8001d72:	4813      	ldr	r0, [pc, #76]	@ (8001dc0 <calibration+0x2a4>)
 8001d74:	f000 f832 	bl	8001ddc <set_duty>

    // 5) Reset encoder zero-reference at true home
    setup_encoder(&red_encoder);
 8001d78:	4812      	ldr	r0, [pc, #72]	@ (8001dc4 <calibration+0x2a8>)
 8001d7a:	f7fe fd1d 	bl	80007b8 <setup_encoder>
    setup_encoder(&blue_encoder);
 8001d7e:	4812      	ldr	r0, [pc, #72]	@ (8001dc8 <calibration+0x2ac>)
 8001d80:	f7fe fd1a 	bl	80007b8 <setup_encoder>

    // --- Compute and store travel ranges ---
    red_encoder.range  = abs(red_max  - red_min);
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	bfb8      	it	lt
 8001d8e:	425b      	neglt	r3, r3
 8001d90:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc4 <calibration+0x2a8>)
 8001d92:	6113      	str	r3, [r2, #16]
    blue_encoder.range = abs(blue_max - blue_min);
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	bfb8      	it	lt
 8001d9e:	425b      	neglt	r3, r3
 8001da0:	4a09      	ldr	r2, [pc, #36]	@ (8001dc8 <calibration+0x2ac>)
 8001da2:	6113      	str	r3, [r2, #16]
}
 8001da4:	bf00      	nop
 8001da6:	3730      	adds	r7, #48	@ 0x30
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000130 	.word	0x20000130
 8001db0:	20000160 	.word	0x20000160
 8001db4:	20000084 	.word	0x20000084
 8001db8:	200000a8 	.word	0x200000a8
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	2000000c 	.word	0x2000000c
 8001dc4:	20000018 	.word	0x20000018
 8001dc8:	20000030 	.word	0x20000030
 8001dcc:	aaaaaaab 	.word	0xaaaaaaab

08001dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd4:	b672      	cpsid	i
}
 8001dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <Error_Handler+0x8>

08001ddc <set_duty>:
#include <stdint.h>

#define PWM_MAX         4800

void set_duty(motor_t* p_mot, int32_t duty)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
    duty = duty * PWM_MAX / 100;
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	603b      	str	r3, [r7, #0]
    if (duty >= 0) {
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	db46      	blt.n	8001e86 <set_duty+0xaa>
        __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, duty);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <set_duty+0x30>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e0a:	e018      	b.n	8001e3e <set_duty+0x62>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d105      	bne.n	8001e20 <set_duty+0x44>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	6393      	str	r3, [r2, #56]	@ 0x38
 8001e1e:	e00e      	b.n	8001e3e <set_duty+0x62>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d105      	bne.n	8001e34 <set_duty+0x58>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001e32:	e004      	b.n	8001e3e <set_duty+0x62>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, 0);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d105      	bne.n	8001e52 <set_duty+0x76>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	635a      	str	r2, [r3, #52]	@ 0x34
    } else {
        __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, 0);
        __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
    }
}
 8001e50:	e073      	b.n	8001f3a <set_duty+0x15e>
        __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, 0);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d105      	bne.n	8001e66 <set_duty+0x8a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	2300      	movs	r3, #0
 8001e62:	6393      	str	r3, [r2, #56]	@ 0x38
 8001e64:	e069      	b.n	8001f3a <set_duty+0x15e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d105      	bne.n	8001e7a <set_duty+0x9e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2300      	movs	r3, #0
 8001e76:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001e78:	e05f      	b.n	8001f3a <set_duty+0x15e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2300      	movs	r3, #0
 8001e82:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001e84:	e059      	b.n	8001f3a <set_duty+0x15e>
        __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, 0);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d105      	bne.n	8001e9a <set_duty+0xbe>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2200      	movs	r2, #0
 8001e96:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e98:	e018      	b.n	8001ecc <set_duty+0xf0>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d105      	bne.n	8001eae <set_duty+0xd2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	6393      	str	r3, [r2, #56]	@ 0x38
 8001eac:	e00e      	b.n	8001ecc <set_duty+0xf0>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d105      	bne.n	8001ec2 <set_duty+0xe6>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001ec0:	e004      	b.n	8001ecc <set_duty+0xf0>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <set_duty+0x10c>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001eda:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001ee6:	e028      	b.n	8001f3a <set_duty+0x15e>
        __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d10a      	bne.n	8001f06 <set_duty+0x12a>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001ef6:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	460b      	mov	r3, r1
 8001f02:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001f04:	e019      	b.n	8001f3a <set_duty+0x15e>
        __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d10a      	bne.n	8001f24 <set_duty+0x148>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001f14:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001f22:	e00a      	b.n	8001f3a <set_duty+0x15e>
        __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, abs(duty));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001f2a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	460b      	mov	r3, r1
 8001f36:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001f38:	e7ff      	b.n	8001f3a <set_duty+0x15e>
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <enable>:
    __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, 0);
    __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, 0);
}

void enable(motor_t* p_mot)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan1, PWM_MAX);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <enable+0x1e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001f60:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f62:	e01b      	b.n	8001f9c <enable+0x56>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d106      	bne.n	8001f7a <enable+0x34>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001f76:	6393      	str	r3, [r2, #56]	@ 0x38
 8001f78:	e010      	b.n	8001f9c <enable+0x56>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d106      	bne.n	8001f90 <enable+0x4a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001f8c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001f8e:	e005      	b.n	8001f9c <enable+0x56>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001f9a:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d106      	bne.n	8001fb2 <enable+0x6c>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001fae:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001fb0:	e01b      	b.n	8001fea <enable+0xa4>
    __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d106      	bne.n	8001fc8 <enable+0x82>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001fc4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001fc6:	e010      	b.n	8001fea <enable+0xa4>
    __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d106      	bne.n	8001fde <enable+0x98>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001fda:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001fdc:	e005      	b.n	8001fea <enable+0xa4>
    __HAL_TIM_SET_COMPARE(p_mot->tim, p_mot->chan2, PWM_MAX);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001fe8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <go_to>:

void go_to(motor_t *p_mot, int k_p, int where, int from)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	603b      	str	r3, [r7, #0]
    int error = where - from;
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	617b      	str	r3, [r7, #20]
    if (error > 100) error = 99;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2b64      	cmp	r3, #100	@ 0x64
 8002010:	dd01      	ble.n	8002016 <go_to+0x20>
 8002012:	2363      	movs	r3, #99	@ 0x63
 8002014:	617b      	str	r3, [r7, #20]
    if (error < -100) error = -99;
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800201c:	da02      	bge.n	8002024 <go_to+0x2e>
 800201e:	f06f 0362 	mvn.w	r3, #98	@ 0x62
 8002022:	617b      	str	r3, [r7, #20]
    set_duty(p_mot, k_p * error);
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	fb02 f303 	mul.w	r3, r2, r3
 800202c:	4619      	mov	r1, r3
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f7ff fed4 	bl	8001ddc <set_duty>
}
 8002034:	bf00      	nop
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <photoresistor_task_run>:

// game plan is to create two tasks, one for red and one for blue

// A function to run the appropriate state of the task
void photoresistor_task_run(PhotoresistorTask *photoresistor_task)
{    // Check for a valid state
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
    if (photoresistor_task->state >= 0 && photoresistor_task->state < photoresistor_task->num_states)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	db0e      	blt.n	800206a <photoresistor_task_run+0x2e>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	da08      	bge.n	800206a <photoresistor_task_run+0x2e>
    {
        // Index the list of state functions and then call the appropriate
        // method while passing in (this) task_1 object

    	photoresistor_task->state_list[photoresistor_task->state](photoresistor_task);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3206      	adds	r2, #6
 8002060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	4798      	blx	r3
    else
    {
        while(1){}
    }

}
 8002068:	e000      	b.n	800206c <photoresistor_task_run+0x30>
        while(1){}
 800206a:	e7fe      	b.n	800206a <photoresistor_task_run+0x2e>
}
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <photoresistor_task_state_0_init>:


// A function to initialize the task
// init button, laser and photoresistor
void photoresistor_task_state_0_init(PhotoresistorTask *photoresistor_task)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
	photoresistor_task->state = 1;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	601a      	str	r2, [r3, #0]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <photoresistor_task_state_1_look>:
// A function to implement state 1 of the task
// wait for button to be pressed which should be on an interrupt that changes a flag
void photoresistor_task_state_1_look(PhotoresistorTask *photoresistor_task)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	if ((photoresistor_task->adc_val - photoresistor_task->zero) > photoresistor_task->thresh){
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	1ad2      	subs	r2, r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	dd05      	ble.n	80020b2 <photoresistor_task_state_1_look+0x26>
		photoresistor_task->hit_flag = 1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	609a      	str	r2, [r3, #8]
		photoresistor_task->state = 2;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	601a      	str	r2, [r3, #0]
	}

}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <photoresistor_task_state_2_hit>:
// A function to implement state 2 which is for when the game is being played
// This keeps track of score, prints score messages
void photoresistor_task_state_2_hit(PhotoresistorTask *photoresistor_task)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
	if (photoresistor_task->hit_flag == 0){ // game_task will change when they have recorded the score
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d102      	bne.n	80020d4 <photoresistor_task_state_2_hit+0x16>
		photoresistor_task->state = 1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
	}
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <shoot_task_run>:

// game plan is to create two tasks, one for red and one for blue

// A function to run the appropriate state of the task
void shoot_task_run(ShootTask *shoot_task)
{    // Check for a valid state
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    if (shoot_task->state >= 0 && shoot_task->state < shoot_task->num_states)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	db0e      	blt.n	800210e <shoot_task_run+0x2e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	da08      	bge.n	800210e <shoot_task_run+0x2e>
    {
        // Index the list of state functions and then call the appropriate
        // method while passing in (this) task_1 object

        shoot_task->state_list[shoot_task->state](shoot_task);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3208      	adds	r2, #8
 8002104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4798      	blx	r3
    else
    {
        while(1){}
    }

}
 800210c:	e000      	b.n	8002110 <shoot_task_run+0x30>
        while(1){}
 800210e:	e7fe      	b.n	800210e <shoot_task_run+0x2e>
}
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <shoot_task_state_0_init>:
// servo -- 300 at shiel

// A function to initialize the task
// init button, laser and photoresistor
void shoot_task_state_0_init(ShootTask *shoot_task)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	shoot_task->state = 1;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, shoot_task->laser_gpio, GPIO_PIN_SET);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	b29b      	uxth	r3, r3
 800212c:	2201      	movs	r2, #1
 800212e:	4619      	mov	r1, r3
 8002130:	4818      	ldr	r0, [pc, #96]	@ (8002194 <shoot_task_state_0_init+0x7c>)
 8002132:	f002 f965 	bl	8004400 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d106      	bne.n	800214c <shoot_task_state_0_init+0x34>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699a      	ldr	r2, [r3, #24]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800214a:	e01e      	b.n	800218a <shoot_task_state_0_init+0x72>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	2b04      	cmp	r3, #4
 8002152:	d107      	bne.n	8002164 <shoot_task_state_0_init+0x4c>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6999      	ldr	r1, [r3, #24]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	460b      	mov	r3, r1
 8002160:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002162:	e012      	b.n	800218a <shoot_task_state_0_init+0x72>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	2b08      	cmp	r3, #8
 800216a:	d107      	bne.n	800217c <shoot_task_state_0_init+0x64>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6999      	ldr	r1, [r3, #24]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	460b      	mov	r3, r1
 8002178:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800217a:	e006      	b.n	800218a <shoot_task_state_0_init+0x72>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6999      	ldr	r1, [r3, #24]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	460b      	mov	r3, r1
 8002188:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40020400 	.word	0x40020400

08002198 <shoot_task_state_1_wait>:
// A function to implement state 1 of the task
// wait for button to be pressed which should be on an interrupt that changes a flag
void shoot_task_state_1_wait(ShootTask *shoot_task)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, shoot_task->laser_gpio, GPIO_PIN_SET);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	2201      	movs	r2, #1
 80021a8:	4619      	mov	r1, r3
 80021aa:	481c      	ldr	r0, [pc, #112]	@ (800221c <shoot_task_state_1_wait+0x84>)
 80021ac:	f002 f928 	bl	8004400 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->unshield_val);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d106      	bne.n	80021c6 <shoot_task_state_1_wait+0x2e>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699a      	ldr	r2, [r3, #24]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80021c4:	e01e      	b.n	8002204 <shoot_task_state_1_wait+0x6c>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d107      	bne.n	80021de <shoot_task_state_1_wait+0x46>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6999      	ldr	r1, [r3, #24]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	460b      	mov	r3, r1
 80021da:	6393      	str	r3, [r2, #56]	@ 0x38
 80021dc:	e012      	b.n	8002204 <shoot_task_state_1_wait+0x6c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d107      	bne.n	80021f6 <shoot_task_state_1_wait+0x5e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6999      	ldr	r1, [r3, #24]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	460b      	mov	r3, r1
 80021f2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80021f4:	e006      	b.n	8002204 <shoot_task_state_1_wait+0x6c>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6999      	ldr	r1, [r3, #24]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	460b      	mov	r3, r1
 8002202:	6413      	str	r3, [r2, #64]	@ 0x40
	if (shoot_task->button == 1){
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d102      	bne.n	8002212 <shoot_task_state_1_wait+0x7a>
		shoot_task->state = 2;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	601a      	str	r2, [r3, #0]
	}
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40020400 	.word	0x40020400

08002220 <shoot_task_state_2_unshield>:
// A function to implement state 2 which is for when the game is being played
// This keeps track of score, prints score messages
void shoot_task_state_2_unshield(ShootTask *shoot_task)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(shoot_task->servo_tim, shoot_task->channel, shoot_task->shield_val);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d106      	bne.n	800223e <shoot_task_state_2_unshield+0x1e>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695a      	ldr	r2, [r3, #20]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	635a      	str	r2, [r3, #52]	@ 0x34
 800223c:	e01e      	b.n	800227c <shoot_task_state_2_unshield+0x5c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b04      	cmp	r3, #4
 8002244:	d107      	bne.n	8002256 <shoot_task_state_2_unshield+0x36>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6959      	ldr	r1, [r3, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	460b      	mov	r3, r1
 8002252:	6393      	str	r3, [r2, #56]	@ 0x38
 8002254:	e012      	b.n	800227c <shoot_task_state_2_unshield+0x5c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b08      	cmp	r3, #8
 800225c:	d107      	bne.n	800226e <shoot_task_state_2_unshield+0x4e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6959      	ldr	r1, [r3, #20]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	460b      	mov	r3, r1
 800226a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800226c:	e006      	b.n	800227c <shoot_task_state_2_unshield+0x5c>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6959      	ldr	r1, [r3, #20]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	460b      	mov	r3, r1
 800227a:	6413      	str	r3, [r2, #64]	@ 0x40
	if (1){ // add delay using some ticks and tune it
		shoot_task->state = 3;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2203      	movs	r2, #3
 8002280:	601a      	str	r2, [r3, #0]
	}
	if(shoot_task->button == 0){
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d102      	bne.n	8002290 <shoot_task_state_2_unshield+0x70>
		shoot_task->state = 1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	601a      	str	r2, [r3, #0]
	}
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <shoot_task_state_3_shoot>:
// A function to implement state 3

void shoot_task_state_3_shoot(ShootTask *shoot_task)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, shoot_task->laser_gpio, GPIO_PIN_RESET);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	2200      	movs	r2, #0
 80022ac:	4619      	mov	r1, r3
 80022ae:	4807      	ldr	r0, [pc, #28]	@ (80022cc <shoot_task_state_3_shoot+0x30>)
 80022b0:	f002 f8a6 	bl	8004400 <HAL_GPIO_WritePin>
	if(shoot_task->button == 0){
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d102      	bne.n	80022c2 <shoot_task_state_3_shoot+0x26>
		shoot_task->state = 1;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	601a      	str	r2, [r3, #0]
	}

}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40020400 	.word	0x40020400

080022d0 <sound_task_run>:
 *
 * @param sound_task Pointer to the SoundTask instance.
 */

void sound_task_run(SoundTask *sound_task)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
    if (sound_task->state >= 0 && sound_task->state < sound_task->num_states)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	db0e      	blt.n	80022fe <sound_task_run+0x2e>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	da08      	bge.n	80022fe <sound_task_run+0x2e>
    {
    	sound_task->state_list[sound_task->state](sound_task);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3208      	adds	r2, #8
 80022f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	4798      	blx	r3
    else
    {

        while(1){}
    }
}
 80022fc:	e000      	b.n	8002300 <sound_task_run+0x30>
        while(1){}
 80022fe:	e7fe      	b.n	80022fe <sound_task_run+0x2e>
}
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <sound_task_state_0_init>:
 *
 * @param sound_task Pointer to the SoundTask instance.
 */

void sound_task_state_0_init(SoundTask *sound_task)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
	sound_task->state = 1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	601a      	str	r2, [r3, #0]

}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <sound_task_state_1_wait>:
 *
 * @param sound_task Pointer to the SoundTask instance.
 */

void sound_task_state_1_wait(SoundTask *sound_task)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

	if(sound_task->hit_snd == 1){
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d103      	bne.n	8002338 <sound_task_state_1_wait+0x18>
		sound_task->state = 3;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2203      	movs	r2, #3
 8002334:	601a      	str	r2, [r3, #0]
	}
	else if (sound_task->laser_snd == 1){
		sound_task->state = 2;
	}

}
 8002336:	e016      	b.n	8002366 <sound_task_state_1_wait+0x46>
	else if(sound_task->win_snd == 1){
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d103      	bne.n	8002348 <sound_task_state_1_wait+0x28>
		sound_task->state = 4;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2204      	movs	r2, #4
 8002344:	601a      	str	r2, [r3, #0]
}
 8002346:	e00e      	b.n	8002366 <sound_task_state_1_wait+0x46>
	else if(sound_task->start_snd == 1){
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d103      	bne.n	8002358 <sound_task_state_1_wait+0x38>
		sound_task->state = 5;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2205      	movs	r2, #5
 8002354:	601a      	str	r2, [r3, #0]
}
 8002356:	e006      	b.n	8002366 <sound_task_state_1_wait+0x46>
	else if (sound_task->laser_snd == 1){
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d102      	bne.n	8002366 <sound_task_state_1_wait+0x46>
		sound_task->state = 2;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	601a      	str	r2, [r3, #0]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <sound_task_state_2_laser>:
 *
 * @param sound_task Pointer to the SoundTask instance.
 */

void sound_task_state_2_laser(SoundTask *sound_task)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	if (playing) return;
 800237c:	4b2f      	ldr	r3, [pc, #188]	@ (800243c <sound_task_state_2_laser+0xc8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d156      	bne.n	8002432 <sound_task_state_2_laser+0xbe>
	if (sound_task->laser_snd == 1){
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d14a      	bne.n	8002422 <sound_task_state_2_laser+0xae>
		audio_buf_ptr = laser_buf;
 800238c:	4b2c      	ldr	r3, [pc, #176]	@ (8002440 <sound_task_state_2_laser+0xcc>)
 800238e:	4a2d      	ldr	r2, [pc, #180]	@ (8002444 <sound_task_state_2_laser+0xd0>)
 8002390:	601a      	str	r2, [r3, #0]
		audio_buf_len = laser_buf_len;
 8002392:	4b2d      	ldr	r3, [pc, #180]	@ (8002448 <sound_task_state_2_laser+0xd4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a2d      	ldr	r2, [pc, #180]	@ (800244c <sound_task_state_2_laser+0xd8>)
 8002398:	6013      	str	r3, [r2, #0]
		playing = 1;
 800239a:	4b28      	ldr	r3, [pc, #160]	@ (800243c <sound_task_state_2_laser+0xc8>)
 800239c:	2201      	movs	r2, #1
 800239e:	601a      	str	r2, [r3, #0]
		sample_index = 0;
 80023a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002450 <sound_task_state_2_laser+0xdc>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(sound_task->htim, sound_task->chan, 0);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d105      	bne.n	80023ba <sound_task_state_2_laser+0x46>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2200      	movs	r2, #0
 80023b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80023b8:	e018      	b.n	80023ec <sound_task_state_2_laser+0x78>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d105      	bne.n	80023ce <sound_task_state_2_laser+0x5a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	2300      	movs	r3, #0
 80023ca:	6393      	str	r3, [r2, #56]	@ 0x38
 80023cc:	e00e      	b.n	80023ec <sound_task_state_2_laser+0x78>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d105      	bne.n	80023e2 <sound_task_state_2_laser+0x6e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	2300      	movs	r3, #0
 80023de:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80023e0:	e004      	b.n	80023ec <sound_task_state_2_laser+0x78>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2300      	movs	r3, #0
 80023ea:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_CLEAR_FLAG(sound_task->htim, TIM_FLAG_UPDATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f06f 0201 	mvn.w	r2, #1
 80023f6:	611a      	str	r2, [r3, #16]
		__HAL_TIM_ENABLE_IT(sound_task->htim, TIM_IT_UPDATE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(sound_task->htim, sound_task->chan);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69da      	ldr	r2, [r3, #28]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	4619      	mov	r1, r3
 8002416:	4610      	mov	r0, r2
 8002418:	f003 fa62 	bl	80058e0 <HAL_TIM_PWM_Start>
		sound_task->laser_snd = 0;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
	}

	if (playing == 0){
 8002422:	4b06      	ldr	r3, [pc, #24]	@ (800243c <sound_task_state_2_laser+0xc8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d104      	bne.n	8002434 <sound_task_state_2_laser+0xc0>
		sound_task->state = 6;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2206      	movs	r2, #6
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	e000      	b.n	8002434 <sound_task_state_2_laser+0xc0>
	if (playing) return;
 8002432:	bf00      	nop
	}

}
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200005b0 	.word	0x200005b0
 8002440:	200005b4 	.word	0x200005b4
 8002444:	0802f5b0 	.word	0x0802f5b0
 8002448:	0804824c 	.word	0x0804824c
 800244c:	200005ac 	.word	0x200005ac
 8002450:	200005a4 	.word	0x200005a4

08002454 <sound_task_state_3_hit>:
 *
 * @param sound_task Pointer to the SoundTask instance.
 */

void sound_task_state_3_hit(SoundTask *sound_task)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	if (playing) {
 800245c:	4b30      	ldr	r3, [pc, #192]	@ (8002520 <sound_task_state_3_hit+0xcc>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <sound_task_state_3_hit+0x18>
		sound_task->laser_snd = 0;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
		return;
 800246a:	e055      	b.n	8002518 <sound_task_state_3_hit+0xc4>
	}
	if (sound_task->hit_snd == 1){
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d14a      	bne.n	800250a <sound_task_state_3_hit+0xb6>
		audio_buf_ptr = hit_buf;
 8002474:	4b2b      	ldr	r3, [pc, #172]	@ (8002524 <sound_task_state_3_hit+0xd0>)
 8002476:	4a2c      	ldr	r2, [pc, #176]	@ (8002528 <sound_task_state_3_hit+0xd4>)
 8002478:	601a      	str	r2, [r3, #0]
		audio_buf_len = hit_buf_len;
 800247a:	4b2c      	ldr	r3, [pc, #176]	@ (800252c <sound_task_state_3_hit+0xd8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a2c      	ldr	r2, [pc, #176]	@ (8002530 <sound_task_state_3_hit+0xdc>)
 8002480:	6013      	str	r3, [r2, #0]
		playing = 1;
 8002482:	4b27      	ldr	r3, [pc, #156]	@ (8002520 <sound_task_state_3_hit+0xcc>)
 8002484:	2201      	movs	r2, #1
 8002486:	601a      	str	r2, [r3, #0]
		sample_index = 0;
 8002488:	4b2a      	ldr	r3, [pc, #168]	@ (8002534 <sound_task_state_3_hit+0xe0>)
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(sound_task->htim, sound_task->chan, 0);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d105      	bne.n	80024a2 <sound_task_state_3_hit+0x4e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2200      	movs	r2, #0
 800249e:	635a      	str	r2, [r3, #52]	@ 0x34
 80024a0:	e018      	b.n	80024d4 <sound_task_state_3_hit+0x80>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d105      	bne.n	80024b6 <sound_task_state_3_hit+0x62>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	2300      	movs	r3, #0
 80024b2:	6393      	str	r3, [r2, #56]	@ 0x38
 80024b4:	e00e      	b.n	80024d4 <sound_task_state_3_hit+0x80>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d105      	bne.n	80024ca <sound_task_state_3_hit+0x76>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2300      	movs	r3, #0
 80024c6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80024c8:	e004      	b.n	80024d4 <sound_task_state_3_hit+0x80>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2300      	movs	r3, #0
 80024d2:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_CLEAR_FLAG(sound_task->htim, TIM_FLAG_UPDATE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f06f 0201 	mvn.w	r2, #1
 80024de:	611a      	str	r2, [r3, #16]
		__HAL_TIM_ENABLE_IT(sound_task->htim, TIM_IT_UPDATE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(sound_task->htim, sound_task->chan);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69da      	ldr	r2, [r3, #28]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	4619      	mov	r1, r3
 80024fe:	4610      	mov	r0, r2
 8002500:	f003 f9ee 	bl	80058e0 <HAL_TIM_PWM_Start>
		sound_task->hit_snd = 0;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	60da      	str	r2, [r3, #12]
	}

	if (playing == 0){
 800250a:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <sound_task_state_3_hit+0xcc>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d102      	bne.n	8002518 <sound_task_state_3_hit+0xc4>
		sound_task->state = 6;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2206      	movs	r2, #6
 8002516:	601a      	str	r2, [r3, #0]
	}

}
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	200005b0 	.word	0x200005b0
 8002524:	200005b4 	.word	0x200005b4
 8002528:	08017bac 	.word	0x08017bac
 800252c:	0802f5ac 	.word	0x0802f5ac
 8002530:	200005ac 	.word	0x200005ac
 8002534:	200005a4 	.word	0x200005a4

08002538 <sound_task_state_4_win>:
 *
 * @param sound_task Pointer to the SoundTask instance.
 */

void sound_task_state_4_win(SoundTask *sound_task)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	if (playing){
 8002540:	4b31      	ldr	r3, [pc, #196]	@ (8002608 <sound_task_state_4_win+0xd0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d006      	beq.n	8002556 <sound_task_state_4_win+0x1e>
		sound_task->laser_snd = 0;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
		sound_task->hit_snd = 0;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	60da      	str	r2, [r3, #12]
		return;
 8002554:	e055      	b.n	8002602 <sound_task_state_4_win+0xca>
	}
	if (sound_task->win_snd == 1){
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d14a      	bne.n	80025f4 <sound_task_state_4_win+0xbc>
		audio_buf_ptr = game_over_buf;
 800255e:	4b2b      	ldr	r3, [pc, #172]	@ (800260c <sound_task_state_4_win+0xd4>)
 8002560:	4a2b      	ldr	r2, [pc, #172]	@ (8002610 <sound_task_state_4_win+0xd8>)
 8002562:	601a      	str	r2, [r3, #0]
		audio_buf_len = game_over_buf_len;
 8002564:	4b2b      	ldr	r3, [pc, #172]	@ (8002614 <sound_task_state_4_win+0xdc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a2b      	ldr	r2, [pc, #172]	@ (8002618 <sound_task_state_4_win+0xe0>)
 800256a:	6013      	str	r3, [r2, #0]
		playing = 1;
 800256c:	4b26      	ldr	r3, [pc, #152]	@ (8002608 <sound_task_state_4_win+0xd0>)
 800256e:	2201      	movs	r2, #1
 8002570:	601a      	str	r2, [r3, #0]
		sample_index = 0;
 8002572:	4b2a      	ldr	r3, [pc, #168]	@ (800261c <sound_task_state_4_win+0xe4>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(sound_task->htim, sound_task->chan, 0);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d105      	bne.n	800258c <sound_task_state_4_win+0x54>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2200      	movs	r2, #0
 8002588:	635a      	str	r2, [r3, #52]	@ 0x34
 800258a:	e018      	b.n	80025be <sound_task_state_4_win+0x86>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d105      	bne.n	80025a0 <sound_task_state_4_win+0x68>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	2300      	movs	r3, #0
 800259c:	6393      	str	r3, [r2, #56]	@ 0x38
 800259e:	e00e      	b.n	80025be <sound_task_state_4_win+0x86>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d105      	bne.n	80025b4 <sound_task_state_4_win+0x7c>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	2300      	movs	r3, #0
 80025b0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80025b2:	e004      	b.n	80025be <sound_task_state_4_win+0x86>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	2300      	movs	r3, #0
 80025bc:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_CLEAR_FLAG(sound_task->htim, TIM_FLAG_UPDATE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f06f 0201 	mvn.w	r2, #1
 80025c8:	611a      	str	r2, [r3, #16]
		__HAL_TIM_ENABLE_IT(sound_task->htim, TIM_IT_UPDATE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0201 	orr.w	r2, r2, #1
 80025dc:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(sound_task->htim, sound_task->chan);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69da      	ldr	r2, [r3, #28]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	4619      	mov	r1, r3
 80025e8:	4610      	mov	r0, r2
 80025ea:	f003 f979 	bl	80058e0 <HAL_TIM_PWM_Start>
		sound_task->win_snd = 0;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	615a      	str	r2, [r3, #20]
	}

	if (playing == 0){
 80025f4:	4b04      	ldr	r3, [pc, #16]	@ (8002608 <sound_task_state_4_win+0xd0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d102      	bne.n	8002602 <sound_task_state_4_win+0xca>
		sound_task->state = 6;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2206      	movs	r2, #6
 8002600:	601a      	str	r2, [r3, #0]
	}
}
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	200005b0 	.word	0x200005b0
 800260c:	200005b4 	.word	0x200005b4
 8002610:	080076a8 	.word	0x080076a8
 8002614:	08017ba8 	.word	0x08017ba8
 8002618:	200005ac 	.word	0x200005ac
 800261c:	200005a4 	.word	0x200005a4

08002620 <sound_task_state_5_start>:
 *
 * @param sound_task Pointer to the SoundTask instance.
 */

void sound_task_state_5_start(SoundTask *sound_task)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
	if (playing) {
 8002628:	4b30      	ldr	r3, [pc, #192]	@ (80026ec <sound_task_state_5_start+0xcc>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <sound_task_state_5_start+0x18>
		sound_task->laser_snd = 0;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
		return;
 8002636:	e055      	b.n	80026e4 <sound_task_state_5_start+0xc4>
	}
	if (sound_task->start_snd == 1){
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d14a      	bne.n	80026d6 <sound_task_state_5_start+0xb6>
		audio_buf_ptr = start_buf;
 8002640:	4b2b      	ldr	r3, [pc, #172]	@ (80026f0 <sound_task_state_5_start+0xd0>)
 8002642:	4a2c      	ldr	r2, [pc, #176]	@ (80026f4 <sound_task_state_5_start+0xd4>)
 8002644:	601a      	str	r2, [r3, #0]
		audio_buf_len = start_buf_len;
 8002646:	4b2c      	ldr	r3, [pc, #176]	@ (80026f8 <sound_task_state_5_start+0xd8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a2c      	ldr	r2, [pc, #176]	@ (80026fc <sound_task_state_5_start+0xdc>)
 800264c:	6013      	str	r3, [r2, #0]
		playing = 1;
 800264e:	4b27      	ldr	r3, [pc, #156]	@ (80026ec <sound_task_state_5_start+0xcc>)
 8002650:	2201      	movs	r2, #1
 8002652:	601a      	str	r2, [r3, #0]
		sample_index = 0;
 8002654:	4b2a      	ldr	r3, [pc, #168]	@ (8002700 <sound_task_state_5_start+0xe0>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(sound_task->htim, sound_task->chan, 0);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d105      	bne.n	800266e <sound_task_state_5_start+0x4e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2200      	movs	r2, #0
 800266a:	635a      	str	r2, [r3, #52]	@ 0x34
 800266c:	e018      	b.n	80026a0 <sound_task_state_5_start+0x80>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b04      	cmp	r3, #4
 8002674:	d105      	bne.n	8002682 <sound_task_state_5_start+0x62>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2300      	movs	r3, #0
 800267e:	6393      	str	r3, [r2, #56]	@ 0x38
 8002680:	e00e      	b.n	80026a0 <sound_task_state_5_start+0x80>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b08      	cmp	r3, #8
 8002688:	d105      	bne.n	8002696 <sound_task_state_5_start+0x76>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	2300      	movs	r3, #0
 8002692:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002694:	e004      	b.n	80026a0 <sound_task_state_5_start+0x80>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	2300      	movs	r3, #0
 800269e:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_CLEAR_FLAG(sound_task->htim, TIM_FLAG_UPDATE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f06f 0201 	mvn.w	r2, #1
 80026aa:	611a      	str	r2, [r3, #16]
		__HAL_TIM_ENABLE_IT(sound_task->htim, TIM_IT_UPDATE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(sound_task->htim, sound_task->chan);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69da      	ldr	r2, [r3, #28]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	4619      	mov	r1, r3
 80026ca:	4610      	mov	r0, r2
 80026cc:	f003 f908 	bl	80058e0 <HAL_TIM_PWM_Start>
		sound_task->start_snd = 0;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	611a      	str	r2, [r3, #16]
	}

	if (playing == 0){
 80026d6:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <sound_task_state_5_start+0xcc>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d102      	bne.n	80026e4 <sound_task_state_5_start+0xc4>
		sound_task->state = 6;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2206      	movs	r2, #6
 80026e2:	601a      	str	r2, [r3, #0]
	}

}
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	200005b0 	.word	0x200005b0
 80026f0:	200005b4 	.word	0x200005b4
 80026f4:	08048254 	.word	0x08048254
 80026f8:	08053f54 	.word	0x08053f54
 80026fc:	200005ac 	.word	0x200005ac
 8002700:	200005a4 	.word	0x200005a4

08002704 <sound_task_state_6_stop>:
 * Stops interrupts and PWM for speaker then goes back to the waiting state.
 *
 * @param sound_task Pointer to the SoundTask instance.
 */

void sound_task_state_6_stop(SoundTask *sound_task){
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_DISABLE_IT(sound_task->htim, TIM_IT_UPDATE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Stop(sound_task->htim, sound_task->chan);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69da      	ldr	r2, [r3, #28]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	4619      	mov	r1, r3
 800272a:	4610      	mov	r0, r2
 800272c:	f003 f988 	bl	8005a40 <HAL_TIM_PWM_Stop>
	sound_task->state = 1;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	601a      	str	r2, [r3, #0]
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	4b10      	ldr	r3, [pc, #64]	@ (800278c <HAL_MspInit+0x4c>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274e:	4a0f      	ldr	r2, [pc, #60]	@ (800278c <HAL_MspInit+0x4c>)
 8002750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002754:	6453      	str	r3, [r2, #68]	@ 0x44
 8002756:	4b0d      	ldr	r3, [pc, #52]	@ (800278c <HAL_MspInit+0x4c>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	603b      	str	r3, [r7, #0]
 8002766:	4b09      	ldr	r3, [pc, #36]	@ (800278c <HAL_MspInit+0x4c>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	4a08      	ldr	r2, [pc, #32]	@ (800278c <HAL_MspInit+0x4c>)
 800276c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002770:	6413      	str	r3, [r2, #64]	@ 0x40
 8002772:	4b06      	ldr	r3, [pc, #24]	@ (800278c <HAL_MspInit+0x4c>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800

08002790 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	@ 0x28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a2f      	ldr	r2, [pc, #188]	@ (800286c <HAL_ADC_MspInit+0xdc>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d158      	bne.n	8002864 <HAL_ADC_MspInit+0xd4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002870 <HAL_ADC_MspInit+0xe0>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002870 <HAL_ADC_MspInit+0xe0>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80027c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002870 <HAL_ADC_MspInit+0xe0>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	4b27      	ldr	r3, [pc, #156]	@ (8002870 <HAL_ADC_MspInit+0xe0>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	4a26      	ldr	r2, [pc, #152]	@ (8002870 <HAL_ADC_MspInit+0xe0>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027de:	4b24      	ldr	r3, [pc, #144]	@ (8002870 <HAL_ADC_MspInit+0xe0>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80027ea:	23f0      	movs	r3, #240	@ 0xf0
 80027ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027ee:	2303      	movs	r3, #3
 80027f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f6:	f107 0314 	add.w	r3, r7, #20
 80027fa:	4619      	mov	r1, r3
 80027fc:	481d      	ldr	r0, [pc, #116]	@ (8002874 <HAL_ADC_MspInit+0xe4>)
 80027fe:	f001 fc63 	bl	80040c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002802:	4b1d      	ldr	r3, [pc, #116]	@ (8002878 <HAL_ADC_MspInit+0xe8>)
 8002804:	4a1d      	ldr	r2, [pc, #116]	@ (800287c <HAL_ADC_MspInit+0xec>)
 8002806:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002808:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <HAL_ADC_MspInit+0xe8>)
 800280a:	2200      	movs	r2, #0
 800280c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800280e:	4b1a      	ldr	r3, [pc, #104]	@ (8002878 <HAL_ADC_MspInit+0xe8>)
 8002810:	2200      	movs	r2, #0
 8002812:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002814:	4b18      	ldr	r3, [pc, #96]	@ (8002878 <HAL_ADC_MspInit+0xe8>)
 8002816:	2200      	movs	r2, #0
 8002818:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800281a:	4b17      	ldr	r3, [pc, #92]	@ (8002878 <HAL_ADC_MspInit+0xe8>)
 800281c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002820:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002822:	4b15      	ldr	r3, [pc, #84]	@ (8002878 <HAL_ADC_MspInit+0xe8>)
 8002824:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002828:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800282a:	4b13      	ldr	r3, [pc, #76]	@ (8002878 <HAL_ADC_MspInit+0xe8>)
 800282c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002830:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002832:	4b11      	ldr	r3, [pc, #68]	@ (8002878 <HAL_ADC_MspInit+0xe8>)
 8002834:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002838:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800283a:	4b0f      	ldr	r3, [pc, #60]	@ (8002878 <HAL_ADC_MspInit+0xe8>)
 800283c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002840:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002842:	4b0d      	ldr	r3, [pc, #52]	@ (8002878 <HAL_ADC_MspInit+0xe8>)
 8002844:	2200      	movs	r2, #0
 8002846:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002848:	480b      	ldr	r0, [pc, #44]	@ (8002878 <HAL_ADC_MspInit+0xe8>)
 800284a:	f001 f8cd 	bl	80039e8 <HAL_DMA_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002854:	f7ff fabc 	bl	8001dd0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a07      	ldr	r2, [pc, #28]	@ (8002878 <HAL_ADC_MspInit+0xe8>)
 800285c:	639a      	str	r2, [r3, #56]	@ 0x38
 800285e:	4a06      	ldr	r2, [pc, #24]	@ (8002878 <HAL_ADC_MspInit+0xe8>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002864:	bf00      	nop
 8002866:	3728      	adds	r7, #40	@ 0x28
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40012000 	.word	0x40012000
 8002870:	40023800 	.word	0x40023800
 8002874:	40020000 	.word	0x40020000
 8002878:	2000032c 	.word	0x2000032c
 800287c:	40026410 	.word	0x40026410

08002880 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	@ 0x28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a19      	ldr	r2, [pc, #100]	@ (8002904 <HAL_I2C_MspInit+0x84>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d12c      	bne.n	80028fc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	4b18      	ldr	r3, [pc, #96]	@ (8002908 <HAL_I2C_MspInit+0x88>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	4a17      	ldr	r2, [pc, #92]	@ (8002908 <HAL_I2C_MspInit+0x88>)
 80028ac:	f043 0302 	orr.w	r3, r3, #2
 80028b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b2:	4b15      	ldr	r3, [pc, #84]	@ (8002908 <HAL_I2C_MspInit+0x88>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028c4:	2312      	movs	r3, #18
 80028c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028cc:	2303      	movs	r3, #3
 80028ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028d0:	2304      	movs	r3, #4
 80028d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	4619      	mov	r1, r3
 80028da:	480c      	ldr	r0, [pc, #48]	@ (800290c <HAL_I2C_MspInit+0x8c>)
 80028dc:	f001 fbf4 	bl	80040c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	4b08      	ldr	r3, [pc, #32]	@ (8002908 <HAL_I2C_MspInit+0x88>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	4a07      	ldr	r2, [pc, #28]	@ (8002908 <HAL_I2C_MspInit+0x88>)
 80028ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f0:	4b05      	ldr	r3, [pc, #20]	@ (8002908 <HAL_I2C_MspInit+0x88>)
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80028fc:	bf00      	nop
 80028fe:	3728      	adds	r7, #40	@ 0x28
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40005400 	.word	0x40005400
 8002908:	40023800 	.word	0x40023800
 800290c:	40020400 	.word	0x40020400

08002910 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a18      	ldr	r2, [pc, #96]	@ (8002980 <HAL_TIM_PWM_MspInit+0x70>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d116      	bne.n	8002950 <HAL_TIM_PWM_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	4b17      	ldr	r3, [pc, #92]	@ (8002984 <HAL_TIM_PWM_MspInit+0x74>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292a:	4a16      	ldr	r2, [pc, #88]	@ (8002984 <HAL_TIM_PWM_MspInit+0x74>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6453      	str	r3, [r2, #68]	@ 0x44
 8002932:	4b14      	ldr	r3, [pc, #80]	@ (8002984 <HAL_TIM_PWM_MspInit+0x74>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	2018      	movs	r0, #24
 8002944:	f001 f819 	bl	800397a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002948:	2018      	movs	r0, #24
 800294a:	f001 f832 	bl	80039b2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800294e:	e012      	b.n	8002976 <HAL_TIM_PWM_MspInit+0x66>
  else if(htim_pwm->Instance==TIM4)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0c      	ldr	r2, [pc, #48]	@ (8002988 <HAL_TIM_PWM_MspInit+0x78>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d10d      	bne.n	8002976 <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	4b09      	ldr	r3, [pc, #36]	@ (8002984 <HAL_TIM_PWM_MspInit+0x74>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	4a08      	ldr	r2, [pc, #32]	@ (8002984 <HAL_TIM_PWM_MspInit+0x74>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	6413      	str	r3, [r2, #64]	@ 0x40
 800296a:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <HAL_TIM_PWM_MspInit+0x74>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40010000 	.word	0x40010000
 8002984:	40023800 	.word	0x40023800
 8002988:	40000800 	.word	0x40000800

0800298c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800299c:	d116      	bne.n	80029cc <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a0c <HAL_TIM_Base_MspInit+0x80>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	4a19      	ldr	r2, [pc, #100]	@ (8002a0c <HAL_TIM_Base_MspInit+0x80>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ae:	4b17      	ldr	r3, [pc, #92]	@ (8002a0c <HAL_TIM_Base_MspInit+0x80>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029ba:	2200      	movs	r2, #0
 80029bc:	2100      	movs	r1, #0
 80029be:	201c      	movs	r0, #28
 80029c0:	f000 ffdb 	bl	800397a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029c4:	201c      	movs	r0, #28
 80029c6:	f000 fff4 	bl	80039b2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM9_MspInit 1 */

    /* USER CODE END TIM9_MspInit 1 */
  }

}
 80029ca:	e01a      	b.n	8002a02 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM9)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002a10 <HAL_TIM_Base_MspInit+0x84>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d115      	bne.n	8002a02 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	4b0c      	ldr	r3, [pc, #48]	@ (8002a0c <HAL_TIM_Base_MspInit+0x80>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029de:	4a0b      	ldr	r2, [pc, #44]	@ (8002a0c <HAL_TIM_Base_MspInit+0x80>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029e6:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <HAL_TIM_Base_MspInit+0x80>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80029f2:	2200      	movs	r2, #0
 80029f4:	2100      	movs	r1, #0
 80029f6:	2018      	movs	r0, #24
 80029f8:	f000 ffbf 	bl	800397a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80029fc:	2018      	movs	r0, #24
 80029fe:	f000 ffd8 	bl	80039b2 <HAL_NVIC_EnableIRQ>
}
 8002a02:	bf00      	nop
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40014000 	.word	0x40014000

08002a14 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08c      	sub	sp, #48	@ 0x30
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 031c 	add.w	r3, r7, #28
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a32      	ldr	r2, [pc, #200]	@ (8002afc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d12c      	bne.n	8002a90 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	4b31      	ldr	r3, [pc, #196]	@ (8002b00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	4a30      	ldr	r2, [pc, #192]	@ (8002b00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a40:	f043 0302 	orr.w	r3, r3, #2
 8002a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a46:	4b2e      	ldr	r3, [pc, #184]	@ (8002b00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	61bb      	str	r3, [r7, #24]
 8002a50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	4b2a      	ldr	r3, [pc, #168]	@ (8002b00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	4a29      	ldr	r2, [pc, #164]	@ (8002b00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a5c:	f043 0302 	orr.w	r3, r3, #2
 8002a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a62:	4b27      	ldr	r3, [pc, #156]	@ (8002b00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a6e:	2330      	movs	r3, #48	@ 0x30
 8002a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a72:	2302      	movs	r3, #2
 8002a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a82:	f107 031c 	add.w	r3, r7, #28
 8002a86:	4619      	mov	r1, r3
 8002a88:	481e      	ldr	r0, [pc, #120]	@ (8002b04 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002a8a:	f001 fb1d 	bl	80040c8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002a8e:	e030      	b.n	8002af2 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1c      	ldr	r2, [pc, #112]	@ (8002b08 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d12b      	bne.n	8002af2 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	4b18      	ldr	r3, [pc, #96]	@ (8002b00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	4a17      	ldr	r2, [pc, #92]	@ (8002b00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002aa4:	f043 0308 	orr.w	r3, r3, #8
 8002aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aaa:	4b15      	ldr	r3, [pc, #84]	@ (8002b00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	4b11      	ldr	r3, [pc, #68]	@ (8002b00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	4a10      	ldr	r2, [pc, #64]	@ (8002b00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae6:	f107 031c 	add.w	r3, r7, #28
 8002aea:	4619      	mov	r1, r3
 8002aec:	4807      	ldr	r0, [pc, #28]	@ (8002b0c <HAL_TIM_Encoder_MspInit+0xf8>)
 8002aee:	f001 faeb 	bl	80040c8 <HAL_GPIO_Init>
}
 8002af2:	bf00      	nop
 8002af4:	3730      	adds	r7, #48	@ 0x30
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40000400 	.word	0x40000400
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40020400 	.word	0x40020400
 8002b08:	40000c00 	.word	0x40000c00
 8002b0c:	40020000 	.word	0x40020000

08002b10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	@ 0x28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a37      	ldr	r2, [pc, #220]	@ (8002c0c <HAL_TIM_MspPostInit+0xfc>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d11f      	bne.n	8002b72 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	4b36      	ldr	r3, [pc, #216]	@ (8002c10 <HAL_TIM_MspPostInit+0x100>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	4a35      	ldr	r2, [pc, #212]	@ (8002c10 <HAL_TIM_MspPostInit+0x100>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b42:	4b33      	ldr	r3, [pc, #204]	@ (8002c10 <HAL_TIM_MspPostInit+0x100>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002b4e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	4619      	mov	r1, r3
 8002b6a:	482a      	ldr	r0, [pc, #168]	@ (8002c14 <HAL_TIM_MspPostInit+0x104>)
 8002b6c:	f001 faac 	bl	80040c8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002b70:	e047      	b.n	8002c02 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7a:	d11f      	bne.n	8002bbc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	4b23      	ldr	r3, [pc, #140]	@ (8002c10 <HAL_TIM_MspPostInit+0x100>)
 8002b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b84:	4a22      	ldr	r2, [pc, #136]	@ (8002c10 <HAL_TIM_MspPostInit+0x100>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b8c:	4b20      	ldr	r3, [pc, #128]	@ (8002c10 <HAL_TIM_MspPostInit+0x100>)
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002baa:	2301      	movs	r3, #1
 8002bac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bae:	f107 0314 	add.w	r3, r7, #20
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4817      	ldr	r0, [pc, #92]	@ (8002c14 <HAL_TIM_MspPostInit+0x104>)
 8002bb6:	f001 fa87 	bl	80040c8 <HAL_GPIO_Init>
}
 8002bba:	e022      	b.n	8002c02 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a15      	ldr	r2, [pc, #84]	@ (8002c18 <HAL_TIM_MspPostInit+0x108>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d11d      	bne.n	8002c02 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	4b11      	ldr	r3, [pc, #68]	@ (8002c10 <HAL_TIM_MspPostInit+0x100>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	4a10      	ldr	r2, [pc, #64]	@ (8002c10 <HAL_TIM_MspPostInit+0x100>)
 8002bd0:	f043 0302 	orr.w	r3, r3, #2
 8002bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c10 <HAL_TIM_MspPostInit+0x100>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002be2:	23c0      	movs	r3, #192	@ 0xc0
 8002be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be6:	2302      	movs	r3, #2
 8002be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf6:	f107 0314 	add.w	r3, r7, #20
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4807      	ldr	r0, [pc, #28]	@ (8002c1c <HAL_TIM_MspPostInit+0x10c>)
 8002bfe:	f001 fa63 	bl	80040c8 <HAL_GPIO_Init>
}
 8002c02:	bf00      	nop
 8002c04:	3728      	adds	r7, #40	@ 0x28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40010000 	.word	0x40010000
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40020000 	.word	0x40020000
 8002c18:	40000800 	.word	0x40000800
 8002c1c:	40020400 	.word	0x40020400

08002c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c24:	bf00      	nop
 8002c26:	e7fd      	b.n	8002c24 <NMI_Handler+0x4>

08002c28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c2c:	bf00      	nop
 8002c2e:	e7fd      	b.n	8002c2c <HardFault_Handler+0x4>

08002c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c34:	bf00      	nop
 8002c36:	e7fd      	b.n	8002c34 <MemManage_Handler+0x4>

08002c38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c3c:	bf00      	nop
 8002c3e:	e7fd      	b.n	8002c3c <BusFault_Handler+0x4>

08002c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c44:	bf00      	nop
 8002c46:	e7fd      	b.n	8002c44 <UsageFault_Handler+0x4>

08002c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c56:	b480      	push	{r7}
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c76:	f000 f95b 	bl	8002f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <TIM1_BRK_TIM9_IRQHandler>:
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  *
  * TIM9 is used to generate a 1 ms timer for non-blocking delays
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim9, TIM_FLAG_UPDATE)) {
 8002c84:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb8 <TIM1_BRK_TIM9_IRQHandler+0x38>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d109      	bne.n	8002ca6 <TIM1_BRK_TIM9_IRQHandler+0x26>
		__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 8002c92:	4b09      	ldr	r3, [pc, #36]	@ (8002cb8 <TIM1_BRK_TIM9_IRQHandler+0x38>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f06f 0201 	mvn.w	r2, #1
 8002c9a:	611a      	str	r2, [r3, #16]
		// this fires once every millisecond
		ms_counter++;
 8002c9c:	4b07      	ldr	r3, [pc, #28]	@ (8002cbc <TIM1_BRK_TIM9_IRQHandler+0x3c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	4a06      	ldr	r2, [pc, #24]	@ (8002cbc <TIM1_BRK_TIM9_IRQHandler+0x3c>)
 8002ca4:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ca6:	4806      	ldr	r0, [pc, #24]	@ (8002cc0 <TIM1_BRK_TIM9_IRQHandler+0x40>)
 8002ca8:	f003 f960 	bl	8005f6c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002cac:	4802      	ldr	r0, [pc, #8]	@ (8002cb8 <TIM1_BRK_TIM9_IRQHandler+0x38>)
 8002cae:	f003 f95d 	bl	8005f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000548 	.word	0x20000548
 8002cbc:	200005b8 	.word	0x200005b8
 8002cc0:	200003e0 	.word	0x200003e0

08002cc4 <TIM2_IRQHandler>:
  * When the playing flag is set by the sound task, this interrupt feeds data from
  * the current audio buff to the PWM duty cycle output. The PWM operates at a frequency twice
  * that of our audio frequency which gives decent sound quality.
  */
void TIM2_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE)) {
 8002cca:	4b25      	ldr	r3, [pc, #148]	@ (8002d60 <TIM2_IRQHandler+0x9c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d13b      	bne.n	8002d50 <TIM2_IRQHandler+0x8c>
	    __HAL_TIM_CLEAR_IT(&htim2, TIM_FLAG_UPDATE);
 8002cd8:	4b21      	ldr	r3, [pc, #132]	@ (8002d60 <TIM2_IRQHandler+0x9c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0201 	mvn.w	r2, #1
 8002ce0:	611a      	str	r2, [r3, #16]
	    if (playing) {
 8002ce2:	4b20      	ldr	r3, [pc, #128]	@ (8002d64 <TIM2_IRQHandler+0xa0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d032      	beq.n	8002d50 <TIM2_IRQHandler+0x8c>
	    // every N PWM ticks, step one audio sample
			if (++pwm_div_count >= STEP_RATIO) {
 8002cea:	4b1f      	ldr	r3, [pc, #124]	@ (8002d68 <TIM2_IRQHandler+0xa4>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8002d68 <TIM2_IRQHandler+0xa4>)
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	7011      	strb	r1, [r2, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d928      	bls.n	8002d50 <TIM2_IRQHandler+0x8c>
				pwm_div_count = 0;
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8002d68 <TIM2_IRQHandler+0xa4>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]

				// fetch the next sample from your C array
				int16_t s = audio_buf_ptr[sample_index++];
 8002d04:	4b19      	ldr	r3, [pc, #100]	@ (8002d6c <TIM2_IRQHandler+0xa8>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b19      	ldr	r3, [pc, #100]	@ (8002d70 <TIM2_IRQHandler+0xac>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	1c59      	adds	r1, r3, #1
 8002d0e:	4818      	ldr	r0, [pc, #96]	@ (8002d70 <TIM2_IRQHandler+0xac>)
 8002d10:	6001      	str	r1, [r0, #0]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4413      	add	r3, r2
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	80fb      	strh	r3, [r7, #6]
				if (sample_index >= audio_buf_len){
 8002d1a:	4b15      	ldr	r3, [pc, #84]	@ (8002d70 <TIM2_IRQHandler+0xac>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4b15      	ldr	r3, [pc, #84]	@ (8002d74 <TIM2_IRQHandler+0xb0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d302      	bcc.n	8002d2c <TIM2_IRQHandler+0x68>
					playing = 0;
 8002d26:	4b0f      	ldr	r3, [pc, #60]	@ (8002d64 <TIM2_IRQHandler+0xa0>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
				}

							// map signed 16-bit [-32768..+32767] to CCR range [0..ARR]
				uint32_t duty = ((uint32_t)(s + 32768) * (htim2.Init.Period)) / 65535;
 8002d2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d30:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <TIM2_IRQHandler+0x9c>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8002d78 <TIM2_IRQHandler+0xb4>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	0bdb      	lsrs	r3, r3, #15
 8002d46:	603b      	str	r3, [r7, #0]
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8002d48:	4b05      	ldr	r3, [pc, #20]	@ (8002d60 <TIM2_IRQHandler+0x9c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	635a      	str	r2, [r3, #52]	@ 0x34
				}
	    }
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d50:	4803      	ldr	r0, [pc, #12]	@ (8002d60 <TIM2_IRQHandler+0x9c>)
 8002d52:	f003 f90b 	bl	8005f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000428 	.word	0x20000428
 8002d64:	200005b0 	.word	0x200005b0
 8002d68:	200005a8 	.word	0x200005a8
 8002d6c:	200005b4 	.word	0x200005b4
 8002d70:	200005a4 	.word	0x200005a4
 8002d74:	200005ac 	.word	0x200005ac
 8002d78:	80008001 	.word	0x80008001

08002d7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002d80:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002d84:	f001 fb56 	bl	8004434 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002d88:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002d8c:	f001 fb52 	bl	8004434 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d90:	bf00      	nop
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d98:	4802      	ldr	r0, [pc, #8]	@ (8002da4 <DMA2_Stream0_IRQHandler+0x10>)
 8002d9a:	f000 ff2b 	bl	8003bf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	2000032c 	.word	0x2000032c

08002da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002db0:	4a14      	ldr	r2, [pc, #80]	@ (8002e04 <_sbrk+0x5c>)
 8002db2:	4b15      	ldr	r3, [pc, #84]	@ (8002e08 <_sbrk+0x60>)
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dbc:	4b13      	ldr	r3, [pc, #76]	@ (8002e0c <_sbrk+0x64>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d102      	bne.n	8002dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dc4:	4b11      	ldr	r3, [pc, #68]	@ (8002e0c <_sbrk+0x64>)
 8002dc6:	4a12      	ldr	r2, [pc, #72]	@ (8002e10 <_sbrk+0x68>)
 8002dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dca:	4b10      	ldr	r3, [pc, #64]	@ (8002e0c <_sbrk+0x64>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d207      	bcs.n	8002de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dd8:	f003 ff44 	bl	8006c64 <__errno>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	220c      	movs	r2, #12
 8002de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002de6:	e009      	b.n	8002dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002de8:	4b08      	ldr	r3, [pc, #32]	@ (8002e0c <_sbrk+0x64>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dee:	4b07      	ldr	r3, [pc, #28]	@ (8002e0c <_sbrk+0x64>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	4a05      	ldr	r2, [pc, #20]	@ (8002e0c <_sbrk+0x64>)
 8002df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20020000 	.word	0x20020000
 8002e08:	00000400 	.word	0x00000400
 8002e0c:	200005bc 	.word	0x200005bc
 8002e10:	20000710 	.word	0x20000710

08002e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e18:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <SystemInit+0x20>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1e:	4a05      	ldr	r2, [pc, #20]	@ (8002e34 <SystemInit+0x20>)
 8002e20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e3c:	f7ff ffea 	bl	8002e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e40:	480c      	ldr	r0, [pc, #48]	@ (8002e74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e42:	490d      	ldr	r1, [pc, #52]	@ (8002e78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e44:	4a0d      	ldr	r2, [pc, #52]	@ (8002e7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e48:	e002      	b.n	8002e50 <LoopCopyDataInit>

08002e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e4e:	3304      	adds	r3, #4

08002e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e54:	d3f9      	bcc.n	8002e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e56:	4a0a      	ldr	r2, [pc, #40]	@ (8002e80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e58:	4c0a      	ldr	r4, [pc, #40]	@ (8002e84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e5c:	e001      	b.n	8002e62 <LoopFillZerobss>

08002e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e60:	3204      	adds	r2, #4

08002e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e64:	d3fb      	bcc.n	8002e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e66:	f003 ff03 	bl	8006c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e6a:	f7fe f87b 	bl	8000f64 <main>
  bx  lr    
 8002e6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e78:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 8002e7c:	08053fbc 	.word	0x08053fbc
  ldr r2, =_sbss
 8002e80:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8002e84:	2000070c 	.word	0x2000070c

08002e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e88:	e7fe      	b.n	8002e88 <ADC_IRQHandler>
	...

08002e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e90:	4b0e      	ldr	r3, [pc, #56]	@ (8002ecc <HAL_Init+0x40>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a0d      	ldr	r2, [pc, #52]	@ (8002ecc <HAL_Init+0x40>)
 8002e96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <HAL_Init+0x40>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8002ecc <HAL_Init+0x40>)
 8002ea2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ea8:	4b08      	ldr	r3, [pc, #32]	@ (8002ecc <HAL_Init+0x40>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a07      	ldr	r2, [pc, #28]	@ (8002ecc <HAL_Init+0x40>)
 8002eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eb4:	2003      	movs	r0, #3
 8002eb6:	f000 fd55 	bl	8003964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eba:	200f      	movs	r0, #15
 8002ebc:	f000 f808 	bl	8002ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ec0:	f7ff fc3e 	bl	8002740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023c00 	.word	0x40023c00

08002ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ed8:	4b12      	ldr	r3, [pc, #72]	@ (8002f24 <HAL_InitTick+0x54>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b12      	ldr	r3, [pc, #72]	@ (8002f28 <HAL_InitTick+0x58>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fd6d 	bl	80039ce <HAL_SYSTICK_Config>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e00e      	b.n	8002f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b0f      	cmp	r3, #15
 8002f02:	d80a      	bhi.n	8002f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f04:	2200      	movs	r2, #0
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f0c:	f000 fd35 	bl	800397a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f10:	4a06      	ldr	r2, [pc, #24]	@ (8002f2c <HAL_InitTick+0x5c>)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	e000      	b.n	8002f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20000264 	.word	0x20000264
 8002f28:	2000026c 	.word	0x2000026c
 8002f2c:	20000268 	.word	0x20000268

08002f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f34:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <HAL_IncTick+0x20>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4b06      	ldr	r3, [pc, #24]	@ (8002f54 <HAL_IncTick+0x24>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4413      	add	r3, r2
 8002f40:	4a04      	ldr	r2, [pc, #16]	@ (8002f54 <HAL_IncTick+0x24>)
 8002f42:	6013      	str	r3, [r2, #0]
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	2000026c 	.word	0x2000026c
 8002f54:	200005c0 	.word	0x200005c0

08002f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f5c:	4b03      	ldr	r3, [pc, #12]	@ (8002f6c <HAL_GetTick+0x14>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	200005c0 	.word	0x200005c0

08002f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f78:	f7ff ffee 	bl	8002f58 <HAL_GetTick>
 8002f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f88:	d005      	beq.n	8002f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb4 <HAL_Delay+0x44>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4413      	add	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f96:	bf00      	nop
 8002f98:	f7ff ffde 	bl	8002f58 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d8f7      	bhi.n	8002f98 <HAL_Delay+0x28>
  {
  }
}
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	2000026c 	.word	0x2000026c

08002fb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e033      	b.n	8003036 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fbda 	bl	8002790 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d118      	bne.n	8003028 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ffe:	f023 0302 	bic.w	r3, r3, #2
 8003002:	f043 0202 	orr.w	r2, r3, #2
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fa5c 	bl	80034c8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	f043 0201 	orr.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	641a      	str	r2, [r3, #64]	@ 0x40
 8003026:	e001      	b.n	800302c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003034:	7bfb      	ldrb	r3, [r7, #15]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_ADC_Start_DMA+0x22>
 800305e:	2302      	movs	r3, #2
 8003060:	e0d0      	b.n	8003204 <HAL_ADC_Start_DMA+0x1c4>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d018      	beq.n	80030aa <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003088:	4b60      	ldr	r3, [pc, #384]	@ (800320c <HAL_ADC_Start_DMA+0x1cc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a60      	ldr	r2, [pc, #384]	@ (8003210 <HAL_ADC_Start_DMA+0x1d0>)
 800308e:	fba2 2303 	umull	r2, r3, r2, r3
 8003092:	0c9a      	lsrs	r2, r3, #18
 8003094:	4613      	mov	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800309c:	e002      	b.n	80030a4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f9      	bne.n	800309e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030b8:	d107      	bne.n	80030ca <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030c8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	f040 8088 	bne.w	80031ea <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d007      	beq.n	800310c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003100:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003104:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003110:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003118:	d106      	bne.n	8003128 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311e:	f023 0206 	bic.w	r2, r3, #6
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	645a      	str	r2, [r3, #68]	@ 0x44
 8003126:	e002      	b.n	800312e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003136:	4b37      	ldr	r3, [pc, #220]	@ (8003214 <HAL_ADC_Start_DMA+0x1d4>)
 8003138:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800313e:	4a36      	ldr	r2, [pc, #216]	@ (8003218 <HAL_ADC_Start_DMA+0x1d8>)
 8003140:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003146:	4a35      	ldr	r2, [pc, #212]	@ (800321c <HAL_ADC_Start_DMA+0x1dc>)
 8003148:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314e:	4a34      	ldr	r2, [pc, #208]	@ (8003220 <HAL_ADC_Start_DMA+0x1e0>)
 8003150:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800315a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800316a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800317a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	334c      	adds	r3, #76	@ 0x4c
 8003186:	4619      	mov	r1, r3
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f000 fcda 	bl	8003b44 <HAL_DMA_Start_IT>
 8003190:	4603      	mov	r3, r0
 8003192:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10f      	bne.n	80031c0 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d129      	bne.n	8003202 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80031bc:	609a      	str	r2, [r3, #8]
 80031be:	e020      	b.n	8003202 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a17      	ldr	r2, [pc, #92]	@ (8003224 <HAL_ADC_Start_DMA+0x1e4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d11b      	bne.n	8003202 <HAL_ADC_Start_DMA+0x1c2>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d114      	bne.n	8003202 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	e00b      	b.n	8003202 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ee:	f043 0210 	orr.w	r2, r3, #16
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fa:	f043 0201 	orr.w	r2, r3, #1
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003202:	7ffb      	ldrb	r3, [r7, #31]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3720      	adds	r7, #32
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	20000264 	.word	0x20000264
 8003210:	431bde83 	.word	0x431bde83
 8003214:	40012300 	.word	0x40012300
 8003218:	080036c1 	.word	0x080036c1
 800321c:	0800377b 	.word	0x0800377b
 8003220:	08003797 	.word	0x08003797
 8003224:	40012000 	.word	0x40012000

08003228 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x1c>
 800327c:	2302      	movs	r3, #2
 800327e:	e113      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x244>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b09      	cmp	r3, #9
 800328e:	d925      	bls.n	80032dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68d9      	ldr	r1, [r3, #12]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	b29b      	uxth	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	4613      	mov	r3, r2
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	4413      	add	r3, r2
 80032a4:	3b1e      	subs	r3, #30
 80032a6:	2207      	movs	r2, #7
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43da      	mvns	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	400a      	ands	r2, r1
 80032b4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68d9      	ldr	r1, [r3, #12]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	4618      	mov	r0, r3
 80032c8:	4603      	mov	r3, r0
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4403      	add	r3, r0
 80032ce:	3b1e      	subs	r3, #30
 80032d0:	409a      	lsls	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	e022      	b.n	8003322 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6919      	ldr	r1, [r3, #16]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	461a      	mov	r2, r3
 80032ea:	4613      	mov	r3, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4413      	add	r3, r2
 80032f0:	2207      	movs	r2, #7
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43da      	mvns	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	400a      	ands	r2, r1
 80032fe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6919      	ldr	r1, [r3, #16]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	4618      	mov	r0, r3
 8003312:	4603      	mov	r3, r0
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4403      	add	r3, r0
 8003318:	409a      	lsls	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b06      	cmp	r3, #6
 8003328:	d824      	bhi.n	8003374 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	3b05      	subs	r3, #5
 800333c:	221f      	movs	r2, #31
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43da      	mvns	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	400a      	ands	r2, r1
 800334a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	b29b      	uxth	r3, r3
 8003358:	4618      	mov	r0, r3
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	3b05      	subs	r3, #5
 8003366:	fa00 f203 	lsl.w	r2, r0, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	635a      	str	r2, [r3, #52]	@ 0x34
 8003372:	e04c      	b.n	800340e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b0c      	cmp	r3, #12
 800337a:	d824      	bhi.n	80033c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	3b23      	subs	r3, #35	@ 0x23
 800338e:	221f      	movs	r2, #31
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43da      	mvns	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	400a      	ands	r2, r1
 800339c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	4618      	mov	r0, r3
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	3b23      	subs	r3, #35	@ 0x23
 80033b8:	fa00 f203 	lsl.w	r2, r0, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80033c4:	e023      	b.n	800340e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	3b41      	subs	r3, #65	@ 0x41
 80033d8:	221f      	movs	r2, #31
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43da      	mvns	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	400a      	ands	r2, r1
 80033e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	4618      	mov	r0, r3
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	3b41      	subs	r3, #65	@ 0x41
 8003402:	fa00 f203 	lsl.w	r2, r0, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800340e:	4b29      	ldr	r3, [pc, #164]	@ (80034b4 <HAL_ADC_ConfigChannel+0x250>)
 8003410:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a28      	ldr	r2, [pc, #160]	@ (80034b8 <HAL_ADC_ConfigChannel+0x254>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d10f      	bne.n	800343c <HAL_ADC_ConfigChannel+0x1d8>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b12      	cmp	r3, #18
 8003422:	d10b      	bne.n	800343c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1d      	ldr	r2, [pc, #116]	@ (80034b8 <HAL_ADC_ConfigChannel+0x254>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d12b      	bne.n	800349e <HAL_ADC_ConfigChannel+0x23a>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1c      	ldr	r2, [pc, #112]	@ (80034bc <HAL_ADC_ConfigChannel+0x258>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d003      	beq.n	8003458 <HAL_ADC_ConfigChannel+0x1f4>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b11      	cmp	r3, #17
 8003456:	d122      	bne.n	800349e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a11      	ldr	r2, [pc, #68]	@ (80034bc <HAL_ADC_ConfigChannel+0x258>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d111      	bne.n	800349e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800347a:	4b11      	ldr	r3, [pc, #68]	@ (80034c0 <HAL_ADC_ConfigChannel+0x25c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a11      	ldr	r2, [pc, #68]	@ (80034c4 <HAL_ADC_ConfigChannel+0x260>)
 8003480:	fba2 2303 	umull	r2, r3, r2, r3
 8003484:	0c9a      	lsrs	r2, r3, #18
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003490:	e002      	b.n	8003498 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	3b01      	subs	r3, #1
 8003496:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f9      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	40012300 	.word	0x40012300
 80034b8:	40012000 	.word	0x40012000
 80034bc:	10000012 	.word	0x10000012
 80034c0:	20000264 	.word	0x20000264
 80034c4:	431bde83 	.word	0x431bde83

080034c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034d0:	4b79      	ldr	r3, [pc, #484]	@ (80036b8 <ADC_Init+0x1f0>)
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6859      	ldr	r1, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	021a      	lsls	r2, r3, #8
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003520:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6859      	ldr	r1, [r3, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003542:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6899      	ldr	r1, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355a:	4a58      	ldr	r2, [pc, #352]	@ (80036bc <ADC_Init+0x1f4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d022      	beq.n	80035a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800356e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6899      	ldr	r1, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003590:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6899      	ldr	r1, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	e00f      	b.n	80035c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0202 	bic.w	r2, r2, #2
 80035d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6899      	ldr	r1, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	7e1b      	ldrb	r3, [r3, #24]
 80035e0:	005a      	lsls	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01b      	beq.n	800362c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003602:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003612:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6859      	ldr	r1, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361e:	3b01      	subs	r3, #1
 8003620:	035a      	lsls	r2, r3, #13
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	e007      	b.n	800363c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800363a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800364a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	3b01      	subs	r3, #1
 8003658:	051a      	lsls	r2, r3, #20
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003670:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6899      	ldr	r1, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800367e:	025a      	lsls	r2, r3, #9
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6899      	ldr	r1, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	029a      	lsls	r2, r3, #10
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	609a      	str	r2, [r3, #8]
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	40012300 	.word	0x40012300
 80036bc:	0f000001 	.word	0x0f000001

080036c0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d13c      	bne.n	8003754 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036de:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d12b      	bne.n	800374c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d127      	bne.n	800374c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003702:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003706:	2b00      	cmp	r3, #0
 8003708:	d006      	beq.n	8003718 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003714:	2b00      	cmp	r3, #0
 8003716:	d119      	bne.n	800374c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0220 	bic.w	r2, r2, #32
 8003726:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003738:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d105      	bne.n	800374c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	f043 0201 	orr.w	r2, r3, #1
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f7ff fd6b 	bl	8003228 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003752:	e00e      	b.n	8003772 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f7ff fd75 	bl	8003250 <HAL_ADC_ErrorCallback>
}
 8003766:	e004      	b.n	8003772 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
}
 8003772:	bf00      	nop
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003786:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f7ff fd57 	bl	800323c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2240      	movs	r2, #64	@ 0x40
 80037a8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ae:	f043 0204 	orr.w	r2, r3, #4
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f7ff fd4a 	bl	8003250 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003808 <__NVIC_SetPriorityGrouping+0x44>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037e0:	4013      	ands	r3, r2
 80037e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f6:	4a04      	ldr	r2, [pc, #16]	@ (8003808 <__NVIC_SetPriorityGrouping+0x44>)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	60d3      	str	r3, [r2, #12]
}
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003810:	4b04      	ldr	r3, [pc, #16]	@ (8003824 <__NVIC_GetPriorityGrouping+0x18>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	0a1b      	lsrs	r3, r3, #8
 8003816:	f003 0307 	and.w	r3, r3, #7
}
 800381a:	4618      	mov	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003836:	2b00      	cmp	r3, #0
 8003838:	db0b      	blt.n	8003852 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800383a:	79fb      	ldrb	r3, [r7, #7]
 800383c:	f003 021f 	and.w	r2, r3, #31
 8003840:	4907      	ldr	r1, [pc, #28]	@ (8003860 <__NVIC_EnableIRQ+0x38>)
 8003842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	2001      	movs	r0, #1
 800384a:	fa00 f202 	lsl.w	r2, r0, r2
 800384e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	e000e100 	.word	0xe000e100

08003864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	6039      	str	r1, [r7, #0]
 800386e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003874:	2b00      	cmp	r3, #0
 8003876:	db0a      	blt.n	800388e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	b2da      	uxtb	r2, r3
 800387c:	490c      	ldr	r1, [pc, #48]	@ (80038b0 <__NVIC_SetPriority+0x4c>)
 800387e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003882:	0112      	lsls	r2, r2, #4
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	440b      	add	r3, r1
 8003888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800388c:	e00a      	b.n	80038a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	b2da      	uxtb	r2, r3
 8003892:	4908      	ldr	r1, [pc, #32]	@ (80038b4 <__NVIC_SetPriority+0x50>)
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	3b04      	subs	r3, #4
 800389c:	0112      	lsls	r2, r2, #4
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	440b      	add	r3, r1
 80038a2:	761a      	strb	r2, [r3, #24]
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	e000e100 	.word	0xe000e100
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b089      	sub	sp, #36	@ 0x24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f1c3 0307 	rsb	r3, r3, #7
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	bf28      	it	cs
 80038d6:	2304      	movcs	r3, #4
 80038d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	3304      	adds	r3, #4
 80038de:	2b06      	cmp	r3, #6
 80038e0:	d902      	bls.n	80038e8 <NVIC_EncodePriority+0x30>
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3b03      	subs	r3, #3
 80038e6:	e000      	b.n	80038ea <NVIC_EncodePriority+0x32>
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43da      	mvns	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	401a      	ands	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003900:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	fa01 f303 	lsl.w	r3, r1, r3
 800390a:	43d9      	mvns	r1, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003910:	4313      	orrs	r3, r2
         );
}
 8003912:	4618      	mov	r0, r3
 8003914:	3724      	adds	r7, #36	@ 0x24
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
	...

08003920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3b01      	subs	r3, #1
 800392c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003930:	d301      	bcc.n	8003936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003932:	2301      	movs	r3, #1
 8003934:	e00f      	b.n	8003956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003936:	4a0a      	ldr	r2, [pc, #40]	@ (8003960 <SysTick_Config+0x40>)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3b01      	subs	r3, #1
 800393c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800393e:	210f      	movs	r1, #15
 8003940:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003944:	f7ff ff8e 	bl	8003864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003948:	4b05      	ldr	r3, [pc, #20]	@ (8003960 <SysTick_Config+0x40>)
 800394a:	2200      	movs	r2, #0
 800394c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800394e:	4b04      	ldr	r3, [pc, #16]	@ (8003960 <SysTick_Config+0x40>)
 8003950:	2207      	movs	r2, #7
 8003952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	e000e010 	.word	0xe000e010

08003964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ff29 	bl	80037c4 <__NVIC_SetPriorityGrouping>
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800397a:	b580      	push	{r7, lr}
 800397c:	b086      	sub	sp, #24
 800397e:	af00      	add	r7, sp, #0
 8003980:	4603      	mov	r3, r0
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800398c:	f7ff ff3e 	bl	800380c <__NVIC_GetPriorityGrouping>
 8003990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	6978      	ldr	r0, [r7, #20]
 8003998:	f7ff ff8e 	bl	80038b8 <NVIC_EncodePriority>
 800399c:	4602      	mov	r2, r0
 800399e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff5d 	bl	8003864 <__NVIC_SetPriority>
}
 80039aa:	bf00      	nop
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	4603      	mov	r3, r0
 80039ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff ff31 	bl	8003828 <__NVIC_EnableIRQ>
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b082      	sub	sp, #8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff ffa2 	bl	8003920 <SysTick_Config>
 80039dc:	4603      	mov	r3, r0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039f4:	f7ff fab0 	bl	8002f58 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e099      	b.n	8003b38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0201 	bic.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a24:	e00f      	b.n	8003a46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a26:	f7ff fa97 	bl	8002f58 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b05      	cmp	r3, #5
 8003a32:	d908      	bls.n	8003a46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e078      	b.n	8003b38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e8      	bne.n	8003a26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4b38      	ldr	r3, [pc, #224]	@ (8003b40 <HAL_DMA_Init+0x158>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d107      	bne.n	8003ab0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f023 0307 	bic.w	r3, r3, #7
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d117      	bne.n	8003b0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00e      	beq.n	8003b0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fa6f 	bl	8003fd0 <DMA_CheckFifoParam>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2240      	movs	r2, #64	@ 0x40
 8003afc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003b06:	2301      	movs	r3, #1
 8003b08:	e016      	b.n	8003b38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fa26 	bl	8003f64 <DMA_CalcBaseAndBitshift>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b20:	223f      	movs	r2, #63	@ 0x3f
 8003b22:	409a      	lsls	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	f010803f 	.word	0xf010803f

08003b44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_DMA_Start_IT+0x26>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e040      	b.n	8003bec <HAL_DMA_Start_IT+0xa8>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d12f      	bne.n	8003bde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2202      	movs	r2, #2
 8003b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68b9      	ldr	r1, [r7, #8]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f9b8 	bl	8003f08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9c:	223f      	movs	r2, #63	@ 0x3f
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0216 	orr.w	r2, r2, #22
 8003bb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d007      	beq.n	8003bcc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0208 	orr.w	r2, r2, #8
 8003bca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	e005      	b.n	8003bea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003be6:	2302      	movs	r3, #2
 8003be8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c00:	4b8e      	ldr	r3, [pc, #568]	@ (8003e3c <HAL_DMA_IRQHandler+0x248>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a8e      	ldr	r2, [pc, #568]	@ (8003e40 <HAL_DMA_IRQHandler+0x24c>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	0a9b      	lsrs	r3, r3, #10
 8003c0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c1e:	2208      	movs	r2, #8
 8003c20:	409a      	lsls	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4013      	ands	r3, r2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d01a      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d013      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0204 	bic.w	r2, r2, #4
 8003c46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4c:	2208      	movs	r2, #8
 8003c4e:	409a      	lsls	r2, r3
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c58:	f043 0201 	orr.w	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c64:	2201      	movs	r2, #1
 8003c66:	409a      	lsls	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d012      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00b      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c82:	2201      	movs	r2, #1
 8003c84:	409a      	lsls	r2, r3
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8e:	f043 0202 	orr.w	r2, r3, #2
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c9a:	2204      	movs	r2, #4
 8003c9c:	409a      	lsls	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d012      	beq.n	8003ccc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00b      	beq.n	8003ccc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb8:	2204      	movs	r2, #4
 8003cba:	409a      	lsls	r2, r3
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc4:	f043 0204 	orr.w	r2, r3, #4
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd0:	2210      	movs	r2, #16
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d043      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d03c      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cee:	2210      	movs	r2, #16
 8003cf0:	409a      	lsls	r2, r3
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d018      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d108      	bne.n	8003d24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d024      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	4798      	blx	r3
 8003d22:	e01f      	b.n	8003d64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01b      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	4798      	blx	r3
 8003d34:	e016      	b.n	8003d64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d107      	bne.n	8003d54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0208 	bic.w	r2, r2, #8
 8003d52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d68:	2220      	movs	r2, #32
 8003d6a:	409a      	lsls	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 808f 	beq.w	8003e94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 8087 	beq.w	8003e94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	409a      	lsls	r2, r3
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b05      	cmp	r3, #5
 8003d9c:	d136      	bne.n	8003e0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0216 	bic.w	r2, r2, #22
 8003dac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695a      	ldr	r2, [r3, #20]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d103      	bne.n	8003dce <HAL_DMA_IRQHandler+0x1da>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0208 	bic.w	r2, r2, #8
 8003ddc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de2:	223f      	movs	r2, #63	@ 0x3f
 8003de4:	409a      	lsls	r2, r3
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d07e      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	4798      	blx	r3
        }
        return;
 8003e0a:	e079      	b.n	8003f00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d01d      	beq.n	8003e56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10d      	bne.n	8003e44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d031      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	4798      	blx	r3
 8003e38:	e02c      	b.n	8003e94 <HAL_DMA_IRQHandler+0x2a0>
 8003e3a:	bf00      	nop
 8003e3c:	20000264 	.word	0x20000264
 8003e40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d023      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	4798      	blx	r3
 8003e54:	e01e      	b.n	8003e94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10f      	bne.n	8003e84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0210 	bic.w	r2, r2, #16
 8003e72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d032      	beq.n	8003f02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d022      	beq.n	8003eee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2205      	movs	r2, #5
 8003eac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0201 	bic.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d307      	bcc.n	8003edc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f2      	bne.n	8003ec0 <HAL_DMA_IRQHandler+0x2cc>
 8003eda:	e000      	b.n	8003ede <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003edc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	4798      	blx	r3
 8003efe:	e000      	b.n	8003f02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f00:	bf00      	nop
    }
  }
}
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b40      	cmp	r3, #64	@ 0x40
 8003f34:	d108      	bne.n	8003f48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f46:	e007      	b.n	8003f58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	60da      	str	r2, [r3, #12]
}
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	3b10      	subs	r3, #16
 8003f74:	4a14      	ldr	r2, [pc, #80]	@ (8003fc8 <DMA_CalcBaseAndBitshift+0x64>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	091b      	lsrs	r3, r3, #4
 8003f7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f7e:	4a13      	ldr	r2, [pc, #76]	@ (8003fcc <DMA_CalcBaseAndBitshift+0x68>)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d909      	bls.n	8003fa6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003f9a:	f023 0303 	bic.w	r3, r3, #3
 8003f9e:	1d1a      	adds	r2, r3, #4
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fa4:	e007      	b.n	8003fb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003fae:	f023 0303 	bic.w	r3, r3, #3
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	aaaaaaab 	.word	0xaaaaaaab
 8003fcc:	08053f70 	.word	0x08053f70

08003fd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d11f      	bne.n	800402a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d856      	bhi.n	800409e <DMA_CheckFifoParam+0xce>
 8003ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff8 <DMA_CheckFifoParam+0x28>)
 8003ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff6:	bf00      	nop
 8003ff8:	08004009 	.word	0x08004009
 8003ffc:	0800401b 	.word	0x0800401b
 8004000:	08004009 	.word	0x08004009
 8004004:	0800409f 	.word	0x0800409f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d046      	beq.n	80040a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004018:	e043      	b.n	80040a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004022:	d140      	bne.n	80040a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004028:	e03d      	b.n	80040a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004032:	d121      	bne.n	8004078 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b03      	cmp	r3, #3
 8004038:	d837      	bhi.n	80040aa <DMA_CheckFifoParam+0xda>
 800403a:	a201      	add	r2, pc, #4	@ (adr r2, 8004040 <DMA_CheckFifoParam+0x70>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	08004051 	.word	0x08004051
 8004044:	08004057 	.word	0x08004057
 8004048:	08004051 	.word	0x08004051
 800404c:	08004069 	.word	0x08004069
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	73fb      	strb	r3, [r7, #15]
      break;
 8004054:	e030      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d025      	beq.n	80040ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004066:	e022      	b.n	80040ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004070:	d11f      	bne.n	80040b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004076:	e01c      	b.n	80040b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d903      	bls.n	8004086 <DMA_CheckFifoParam+0xb6>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d003      	beq.n	800408c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004084:	e018      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	73fb      	strb	r3, [r7, #15]
      break;
 800408a:	e015      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004090:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00e      	beq.n	80040b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
      break;
 800409c:	e00b      	b.n	80040b6 <DMA_CheckFifoParam+0xe6>
      break;
 800409e:	bf00      	nop
 80040a0:	e00a      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      break;
 80040a2:	bf00      	nop
 80040a4:	e008      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      break;
 80040a6:	bf00      	nop
 80040a8:	e006      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      break;
 80040aa:	bf00      	nop
 80040ac:	e004      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      break;
 80040ae:	bf00      	nop
 80040b0:	e002      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80040b2:	bf00      	nop
 80040b4:	e000      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      break;
 80040b6:	bf00      	nop
    }
  } 
  
  return status; 
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop

080040c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b089      	sub	sp, #36	@ 0x24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040da:	2300      	movs	r3, #0
 80040dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	e159      	b.n	8004398 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040e4:	2201      	movs	r2, #1
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	f040 8148 	bne.w	8004392 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b01      	cmp	r3, #1
 800410c:	d005      	beq.n	800411a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004116:	2b02      	cmp	r3, #2
 8004118:	d130      	bne.n	800417c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	2203      	movs	r2, #3
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	43db      	mvns	r3, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4013      	ands	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4313      	orrs	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004150:	2201      	movs	r2, #1
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	091b      	lsrs	r3, r3, #4
 8004166:	f003 0201 	and.w	r2, r3, #1
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4313      	orrs	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	2b03      	cmp	r3, #3
 8004186:	d017      	beq.n	80041b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	2203      	movs	r2, #3
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d123      	bne.n	800420c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	08da      	lsrs	r2, r3, #3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3208      	adds	r2, #8
 80041cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	220f      	movs	r2, #15
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	08da      	lsrs	r2, r3, #3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3208      	adds	r2, #8
 8004206:	69b9      	ldr	r1, [r7, #24]
 8004208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	2203      	movs	r2, #3
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 0203 	and.w	r2, r3, #3
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	4313      	orrs	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80a2 	beq.w	8004392 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	4b57      	ldr	r3, [pc, #348]	@ (80043b0 <HAL_GPIO_Init+0x2e8>)
 8004254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004256:	4a56      	ldr	r2, [pc, #344]	@ (80043b0 <HAL_GPIO_Init+0x2e8>)
 8004258:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800425c:	6453      	str	r3, [r2, #68]	@ 0x44
 800425e:	4b54      	ldr	r3, [pc, #336]	@ (80043b0 <HAL_GPIO_Init+0x2e8>)
 8004260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004262:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800426a:	4a52      	ldr	r2, [pc, #328]	@ (80043b4 <HAL_GPIO_Init+0x2ec>)
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	089b      	lsrs	r3, r3, #2
 8004270:	3302      	adds	r3, #2
 8004272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	220f      	movs	r2, #15
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4013      	ands	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a49      	ldr	r2, [pc, #292]	@ (80043b8 <HAL_GPIO_Init+0x2f0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d019      	beq.n	80042ca <HAL_GPIO_Init+0x202>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a48      	ldr	r2, [pc, #288]	@ (80043bc <HAL_GPIO_Init+0x2f4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d013      	beq.n	80042c6 <HAL_GPIO_Init+0x1fe>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a47      	ldr	r2, [pc, #284]	@ (80043c0 <HAL_GPIO_Init+0x2f8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00d      	beq.n	80042c2 <HAL_GPIO_Init+0x1fa>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a46      	ldr	r2, [pc, #280]	@ (80043c4 <HAL_GPIO_Init+0x2fc>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d007      	beq.n	80042be <HAL_GPIO_Init+0x1f6>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a45      	ldr	r2, [pc, #276]	@ (80043c8 <HAL_GPIO_Init+0x300>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d101      	bne.n	80042ba <HAL_GPIO_Init+0x1f2>
 80042b6:	2304      	movs	r3, #4
 80042b8:	e008      	b.n	80042cc <HAL_GPIO_Init+0x204>
 80042ba:	2307      	movs	r3, #7
 80042bc:	e006      	b.n	80042cc <HAL_GPIO_Init+0x204>
 80042be:	2303      	movs	r3, #3
 80042c0:	e004      	b.n	80042cc <HAL_GPIO_Init+0x204>
 80042c2:	2302      	movs	r3, #2
 80042c4:	e002      	b.n	80042cc <HAL_GPIO_Init+0x204>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <HAL_GPIO_Init+0x204>
 80042ca:	2300      	movs	r3, #0
 80042cc:	69fa      	ldr	r2, [r7, #28]
 80042ce:	f002 0203 	and.w	r2, r2, #3
 80042d2:	0092      	lsls	r2, r2, #2
 80042d4:	4093      	lsls	r3, r2
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4313      	orrs	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042dc:	4935      	ldr	r1, [pc, #212]	@ (80043b4 <HAL_GPIO_Init+0x2ec>)
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	089b      	lsrs	r3, r3, #2
 80042e2:	3302      	adds	r3, #2
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042ea:	4b38      	ldr	r3, [pc, #224]	@ (80043cc <HAL_GPIO_Init+0x304>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	43db      	mvns	r3, r3
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	4013      	ands	r3, r2
 80042f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800430e:	4a2f      	ldr	r2, [pc, #188]	@ (80043cc <HAL_GPIO_Init+0x304>)
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004314:	4b2d      	ldr	r3, [pc, #180]	@ (80043cc <HAL_GPIO_Init+0x304>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	43db      	mvns	r3, r3
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4013      	ands	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004338:	4a24      	ldr	r2, [pc, #144]	@ (80043cc <HAL_GPIO_Init+0x304>)
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800433e:	4b23      	ldr	r3, [pc, #140]	@ (80043cc <HAL_GPIO_Init+0x304>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	43db      	mvns	r3, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4013      	ands	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004362:	4a1a      	ldr	r2, [pc, #104]	@ (80043cc <HAL_GPIO_Init+0x304>)
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004368:	4b18      	ldr	r3, [pc, #96]	@ (80043cc <HAL_GPIO_Init+0x304>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	43db      	mvns	r3, r3
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	4013      	ands	r3, r2
 8004376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800438c:	4a0f      	ldr	r2, [pc, #60]	@ (80043cc <HAL_GPIO_Init+0x304>)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	3301      	adds	r3, #1
 8004396:	61fb      	str	r3, [r7, #28]
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	2b0f      	cmp	r3, #15
 800439c:	f67f aea2 	bls.w	80040e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043a0:	bf00      	nop
 80043a2:	bf00      	nop
 80043a4:	3724      	adds	r7, #36	@ 0x24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800
 80043b4:	40013800 	.word	0x40013800
 80043b8:	40020000 	.word	0x40020000
 80043bc:	40020400 	.word	0x40020400
 80043c0:	40020800 	.word	0x40020800
 80043c4:	40020c00 	.word	0x40020c00
 80043c8:	40021000 	.word	0x40021000
 80043cc:	40013c00 	.word	0x40013c00

080043d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	887b      	ldrh	r3, [r7, #2]
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043e8:	2301      	movs	r3, #1
 80043ea:	73fb      	strb	r3, [r7, #15]
 80043ec:	e001      	b.n	80043f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043ee:	2300      	movs	r3, #0
 80043f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	807b      	strh	r3, [r7, #2]
 800440c:	4613      	mov	r3, r2
 800440e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004410:	787b      	ldrb	r3, [r7, #1]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004416:	887a      	ldrh	r2, [r7, #2]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800441c:	e003      	b.n	8004426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800441e:	887b      	ldrh	r3, [r7, #2]
 8004420:	041a      	lsls	r2, r3, #16
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	619a      	str	r2, [r3, #24]
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
	...

08004434 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800443e:	4b08      	ldr	r3, [pc, #32]	@ (8004460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	88fb      	ldrh	r3, [r7, #6]
 8004444:	4013      	ands	r3, r2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d006      	beq.n	8004458 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800444a:	4a05      	ldr	r2, [pc, #20]	@ (8004460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004450:	88fb      	ldrh	r3, [r7, #6]
 8004452:	4618      	mov	r0, r3
 8004454:	f7fd fae6 	bl	8001a24 <HAL_GPIO_EXTI_Callback>
  }
}
 8004458:	bf00      	nop
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40013c00 	.word	0x40013c00

08004464 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e12b      	b.n	80046ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fe f9f8 	bl	8002880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2224      	movs	r2, #36	@ 0x24
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0201 	bic.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044c8:	f001 f89a 	bl	8005600 <HAL_RCC_GetPCLK1Freq>
 80044cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	4a81      	ldr	r2, [pc, #516]	@ (80046d8 <HAL_I2C_Init+0x274>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d807      	bhi.n	80044e8 <HAL_I2C_Init+0x84>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4a80      	ldr	r2, [pc, #512]	@ (80046dc <HAL_I2C_Init+0x278>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	bf94      	ite	ls
 80044e0:	2301      	movls	r3, #1
 80044e2:	2300      	movhi	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	e006      	b.n	80044f6 <HAL_I2C_Init+0x92>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4a7d      	ldr	r2, [pc, #500]	@ (80046e0 <HAL_I2C_Init+0x27c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	bf94      	ite	ls
 80044f0:	2301      	movls	r3, #1
 80044f2:	2300      	movhi	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e0e7      	b.n	80046ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4a78      	ldr	r2, [pc, #480]	@ (80046e4 <HAL_I2C_Init+0x280>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	0c9b      	lsrs	r3, r3, #18
 8004508:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	430a      	orrs	r2, r1
 800451c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	4a6a      	ldr	r2, [pc, #424]	@ (80046d8 <HAL_I2C_Init+0x274>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d802      	bhi.n	8004538 <HAL_I2C_Init+0xd4>
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	3301      	adds	r3, #1
 8004536:	e009      	b.n	800454c <HAL_I2C_Init+0xe8>
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800453e:	fb02 f303 	mul.w	r3, r2, r3
 8004542:	4a69      	ldr	r2, [pc, #420]	@ (80046e8 <HAL_I2C_Init+0x284>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	099b      	lsrs	r3, r3, #6
 800454a:	3301      	adds	r3, #1
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	430b      	orrs	r3, r1
 8004552:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800455e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	495c      	ldr	r1, [pc, #368]	@ (80046d8 <HAL_I2C_Init+0x274>)
 8004568:	428b      	cmp	r3, r1
 800456a:	d819      	bhi.n	80045a0 <HAL_I2C_Init+0x13c>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	1e59      	subs	r1, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	fbb1 f3f3 	udiv	r3, r1, r3
 800457a:	1c59      	adds	r1, r3, #1
 800457c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004580:	400b      	ands	r3, r1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HAL_I2C_Init+0x138>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	1e59      	subs	r1, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	fbb1 f3f3 	udiv	r3, r1, r3
 8004594:	3301      	adds	r3, #1
 8004596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800459a:	e051      	b.n	8004640 <HAL_I2C_Init+0x1dc>
 800459c:	2304      	movs	r3, #4
 800459e:	e04f      	b.n	8004640 <HAL_I2C_Init+0x1dc>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d111      	bne.n	80045cc <HAL_I2C_Init+0x168>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	1e58      	subs	r0, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6859      	ldr	r1, [r3, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	440b      	add	r3, r1
 80045b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ba:	3301      	adds	r3, #1
 80045bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	bf0c      	ite	eq
 80045c4:	2301      	moveq	r3, #1
 80045c6:	2300      	movne	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	e012      	b.n	80045f2 <HAL_I2C_Init+0x18e>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	1e58      	subs	r0, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6859      	ldr	r1, [r3, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	0099      	lsls	r1, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	fbb0 f3f3 	udiv	r3, r0, r3
 80045e2:	3301      	adds	r3, #1
 80045e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bf0c      	ite	eq
 80045ec:	2301      	moveq	r3, #1
 80045ee:	2300      	movne	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_I2C_Init+0x196>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e022      	b.n	8004640 <HAL_I2C_Init+0x1dc>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10e      	bne.n	8004620 <HAL_I2C_Init+0x1bc>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1e58      	subs	r0, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6859      	ldr	r1, [r3, #4]
 800460a:	460b      	mov	r3, r1
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	440b      	add	r3, r1
 8004610:	fbb0 f3f3 	udiv	r3, r0, r3
 8004614:	3301      	adds	r3, #1
 8004616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800461a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800461e:	e00f      	b.n	8004640 <HAL_I2C_Init+0x1dc>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	1e58      	subs	r0, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6859      	ldr	r1, [r3, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	0099      	lsls	r1, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	fbb0 f3f3 	udiv	r3, r0, r3
 8004636:	3301      	adds	r3, #1
 8004638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800463c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004640:	6879      	ldr	r1, [r7, #4]
 8004642:	6809      	ldr	r1, [r1, #0]
 8004644:	4313      	orrs	r3, r2
 8004646:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69da      	ldr	r2, [r3, #28]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800466e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6911      	ldr	r1, [r2, #16]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68d2      	ldr	r2, [r2, #12]
 800467a:	4311      	orrs	r1, r2
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	430b      	orrs	r3, r1
 8004682:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695a      	ldr	r2, [r3, #20]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	000186a0 	.word	0x000186a0
 80046dc:	001e847f 	.word	0x001e847f
 80046e0:	003d08ff 	.word	0x003d08ff
 80046e4:	431bde83 	.word	0x431bde83
 80046e8:	10624dd3 	.word	0x10624dd3

080046ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	607a      	str	r2, [r7, #4]
 80046f6:	461a      	mov	r2, r3
 80046f8:	460b      	mov	r3, r1
 80046fa:	817b      	strh	r3, [r7, #10]
 80046fc:	4613      	mov	r3, r2
 80046fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004700:	f7fe fc2a 	bl	8002f58 <HAL_GetTick>
 8004704:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b20      	cmp	r3, #32
 8004710:	f040 80e0 	bne.w	80048d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	2319      	movs	r3, #25
 800471a:	2201      	movs	r2, #1
 800471c:	4970      	ldr	r1, [pc, #448]	@ (80048e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 f964 	bl	80049ec <I2C_WaitOnFlagUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800472a:	2302      	movs	r3, #2
 800472c:	e0d3      	b.n	80048d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_I2C_Master_Transmit+0x50>
 8004738:	2302      	movs	r3, #2
 800473a:	e0cc      	b.n	80048d6 <HAL_I2C_Master_Transmit+0x1ea>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b01      	cmp	r3, #1
 8004750:	d007      	beq.n	8004762 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0201 	orr.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004770:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2221      	movs	r2, #33	@ 0x21
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2210      	movs	r2, #16
 800477e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	893a      	ldrh	r2, [r7, #8]
 8004792:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4a50      	ldr	r2, [pc, #320]	@ (80048e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80047a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80047a4:	8979      	ldrh	r1, [r7, #10]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	6a3a      	ldr	r2, [r7, #32]
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f89c 	bl	80048e8 <I2C_MasterRequestWrite>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e08d      	b.n	80048d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ba:	2300      	movs	r3, #0
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80047d0:	e066      	b.n	80048a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	6a39      	ldr	r1, [r7, #32]
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fa22 	bl	8004c20 <I2C_WaitOnTXEFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00d      	beq.n	80047fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d107      	bne.n	80047fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e06b      	b.n	80048d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004802:	781a      	ldrb	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b04      	cmp	r3, #4
 800483a:	d11b      	bne.n	8004874 <HAL_I2C_Master_Transmit+0x188>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004840:	2b00      	cmp	r3, #0
 8004842:	d017      	beq.n	8004874 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	781a      	ldrb	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	6a39      	ldr	r1, [r7, #32]
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 fa19 	bl	8004cb0 <I2C_WaitOnBTFFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00d      	beq.n	80048a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004888:	2b04      	cmp	r3, #4
 800488a:	d107      	bne.n	800489c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800489a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e01a      	b.n	80048d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d194      	bne.n	80047d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	e000      	b.n	80048d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80048d4:	2302      	movs	r3, #2
  }
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	00100002 	.word	0x00100002
 80048e4:	ffff0000 	.word	0xffff0000

080048e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	607a      	str	r2, [r7, #4]
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	460b      	mov	r3, r1
 80048f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b08      	cmp	r3, #8
 8004902:	d006      	beq.n	8004912 <I2C_MasterRequestWrite+0x2a>
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d003      	beq.n	8004912 <I2C_MasterRequestWrite+0x2a>
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004910:	d108      	bne.n	8004924 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	e00b      	b.n	800493c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004928:	2b12      	cmp	r3, #18
 800492a:	d107      	bne.n	800493c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800493a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f84f 	bl	80049ec <I2C_WaitOnFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00d      	beq.n	8004970 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004962:	d103      	bne.n	800496c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800496a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e035      	b.n	80049dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004978:	d108      	bne.n	800498c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800497a:	897b      	ldrh	r3, [r7, #10]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	461a      	mov	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004988:	611a      	str	r2, [r3, #16]
 800498a:	e01b      	b.n	80049c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800498c:	897b      	ldrh	r3, [r7, #10]
 800498e:	11db      	asrs	r3, r3, #7
 8004990:	b2db      	uxtb	r3, r3
 8004992:	f003 0306 	and.w	r3, r3, #6
 8004996:	b2db      	uxtb	r3, r3
 8004998:	f063 030f 	orn	r3, r3, #15
 800499c:	b2da      	uxtb	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	490e      	ldr	r1, [pc, #56]	@ (80049e4 <I2C_MasterRequestWrite+0xfc>)
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 f898 	bl	8004ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e010      	b.n	80049dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049ba:	897b      	ldrh	r3, [r7, #10]
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	4907      	ldr	r1, [pc, #28]	@ (80049e8 <I2C_MasterRequestWrite+0x100>)
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 f888 	bl	8004ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	00010008 	.word	0x00010008
 80049e8:	00010002 	.word	0x00010002

080049ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	603b      	str	r3, [r7, #0]
 80049f8:	4613      	mov	r3, r2
 80049fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049fc:	e048      	b.n	8004a90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a04:	d044      	beq.n	8004a90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a06:	f7fe faa7 	bl	8002f58 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d302      	bcc.n	8004a1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d139      	bne.n	8004a90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	0c1b      	lsrs	r3, r3, #16
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d10d      	bne.n	8004a42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	43da      	mvns	r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	4013      	ands	r3, r2
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	bf0c      	ite	eq
 8004a38:	2301      	moveq	r3, #1
 8004a3a:	2300      	movne	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	461a      	mov	r2, r3
 8004a40:	e00c      	b.n	8004a5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	43da      	mvns	r2, r3
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	bf0c      	ite	eq
 8004a54:	2301      	moveq	r3, #1
 8004a56:	2300      	movne	r3, #0
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d116      	bne.n	8004a90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7c:	f043 0220 	orr.w	r2, r3, #32
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e023      	b.n	8004ad8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	0c1b      	lsrs	r3, r3, #16
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d10d      	bne.n	8004ab6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	43da      	mvns	r2, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	bf0c      	ite	eq
 8004aac:	2301      	moveq	r3, #1
 8004aae:	2300      	movne	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	e00c      	b.n	8004ad0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	43da      	mvns	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	bf0c      	ite	eq
 8004ac8:	2301      	moveq	r3, #1
 8004aca:	2300      	movne	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	461a      	mov	r2, r3
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d093      	beq.n	80049fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004aee:	e071      	b.n	8004bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004afe:	d123      	bne.n	8004b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b34:	f043 0204 	orr.w	r2, r3, #4
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e067      	b.n	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b4e:	d041      	beq.n	8004bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b50:	f7fe fa02 	bl	8002f58 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d302      	bcc.n	8004b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d136      	bne.n	8004bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	0c1b      	lsrs	r3, r3, #16
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d10c      	bne.n	8004b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	43da      	mvns	r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	bf14      	ite	ne
 8004b82:	2301      	movne	r3, #1
 8004b84:	2300      	moveq	r3, #0
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	e00b      	b.n	8004ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	43da      	mvns	r2, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	4013      	ands	r3, r2
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	bf14      	ite	ne
 8004b9c:	2301      	movne	r3, #1
 8004b9e:	2300      	moveq	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d016      	beq.n	8004bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc0:	f043 0220 	orr.w	r2, r3, #32
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e021      	b.n	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	0c1b      	lsrs	r3, r3, #16
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d10c      	bne.n	8004bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	43da      	mvns	r2, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	4013      	ands	r3, r2
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bf14      	ite	ne
 8004bf0:	2301      	movne	r3, #1
 8004bf2:	2300      	moveq	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	e00b      	b.n	8004c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	43da      	mvns	r2, r3
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4013      	ands	r3, r2
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	bf14      	ite	ne
 8004c0a:	2301      	movne	r3, #1
 8004c0c:	2300      	moveq	r3, #0
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f47f af6d 	bne.w	8004af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c2c:	e034      	b.n	8004c98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 f886 	bl	8004d40 <I2C_IsAcknowledgeFailed>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e034      	b.n	8004ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c44:	d028      	beq.n	8004c98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c46:	f7fe f987 	bl	8002f58 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d302      	bcc.n	8004c5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d11d      	bne.n	8004c98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c66:	2b80      	cmp	r3, #128	@ 0x80
 8004c68:	d016      	beq.n	8004c98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c84:	f043 0220 	orr.w	r2, r3, #32
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e007      	b.n	8004ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca2:	2b80      	cmp	r3, #128	@ 0x80
 8004ca4:	d1c3      	bne.n	8004c2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cbc:	e034      	b.n	8004d28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 f83e 	bl	8004d40 <I2C_IsAcknowledgeFailed>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e034      	b.n	8004d38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cd4:	d028      	beq.n	8004d28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd6:	f7fe f93f 	bl	8002f58 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d302      	bcc.n	8004cec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d11d      	bne.n	8004d28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d016      	beq.n	8004d28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d14:	f043 0220 	orr.w	r2, r3, #32
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e007      	b.n	8004d38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d1c3      	bne.n	8004cbe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d56:	d11b      	bne.n	8004d90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7c:	f043 0204 	orr.w	r2, r3, #4
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e000      	b.n	8004d92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
	...

08004da0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e267      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d075      	beq.n	8004eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004dbe:	4b88      	ldr	r3, [pc, #544]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d00c      	beq.n	8004de4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dca:	4b85      	ldr	r3, [pc, #532]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d112      	bne.n	8004dfc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dd6:	4b82      	ldr	r3, [pc, #520]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004de2:	d10b      	bne.n	8004dfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de4:	4b7e      	ldr	r3, [pc, #504]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d05b      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x108>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d157      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e242      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e04:	d106      	bne.n	8004e14 <HAL_RCC_OscConfig+0x74>
 8004e06:	4b76      	ldr	r3, [pc, #472]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a75      	ldr	r2, [pc, #468]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	e01d      	b.n	8004e50 <HAL_RCC_OscConfig+0xb0>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e1c:	d10c      	bne.n	8004e38 <HAL_RCC_OscConfig+0x98>
 8004e1e:	4b70      	ldr	r3, [pc, #448]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a6f      	ldr	r2, [pc, #444]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	4b6d      	ldr	r3, [pc, #436]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a6c      	ldr	r2, [pc, #432]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e00b      	b.n	8004e50 <HAL_RCC_OscConfig+0xb0>
 8004e38:	4b69      	ldr	r3, [pc, #420]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a68      	ldr	r2, [pc, #416]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	4b66      	ldr	r3, [pc, #408]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a65      	ldr	r2, [pc, #404]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d013      	beq.n	8004e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e58:	f7fe f87e 	bl	8002f58 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e60:	f7fe f87a 	bl	8002f58 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b64      	cmp	r3, #100	@ 0x64
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e207      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e72:	4b5b      	ldr	r3, [pc, #364]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f0      	beq.n	8004e60 <HAL_RCC_OscConfig+0xc0>
 8004e7e:	e014      	b.n	8004eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e80:	f7fe f86a 	bl	8002f58 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e88:	f7fe f866 	bl	8002f58 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b64      	cmp	r3, #100	@ 0x64
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e1f3      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e9a:	4b51      	ldr	r3, [pc, #324]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCC_OscConfig+0xe8>
 8004ea6:	e000      	b.n	8004eaa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d063      	beq.n	8004f7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004eb6:	4b4a      	ldr	r3, [pc, #296]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00b      	beq.n	8004eda <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ec2:	4b47      	ldr	r3, [pc, #284]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004eca:	2b08      	cmp	r3, #8
 8004ecc:	d11c      	bne.n	8004f08 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ece:	4b44      	ldr	r3, [pc, #272]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d116      	bne.n	8004f08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eda:	4b41      	ldr	r3, [pc, #260]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x152>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d001      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e1c7      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	4937      	ldr	r1, [pc, #220]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f06:	e03a      	b.n	8004f7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d020      	beq.n	8004f52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f10:	4b34      	ldr	r3, [pc, #208]	@ (8004fe4 <HAL_RCC_OscConfig+0x244>)
 8004f12:	2201      	movs	r2, #1
 8004f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f16:	f7fe f81f 	bl	8002f58 <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f1e:	f7fe f81b 	bl	8002f58 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e1a8      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f30:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0f0      	beq.n	8004f1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f3c:	4b28      	ldr	r3, [pc, #160]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	4925      	ldr	r1, [pc, #148]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	600b      	str	r3, [r1, #0]
 8004f50:	e015      	b.n	8004f7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f52:	4b24      	ldr	r3, [pc, #144]	@ (8004fe4 <HAL_RCC_OscConfig+0x244>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f58:	f7fd fffe 	bl	8002f58 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f60:	f7fd fffa 	bl	8002f58 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e187      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f72:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f0      	bne.n	8004f60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d036      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d016      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f92:	4b15      	ldr	r3, [pc, #84]	@ (8004fe8 <HAL_RCC_OscConfig+0x248>)
 8004f94:	2201      	movs	r2, #1
 8004f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f98:	f7fd ffde 	bl	8002f58 <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa0:	f7fd ffda 	bl	8002f58 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e167      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe0 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0f0      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x200>
 8004fbe:	e01b      	b.n	8004ff8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fc0:	4b09      	ldr	r3, [pc, #36]	@ (8004fe8 <HAL_RCC_OscConfig+0x248>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fc6:	f7fd ffc7 	bl	8002f58 <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fcc:	e00e      	b.n	8004fec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fce:	f7fd ffc3 	bl	8002f58 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d907      	bls.n	8004fec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e150      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	42470000 	.word	0x42470000
 8004fe8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fec:	4b88      	ldr	r3, [pc, #544]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 8004fee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1ea      	bne.n	8004fce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 8097 	beq.w	8005134 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005006:	2300      	movs	r3, #0
 8005008:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800500a:	4b81      	ldr	r3, [pc, #516]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 800500c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10f      	bne.n	8005036 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005016:	2300      	movs	r3, #0
 8005018:	60bb      	str	r3, [r7, #8]
 800501a:	4b7d      	ldr	r3, [pc, #500]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 800501c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501e:	4a7c      	ldr	r2, [pc, #496]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 8005020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005024:	6413      	str	r3, [r2, #64]	@ 0x40
 8005026:	4b7a      	ldr	r3, [pc, #488]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800502e:	60bb      	str	r3, [r7, #8]
 8005030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005032:	2301      	movs	r3, #1
 8005034:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005036:	4b77      	ldr	r3, [pc, #476]	@ (8005214 <HAL_RCC_OscConfig+0x474>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503e:	2b00      	cmp	r3, #0
 8005040:	d118      	bne.n	8005074 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005042:	4b74      	ldr	r3, [pc, #464]	@ (8005214 <HAL_RCC_OscConfig+0x474>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a73      	ldr	r2, [pc, #460]	@ (8005214 <HAL_RCC_OscConfig+0x474>)
 8005048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800504c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800504e:	f7fd ff83 	bl	8002f58 <HAL_GetTick>
 8005052:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005054:	e008      	b.n	8005068 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005056:	f7fd ff7f 	bl	8002f58 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d901      	bls.n	8005068 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e10c      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005068:	4b6a      	ldr	r3, [pc, #424]	@ (8005214 <HAL_RCC_OscConfig+0x474>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0f0      	beq.n	8005056 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d106      	bne.n	800508a <HAL_RCC_OscConfig+0x2ea>
 800507c:	4b64      	ldr	r3, [pc, #400]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 800507e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005080:	4a63      	ldr	r2, [pc, #396]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	6713      	str	r3, [r2, #112]	@ 0x70
 8005088:	e01c      	b.n	80050c4 <HAL_RCC_OscConfig+0x324>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	2b05      	cmp	r3, #5
 8005090:	d10c      	bne.n	80050ac <HAL_RCC_OscConfig+0x30c>
 8005092:	4b5f      	ldr	r3, [pc, #380]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 8005094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005096:	4a5e      	ldr	r2, [pc, #376]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 8005098:	f043 0304 	orr.w	r3, r3, #4
 800509c:	6713      	str	r3, [r2, #112]	@ 0x70
 800509e:	4b5c      	ldr	r3, [pc, #368]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 80050a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a2:	4a5b      	ldr	r2, [pc, #364]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80050aa:	e00b      	b.n	80050c4 <HAL_RCC_OscConfig+0x324>
 80050ac:	4b58      	ldr	r3, [pc, #352]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 80050ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b0:	4a57      	ldr	r2, [pc, #348]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 80050b2:	f023 0301 	bic.w	r3, r3, #1
 80050b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80050b8:	4b55      	ldr	r3, [pc, #340]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 80050ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050bc:	4a54      	ldr	r2, [pc, #336]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 80050be:	f023 0304 	bic.w	r3, r3, #4
 80050c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d015      	beq.n	80050f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050cc:	f7fd ff44 	bl	8002f58 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d2:	e00a      	b.n	80050ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d4:	f7fd ff40 	bl	8002f58 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e0cb      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ea:	4b49      	ldr	r3, [pc, #292]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 80050ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0ee      	beq.n	80050d4 <HAL_RCC_OscConfig+0x334>
 80050f6:	e014      	b.n	8005122 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050f8:	f7fd ff2e 	bl	8002f58 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050fe:	e00a      	b.n	8005116 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005100:	f7fd ff2a 	bl	8002f58 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800510e:	4293      	cmp	r3, r2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e0b5      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005116:	4b3e      	ldr	r3, [pc, #248]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 8005118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1ee      	bne.n	8005100 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005122:	7dfb      	ldrb	r3, [r7, #23]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d105      	bne.n	8005134 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005128:	4b39      	ldr	r3, [pc, #228]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 800512a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512c:	4a38      	ldr	r2, [pc, #224]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 800512e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005132:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 80a1 	beq.w	8005280 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800513e:	4b34      	ldr	r3, [pc, #208]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 030c 	and.w	r3, r3, #12
 8005146:	2b08      	cmp	r3, #8
 8005148:	d05c      	beq.n	8005204 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d141      	bne.n	80051d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005152:	4b31      	ldr	r3, [pc, #196]	@ (8005218 <HAL_RCC_OscConfig+0x478>)
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005158:	f7fd fefe 	bl	8002f58 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005160:	f7fd fefa 	bl	8002f58 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e087      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005172:	4b27      	ldr	r3, [pc, #156]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f0      	bne.n	8005160 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69da      	ldr	r2, [r3, #28]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518c:	019b      	lsls	r3, r3, #6
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005194:	085b      	lsrs	r3, r3, #1
 8005196:	3b01      	subs	r3, #1
 8005198:	041b      	lsls	r3, r3, #16
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a0:	061b      	lsls	r3, r3, #24
 80051a2:	491b      	ldr	r1, [pc, #108]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005218 <HAL_RCC_OscConfig+0x478>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ae:	f7fd fed3 	bl	8002f58 <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b6:	f7fd fecf 	bl	8002f58 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e05c      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c8:	4b11      	ldr	r3, [pc, #68]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <HAL_RCC_OscConfig+0x416>
 80051d4:	e054      	b.n	8005280 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d6:	4b10      	ldr	r3, [pc, #64]	@ (8005218 <HAL_RCC_OscConfig+0x478>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051dc:	f7fd febc 	bl	8002f58 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e4:	f7fd feb8 	bl	8002f58 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e045      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f6:	4b06      	ldr	r3, [pc, #24]	@ (8005210 <HAL_RCC_OscConfig+0x470>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f0      	bne.n	80051e4 <HAL_RCC_OscConfig+0x444>
 8005202:	e03d      	b.n	8005280 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d107      	bne.n	800521c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e038      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
 8005210:	40023800 	.word	0x40023800
 8005214:	40007000 	.word	0x40007000
 8005218:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800521c:	4b1b      	ldr	r3, [pc, #108]	@ (800528c <HAL_RCC_OscConfig+0x4ec>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d028      	beq.n	800527c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005234:	429a      	cmp	r2, r3
 8005236:	d121      	bne.n	800527c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005242:	429a      	cmp	r2, r3
 8005244:	d11a      	bne.n	800527c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800524c:	4013      	ands	r3, r2
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005252:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005254:	4293      	cmp	r3, r2
 8005256:	d111      	bne.n	800527c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005262:	085b      	lsrs	r3, r3, #1
 8005264:	3b01      	subs	r3, #1
 8005266:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005268:	429a      	cmp	r2, r3
 800526a:	d107      	bne.n	800527c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005276:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005278:	429a      	cmp	r2, r3
 800527a:	d001      	beq.n	8005280 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e000      	b.n	8005282 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40023800 	.word	0x40023800

08005290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e0cc      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052a4:	4b68      	ldr	r3, [pc, #416]	@ (8005448 <HAL_RCC_ClockConfig+0x1b8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d90c      	bls.n	80052cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b2:	4b65      	ldr	r3, [pc, #404]	@ (8005448 <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ba:	4b63      	ldr	r3, [pc, #396]	@ (8005448 <HAL_RCC_ClockConfig+0x1b8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d001      	beq.n	80052cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0b8      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d020      	beq.n	800531a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052e4:	4b59      	ldr	r3, [pc, #356]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	4a58      	ldr	r2, [pc, #352]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 80052ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052fc:	4b53      	ldr	r3, [pc, #332]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	4a52      	ldr	r2, [pc, #328]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005302:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005308:	4b50      	ldr	r3, [pc, #320]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	494d      	ldr	r1, [pc, #308]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	4313      	orrs	r3, r2
 8005318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d044      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d107      	bne.n	800533e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532e:	4b47      	ldr	r3, [pc, #284]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d119      	bne.n	800536e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e07f      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d003      	beq.n	800534e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800534a:	2b03      	cmp	r3, #3
 800534c:	d107      	bne.n	800535e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800534e:	4b3f      	ldr	r3, [pc, #252]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d109      	bne.n	800536e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e06f      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800535e:	4b3b      	ldr	r3, [pc, #236]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e067      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800536e:	4b37      	ldr	r3, [pc, #220]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f023 0203 	bic.w	r2, r3, #3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	4934      	ldr	r1, [pc, #208]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 800537c:	4313      	orrs	r3, r2
 800537e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005380:	f7fd fdea 	bl	8002f58 <HAL_GetTick>
 8005384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005386:	e00a      	b.n	800539e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005388:	f7fd fde6 	bl	8002f58 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005396:	4293      	cmp	r3, r2
 8005398:	d901      	bls.n	800539e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e04f      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800539e:	4b2b      	ldr	r3, [pc, #172]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 020c 	and.w	r2, r3, #12
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d1eb      	bne.n	8005388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053b0:	4b25      	ldr	r3, [pc, #148]	@ (8005448 <HAL_RCC_ClockConfig+0x1b8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d20c      	bcs.n	80053d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053be:	4b22      	ldr	r3, [pc, #136]	@ (8005448 <HAL_RCC_ClockConfig+0x1b8>)
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	b2d2      	uxtb	r2, r2
 80053c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c6:	4b20      	ldr	r3, [pc, #128]	@ (8005448 <HAL_RCC_ClockConfig+0x1b8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d001      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e032      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d008      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053e4:	4b19      	ldr	r3, [pc, #100]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	4916      	ldr	r1, [pc, #88]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d009      	beq.n	8005416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005402:	4b12      	ldr	r3, [pc, #72]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	490e      	ldr	r1, [pc, #56]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005412:	4313      	orrs	r3, r2
 8005414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005416:	f000 f821 	bl	800545c <HAL_RCC_GetSysClockFreq>
 800541a:	4602      	mov	r2, r0
 800541c:	4b0b      	ldr	r3, [pc, #44]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	091b      	lsrs	r3, r3, #4
 8005422:	f003 030f 	and.w	r3, r3, #15
 8005426:	490a      	ldr	r1, [pc, #40]	@ (8005450 <HAL_RCC_ClockConfig+0x1c0>)
 8005428:	5ccb      	ldrb	r3, [r1, r3]
 800542a:	fa22 f303 	lsr.w	r3, r2, r3
 800542e:	4a09      	ldr	r2, [pc, #36]	@ (8005454 <HAL_RCC_ClockConfig+0x1c4>)
 8005430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005432:	4b09      	ldr	r3, [pc, #36]	@ (8005458 <HAL_RCC_ClockConfig+0x1c8>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f7fd fd4a 	bl	8002ed0 <HAL_InitTick>

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40023c00 	.word	0x40023c00
 800544c:	40023800 	.word	0x40023800
 8005450:	08053f58 	.word	0x08053f58
 8005454:	20000264 	.word	0x20000264
 8005458:	20000268 	.word	0x20000268

0800545c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800545c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005460:	b090      	sub	sp, #64	@ 0x40
 8005462:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005474:	4b59      	ldr	r3, [pc, #356]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x180>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f003 030c 	and.w	r3, r3, #12
 800547c:	2b08      	cmp	r3, #8
 800547e:	d00d      	beq.n	800549c <HAL_RCC_GetSysClockFreq+0x40>
 8005480:	2b08      	cmp	r3, #8
 8005482:	f200 80a1 	bhi.w	80055c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <HAL_RCC_GetSysClockFreq+0x34>
 800548a:	2b04      	cmp	r3, #4
 800548c:	d003      	beq.n	8005496 <HAL_RCC_GetSysClockFreq+0x3a>
 800548e:	e09b      	b.n	80055c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005490:	4b53      	ldr	r3, [pc, #332]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005492:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005494:	e09b      	b.n	80055ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005496:	4b53      	ldr	r3, [pc, #332]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005498:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800549a:	e098      	b.n	80055ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800549c:	4b4f      	ldr	r3, [pc, #316]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x180>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054a6:	4b4d      	ldr	r3, [pc, #308]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x180>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d028      	beq.n	8005504 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054b2:	4b4a      	ldr	r3, [pc, #296]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x180>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	099b      	lsrs	r3, r3, #6
 80054b8:	2200      	movs	r2, #0
 80054ba:	623b      	str	r3, [r7, #32]
 80054bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80054c4:	2100      	movs	r1, #0
 80054c6:	4b47      	ldr	r3, [pc, #284]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80054c8:	fb03 f201 	mul.w	r2, r3, r1
 80054cc:	2300      	movs	r3, #0
 80054ce:	fb00 f303 	mul.w	r3, r0, r3
 80054d2:	4413      	add	r3, r2
 80054d4:	4a43      	ldr	r2, [pc, #268]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80054d6:	fba0 1202 	umull	r1, r2, r0, r2
 80054da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054dc:	460a      	mov	r2, r1
 80054de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80054e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054e2:	4413      	add	r3, r2
 80054e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e8:	2200      	movs	r2, #0
 80054ea:	61bb      	str	r3, [r7, #24]
 80054ec:	61fa      	str	r2, [r7, #28]
 80054ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80054f6:	f7fa fec3 	bl	8000280 <__aeabi_uldivmod>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	4613      	mov	r3, r2
 8005500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005502:	e053      	b.n	80055ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005504:	4b35      	ldr	r3, [pc, #212]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x180>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	099b      	lsrs	r3, r3, #6
 800550a:	2200      	movs	r2, #0
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	617a      	str	r2, [r7, #20]
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005516:	f04f 0b00 	mov.w	fp, #0
 800551a:	4652      	mov	r2, sl
 800551c:	465b      	mov	r3, fp
 800551e:	f04f 0000 	mov.w	r0, #0
 8005522:	f04f 0100 	mov.w	r1, #0
 8005526:	0159      	lsls	r1, r3, #5
 8005528:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800552c:	0150      	lsls	r0, r2, #5
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	ebb2 080a 	subs.w	r8, r2, sl
 8005536:	eb63 090b 	sbc.w	r9, r3, fp
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005546:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800554a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800554e:	ebb2 0408 	subs.w	r4, r2, r8
 8005552:	eb63 0509 	sbc.w	r5, r3, r9
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	00eb      	lsls	r3, r5, #3
 8005560:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005564:	00e2      	lsls	r2, r4, #3
 8005566:	4614      	mov	r4, r2
 8005568:	461d      	mov	r5, r3
 800556a:	eb14 030a 	adds.w	r3, r4, sl
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	eb45 030b 	adc.w	r3, r5, fp
 8005574:	607b      	str	r3, [r7, #4]
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	f04f 0300 	mov.w	r3, #0
 800557e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005582:	4629      	mov	r1, r5
 8005584:	028b      	lsls	r3, r1, #10
 8005586:	4621      	mov	r1, r4
 8005588:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800558c:	4621      	mov	r1, r4
 800558e:	028a      	lsls	r2, r1, #10
 8005590:	4610      	mov	r0, r2
 8005592:	4619      	mov	r1, r3
 8005594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005596:	2200      	movs	r2, #0
 8005598:	60bb      	str	r3, [r7, #8]
 800559a:	60fa      	str	r2, [r7, #12]
 800559c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055a0:	f7fa fe6e 	bl	8000280 <__aeabi_uldivmod>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4613      	mov	r3, r2
 80055aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80055ac:	4b0b      	ldr	r3, [pc, #44]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x180>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	0c1b      	lsrs	r3, r3, #16
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	3301      	adds	r3, #1
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80055bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80055be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80055c6:	e002      	b.n	80055ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055c8:	4b05      	ldr	r3, [pc, #20]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80055ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80055cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3740      	adds	r7, #64	@ 0x40
 80055d4:	46bd      	mov	sp, r7
 80055d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055da:	bf00      	nop
 80055dc:	40023800 	.word	0x40023800
 80055e0:	00f42400 	.word	0x00f42400
 80055e4:	017d7840 	.word	0x017d7840

080055e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055ec:	4b03      	ldr	r3, [pc, #12]	@ (80055fc <HAL_RCC_GetHCLKFreq+0x14>)
 80055ee:	681b      	ldr	r3, [r3, #0]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	20000264 	.word	0x20000264

08005600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005604:	f7ff fff0 	bl	80055e8 <HAL_RCC_GetHCLKFreq>
 8005608:	4602      	mov	r2, r0
 800560a:	4b05      	ldr	r3, [pc, #20]	@ (8005620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	0a9b      	lsrs	r3, r3, #10
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	4903      	ldr	r1, [pc, #12]	@ (8005624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005616:	5ccb      	ldrb	r3, [r1, r3]
 8005618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800561c:	4618      	mov	r0, r3
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40023800 	.word	0x40023800
 8005624:	08053f68 	.word	0x08053f68

08005628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e041      	b.n	80056be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d106      	bne.n	8005654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7fd f99c 	bl	800298c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3304      	adds	r3, #4
 8005664:	4619      	mov	r1, r3
 8005666:	4610      	mov	r0, r2
 8005668:	f000 ff2c 	bl	80064c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d001      	beq.n	80056e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e03c      	b.n	800575a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005768 <HAL_TIM_Base_Start+0xa0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d018      	beq.n	8005724 <HAL_TIM_Base_Start+0x5c>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056fa:	d013      	beq.n	8005724 <HAL_TIM_Base_Start+0x5c>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a1a      	ldr	r2, [pc, #104]	@ (800576c <HAL_TIM_Base_Start+0xa4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00e      	beq.n	8005724 <HAL_TIM_Base_Start+0x5c>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a19      	ldr	r2, [pc, #100]	@ (8005770 <HAL_TIM_Base_Start+0xa8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d009      	beq.n	8005724 <HAL_TIM_Base_Start+0x5c>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a17      	ldr	r2, [pc, #92]	@ (8005774 <HAL_TIM_Base_Start+0xac>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d004      	beq.n	8005724 <HAL_TIM_Base_Start+0x5c>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a16      	ldr	r2, [pc, #88]	@ (8005778 <HAL_TIM_Base_Start+0xb0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d111      	bne.n	8005748 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2b06      	cmp	r3, #6
 8005734:	d010      	beq.n	8005758 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f042 0201 	orr.w	r2, r2, #1
 8005744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005746:	e007      	b.n	8005758 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0201 	orr.w	r2, r2, #1
 8005756:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40010000 	.word	0x40010000
 800576c:	40000400 	.word	0x40000400
 8005770:	40000800 	.word	0x40000800
 8005774:	40000c00 	.word	0x40000c00
 8005778:	40014000 	.word	0x40014000

0800577c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b01      	cmp	r3, #1
 800578e:	d001      	beq.n	8005794 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e044      	b.n	800581e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0201 	orr.w	r2, r2, #1
 80057aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1e      	ldr	r2, [pc, #120]	@ (800582c <HAL_TIM_Base_Start_IT+0xb0>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d018      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x6c>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057be:	d013      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x6c>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a1a      	ldr	r2, [pc, #104]	@ (8005830 <HAL_TIM_Base_Start_IT+0xb4>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00e      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x6c>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a19      	ldr	r2, [pc, #100]	@ (8005834 <HAL_TIM_Base_Start_IT+0xb8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d009      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x6c>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a17      	ldr	r2, [pc, #92]	@ (8005838 <HAL_TIM_Base_Start_IT+0xbc>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d004      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x6c>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a16      	ldr	r2, [pc, #88]	@ (800583c <HAL_TIM_Base_Start_IT+0xc0>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d111      	bne.n	800580c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 0307 	and.w	r3, r3, #7
 80057f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b06      	cmp	r3, #6
 80057f8:	d010      	beq.n	800581c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 0201 	orr.w	r2, r2, #1
 8005808:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800580a:	e007      	b.n	800581c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0201 	orr.w	r2, r2, #1
 800581a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	40010000 	.word	0x40010000
 8005830:	40000400 	.word	0x40000400
 8005834:	40000800 	.word	0x40000800
 8005838:	40000c00 	.word	0x40000c00
 800583c:	40014000 	.word	0x40014000

08005840 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e041      	b.n	80058d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d106      	bne.n	800586c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fd f852 	bl	8002910 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	3304      	adds	r3, #4
 800587c:	4619      	mov	r1, r3
 800587e:	4610      	mov	r0, r2
 8005880:	f000 fe20 	bl	80064c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d109      	bne.n	8005904 <HAL_TIM_PWM_Start+0x24>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	bf14      	ite	ne
 80058fc:	2301      	movne	r3, #1
 80058fe:	2300      	moveq	r3, #0
 8005900:	b2db      	uxtb	r3, r3
 8005902:	e022      	b.n	800594a <HAL_TIM_PWM_Start+0x6a>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2b04      	cmp	r3, #4
 8005908:	d109      	bne.n	800591e <HAL_TIM_PWM_Start+0x3e>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b01      	cmp	r3, #1
 8005914:	bf14      	ite	ne
 8005916:	2301      	movne	r3, #1
 8005918:	2300      	moveq	r3, #0
 800591a:	b2db      	uxtb	r3, r3
 800591c:	e015      	b.n	800594a <HAL_TIM_PWM_Start+0x6a>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b08      	cmp	r3, #8
 8005922:	d109      	bne.n	8005938 <HAL_TIM_PWM_Start+0x58>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b01      	cmp	r3, #1
 800592e:	bf14      	ite	ne
 8005930:	2301      	movne	r3, #1
 8005932:	2300      	moveq	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	e008      	b.n	800594a <HAL_TIM_PWM_Start+0x6a>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b01      	cmp	r3, #1
 8005942:	bf14      	ite	ne
 8005944:	2301      	movne	r3, #1
 8005946:	2300      	moveq	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e068      	b.n	8005a24 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d104      	bne.n	8005962 <HAL_TIM_PWM_Start+0x82>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005960:	e013      	b.n	800598a <HAL_TIM_PWM_Start+0xaa>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b04      	cmp	r3, #4
 8005966:	d104      	bne.n	8005972 <HAL_TIM_PWM_Start+0x92>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005970:	e00b      	b.n	800598a <HAL_TIM_PWM_Start+0xaa>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b08      	cmp	r3, #8
 8005976:	d104      	bne.n	8005982 <HAL_TIM_PWM_Start+0xa2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005980:	e003      	b.n	800598a <HAL_TIM_PWM_Start+0xaa>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2202      	movs	r2, #2
 8005986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2201      	movs	r2, #1
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f001 f842 	bl	8006a1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a23      	ldr	r2, [pc, #140]	@ (8005a2c <HAL_TIM_PWM_Start+0x14c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d107      	bne.n	80059b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a1d      	ldr	r2, [pc, #116]	@ (8005a2c <HAL_TIM_PWM_Start+0x14c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d018      	beq.n	80059ee <HAL_TIM_PWM_Start+0x10e>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c4:	d013      	beq.n	80059ee <HAL_TIM_PWM_Start+0x10e>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a19      	ldr	r2, [pc, #100]	@ (8005a30 <HAL_TIM_PWM_Start+0x150>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00e      	beq.n	80059ee <HAL_TIM_PWM_Start+0x10e>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a17      	ldr	r2, [pc, #92]	@ (8005a34 <HAL_TIM_PWM_Start+0x154>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d009      	beq.n	80059ee <HAL_TIM_PWM_Start+0x10e>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a16      	ldr	r2, [pc, #88]	@ (8005a38 <HAL_TIM_PWM_Start+0x158>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d004      	beq.n	80059ee <HAL_TIM_PWM_Start+0x10e>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a14      	ldr	r2, [pc, #80]	@ (8005a3c <HAL_TIM_PWM_Start+0x15c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d111      	bne.n	8005a12 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 0307 	and.w	r3, r3, #7
 80059f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b06      	cmp	r3, #6
 80059fe:	d010      	beq.n	8005a22 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0201 	orr.w	r2, r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a10:	e007      	b.n	8005a22 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f042 0201 	orr.w	r2, r2, #1
 8005a20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40010000 	.word	0x40010000
 8005a30:	40000400 	.word	0x40000400
 8005a34:	40000800 	.word	0x40000800
 8005a38:	40000c00 	.word	0x40000c00
 8005a3c:	40014000 	.word	0x40014000

08005a40 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	6839      	ldr	r1, [r7, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 ffe2 	bl	8006a1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a29      	ldr	r2, [pc, #164]	@ (8005b04 <HAL_TIM_PWM_Stop+0xc4>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d117      	bne.n	8005a92 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6a1a      	ldr	r2, [r3, #32]
 8005a68:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10f      	bne.n	8005a92 <HAL_TIM_PWM_Stop+0x52>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6a1a      	ldr	r2, [r3, #32]
 8005a78:	f240 4344 	movw	r3, #1092	@ 0x444
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d107      	bne.n	8005a92 <HAL_TIM_PWM_Stop+0x52>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6a1a      	ldr	r2, [r3, #32]
 8005a98:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10f      	bne.n	8005ac2 <HAL_TIM_PWM_Stop+0x82>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6a1a      	ldr	r2, [r3, #32]
 8005aa8:	f240 4344 	movw	r3, #1092	@ 0x444
 8005aac:	4013      	ands	r3, r2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d107      	bne.n	8005ac2 <HAL_TIM_PWM_Stop+0x82>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0201 	bic.w	r2, r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d104      	bne.n	8005ad2 <HAL_TIM_PWM_Stop+0x92>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ad0:	e013      	b.n	8005afa <HAL_TIM_PWM_Stop+0xba>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d104      	bne.n	8005ae2 <HAL_TIM_PWM_Stop+0xa2>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ae0:	e00b      	b.n	8005afa <HAL_TIM_PWM_Stop+0xba>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d104      	bne.n	8005af2 <HAL_TIM_PWM_Stop+0xb2>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005af0:	e003      	b.n	8005afa <HAL_TIM_PWM_Stop+0xba>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40010000 	.word	0x40010000

08005b08 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d109      	bne.n	8005b30 <HAL_TIM_PWM_Start_IT+0x28>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	bf14      	ite	ne
 8005b28:	2301      	movne	r3, #1
 8005b2a:	2300      	moveq	r3, #0
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	e022      	b.n	8005b76 <HAL_TIM_PWM_Start_IT+0x6e>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d109      	bne.n	8005b4a <HAL_TIM_PWM_Start_IT+0x42>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	bf14      	ite	ne
 8005b42:	2301      	movne	r3, #1
 8005b44:	2300      	moveq	r3, #0
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	e015      	b.n	8005b76 <HAL_TIM_PWM_Start_IT+0x6e>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d109      	bne.n	8005b64 <HAL_TIM_PWM_Start_IT+0x5c>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	bf14      	ite	ne
 8005b5c:	2301      	movne	r3, #1
 8005b5e:	2300      	moveq	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	e008      	b.n	8005b76 <HAL_TIM_PWM_Start_IT+0x6e>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	bf14      	ite	ne
 8005b70:	2301      	movne	r3, #1
 8005b72:	2300      	moveq	r3, #0
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e0b3      	b.n	8005ce6 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d104      	bne.n	8005b8e <HAL_TIM_PWM_Start_IT+0x86>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b8c:	e013      	b.n	8005bb6 <HAL_TIM_PWM_Start_IT+0xae>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b04      	cmp	r3, #4
 8005b92:	d104      	bne.n	8005b9e <HAL_TIM_PWM_Start_IT+0x96>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b9c:	e00b      	b.n	8005bb6 <HAL_TIM_PWM_Start_IT+0xae>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d104      	bne.n	8005bae <HAL_TIM_PWM_Start_IT+0xa6>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bac:	e003      	b.n	8005bb6 <HAL_TIM_PWM_Start_IT+0xae>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b0c      	cmp	r3, #12
 8005bba:	d841      	bhi.n	8005c40 <HAL_TIM_PWM_Start_IT+0x138>
 8005bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc4 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc2:	bf00      	nop
 8005bc4:	08005bf9 	.word	0x08005bf9
 8005bc8:	08005c41 	.word	0x08005c41
 8005bcc:	08005c41 	.word	0x08005c41
 8005bd0:	08005c41 	.word	0x08005c41
 8005bd4:	08005c0b 	.word	0x08005c0b
 8005bd8:	08005c41 	.word	0x08005c41
 8005bdc:	08005c41 	.word	0x08005c41
 8005be0:	08005c41 	.word	0x08005c41
 8005be4:	08005c1d 	.word	0x08005c1d
 8005be8:	08005c41 	.word	0x08005c41
 8005bec:	08005c41 	.word	0x08005c41
 8005bf0:	08005c41 	.word	0x08005c41
 8005bf4:	08005c2f 	.word	0x08005c2f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0202 	orr.w	r2, r2, #2
 8005c06:	60da      	str	r2, [r3, #12]
      break;
 8005c08:	e01d      	b.n	8005c46 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f042 0204 	orr.w	r2, r2, #4
 8005c18:	60da      	str	r2, [r3, #12]
      break;
 8005c1a:	e014      	b.n	8005c46 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0208 	orr.w	r2, r2, #8
 8005c2a:	60da      	str	r2, [r3, #12]
      break;
 8005c2c:	e00b      	b.n	8005c46 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 0210 	orr.w	r2, r2, #16
 8005c3c:	60da      	str	r2, [r3, #12]
      break;
 8005c3e:	e002      	b.n	8005c46 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	73fb      	strb	r3, [r7, #15]
      break;
 8005c44:	bf00      	nop
  }

  if (status == HAL_OK)
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d14b      	bne.n	8005ce4 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2201      	movs	r2, #1
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fee1 	bl	8006a1c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a24      	ldr	r2, [pc, #144]	@ (8005cf0 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d107      	bne.n	8005c74 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c72:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a1d      	ldr	r2, [pc, #116]	@ (8005cf0 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d018      	beq.n	8005cb0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c86:	d013      	beq.n	8005cb0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a19      	ldr	r2, [pc, #100]	@ (8005cf4 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00e      	beq.n	8005cb0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a18      	ldr	r2, [pc, #96]	@ (8005cf8 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d009      	beq.n	8005cb0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a16      	ldr	r2, [pc, #88]	@ (8005cfc <HAL_TIM_PWM_Start_IT+0x1f4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d004      	beq.n	8005cb0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a15      	ldr	r2, [pc, #84]	@ (8005d00 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d111      	bne.n	8005cd4 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b06      	cmp	r3, #6
 8005cc0:	d010      	beq.n	8005ce4 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f042 0201 	orr.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd2:	e007      	b.n	8005ce4 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0201 	orr.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	40010000 	.word	0x40010000
 8005cf4:	40000400 	.word	0x40000400
 8005cf8:	40000800 	.word	0x40000800
 8005cfc:	40000c00 	.word	0x40000c00
 8005d00:	40014000 	.word	0x40014000

08005d04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e097      	b.n	8005e48 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d106      	bne.n	8005d32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7fc fe71 	bl	8002a14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2202      	movs	r2, #2
 8005d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6812      	ldr	r2, [r2, #0]
 8005d44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d48:	f023 0307 	bic.w	r3, r3, #7
 8005d4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	3304      	adds	r3, #4
 8005d56:	4619      	mov	r1, r3
 8005d58:	4610      	mov	r0, r2
 8005d5a:	f000 fbb3 	bl	80064c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d86:	f023 0303 	bic.w	r3, r3, #3
 8005d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	021b      	lsls	r3, r3, #8
 8005d96:	4313      	orrs	r3, r2
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005da4:	f023 030c 	bic.w	r3, r3, #12
 8005da8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005db0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005db4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	011a      	lsls	r2, r3, #4
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	031b      	lsls	r3, r3, #12
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005dea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	4313      	orrs	r3, r2
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e60:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e68:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e70:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005e78:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d110      	bne.n	8005ea2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d102      	bne.n	8005e8c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e86:	7b7b      	ldrb	r3, [r7, #13]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d001      	beq.n	8005e90 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e069      	b.n	8005f64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ea0:	e031      	b.n	8005f06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b04      	cmp	r3, #4
 8005ea6:	d110      	bne.n	8005eca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ea8:	7bbb      	ldrb	r3, [r7, #14]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d102      	bne.n	8005eb4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005eae:	7b3b      	ldrb	r3, [r7, #12]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d001      	beq.n	8005eb8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e055      	b.n	8005f64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ec8:	e01d      	b.n	8005f06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d108      	bne.n	8005ee2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ed0:	7bbb      	ldrb	r3, [r7, #14]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d105      	bne.n	8005ee2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ed6:	7b7b      	ldrb	r3, [r7, #13]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d102      	bne.n	8005ee2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005edc:	7b3b      	ldrb	r3, [r7, #12]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d001      	beq.n	8005ee6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e03e      	b.n	8005f64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2202      	movs	r2, #2
 8005efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2202      	movs	r2, #2
 8005f02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <HAL_TIM_Encoder_Start+0xc4>
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	d008      	beq.n	8005f24 <HAL_TIM_Encoder_Start+0xd4>
 8005f12:	e00f      	b.n	8005f34 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 fd7d 	bl	8006a1c <TIM_CCxChannelCmd>
      break;
 8005f22:	e016      	b.n	8005f52 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	2104      	movs	r1, #4
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 fd75 	bl	8006a1c <TIM_CCxChannelCmd>
      break;
 8005f32:	e00e      	b.n	8005f52 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fd6d 	bl	8006a1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2201      	movs	r2, #1
 8005f48:	2104      	movs	r1, #4
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fd66 	bl	8006a1c <TIM_CCxChannelCmd>
      break;
 8005f50:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f042 0201 	orr.w	r2, r2, #1
 8005f60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d020      	beq.n	8005fd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01b      	beq.n	8005fd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0202 	mvn.w	r2, #2
 8005fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fa65 	bl	8006486 <HAL_TIM_IC_CaptureCallback>
 8005fbc:	e005      	b.n	8005fca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fa57 	bl	8006472 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fa68 	bl	800649a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d020      	beq.n	800601c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01b      	beq.n	800601c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0204 	mvn.w	r2, #4
 8005fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fa3f 	bl	8006486 <HAL_TIM_IC_CaptureCallback>
 8006008:	e005      	b.n	8006016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fa31 	bl	8006472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fa42 	bl	800649a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f003 0308 	and.w	r3, r3, #8
 8006022:	2b00      	cmp	r3, #0
 8006024:	d020      	beq.n	8006068 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f003 0308 	and.w	r3, r3, #8
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01b      	beq.n	8006068 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0208 	mvn.w	r2, #8
 8006038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2204      	movs	r2, #4
 800603e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fa19 	bl	8006486 <HAL_TIM_IC_CaptureCallback>
 8006054:	e005      	b.n	8006062 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fa0b 	bl	8006472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fa1c 	bl	800649a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f003 0310 	and.w	r3, r3, #16
 800606e:	2b00      	cmp	r3, #0
 8006070:	d020      	beq.n	80060b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f003 0310 	and.w	r3, r3, #16
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01b      	beq.n	80060b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f06f 0210 	mvn.w	r2, #16
 8006084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2208      	movs	r2, #8
 800608a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f9f3 	bl	8006486 <HAL_TIM_IC_CaptureCallback>
 80060a0:	e005      	b.n	80060ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f9e5 	bl	8006472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f9f6 	bl	800649a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00c      	beq.n	80060d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d007      	beq.n	80060d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f06f 0201 	mvn.w	r2, #1
 80060d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f9c3 	bl	800645e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00c      	beq.n	80060fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d007      	beq.n	80060fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80060f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fd80 	bl	8006bfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00c      	beq.n	8006120 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800610c:	2b00      	cmp	r3, #0
 800610e:	d007      	beq.n	8006120 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f9c7 	bl	80064ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f003 0320 	and.w	r3, r3, #32
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00c      	beq.n	8006144 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f003 0320 	and.w	r3, r3, #32
 8006130:	2b00      	cmp	r3, #0
 8006132:	d007      	beq.n	8006144 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f06f 0220 	mvn.w	r2, #32
 800613c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fd52 	bl	8006be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006144:	bf00      	nop
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006162:	2b01      	cmp	r3, #1
 8006164:	d101      	bne.n	800616a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006166:	2302      	movs	r3, #2
 8006168:	e0ae      	b.n	80062c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b0c      	cmp	r3, #12
 8006176:	f200 809f 	bhi.w	80062b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800617a:	a201      	add	r2, pc, #4	@ (adr r2, 8006180 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800617c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006180:	080061b5 	.word	0x080061b5
 8006184:	080062b9 	.word	0x080062b9
 8006188:	080062b9 	.word	0x080062b9
 800618c:	080062b9 	.word	0x080062b9
 8006190:	080061f5 	.word	0x080061f5
 8006194:	080062b9 	.word	0x080062b9
 8006198:	080062b9 	.word	0x080062b9
 800619c:	080062b9 	.word	0x080062b9
 80061a0:	08006237 	.word	0x08006237
 80061a4:	080062b9 	.word	0x080062b9
 80061a8:	080062b9 	.word	0x080062b9
 80061ac:	080062b9 	.word	0x080062b9
 80061b0:	08006277 	.word	0x08006277
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68b9      	ldr	r1, [r7, #8]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fa08 	bl	80065d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699a      	ldr	r2, [r3, #24]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0208 	orr.w	r2, r2, #8
 80061ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0204 	bic.w	r2, r2, #4
 80061de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6999      	ldr	r1, [r3, #24]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	691a      	ldr	r2, [r3, #16]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	619a      	str	r2, [r3, #24]
      break;
 80061f2:	e064      	b.n	80062be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fa4e 	bl	800669c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	699a      	ldr	r2, [r3, #24]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800620e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800621e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6999      	ldr	r1, [r3, #24]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	021a      	lsls	r2, r3, #8
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	619a      	str	r2, [r3, #24]
      break;
 8006234:	e043      	b.n	80062be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	4618      	mov	r0, r3
 800623e:	f000 fa99 	bl	8006774 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69da      	ldr	r2, [r3, #28]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f042 0208 	orr.w	r2, r2, #8
 8006250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69da      	ldr	r2, [r3, #28]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0204 	bic.w	r2, r2, #4
 8006260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69d9      	ldr	r1, [r3, #28]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	61da      	str	r2, [r3, #28]
      break;
 8006274:	e023      	b.n	80062be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	4618      	mov	r0, r3
 800627e:	f000 fae3 	bl	8006848 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69da      	ldr	r2, [r3, #28]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	69da      	ldr	r2, [r3, #28]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69d9      	ldr	r1, [r3, #28]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	021a      	lsls	r2, r3, #8
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	61da      	str	r2, [r3, #28]
      break;
 80062b6:	e002      	b.n	80062be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	75fb      	strb	r3, [r7, #23]
      break;
 80062bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d101      	bne.n	80062ec <HAL_TIM_ConfigClockSource+0x1c>
 80062e8:	2302      	movs	r3, #2
 80062ea:	e0b4      	b.n	8006456 <HAL_TIM_ConfigClockSource+0x186>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800630a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006312:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006324:	d03e      	beq.n	80063a4 <HAL_TIM_ConfigClockSource+0xd4>
 8006326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800632a:	f200 8087 	bhi.w	800643c <HAL_TIM_ConfigClockSource+0x16c>
 800632e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006332:	f000 8086 	beq.w	8006442 <HAL_TIM_ConfigClockSource+0x172>
 8006336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800633a:	d87f      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x16c>
 800633c:	2b70      	cmp	r3, #112	@ 0x70
 800633e:	d01a      	beq.n	8006376 <HAL_TIM_ConfigClockSource+0xa6>
 8006340:	2b70      	cmp	r3, #112	@ 0x70
 8006342:	d87b      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x16c>
 8006344:	2b60      	cmp	r3, #96	@ 0x60
 8006346:	d050      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x11a>
 8006348:	2b60      	cmp	r3, #96	@ 0x60
 800634a:	d877      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x16c>
 800634c:	2b50      	cmp	r3, #80	@ 0x50
 800634e:	d03c      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0xfa>
 8006350:	2b50      	cmp	r3, #80	@ 0x50
 8006352:	d873      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x16c>
 8006354:	2b40      	cmp	r3, #64	@ 0x40
 8006356:	d058      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x13a>
 8006358:	2b40      	cmp	r3, #64	@ 0x40
 800635a:	d86f      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x16c>
 800635c:	2b30      	cmp	r3, #48	@ 0x30
 800635e:	d064      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x15a>
 8006360:	2b30      	cmp	r3, #48	@ 0x30
 8006362:	d86b      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x16c>
 8006364:	2b20      	cmp	r3, #32
 8006366:	d060      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x15a>
 8006368:	2b20      	cmp	r3, #32
 800636a:	d867      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x16c>
 800636c:	2b00      	cmp	r3, #0
 800636e:	d05c      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x15a>
 8006370:	2b10      	cmp	r3, #16
 8006372:	d05a      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x15a>
 8006374:	e062      	b.n	800643c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006386:	f000 fb29 	bl	80069dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006398:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	609a      	str	r2, [r3, #8]
      break;
 80063a2:	e04f      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063b4:	f000 fb12 	bl	80069dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063c6:	609a      	str	r2, [r3, #8]
      break;
 80063c8:	e03c      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063d6:	461a      	mov	r2, r3
 80063d8:	f000 fa86 	bl	80068e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2150      	movs	r1, #80	@ 0x50
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fadf 	bl	80069a6 <TIM_ITRx_SetConfig>
      break;
 80063e8:	e02c      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063f6:	461a      	mov	r2, r3
 80063f8:	f000 faa5 	bl	8006946 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2160      	movs	r1, #96	@ 0x60
 8006402:	4618      	mov	r0, r3
 8006404:	f000 facf 	bl	80069a6 <TIM_ITRx_SetConfig>
      break;
 8006408:	e01c      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006416:	461a      	mov	r2, r3
 8006418:	f000 fa66 	bl	80068e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2140      	movs	r1, #64	@ 0x40
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fabf 	bl	80069a6 <TIM_ITRx_SetConfig>
      break;
 8006428:	e00c      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4619      	mov	r1, r3
 8006434:	4610      	mov	r0, r2
 8006436:	f000 fab6 	bl	80069a6 <TIM_ITRx_SetConfig>
      break;
 800643a:	e003      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	73fb      	strb	r3, [r7, #15]
      break;
 8006440:	e000      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006454:	7bfb      	ldrb	r3, [r7, #15]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006466:	bf00      	nop
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800647a:	bf00      	nop
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800648e:	bf00      	nop
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
	...

080064c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a37      	ldr	r2, [pc, #220]	@ (80065b4 <TIM_Base_SetConfig+0xf0>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d00f      	beq.n	80064fc <TIM_Base_SetConfig+0x38>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064e2:	d00b      	beq.n	80064fc <TIM_Base_SetConfig+0x38>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a34      	ldr	r2, [pc, #208]	@ (80065b8 <TIM_Base_SetConfig+0xf4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d007      	beq.n	80064fc <TIM_Base_SetConfig+0x38>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a33      	ldr	r2, [pc, #204]	@ (80065bc <TIM_Base_SetConfig+0xf8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d003      	beq.n	80064fc <TIM_Base_SetConfig+0x38>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a32      	ldr	r2, [pc, #200]	@ (80065c0 <TIM_Base_SetConfig+0xfc>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d108      	bne.n	800650e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	4313      	orrs	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a28      	ldr	r2, [pc, #160]	@ (80065b4 <TIM_Base_SetConfig+0xf0>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d01b      	beq.n	800654e <TIM_Base_SetConfig+0x8a>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800651c:	d017      	beq.n	800654e <TIM_Base_SetConfig+0x8a>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a25      	ldr	r2, [pc, #148]	@ (80065b8 <TIM_Base_SetConfig+0xf4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d013      	beq.n	800654e <TIM_Base_SetConfig+0x8a>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a24      	ldr	r2, [pc, #144]	@ (80065bc <TIM_Base_SetConfig+0xf8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d00f      	beq.n	800654e <TIM_Base_SetConfig+0x8a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a23      	ldr	r2, [pc, #140]	@ (80065c0 <TIM_Base_SetConfig+0xfc>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00b      	beq.n	800654e <TIM_Base_SetConfig+0x8a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a22      	ldr	r2, [pc, #136]	@ (80065c4 <TIM_Base_SetConfig+0x100>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d007      	beq.n	800654e <TIM_Base_SetConfig+0x8a>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a21      	ldr	r2, [pc, #132]	@ (80065c8 <TIM_Base_SetConfig+0x104>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d003      	beq.n	800654e <TIM_Base_SetConfig+0x8a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a20      	ldr	r2, [pc, #128]	@ (80065cc <TIM_Base_SetConfig+0x108>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d108      	bne.n	8006560 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	4313      	orrs	r3, r2
 800655e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a0c      	ldr	r2, [pc, #48]	@ (80065b4 <TIM_Base_SetConfig+0xf0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d103      	bne.n	800658e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	691a      	ldr	r2, [r3, #16]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f043 0204 	orr.w	r2, r3, #4
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	601a      	str	r2, [r3, #0]
}
 80065a6:	bf00      	nop
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	40010000 	.word	0x40010000
 80065b8:	40000400 	.word	0x40000400
 80065bc:	40000800 	.word	0x40000800
 80065c0:	40000c00 	.word	0x40000c00
 80065c4:	40014000 	.word	0x40014000
 80065c8:	40014400 	.word	0x40014400
 80065cc:	40014800 	.word	0x40014800

080065d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	f023 0201 	bic.w	r2, r3, #1
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 0303 	bic.w	r3, r3, #3
 8006606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f023 0302 	bic.w	r3, r3, #2
 8006618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	4313      	orrs	r3, r2
 8006622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a1c      	ldr	r2, [pc, #112]	@ (8006698 <TIM_OC1_SetConfig+0xc8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d10c      	bne.n	8006646 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f023 0308 	bic.w	r3, r3, #8
 8006632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	4313      	orrs	r3, r2
 800663c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f023 0304 	bic.w	r3, r3, #4
 8006644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a13      	ldr	r2, [pc, #76]	@ (8006698 <TIM_OC1_SetConfig+0xc8>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d111      	bne.n	8006672 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800665c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	4313      	orrs	r3, r2
 8006666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	4313      	orrs	r3, r2
 8006670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	621a      	str	r2, [r3, #32]
}
 800668c:	bf00      	nop
 800668e:	371c      	adds	r7, #28
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	40010000 	.word	0x40010000

0800669c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	f023 0210 	bic.w	r2, r3, #16
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	021b      	lsls	r3, r3, #8
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	4313      	orrs	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f023 0320 	bic.w	r3, r3, #32
 80066e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	011b      	lsls	r3, r3, #4
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a1e      	ldr	r2, [pc, #120]	@ (8006770 <TIM_OC2_SetConfig+0xd4>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d10d      	bne.n	8006718 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	4313      	orrs	r3, r2
 800670e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006716:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a15      	ldr	r2, [pc, #84]	@ (8006770 <TIM_OC2_SetConfig+0xd4>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d113      	bne.n	8006748 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800672e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	621a      	str	r2, [r3, #32]
}
 8006762:	bf00      	nop
 8006764:	371c      	adds	r7, #28
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	40010000 	.word	0x40010000

08006774 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0303 	bic.w	r3, r3, #3
 80067aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006844 <TIM_OC3_SetConfig+0xd0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d10d      	bne.n	80067ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	021b      	lsls	r3, r3, #8
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a14      	ldr	r2, [pc, #80]	@ (8006844 <TIM_OC3_SetConfig+0xd0>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d113      	bne.n	800681e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	011b      	lsls	r3, r3, #4
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	621a      	str	r2, [r3, #32]
}
 8006838:	bf00      	nop
 800683a:	371c      	adds	r7, #28
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	40010000 	.word	0x40010000

08006848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800687e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	021b      	lsls	r3, r3, #8
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	4313      	orrs	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	031b      	lsls	r3, r3, #12
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	4313      	orrs	r3, r2
 800689e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a10      	ldr	r2, [pc, #64]	@ (80068e4 <TIM_OC4_SetConfig+0x9c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d109      	bne.n	80068bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	019b      	lsls	r3, r3, #6
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	621a      	str	r2, [r3, #32]
}
 80068d6:	bf00      	nop
 80068d8:	371c      	adds	r7, #28
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	40010000 	.word	0x40010000

080068e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	f023 0201 	bic.w	r2, r3, #1
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	4313      	orrs	r3, r2
 800691c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f023 030a 	bic.w	r3, r3, #10
 8006924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	4313      	orrs	r3, r2
 800692c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	621a      	str	r2, [r3, #32]
}
 800693a:	bf00      	nop
 800693c:	371c      	adds	r7, #28
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006946:	b480      	push	{r7}
 8006948:	b087      	sub	sp, #28
 800694a:	af00      	add	r7, sp, #0
 800694c:	60f8      	str	r0, [r7, #12]
 800694e:	60b9      	str	r1, [r7, #8]
 8006950:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	f023 0210 	bic.w	r2, r3, #16
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006970:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	031b      	lsls	r3, r3, #12
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	4313      	orrs	r3, r2
 800697a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006982:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	011b      	lsls	r3, r3, #4
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	4313      	orrs	r3, r2
 800698c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	621a      	str	r2, [r3, #32]
}
 800699a:	bf00      	nop
 800699c:	371c      	adds	r7, #28
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b085      	sub	sp, #20
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f043 0307 	orr.w	r3, r3, #7
 80069c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	609a      	str	r2, [r3, #8]
}
 80069d0:	bf00      	nop
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	021a      	lsls	r2, r3, #8
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	431a      	orrs	r2, r3
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	609a      	str	r2, [r3, #8]
}
 8006a10:	bf00      	nop
 8006a12:	371c      	adds	r7, #28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f003 031f 	and.w	r3, r3, #31
 8006a2e:	2201      	movs	r2, #1
 8006a30:	fa02 f303 	lsl.w	r3, r2, r3
 8006a34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a1a      	ldr	r2, [r3, #32]
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	43db      	mvns	r3, r3
 8006a3e:	401a      	ands	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6a1a      	ldr	r2, [r3, #32]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f003 031f 	and.w	r3, r3, #31
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	fa01 f303 	lsl.w	r3, r1, r3
 8006a54:	431a      	orrs	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	621a      	str	r2, [r3, #32]
}
 8006a5a:	bf00      	nop
 8006a5c:	371c      	adds	r7, #28
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
	...

08006a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e050      	b.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a1c      	ldr	r2, [pc, #112]	@ (8006b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d018      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006acc:	d013      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a18      	ldr	r2, [pc, #96]	@ (8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00e      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a16      	ldr	r2, [pc, #88]	@ (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d009      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a15      	ldr	r2, [pc, #84]	@ (8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d004      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a13      	ldr	r2, [pc, #76]	@ (8006b40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d10c      	bne.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	40010000 	.word	0x40010000
 8006b34:	40000400 	.word	0x40000400
 8006b38:	40000800 	.word	0x40000800
 8006b3c:	40000c00 	.word	0x40000c00
 8006b40:	40014000 	.word	0x40014000

08006b44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e03d      	b.n	8006bdc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <siprintf>:
 8006c10:	b40e      	push	{r1, r2, r3}
 8006c12:	b510      	push	{r4, lr}
 8006c14:	b09d      	sub	sp, #116	@ 0x74
 8006c16:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006c18:	9002      	str	r0, [sp, #8]
 8006c1a:	9006      	str	r0, [sp, #24]
 8006c1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c20:	480a      	ldr	r0, [pc, #40]	@ (8006c4c <siprintf+0x3c>)
 8006c22:	9107      	str	r1, [sp, #28]
 8006c24:	9104      	str	r1, [sp, #16]
 8006c26:	490a      	ldr	r1, [pc, #40]	@ (8006c50 <siprintf+0x40>)
 8006c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c2c:	9105      	str	r1, [sp, #20]
 8006c2e:	2400      	movs	r4, #0
 8006c30:	a902      	add	r1, sp, #8
 8006c32:	6800      	ldr	r0, [r0, #0]
 8006c34:	9301      	str	r3, [sp, #4]
 8006c36:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006c38:	f000 f89c 	bl	8006d74 <_svfiprintf_r>
 8006c3c:	9b02      	ldr	r3, [sp, #8]
 8006c3e:	701c      	strb	r4, [r3, #0]
 8006c40:	b01d      	add	sp, #116	@ 0x74
 8006c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c46:	b003      	add	sp, #12
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	20000270 	.word	0x20000270
 8006c50:	ffff0208 	.word	0xffff0208

08006c54 <memset>:
 8006c54:	4402      	add	r2, r0
 8006c56:	4603      	mov	r3, r0
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d100      	bne.n	8006c5e <memset+0xa>
 8006c5c:	4770      	bx	lr
 8006c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c62:	e7f9      	b.n	8006c58 <memset+0x4>

08006c64 <__errno>:
 8006c64:	4b01      	ldr	r3, [pc, #4]	@ (8006c6c <__errno+0x8>)
 8006c66:	6818      	ldr	r0, [r3, #0]
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	20000270 	.word	0x20000270

08006c70 <__libc_init_array>:
 8006c70:	b570      	push	{r4, r5, r6, lr}
 8006c72:	4d0d      	ldr	r5, [pc, #52]	@ (8006ca8 <__libc_init_array+0x38>)
 8006c74:	4c0d      	ldr	r4, [pc, #52]	@ (8006cac <__libc_init_array+0x3c>)
 8006c76:	1b64      	subs	r4, r4, r5
 8006c78:	10a4      	asrs	r4, r4, #2
 8006c7a:	2600      	movs	r6, #0
 8006c7c:	42a6      	cmp	r6, r4
 8006c7e:	d109      	bne.n	8006c94 <__libc_init_array+0x24>
 8006c80:	4d0b      	ldr	r5, [pc, #44]	@ (8006cb0 <__libc_init_array+0x40>)
 8006c82:	4c0c      	ldr	r4, [pc, #48]	@ (8006cb4 <__libc_init_array+0x44>)
 8006c84:	f000 fc64 	bl	8007550 <_init>
 8006c88:	1b64      	subs	r4, r4, r5
 8006c8a:	10a4      	asrs	r4, r4, #2
 8006c8c:	2600      	movs	r6, #0
 8006c8e:	42a6      	cmp	r6, r4
 8006c90:	d105      	bne.n	8006c9e <__libc_init_array+0x2e>
 8006c92:	bd70      	pop	{r4, r5, r6, pc}
 8006c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c98:	4798      	blx	r3
 8006c9a:	3601      	adds	r6, #1
 8006c9c:	e7ee      	b.n	8006c7c <__libc_init_array+0xc>
 8006c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca2:	4798      	blx	r3
 8006ca4:	3601      	adds	r6, #1
 8006ca6:	e7f2      	b.n	8006c8e <__libc_init_array+0x1e>
 8006ca8:	08053fb4 	.word	0x08053fb4
 8006cac:	08053fb4 	.word	0x08053fb4
 8006cb0:	08053fb4 	.word	0x08053fb4
 8006cb4:	08053fb8 	.word	0x08053fb8

08006cb8 <__retarget_lock_acquire_recursive>:
 8006cb8:	4770      	bx	lr

08006cba <__retarget_lock_release_recursive>:
 8006cba:	4770      	bx	lr

08006cbc <__ssputs_r>:
 8006cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc0:	688e      	ldr	r6, [r1, #8]
 8006cc2:	461f      	mov	r7, r3
 8006cc4:	42be      	cmp	r6, r7
 8006cc6:	680b      	ldr	r3, [r1, #0]
 8006cc8:	4682      	mov	sl, r0
 8006cca:	460c      	mov	r4, r1
 8006ccc:	4690      	mov	r8, r2
 8006cce:	d82d      	bhi.n	8006d2c <__ssputs_r+0x70>
 8006cd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006cd8:	d026      	beq.n	8006d28 <__ssputs_r+0x6c>
 8006cda:	6965      	ldr	r5, [r4, #20]
 8006cdc:	6909      	ldr	r1, [r1, #16]
 8006cde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ce2:	eba3 0901 	sub.w	r9, r3, r1
 8006ce6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cea:	1c7b      	adds	r3, r7, #1
 8006cec:	444b      	add	r3, r9
 8006cee:	106d      	asrs	r5, r5, #1
 8006cf0:	429d      	cmp	r5, r3
 8006cf2:	bf38      	it	cc
 8006cf4:	461d      	movcc	r5, r3
 8006cf6:	0553      	lsls	r3, r2, #21
 8006cf8:	d527      	bpl.n	8006d4a <__ssputs_r+0x8e>
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	f000 f958 	bl	8006fb0 <_malloc_r>
 8006d00:	4606      	mov	r6, r0
 8006d02:	b360      	cbz	r0, 8006d5e <__ssputs_r+0xa2>
 8006d04:	6921      	ldr	r1, [r4, #16]
 8006d06:	464a      	mov	r2, r9
 8006d08:	f000 fbc2 	bl	8007490 <memcpy>
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d16:	81a3      	strh	r3, [r4, #12]
 8006d18:	6126      	str	r6, [r4, #16]
 8006d1a:	6165      	str	r5, [r4, #20]
 8006d1c:	444e      	add	r6, r9
 8006d1e:	eba5 0509 	sub.w	r5, r5, r9
 8006d22:	6026      	str	r6, [r4, #0]
 8006d24:	60a5      	str	r5, [r4, #8]
 8006d26:	463e      	mov	r6, r7
 8006d28:	42be      	cmp	r6, r7
 8006d2a:	d900      	bls.n	8006d2e <__ssputs_r+0x72>
 8006d2c:	463e      	mov	r6, r7
 8006d2e:	6820      	ldr	r0, [r4, #0]
 8006d30:	4632      	mov	r2, r6
 8006d32:	4641      	mov	r1, r8
 8006d34:	f000 fb82 	bl	800743c <memmove>
 8006d38:	68a3      	ldr	r3, [r4, #8]
 8006d3a:	1b9b      	subs	r3, r3, r6
 8006d3c:	60a3      	str	r3, [r4, #8]
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	4433      	add	r3, r6
 8006d42:	6023      	str	r3, [r4, #0]
 8006d44:	2000      	movs	r0, #0
 8006d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d4a:	462a      	mov	r2, r5
 8006d4c:	f000 fb48 	bl	80073e0 <_realloc_r>
 8006d50:	4606      	mov	r6, r0
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d1e0      	bne.n	8006d18 <__ssputs_r+0x5c>
 8006d56:	6921      	ldr	r1, [r4, #16]
 8006d58:	4650      	mov	r0, sl
 8006d5a:	f000 fba7 	bl	80074ac <_free_r>
 8006d5e:	230c      	movs	r3, #12
 8006d60:	f8ca 3000 	str.w	r3, [sl]
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d6a:	81a3      	strh	r3, [r4, #12]
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d70:	e7e9      	b.n	8006d46 <__ssputs_r+0x8a>
	...

08006d74 <_svfiprintf_r>:
 8006d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d78:	4698      	mov	r8, r3
 8006d7a:	898b      	ldrh	r3, [r1, #12]
 8006d7c:	061b      	lsls	r3, r3, #24
 8006d7e:	b09d      	sub	sp, #116	@ 0x74
 8006d80:	4607      	mov	r7, r0
 8006d82:	460d      	mov	r5, r1
 8006d84:	4614      	mov	r4, r2
 8006d86:	d510      	bpl.n	8006daa <_svfiprintf_r+0x36>
 8006d88:	690b      	ldr	r3, [r1, #16]
 8006d8a:	b973      	cbnz	r3, 8006daa <_svfiprintf_r+0x36>
 8006d8c:	2140      	movs	r1, #64	@ 0x40
 8006d8e:	f000 f90f 	bl	8006fb0 <_malloc_r>
 8006d92:	6028      	str	r0, [r5, #0]
 8006d94:	6128      	str	r0, [r5, #16]
 8006d96:	b930      	cbnz	r0, 8006da6 <_svfiprintf_r+0x32>
 8006d98:	230c      	movs	r3, #12
 8006d9a:	603b      	str	r3, [r7, #0]
 8006d9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006da0:	b01d      	add	sp, #116	@ 0x74
 8006da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da6:	2340      	movs	r3, #64	@ 0x40
 8006da8:	616b      	str	r3, [r5, #20]
 8006daa:	2300      	movs	r3, #0
 8006dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dae:	2320      	movs	r3, #32
 8006db0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006db4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006db8:	2330      	movs	r3, #48	@ 0x30
 8006dba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006f58 <_svfiprintf_r+0x1e4>
 8006dbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006dc2:	f04f 0901 	mov.w	r9, #1
 8006dc6:	4623      	mov	r3, r4
 8006dc8:	469a      	mov	sl, r3
 8006dca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dce:	b10a      	cbz	r2, 8006dd4 <_svfiprintf_r+0x60>
 8006dd0:	2a25      	cmp	r2, #37	@ 0x25
 8006dd2:	d1f9      	bne.n	8006dc8 <_svfiprintf_r+0x54>
 8006dd4:	ebba 0b04 	subs.w	fp, sl, r4
 8006dd8:	d00b      	beq.n	8006df2 <_svfiprintf_r+0x7e>
 8006dda:	465b      	mov	r3, fp
 8006ddc:	4622      	mov	r2, r4
 8006dde:	4629      	mov	r1, r5
 8006de0:	4638      	mov	r0, r7
 8006de2:	f7ff ff6b 	bl	8006cbc <__ssputs_r>
 8006de6:	3001      	adds	r0, #1
 8006de8:	f000 80a7 	beq.w	8006f3a <_svfiprintf_r+0x1c6>
 8006dec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dee:	445a      	add	r2, fp
 8006df0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006df2:	f89a 3000 	ldrb.w	r3, [sl]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 809f 	beq.w	8006f3a <_svfiprintf_r+0x1c6>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e06:	f10a 0a01 	add.w	sl, sl, #1
 8006e0a:	9304      	str	r3, [sp, #16]
 8006e0c:	9307      	str	r3, [sp, #28]
 8006e0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e12:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e14:	4654      	mov	r4, sl
 8006e16:	2205      	movs	r2, #5
 8006e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e1c:	484e      	ldr	r0, [pc, #312]	@ (8006f58 <_svfiprintf_r+0x1e4>)
 8006e1e:	f7f9 f9df 	bl	80001e0 <memchr>
 8006e22:	9a04      	ldr	r2, [sp, #16]
 8006e24:	b9d8      	cbnz	r0, 8006e5e <_svfiprintf_r+0xea>
 8006e26:	06d0      	lsls	r0, r2, #27
 8006e28:	bf44      	itt	mi
 8006e2a:	2320      	movmi	r3, #32
 8006e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e30:	0711      	lsls	r1, r2, #28
 8006e32:	bf44      	itt	mi
 8006e34:	232b      	movmi	r3, #43	@ 0x2b
 8006e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e40:	d015      	beq.n	8006e6e <_svfiprintf_r+0xfa>
 8006e42:	9a07      	ldr	r2, [sp, #28]
 8006e44:	4654      	mov	r4, sl
 8006e46:	2000      	movs	r0, #0
 8006e48:	f04f 0c0a 	mov.w	ip, #10
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e52:	3b30      	subs	r3, #48	@ 0x30
 8006e54:	2b09      	cmp	r3, #9
 8006e56:	d94b      	bls.n	8006ef0 <_svfiprintf_r+0x17c>
 8006e58:	b1b0      	cbz	r0, 8006e88 <_svfiprintf_r+0x114>
 8006e5a:	9207      	str	r2, [sp, #28]
 8006e5c:	e014      	b.n	8006e88 <_svfiprintf_r+0x114>
 8006e5e:	eba0 0308 	sub.w	r3, r0, r8
 8006e62:	fa09 f303 	lsl.w	r3, r9, r3
 8006e66:	4313      	orrs	r3, r2
 8006e68:	9304      	str	r3, [sp, #16]
 8006e6a:	46a2      	mov	sl, r4
 8006e6c:	e7d2      	b.n	8006e14 <_svfiprintf_r+0xa0>
 8006e6e:	9b03      	ldr	r3, [sp, #12]
 8006e70:	1d19      	adds	r1, r3, #4
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	9103      	str	r1, [sp, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	bfbb      	ittet	lt
 8006e7a:	425b      	neglt	r3, r3
 8006e7c:	f042 0202 	orrlt.w	r2, r2, #2
 8006e80:	9307      	strge	r3, [sp, #28]
 8006e82:	9307      	strlt	r3, [sp, #28]
 8006e84:	bfb8      	it	lt
 8006e86:	9204      	strlt	r2, [sp, #16]
 8006e88:	7823      	ldrb	r3, [r4, #0]
 8006e8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e8c:	d10a      	bne.n	8006ea4 <_svfiprintf_r+0x130>
 8006e8e:	7863      	ldrb	r3, [r4, #1]
 8006e90:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e92:	d132      	bne.n	8006efa <_svfiprintf_r+0x186>
 8006e94:	9b03      	ldr	r3, [sp, #12]
 8006e96:	1d1a      	adds	r2, r3, #4
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	9203      	str	r2, [sp, #12]
 8006e9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ea0:	3402      	adds	r4, #2
 8006ea2:	9305      	str	r3, [sp, #20]
 8006ea4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006f68 <_svfiprintf_r+0x1f4>
 8006ea8:	7821      	ldrb	r1, [r4, #0]
 8006eaa:	2203      	movs	r2, #3
 8006eac:	4650      	mov	r0, sl
 8006eae:	f7f9 f997 	bl	80001e0 <memchr>
 8006eb2:	b138      	cbz	r0, 8006ec4 <_svfiprintf_r+0x150>
 8006eb4:	9b04      	ldr	r3, [sp, #16]
 8006eb6:	eba0 000a 	sub.w	r0, r0, sl
 8006eba:	2240      	movs	r2, #64	@ 0x40
 8006ebc:	4082      	lsls	r2, r0
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	3401      	adds	r4, #1
 8006ec2:	9304      	str	r3, [sp, #16]
 8006ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec8:	4824      	ldr	r0, [pc, #144]	@ (8006f5c <_svfiprintf_r+0x1e8>)
 8006eca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ece:	2206      	movs	r2, #6
 8006ed0:	f7f9 f986 	bl	80001e0 <memchr>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d036      	beq.n	8006f46 <_svfiprintf_r+0x1d2>
 8006ed8:	4b21      	ldr	r3, [pc, #132]	@ (8006f60 <_svfiprintf_r+0x1ec>)
 8006eda:	bb1b      	cbnz	r3, 8006f24 <_svfiprintf_r+0x1b0>
 8006edc:	9b03      	ldr	r3, [sp, #12]
 8006ede:	3307      	adds	r3, #7
 8006ee0:	f023 0307 	bic.w	r3, r3, #7
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	9303      	str	r3, [sp, #12]
 8006ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eea:	4433      	add	r3, r6
 8006eec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eee:	e76a      	b.n	8006dc6 <_svfiprintf_r+0x52>
 8006ef0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	2001      	movs	r0, #1
 8006ef8:	e7a8      	b.n	8006e4c <_svfiprintf_r+0xd8>
 8006efa:	2300      	movs	r3, #0
 8006efc:	3401      	adds	r4, #1
 8006efe:	9305      	str	r3, [sp, #20]
 8006f00:	4619      	mov	r1, r3
 8006f02:	f04f 0c0a 	mov.w	ip, #10
 8006f06:	4620      	mov	r0, r4
 8006f08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f0c:	3a30      	subs	r2, #48	@ 0x30
 8006f0e:	2a09      	cmp	r2, #9
 8006f10:	d903      	bls.n	8006f1a <_svfiprintf_r+0x1a6>
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0c6      	beq.n	8006ea4 <_svfiprintf_r+0x130>
 8006f16:	9105      	str	r1, [sp, #20]
 8006f18:	e7c4      	b.n	8006ea4 <_svfiprintf_r+0x130>
 8006f1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f1e:	4604      	mov	r4, r0
 8006f20:	2301      	movs	r3, #1
 8006f22:	e7f0      	b.n	8006f06 <_svfiprintf_r+0x192>
 8006f24:	ab03      	add	r3, sp, #12
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	462a      	mov	r2, r5
 8006f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8006f64 <_svfiprintf_r+0x1f0>)
 8006f2c:	a904      	add	r1, sp, #16
 8006f2e:	4638      	mov	r0, r7
 8006f30:	f3af 8000 	nop.w
 8006f34:	1c42      	adds	r2, r0, #1
 8006f36:	4606      	mov	r6, r0
 8006f38:	d1d6      	bne.n	8006ee8 <_svfiprintf_r+0x174>
 8006f3a:	89ab      	ldrh	r3, [r5, #12]
 8006f3c:	065b      	lsls	r3, r3, #25
 8006f3e:	f53f af2d 	bmi.w	8006d9c <_svfiprintf_r+0x28>
 8006f42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f44:	e72c      	b.n	8006da0 <_svfiprintf_r+0x2c>
 8006f46:	ab03      	add	r3, sp, #12
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	462a      	mov	r2, r5
 8006f4c:	4b05      	ldr	r3, [pc, #20]	@ (8006f64 <_svfiprintf_r+0x1f0>)
 8006f4e:	a904      	add	r1, sp, #16
 8006f50:	4638      	mov	r0, r7
 8006f52:	f000 f91b 	bl	800718c <_printf_i>
 8006f56:	e7ed      	b.n	8006f34 <_svfiprintf_r+0x1c0>
 8006f58:	08053f78 	.word	0x08053f78
 8006f5c:	08053f82 	.word	0x08053f82
 8006f60:	00000000 	.word	0x00000000
 8006f64:	08006cbd 	.word	0x08006cbd
 8006f68:	08053f7e 	.word	0x08053f7e

08006f6c <sbrk_aligned>:
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	4e0f      	ldr	r6, [pc, #60]	@ (8006fac <sbrk_aligned+0x40>)
 8006f70:	460c      	mov	r4, r1
 8006f72:	6831      	ldr	r1, [r6, #0]
 8006f74:	4605      	mov	r5, r0
 8006f76:	b911      	cbnz	r1, 8006f7e <sbrk_aligned+0x12>
 8006f78:	f000 fa7a 	bl	8007470 <_sbrk_r>
 8006f7c:	6030      	str	r0, [r6, #0]
 8006f7e:	4621      	mov	r1, r4
 8006f80:	4628      	mov	r0, r5
 8006f82:	f000 fa75 	bl	8007470 <_sbrk_r>
 8006f86:	1c43      	adds	r3, r0, #1
 8006f88:	d103      	bne.n	8006f92 <sbrk_aligned+0x26>
 8006f8a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006f8e:	4620      	mov	r0, r4
 8006f90:	bd70      	pop	{r4, r5, r6, pc}
 8006f92:	1cc4      	adds	r4, r0, #3
 8006f94:	f024 0403 	bic.w	r4, r4, #3
 8006f98:	42a0      	cmp	r0, r4
 8006f9a:	d0f8      	beq.n	8006f8e <sbrk_aligned+0x22>
 8006f9c:	1a21      	subs	r1, r4, r0
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	f000 fa66 	bl	8007470 <_sbrk_r>
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d1f2      	bne.n	8006f8e <sbrk_aligned+0x22>
 8006fa8:	e7ef      	b.n	8006f8a <sbrk_aligned+0x1e>
 8006faa:	bf00      	nop
 8006fac:	20000700 	.word	0x20000700

08006fb0 <_malloc_r>:
 8006fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fb4:	1ccd      	adds	r5, r1, #3
 8006fb6:	f025 0503 	bic.w	r5, r5, #3
 8006fba:	3508      	adds	r5, #8
 8006fbc:	2d0c      	cmp	r5, #12
 8006fbe:	bf38      	it	cc
 8006fc0:	250c      	movcc	r5, #12
 8006fc2:	2d00      	cmp	r5, #0
 8006fc4:	4606      	mov	r6, r0
 8006fc6:	db01      	blt.n	8006fcc <_malloc_r+0x1c>
 8006fc8:	42a9      	cmp	r1, r5
 8006fca:	d904      	bls.n	8006fd6 <_malloc_r+0x26>
 8006fcc:	230c      	movs	r3, #12
 8006fce:	6033      	str	r3, [r6, #0]
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070ac <_malloc_r+0xfc>
 8006fda:	f000 f9f5 	bl	80073c8 <__malloc_lock>
 8006fde:	f8d8 3000 	ldr.w	r3, [r8]
 8006fe2:	461c      	mov	r4, r3
 8006fe4:	bb44      	cbnz	r4, 8007038 <_malloc_r+0x88>
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	4630      	mov	r0, r6
 8006fea:	f7ff ffbf 	bl	8006f6c <sbrk_aligned>
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	d158      	bne.n	80070a6 <_malloc_r+0xf6>
 8006ff4:	f8d8 4000 	ldr.w	r4, [r8]
 8006ff8:	4627      	mov	r7, r4
 8006ffa:	2f00      	cmp	r7, #0
 8006ffc:	d143      	bne.n	8007086 <_malloc_r+0xd6>
 8006ffe:	2c00      	cmp	r4, #0
 8007000:	d04b      	beq.n	800709a <_malloc_r+0xea>
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	4639      	mov	r1, r7
 8007006:	4630      	mov	r0, r6
 8007008:	eb04 0903 	add.w	r9, r4, r3
 800700c:	f000 fa30 	bl	8007470 <_sbrk_r>
 8007010:	4581      	cmp	r9, r0
 8007012:	d142      	bne.n	800709a <_malloc_r+0xea>
 8007014:	6821      	ldr	r1, [r4, #0]
 8007016:	1a6d      	subs	r5, r5, r1
 8007018:	4629      	mov	r1, r5
 800701a:	4630      	mov	r0, r6
 800701c:	f7ff ffa6 	bl	8006f6c <sbrk_aligned>
 8007020:	3001      	adds	r0, #1
 8007022:	d03a      	beq.n	800709a <_malloc_r+0xea>
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	442b      	add	r3, r5
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	f8d8 3000 	ldr.w	r3, [r8]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	bb62      	cbnz	r2, 800708c <_malloc_r+0xdc>
 8007032:	f8c8 7000 	str.w	r7, [r8]
 8007036:	e00f      	b.n	8007058 <_malloc_r+0xa8>
 8007038:	6822      	ldr	r2, [r4, #0]
 800703a:	1b52      	subs	r2, r2, r5
 800703c:	d420      	bmi.n	8007080 <_malloc_r+0xd0>
 800703e:	2a0b      	cmp	r2, #11
 8007040:	d917      	bls.n	8007072 <_malloc_r+0xc2>
 8007042:	1961      	adds	r1, r4, r5
 8007044:	42a3      	cmp	r3, r4
 8007046:	6025      	str	r5, [r4, #0]
 8007048:	bf18      	it	ne
 800704a:	6059      	strne	r1, [r3, #4]
 800704c:	6863      	ldr	r3, [r4, #4]
 800704e:	bf08      	it	eq
 8007050:	f8c8 1000 	streq.w	r1, [r8]
 8007054:	5162      	str	r2, [r4, r5]
 8007056:	604b      	str	r3, [r1, #4]
 8007058:	4630      	mov	r0, r6
 800705a:	f000 f9bb 	bl	80073d4 <__malloc_unlock>
 800705e:	f104 000b 	add.w	r0, r4, #11
 8007062:	1d23      	adds	r3, r4, #4
 8007064:	f020 0007 	bic.w	r0, r0, #7
 8007068:	1ac2      	subs	r2, r0, r3
 800706a:	bf1c      	itt	ne
 800706c:	1a1b      	subne	r3, r3, r0
 800706e:	50a3      	strne	r3, [r4, r2]
 8007070:	e7af      	b.n	8006fd2 <_malloc_r+0x22>
 8007072:	6862      	ldr	r2, [r4, #4]
 8007074:	42a3      	cmp	r3, r4
 8007076:	bf0c      	ite	eq
 8007078:	f8c8 2000 	streq.w	r2, [r8]
 800707c:	605a      	strne	r2, [r3, #4]
 800707e:	e7eb      	b.n	8007058 <_malloc_r+0xa8>
 8007080:	4623      	mov	r3, r4
 8007082:	6864      	ldr	r4, [r4, #4]
 8007084:	e7ae      	b.n	8006fe4 <_malloc_r+0x34>
 8007086:	463c      	mov	r4, r7
 8007088:	687f      	ldr	r7, [r7, #4]
 800708a:	e7b6      	b.n	8006ffa <_malloc_r+0x4a>
 800708c:	461a      	mov	r2, r3
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	42a3      	cmp	r3, r4
 8007092:	d1fb      	bne.n	800708c <_malloc_r+0xdc>
 8007094:	2300      	movs	r3, #0
 8007096:	6053      	str	r3, [r2, #4]
 8007098:	e7de      	b.n	8007058 <_malloc_r+0xa8>
 800709a:	230c      	movs	r3, #12
 800709c:	6033      	str	r3, [r6, #0]
 800709e:	4630      	mov	r0, r6
 80070a0:	f000 f998 	bl	80073d4 <__malloc_unlock>
 80070a4:	e794      	b.n	8006fd0 <_malloc_r+0x20>
 80070a6:	6005      	str	r5, [r0, #0]
 80070a8:	e7d6      	b.n	8007058 <_malloc_r+0xa8>
 80070aa:	bf00      	nop
 80070ac:	20000704 	.word	0x20000704

080070b0 <_printf_common>:
 80070b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070b4:	4616      	mov	r6, r2
 80070b6:	4698      	mov	r8, r3
 80070b8:	688a      	ldr	r2, [r1, #8]
 80070ba:	690b      	ldr	r3, [r1, #16]
 80070bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80070c0:	4293      	cmp	r3, r2
 80070c2:	bfb8      	it	lt
 80070c4:	4613      	movlt	r3, r2
 80070c6:	6033      	str	r3, [r6, #0]
 80070c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80070cc:	4607      	mov	r7, r0
 80070ce:	460c      	mov	r4, r1
 80070d0:	b10a      	cbz	r2, 80070d6 <_printf_common+0x26>
 80070d2:	3301      	adds	r3, #1
 80070d4:	6033      	str	r3, [r6, #0]
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	0699      	lsls	r1, r3, #26
 80070da:	bf42      	ittt	mi
 80070dc:	6833      	ldrmi	r3, [r6, #0]
 80070de:	3302      	addmi	r3, #2
 80070e0:	6033      	strmi	r3, [r6, #0]
 80070e2:	6825      	ldr	r5, [r4, #0]
 80070e4:	f015 0506 	ands.w	r5, r5, #6
 80070e8:	d106      	bne.n	80070f8 <_printf_common+0x48>
 80070ea:	f104 0a19 	add.w	sl, r4, #25
 80070ee:	68e3      	ldr	r3, [r4, #12]
 80070f0:	6832      	ldr	r2, [r6, #0]
 80070f2:	1a9b      	subs	r3, r3, r2
 80070f4:	42ab      	cmp	r3, r5
 80070f6:	dc26      	bgt.n	8007146 <_printf_common+0x96>
 80070f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80070fc:	6822      	ldr	r2, [r4, #0]
 80070fe:	3b00      	subs	r3, #0
 8007100:	bf18      	it	ne
 8007102:	2301      	movne	r3, #1
 8007104:	0692      	lsls	r2, r2, #26
 8007106:	d42b      	bmi.n	8007160 <_printf_common+0xb0>
 8007108:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800710c:	4641      	mov	r1, r8
 800710e:	4638      	mov	r0, r7
 8007110:	47c8      	blx	r9
 8007112:	3001      	adds	r0, #1
 8007114:	d01e      	beq.n	8007154 <_printf_common+0xa4>
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	6922      	ldr	r2, [r4, #16]
 800711a:	f003 0306 	and.w	r3, r3, #6
 800711e:	2b04      	cmp	r3, #4
 8007120:	bf02      	ittt	eq
 8007122:	68e5      	ldreq	r5, [r4, #12]
 8007124:	6833      	ldreq	r3, [r6, #0]
 8007126:	1aed      	subeq	r5, r5, r3
 8007128:	68a3      	ldr	r3, [r4, #8]
 800712a:	bf0c      	ite	eq
 800712c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007130:	2500      	movne	r5, #0
 8007132:	4293      	cmp	r3, r2
 8007134:	bfc4      	itt	gt
 8007136:	1a9b      	subgt	r3, r3, r2
 8007138:	18ed      	addgt	r5, r5, r3
 800713a:	2600      	movs	r6, #0
 800713c:	341a      	adds	r4, #26
 800713e:	42b5      	cmp	r5, r6
 8007140:	d11a      	bne.n	8007178 <_printf_common+0xc8>
 8007142:	2000      	movs	r0, #0
 8007144:	e008      	b.n	8007158 <_printf_common+0xa8>
 8007146:	2301      	movs	r3, #1
 8007148:	4652      	mov	r2, sl
 800714a:	4641      	mov	r1, r8
 800714c:	4638      	mov	r0, r7
 800714e:	47c8      	blx	r9
 8007150:	3001      	adds	r0, #1
 8007152:	d103      	bne.n	800715c <_printf_common+0xac>
 8007154:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800715c:	3501      	adds	r5, #1
 800715e:	e7c6      	b.n	80070ee <_printf_common+0x3e>
 8007160:	18e1      	adds	r1, r4, r3
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	2030      	movs	r0, #48	@ 0x30
 8007166:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800716a:	4422      	add	r2, r4
 800716c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007170:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007174:	3302      	adds	r3, #2
 8007176:	e7c7      	b.n	8007108 <_printf_common+0x58>
 8007178:	2301      	movs	r3, #1
 800717a:	4622      	mov	r2, r4
 800717c:	4641      	mov	r1, r8
 800717e:	4638      	mov	r0, r7
 8007180:	47c8      	blx	r9
 8007182:	3001      	adds	r0, #1
 8007184:	d0e6      	beq.n	8007154 <_printf_common+0xa4>
 8007186:	3601      	adds	r6, #1
 8007188:	e7d9      	b.n	800713e <_printf_common+0x8e>
	...

0800718c <_printf_i>:
 800718c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007190:	7e0f      	ldrb	r7, [r1, #24]
 8007192:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007194:	2f78      	cmp	r7, #120	@ 0x78
 8007196:	4691      	mov	r9, r2
 8007198:	4680      	mov	r8, r0
 800719a:	460c      	mov	r4, r1
 800719c:	469a      	mov	sl, r3
 800719e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071a2:	d807      	bhi.n	80071b4 <_printf_i+0x28>
 80071a4:	2f62      	cmp	r7, #98	@ 0x62
 80071a6:	d80a      	bhi.n	80071be <_printf_i+0x32>
 80071a8:	2f00      	cmp	r7, #0
 80071aa:	f000 80d1 	beq.w	8007350 <_printf_i+0x1c4>
 80071ae:	2f58      	cmp	r7, #88	@ 0x58
 80071b0:	f000 80b8 	beq.w	8007324 <_printf_i+0x198>
 80071b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80071bc:	e03a      	b.n	8007234 <_printf_i+0xa8>
 80071be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80071c2:	2b15      	cmp	r3, #21
 80071c4:	d8f6      	bhi.n	80071b4 <_printf_i+0x28>
 80071c6:	a101      	add	r1, pc, #4	@ (adr r1, 80071cc <_printf_i+0x40>)
 80071c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071cc:	08007225 	.word	0x08007225
 80071d0:	08007239 	.word	0x08007239
 80071d4:	080071b5 	.word	0x080071b5
 80071d8:	080071b5 	.word	0x080071b5
 80071dc:	080071b5 	.word	0x080071b5
 80071e0:	080071b5 	.word	0x080071b5
 80071e4:	08007239 	.word	0x08007239
 80071e8:	080071b5 	.word	0x080071b5
 80071ec:	080071b5 	.word	0x080071b5
 80071f0:	080071b5 	.word	0x080071b5
 80071f4:	080071b5 	.word	0x080071b5
 80071f8:	08007337 	.word	0x08007337
 80071fc:	08007263 	.word	0x08007263
 8007200:	080072f1 	.word	0x080072f1
 8007204:	080071b5 	.word	0x080071b5
 8007208:	080071b5 	.word	0x080071b5
 800720c:	08007359 	.word	0x08007359
 8007210:	080071b5 	.word	0x080071b5
 8007214:	08007263 	.word	0x08007263
 8007218:	080071b5 	.word	0x080071b5
 800721c:	080071b5 	.word	0x080071b5
 8007220:	080072f9 	.word	0x080072f9
 8007224:	6833      	ldr	r3, [r6, #0]
 8007226:	1d1a      	adds	r2, r3, #4
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	6032      	str	r2, [r6, #0]
 800722c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007230:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007234:	2301      	movs	r3, #1
 8007236:	e09c      	b.n	8007372 <_printf_i+0x1e6>
 8007238:	6833      	ldr	r3, [r6, #0]
 800723a:	6820      	ldr	r0, [r4, #0]
 800723c:	1d19      	adds	r1, r3, #4
 800723e:	6031      	str	r1, [r6, #0]
 8007240:	0606      	lsls	r6, r0, #24
 8007242:	d501      	bpl.n	8007248 <_printf_i+0xbc>
 8007244:	681d      	ldr	r5, [r3, #0]
 8007246:	e003      	b.n	8007250 <_printf_i+0xc4>
 8007248:	0645      	lsls	r5, r0, #25
 800724a:	d5fb      	bpl.n	8007244 <_printf_i+0xb8>
 800724c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007250:	2d00      	cmp	r5, #0
 8007252:	da03      	bge.n	800725c <_printf_i+0xd0>
 8007254:	232d      	movs	r3, #45	@ 0x2d
 8007256:	426d      	negs	r5, r5
 8007258:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800725c:	4858      	ldr	r0, [pc, #352]	@ (80073c0 <_printf_i+0x234>)
 800725e:	230a      	movs	r3, #10
 8007260:	e011      	b.n	8007286 <_printf_i+0xfa>
 8007262:	6821      	ldr	r1, [r4, #0]
 8007264:	6833      	ldr	r3, [r6, #0]
 8007266:	0608      	lsls	r0, r1, #24
 8007268:	f853 5b04 	ldr.w	r5, [r3], #4
 800726c:	d402      	bmi.n	8007274 <_printf_i+0xe8>
 800726e:	0649      	lsls	r1, r1, #25
 8007270:	bf48      	it	mi
 8007272:	b2ad      	uxthmi	r5, r5
 8007274:	2f6f      	cmp	r7, #111	@ 0x6f
 8007276:	4852      	ldr	r0, [pc, #328]	@ (80073c0 <_printf_i+0x234>)
 8007278:	6033      	str	r3, [r6, #0]
 800727a:	bf14      	ite	ne
 800727c:	230a      	movne	r3, #10
 800727e:	2308      	moveq	r3, #8
 8007280:	2100      	movs	r1, #0
 8007282:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007286:	6866      	ldr	r6, [r4, #4]
 8007288:	60a6      	str	r6, [r4, #8]
 800728a:	2e00      	cmp	r6, #0
 800728c:	db05      	blt.n	800729a <_printf_i+0x10e>
 800728e:	6821      	ldr	r1, [r4, #0]
 8007290:	432e      	orrs	r6, r5
 8007292:	f021 0104 	bic.w	r1, r1, #4
 8007296:	6021      	str	r1, [r4, #0]
 8007298:	d04b      	beq.n	8007332 <_printf_i+0x1a6>
 800729a:	4616      	mov	r6, r2
 800729c:	fbb5 f1f3 	udiv	r1, r5, r3
 80072a0:	fb03 5711 	mls	r7, r3, r1, r5
 80072a4:	5dc7      	ldrb	r7, [r0, r7]
 80072a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072aa:	462f      	mov	r7, r5
 80072ac:	42bb      	cmp	r3, r7
 80072ae:	460d      	mov	r5, r1
 80072b0:	d9f4      	bls.n	800729c <_printf_i+0x110>
 80072b2:	2b08      	cmp	r3, #8
 80072b4:	d10b      	bne.n	80072ce <_printf_i+0x142>
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	07df      	lsls	r7, r3, #31
 80072ba:	d508      	bpl.n	80072ce <_printf_i+0x142>
 80072bc:	6923      	ldr	r3, [r4, #16]
 80072be:	6861      	ldr	r1, [r4, #4]
 80072c0:	4299      	cmp	r1, r3
 80072c2:	bfde      	ittt	le
 80072c4:	2330      	movle	r3, #48	@ 0x30
 80072c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072ca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80072ce:	1b92      	subs	r2, r2, r6
 80072d0:	6122      	str	r2, [r4, #16]
 80072d2:	f8cd a000 	str.w	sl, [sp]
 80072d6:	464b      	mov	r3, r9
 80072d8:	aa03      	add	r2, sp, #12
 80072da:	4621      	mov	r1, r4
 80072dc:	4640      	mov	r0, r8
 80072de:	f7ff fee7 	bl	80070b0 <_printf_common>
 80072e2:	3001      	adds	r0, #1
 80072e4:	d14a      	bne.n	800737c <_printf_i+0x1f0>
 80072e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072ea:	b004      	add	sp, #16
 80072ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	f043 0320 	orr.w	r3, r3, #32
 80072f6:	6023      	str	r3, [r4, #0]
 80072f8:	4832      	ldr	r0, [pc, #200]	@ (80073c4 <_printf_i+0x238>)
 80072fa:	2778      	movs	r7, #120	@ 0x78
 80072fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	6831      	ldr	r1, [r6, #0]
 8007304:	061f      	lsls	r7, r3, #24
 8007306:	f851 5b04 	ldr.w	r5, [r1], #4
 800730a:	d402      	bmi.n	8007312 <_printf_i+0x186>
 800730c:	065f      	lsls	r7, r3, #25
 800730e:	bf48      	it	mi
 8007310:	b2ad      	uxthmi	r5, r5
 8007312:	6031      	str	r1, [r6, #0]
 8007314:	07d9      	lsls	r1, r3, #31
 8007316:	bf44      	itt	mi
 8007318:	f043 0320 	orrmi.w	r3, r3, #32
 800731c:	6023      	strmi	r3, [r4, #0]
 800731e:	b11d      	cbz	r5, 8007328 <_printf_i+0x19c>
 8007320:	2310      	movs	r3, #16
 8007322:	e7ad      	b.n	8007280 <_printf_i+0xf4>
 8007324:	4826      	ldr	r0, [pc, #152]	@ (80073c0 <_printf_i+0x234>)
 8007326:	e7e9      	b.n	80072fc <_printf_i+0x170>
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	f023 0320 	bic.w	r3, r3, #32
 800732e:	6023      	str	r3, [r4, #0]
 8007330:	e7f6      	b.n	8007320 <_printf_i+0x194>
 8007332:	4616      	mov	r6, r2
 8007334:	e7bd      	b.n	80072b2 <_printf_i+0x126>
 8007336:	6833      	ldr	r3, [r6, #0]
 8007338:	6825      	ldr	r5, [r4, #0]
 800733a:	6961      	ldr	r1, [r4, #20]
 800733c:	1d18      	adds	r0, r3, #4
 800733e:	6030      	str	r0, [r6, #0]
 8007340:	062e      	lsls	r6, r5, #24
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	d501      	bpl.n	800734a <_printf_i+0x1be>
 8007346:	6019      	str	r1, [r3, #0]
 8007348:	e002      	b.n	8007350 <_printf_i+0x1c4>
 800734a:	0668      	lsls	r0, r5, #25
 800734c:	d5fb      	bpl.n	8007346 <_printf_i+0x1ba>
 800734e:	8019      	strh	r1, [r3, #0]
 8007350:	2300      	movs	r3, #0
 8007352:	6123      	str	r3, [r4, #16]
 8007354:	4616      	mov	r6, r2
 8007356:	e7bc      	b.n	80072d2 <_printf_i+0x146>
 8007358:	6833      	ldr	r3, [r6, #0]
 800735a:	1d1a      	adds	r2, r3, #4
 800735c:	6032      	str	r2, [r6, #0]
 800735e:	681e      	ldr	r6, [r3, #0]
 8007360:	6862      	ldr	r2, [r4, #4]
 8007362:	2100      	movs	r1, #0
 8007364:	4630      	mov	r0, r6
 8007366:	f7f8 ff3b 	bl	80001e0 <memchr>
 800736a:	b108      	cbz	r0, 8007370 <_printf_i+0x1e4>
 800736c:	1b80      	subs	r0, r0, r6
 800736e:	6060      	str	r0, [r4, #4]
 8007370:	6863      	ldr	r3, [r4, #4]
 8007372:	6123      	str	r3, [r4, #16]
 8007374:	2300      	movs	r3, #0
 8007376:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800737a:	e7aa      	b.n	80072d2 <_printf_i+0x146>
 800737c:	6923      	ldr	r3, [r4, #16]
 800737e:	4632      	mov	r2, r6
 8007380:	4649      	mov	r1, r9
 8007382:	4640      	mov	r0, r8
 8007384:	47d0      	blx	sl
 8007386:	3001      	adds	r0, #1
 8007388:	d0ad      	beq.n	80072e6 <_printf_i+0x15a>
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	079b      	lsls	r3, r3, #30
 800738e:	d413      	bmi.n	80073b8 <_printf_i+0x22c>
 8007390:	68e0      	ldr	r0, [r4, #12]
 8007392:	9b03      	ldr	r3, [sp, #12]
 8007394:	4298      	cmp	r0, r3
 8007396:	bfb8      	it	lt
 8007398:	4618      	movlt	r0, r3
 800739a:	e7a6      	b.n	80072ea <_printf_i+0x15e>
 800739c:	2301      	movs	r3, #1
 800739e:	4632      	mov	r2, r6
 80073a0:	4649      	mov	r1, r9
 80073a2:	4640      	mov	r0, r8
 80073a4:	47d0      	blx	sl
 80073a6:	3001      	adds	r0, #1
 80073a8:	d09d      	beq.n	80072e6 <_printf_i+0x15a>
 80073aa:	3501      	adds	r5, #1
 80073ac:	68e3      	ldr	r3, [r4, #12]
 80073ae:	9903      	ldr	r1, [sp, #12]
 80073b0:	1a5b      	subs	r3, r3, r1
 80073b2:	42ab      	cmp	r3, r5
 80073b4:	dcf2      	bgt.n	800739c <_printf_i+0x210>
 80073b6:	e7eb      	b.n	8007390 <_printf_i+0x204>
 80073b8:	2500      	movs	r5, #0
 80073ba:	f104 0619 	add.w	r6, r4, #25
 80073be:	e7f5      	b.n	80073ac <_printf_i+0x220>
 80073c0:	08053f89 	.word	0x08053f89
 80073c4:	08053f9a 	.word	0x08053f9a

080073c8 <__malloc_lock>:
 80073c8:	4801      	ldr	r0, [pc, #4]	@ (80073d0 <__malloc_lock+0x8>)
 80073ca:	f7ff bc75 	b.w	8006cb8 <__retarget_lock_acquire_recursive>
 80073ce:	bf00      	nop
 80073d0:	200006fc 	.word	0x200006fc

080073d4 <__malloc_unlock>:
 80073d4:	4801      	ldr	r0, [pc, #4]	@ (80073dc <__malloc_unlock+0x8>)
 80073d6:	f7ff bc70 	b.w	8006cba <__retarget_lock_release_recursive>
 80073da:	bf00      	nop
 80073dc:	200006fc 	.word	0x200006fc

080073e0 <_realloc_r>:
 80073e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e4:	4607      	mov	r7, r0
 80073e6:	4614      	mov	r4, r2
 80073e8:	460d      	mov	r5, r1
 80073ea:	b921      	cbnz	r1, 80073f6 <_realloc_r+0x16>
 80073ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073f0:	4611      	mov	r1, r2
 80073f2:	f7ff bddd 	b.w	8006fb0 <_malloc_r>
 80073f6:	b92a      	cbnz	r2, 8007404 <_realloc_r+0x24>
 80073f8:	f000 f858 	bl	80074ac <_free_r>
 80073fc:	4625      	mov	r5, r4
 80073fe:	4628      	mov	r0, r5
 8007400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007404:	f000 f89c 	bl	8007540 <_malloc_usable_size_r>
 8007408:	4284      	cmp	r4, r0
 800740a:	4606      	mov	r6, r0
 800740c:	d802      	bhi.n	8007414 <_realloc_r+0x34>
 800740e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007412:	d8f4      	bhi.n	80073fe <_realloc_r+0x1e>
 8007414:	4621      	mov	r1, r4
 8007416:	4638      	mov	r0, r7
 8007418:	f7ff fdca 	bl	8006fb0 <_malloc_r>
 800741c:	4680      	mov	r8, r0
 800741e:	b908      	cbnz	r0, 8007424 <_realloc_r+0x44>
 8007420:	4645      	mov	r5, r8
 8007422:	e7ec      	b.n	80073fe <_realloc_r+0x1e>
 8007424:	42b4      	cmp	r4, r6
 8007426:	4622      	mov	r2, r4
 8007428:	4629      	mov	r1, r5
 800742a:	bf28      	it	cs
 800742c:	4632      	movcs	r2, r6
 800742e:	f000 f82f 	bl	8007490 <memcpy>
 8007432:	4629      	mov	r1, r5
 8007434:	4638      	mov	r0, r7
 8007436:	f000 f839 	bl	80074ac <_free_r>
 800743a:	e7f1      	b.n	8007420 <_realloc_r+0x40>

0800743c <memmove>:
 800743c:	4288      	cmp	r0, r1
 800743e:	b510      	push	{r4, lr}
 8007440:	eb01 0402 	add.w	r4, r1, r2
 8007444:	d902      	bls.n	800744c <memmove+0x10>
 8007446:	4284      	cmp	r4, r0
 8007448:	4623      	mov	r3, r4
 800744a:	d807      	bhi.n	800745c <memmove+0x20>
 800744c:	1e43      	subs	r3, r0, #1
 800744e:	42a1      	cmp	r1, r4
 8007450:	d008      	beq.n	8007464 <memmove+0x28>
 8007452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007456:	f803 2f01 	strb.w	r2, [r3, #1]!
 800745a:	e7f8      	b.n	800744e <memmove+0x12>
 800745c:	4402      	add	r2, r0
 800745e:	4601      	mov	r1, r0
 8007460:	428a      	cmp	r2, r1
 8007462:	d100      	bne.n	8007466 <memmove+0x2a>
 8007464:	bd10      	pop	{r4, pc}
 8007466:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800746a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800746e:	e7f7      	b.n	8007460 <memmove+0x24>

08007470 <_sbrk_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	4d06      	ldr	r5, [pc, #24]	@ (800748c <_sbrk_r+0x1c>)
 8007474:	2300      	movs	r3, #0
 8007476:	4604      	mov	r4, r0
 8007478:	4608      	mov	r0, r1
 800747a:	602b      	str	r3, [r5, #0]
 800747c:	f7fb fc94 	bl	8002da8 <_sbrk>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	d102      	bne.n	800748a <_sbrk_r+0x1a>
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	b103      	cbz	r3, 800748a <_sbrk_r+0x1a>
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	bd38      	pop	{r3, r4, r5, pc}
 800748c:	20000708 	.word	0x20000708

08007490 <memcpy>:
 8007490:	440a      	add	r2, r1
 8007492:	4291      	cmp	r1, r2
 8007494:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007498:	d100      	bne.n	800749c <memcpy+0xc>
 800749a:	4770      	bx	lr
 800749c:	b510      	push	{r4, lr}
 800749e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074a6:	4291      	cmp	r1, r2
 80074a8:	d1f9      	bne.n	800749e <memcpy+0xe>
 80074aa:	bd10      	pop	{r4, pc}

080074ac <_free_r>:
 80074ac:	b538      	push	{r3, r4, r5, lr}
 80074ae:	4605      	mov	r5, r0
 80074b0:	2900      	cmp	r1, #0
 80074b2:	d041      	beq.n	8007538 <_free_r+0x8c>
 80074b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074b8:	1f0c      	subs	r4, r1, #4
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	bfb8      	it	lt
 80074be:	18e4      	addlt	r4, r4, r3
 80074c0:	f7ff ff82 	bl	80073c8 <__malloc_lock>
 80074c4:	4a1d      	ldr	r2, [pc, #116]	@ (800753c <_free_r+0x90>)
 80074c6:	6813      	ldr	r3, [r2, #0]
 80074c8:	b933      	cbnz	r3, 80074d8 <_free_r+0x2c>
 80074ca:	6063      	str	r3, [r4, #4]
 80074cc:	6014      	str	r4, [r2, #0]
 80074ce:	4628      	mov	r0, r5
 80074d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074d4:	f7ff bf7e 	b.w	80073d4 <__malloc_unlock>
 80074d8:	42a3      	cmp	r3, r4
 80074da:	d908      	bls.n	80074ee <_free_r+0x42>
 80074dc:	6820      	ldr	r0, [r4, #0]
 80074de:	1821      	adds	r1, r4, r0
 80074e0:	428b      	cmp	r3, r1
 80074e2:	bf01      	itttt	eq
 80074e4:	6819      	ldreq	r1, [r3, #0]
 80074e6:	685b      	ldreq	r3, [r3, #4]
 80074e8:	1809      	addeq	r1, r1, r0
 80074ea:	6021      	streq	r1, [r4, #0]
 80074ec:	e7ed      	b.n	80074ca <_free_r+0x1e>
 80074ee:	461a      	mov	r2, r3
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	b10b      	cbz	r3, 80074f8 <_free_r+0x4c>
 80074f4:	42a3      	cmp	r3, r4
 80074f6:	d9fa      	bls.n	80074ee <_free_r+0x42>
 80074f8:	6811      	ldr	r1, [r2, #0]
 80074fa:	1850      	adds	r0, r2, r1
 80074fc:	42a0      	cmp	r0, r4
 80074fe:	d10b      	bne.n	8007518 <_free_r+0x6c>
 8007500:	6820      	ldr	r0, [r4, #0]
 8007502:	4401      	add	r1, r0
 8007504:	1850      	adds	r0, r2, r1
 8007506:	4283      	cmp	r3, r0
 8007508:	6011      	str	r1, [r2, #0]
 800750a:	d1e0      	bne.n	80074ce <_free_r+0x22>
 800750c:	6818      	ldr	r0, [r3, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	6053      	str	r3, [r2, #4]
 8007512:	4408      	add	r0, r1
 8007514:	6010      	str	r0, [r2, #0]
 8007516:	e7da      	b.n	80074ce <_free_r+0x22>
 8007518:	d902      	bls.n	8007520 <_free_r+0x74>
 800751a:	230c      	movs	r3, #12
 800751c:	602b      	str	r3, [r5, #0]
 800751e:	e7d6      	b.n	80074ce <_free_r+0x22>
 8007520:	6820      	ldr	r0, [r4, #0]
 8007522:	1821      	adds	r1, r4, r0
 8007524:	428b      	cmp	r3, r1
 8007526:	bf04      	itt	eq
 8007528:	6819      	ldreq	r1, [r3, #0]
 800752a:	685b      	ldreq	r3, [r3, #4]
 800752c:	6063      	str	r3, [r4, #4]
 800752e:	bf04      	itt	eq
 8007530:	1809      	addeq	r1, r1, r0
 8007532:	6021      	streq	r1, [r4, #0]
 8007534:	6054      	str	r4, [r2, #4]
 8007536:	e7ca      	b.n	80074ce <_free_r+0x22>
 8007538:	bd38      	pop	{r3, r4, r5, pc}
 800753a:	bf00      	nop
 800753c:	20000704 	.word	0x20000704

08007540 <_malloc_usable_size_r>:
 8007540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007544:	1f18      	subs	r0, r3, #4
 8007546:	2b00      	cmp	r3, #0
 8007548:	bfbc      	itt	lt
 800754a:	580b      	ldrlt	r3, [r1, r0]
 800754c:	18c0      	addlt	r0, r0, r3
 800754e:	4770      	bx	lr

08007550 <_init>:
 8007550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007552:	bf00      	nop
 8007554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007556:	bc08      	pop	{r3}
 8007558:	469e      	mov	lr, r3
 800755a:	4770      	bx	lr

0800755c <_fini>:
 800755c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755e:	bf00      	nop
 8007560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007562:	bc08      	pop	{r3}
 8007564:	469e      	mov	lr, r3
 8007566:	4770      	bx	lr
